import sys, os
import tempfile
import math
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import time, inspect, datetime, pytest, re, configparser
os.chdir(os.path.dirname(__file__))
from types import SimpleNamespace
from reportportal_client import step
from _pytest.runner import TestReport

from ATFramework import MyReport, logger
from ATFramework.drivers.driver_factory import DriverFactory
from pages.page_factory import PageFactory
from configs.app_config import *
from pages.locator import locator as L
from globals import *

import random
from functools import wraps

# read PDR cap >>
app = SimpleNamespace(**PDR_cap)
# read PDR cap <<

# create driver & page >>
mac = DriverFactory().get_mac_driver_object('mac', app.app_name, app.app_bundleID, app.app_path)
main_page = PageFactory().get_page_object('main_page', mac)
media_room_page = PageFactory().get_page_object('media_room_page', mac)
precut_page = PageFactory().get_page_object('precut_page', mac)
intro_video_page = PageFactory().get_page_object('intro_video_room_page', mac)
download_from_ss_page = PageFactory().get_page_object('download_from_shutterstock_page', mac)
getty_image_page = PageFactory().get_page_object('gettyimage_page', mac)
title_designer_page = PageFactory().get_page_object('title_designer_page', mac)
timeline_operation_page = PageFactory().get_page_object('timeline_operation_page', mac)
tips_area_page = PageFactory().get_page_object('tips_area_page', mac)
playback_window_page = PageFactory().get_page_object('playback_window_page', mac)
produce_page = PageFactory().get_page_object('produce_page', mac)
import_media_from_cloud_page = PageFactory().get_page_object('import_downloaded_media_from_cl_page', mac)
title_room_page = PageFactory().get_page_object('title_room_page', mac)
download_from_cl_dz_page = PageFactory().get_page_object('download_from_cl_dz_page', mac)
pip_designer_page = PageFactory().get_page_object('pip_designer_page', mac)
pip_room_page = PageFactory().get_page_object('pip_room_page', mac)
shape_designer_page = PageFactory().get_page_object('shape_designer_page', mac)
particle_room_page = PageFactory().get_page_object('particle_room_page', mac)
particle_designer_page = PageFactory().get_page_object('particle_designer_page', mac)
mask_designer_page = PageFactory().get_page_object('mask_designer_page', mac)
video_collage_designer_page = PageFactory().get_page_object('video_collage_designer_page', mac)
trim_page = PageFactory().get_page_object('trim_page', mac)
project_new_page = PageFactory().get_page_object('project_new_page', mac)
library_preview_page = PageFactory().get_page_object('library_preview_page', mac)
project_room_page = PageFactory().get_page_object('project_room_page', mac)
effect_room_page = PageFactory().get_page_object('effect_room_page', mac)
effect_settings_page = PageFactory().get_page_object('effect_settings_page', mac)
audio_mixing_room_page = PageFactory().get_page_object('audio_mixing_room_page', mac)
preferences_page = PageFactory().get_page_object('preferences_page', mac)
voice_over_recording_page = PageFactory().get_page_object('voice_over_recording_page', mac)
subtitle_room_page = PageFactory().get_page_object('subtitle_room_page', mac)
blending_mode_page = PageFactory().get_page_object('blending_mode_page',mac)
crop_image_page = PageFactory().get_page_object('crop_image_page',mac)
pan_zoom_page = PageFactory().get_page_object('pan_zoom_page', mac)
crop_zoom_pan_page = PageFactory().get_page_object('crop_zoom_pan_page',mac)
video_speed_page = PageFactory().get_page_object('video_speed_page', mac)
audio_editing_page = PageFactory().get_page_object('audio_editing_page', mac)
fix_enhance_page = PageFactory().get_page_object('fix_enhance_page', mac)
motion_tracker_page = PageFactory().get_page_object('motion_tracker_page', mac)
keyframe_room_page = PageFactory().get_page_object('keyframe_room_page', mac)
transition_room_page = PageFactory().get_page_object('transition_room_page', mac)
# create driver & page <<

# For Report >>
report = MyReport("MyReport", driver=mac, html_name="PDR22 Mac BFT_20231106.html")
uuid = report.uuid
report.report_type = "ReportPortal"
exception_screenshot = report.exception_screenshot
report.ovInfo.update(build_info)
# For Report <<

# For Ground Truth / Test Material folder
Ground_Truth_Folder = app.ground_truth_root + '/BFT_21_Stage1/'
Auto_Ground_Truth_Folder = app.auto_ground_truth_root + '/BFT_21_Stage1/'
Test_Material_Folder = app.testing_material
Export_Folder  = app.export_path

DELAY_TIME = 1

# add a decorator for main_page.close_app()
def close_app(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        finally:
            main_page.close_app()
    return wrapper


class Test_BFT_365_OS14():

    @pytest.fixture(autouse=True)
    def initial(self, request):
        """
        Common setup & teardown fixture with test result capturing.
        """
        time.sleep(DELAY_TIME * 4)  # Simulate delay for setup
        yield

    @classmethod
    def setup_class(cls):
        # for update the correct module start time of report (2021/04/20)
        now = datetime.datetime.now()
        report.add_ovinfo('time', now.time().strftime("%H:%M:%S"))
        report.start_time = time.time()
        # for test case module google sheet execution log (2021/04/12)
        if get_enable_case_execution_log():
            google_sheet_execution_log_init('BFT_365_os14')

    @classmethod
    def teardown_class(cls):
        pass

        # logger('teardown_class - export report')
        # report.export()
        # logger(
        #     f"BFT_365_os14 result={report.get_ovinfo('pass')}, {report.fail_number=}, {report.get_ovinfo('na')}, {report.get_ovinfo('skip')}, {report.get_ovinfo('duration')}")
        # update_report_info(report.get_ovinfo('pass'), report.fail_number, report.get_ovinfo('na'),
        #                    report.get_ovinfo('skip'),
        #                    report.get_ovinfo('duration'))
        # # for test case module google sheet execution log (2021/04/12)
        # if get_enable_case_execution_log():
        #     google_sheet_execution_log_update_result(report.get_ovinfo('pass'), report.fail_number, report.get_ovinfo('na'),
        #                        report.get_ovinfo('skip'), report.get_ovinfo('duration'))
        # report.show()
    
    @step("[Action] Set color to HexColor code")
    def _set_color(self, HexColor):
        try:
            main_page.color_picker_switch_category_to_RGB()
            main_page.double_click(L.base.colors.input_hex_color)
            time.sleep(DELAY_TIME)
            main_page.exist(L.base.colors.input_hex_color).sendKeys(HexColor)
            time.sleep(DELAY_TIME)
            main_page.keyboard.enter()
            time.sleep(DELAY_TIME * 2)
            main_page.click(L.base.colors.btn_close)
            time.sleep(DELAY_TIME)
        except Exception as e:
            logger(f'Exception occurs. log={e}')
            return False
        return True

    def _get_color(self):
        try:
            main_page.color_picker_switch_category_to_RGB()
            time.sleep(DELAY_TIME)
            current_hex = main_page.exist(L.base.colors.input_hex_color)
            time.sleep(DELAY_TIME)
            # main_page.exist(L.base.colors.btn_close).press()
            # time.sleep(DELAY_TIME)
            main_page.click(L.base.colors.btn_close)
            time.sleep(DELAY_TIME)
        except Exception as e:
            logger(f'Exception occurs. log={e}')
            return False
        return current_hex.AXValue

    def sort_by_date(self):
        try:
            if not main_page.exist_click(L.media_room.library_menu.btn_menu):
                raise Exception

            if not main_page.select_right_click_menu('Sort by', 'Date'):
                raise Exception

        except Exception as e:
            logger(f'Exception occurs. log={e}')
            raise Exception
        return True

    @step("[Action] Sort by Likes")
    def sort_by_like(self):
        try:
            if not main_page.exist_click(L.media_room.library_menu.btn_menu):
                raise Exception('Cannot find menu button')

            if not main_page.select_right_click_menu('Sort by', 'Likes'):
                raise Exception('Cannot find Sort by Likes')

        except Exception as e:
            logger(f'Exception occurs. log={e}')
            raise Exception(f'Exception occurs. log={e}')
        return True

    def check_open_intro_template(self):
        check_open_status = False
        # Downloading template for open Intro designer
        for x in range(15):
            check_open_status = intro_video_page.check_in_intro_designer()
            if check_open_status:
                break
            else:
                time.sleep(DELAY_TIME)

        # Loading template when open intro template
        check_loading_status = False
        for x in range(15):
            check_loading_status = main_page.is_not_exist(L.download_from_shutterstock.download.frame)
            if check_loading_status:
                logger('loading complete')
                break
            else:
                time.sleep(DELAY_TIME)
        return check_loading_status

    # Return current subtitle row number
    def get_total_subtitle_rows(self, timeout=35):
        # select first row
        subtitle_room_page.select_subtitle_row(1)

        # press [Down] repeatedly
        subtitle_count = 1
        for y in range(timeout):
            area = main_page.area.preview.main
            old_img = main_page.snapshot(area)
            main_page.input_keyboard(main_page.keyboard.key.down)
            time.sleep(0.5)
            new_img = main_page.snapshot(area)
            result = main_page.compare(old_img, new_img, 0.9999)
            #logger(result)
            if result:
                break
            else:
                subtitle_count = subtitle_count + 1
        return subtitle_count

    @step("[Action] Download [AI Module]")
    def download_AI_module_complete(self, timeout=60):
        # pop up (PROGRESS) then check result
        time.sleep(DELAY_TIME*6)

        if not download_from_ss_page.download.has_dialog():
            logger("Download AI module dialog is not found now")
            time.sleep(DELAY_TIME)
            return True

        download_status = False
        # Check (download AI module is ready) for loop
        for x in range(timeout):
            time.sleep(1)
            if download_from_ss_page.download.has_dialog():
                time.sleep(2)
            else:
                logger('Cannot find progress dialog \n Download cutout is ready!')
                download_status = True
                break
        time.sleep(DELAY_TIME * 3)
        return download_status
    
    @step("[Action] Wait for downloading AI module")
    def check_downloading_AI_module(self):
        # Check if downloading component now or not
        download_component = download_from_ss_page.download.has_dialog()

        # Download (Motion tracker) component
        if download_component:
            for x in range(500):
                check_result = download_from_ss_page.download.has_dialog()
                if check_result:
                    time.sleep(DELAY_TIME*3)
                else:
                    logger(f'now download is completed, x= {x}')
                    break

    @step("[Action] Wait until download [Body Effect] complete")
    def body_effect_download_complete(self, timeout=60):
        # pop up (Downloading Components) then check result
        time.sleep(DELAY_TIME * 13)

        if not download_from_ss_page.download.has_dialog():
            logger("Download dialog is not found now")
            return True

        download_status = False
        # Check download Body Effect for loop
        for x in range(timeout):
            time.sleep(1)
            if download_from_ss_page.download.has_dialog():
                current_value = download_from_ss_page.download.get_progress()
                if float(current_value) > 0.95:
                    logger('Arrive 95%')
                    download_status = True
                    time.sleep(6)
                    break
            else:
                logger('Cannot find progress dialog')
                break

        # Check Installing component
        for y in range(60):
            if not download_from_ss_page.download.has_dialog():
                logger('No install component now')
                break
            else:
                time.sleep(1.5)
        return download_status

    @step("[Action] Click [Launch Free Version] button and enter main program by new project")
    def launch_Essential_build(self):
        # Click [Launch Free Version]
        check_free_version = main_page.launch_free_version()
        if not check_free_version:
            raise Exception('Unable to Launch Free Version due to "Launch Free Version" button not found on Essential dialog')

        time.sleep(DELAY_TIME * 2)
        main_page.refresh_top()
        main_page.click_new_project_on_launcher()
        time.sleep(DELAY_TIME * 3)
        return check_free_version
    
    @step("[Action] Launch 365 build with clear cache and enter project")
    def launch_365_build_with_clear_cache(self):
        main_page.clear_cache_and_gdpr()
        if not main_page.launch_app(): return False
        main_page.click(L.base.gdpr_dialog.btn_accept_continue)
        main_page.refresh_top()
        main_page.click_CEIP_dialog()
        main_page.refresh_top()
        if not main_page.click_new_project_on_launcher(): return False
        main_page.exist(L.base.seasonal_bb_window.main, timeout=7)
        main_page.press_esc_key()
        if main_page.exist(L.base.seasonal_bb_window.main, timeout=3): return False
        return True

    def sign_in_365_again(self):
        # Clear Cache (Clear sign in log) to become Essential build
        main_page.clear_log_in()

        # launch APP
        main_page.clear_cache()

        # launch PDR
        logger('Launch PDR')
        main_page.launch_app()
        time.sleep(DELAY_TIME * 8)

        # launch Essential build to enter timeline mode
        self.launch_Essential_build()

        if main_page.exist(L.base.seasonal_bb_window.main):
            # Close seasonal BB dialog (What's new dialog)
            main_page.press_esc_key()
            time.sleep(DELAY_TIME * 2)

        # click [Sign in] icon to sign in 365 account
        main_page.handle_sign_in(account='sistarftcn.005@gmail.com', pw='ilovecc680520')

        # Pop up Activate limitation
        main_page.exist_click(L.main.activate_dialog.btn_activate, None, btn="left", timeout=6, no_warning=True)

        # Click [Restart]
        btn_restart = main_page.exist(
            {'AXTitle': 'Restart', 'AXIdentifier': 'IDC_CLALERT_BUTTON_0', 'AXRole': 'AXButton'}, timeout=15)
        main_page.mouse.click(*btn_restart.center)

        # Pop up Activate limitation
        time.sleep(DELAY_TIME * 3)
        main_page.exist_click(L.main.activate_dialog.btn_activate, None, btn="left", timeout=6, no_warning=True)

        # click (No, thank you) checkbox
        time.sleep(DELAY_TIME * 5)
        main_page.refresh_top()
        main_page.click_CEIP_dialog()
        logger('12130')
        main_page.refresh_top()
        main_page.click_new_project_on_launcher()
        logger('12133')
        main_page.refresh_top()

    @step('[Action] Open packed project')
    def open_packed_project(self, project_name, save_name):
        folder_path = '/Users/qadf_at/Desktop/AT/BFT_Material/'
        if not main_page.exist_file(folder_path + project_name):
            assert False, f"Project file {folder_path + project_name} doesn't exist!"

        # Open project
        main_page.top_menu_bar_file_open_project(save_changes='no')
        check_open_result = main_page.handle_open_project_dialog(folder_path + project_name)
        if not check_open_result:
            assert False, "Dealing with Open project dialog FAIL!"

        # Select extract path
        main_page.delete_folder(folder_path + save_name)
        main_page.select_file(folder_path + save_name)
        main_page.handle_merge_media_to_current_library_dialog(do_not_show_again='no')
        return True
    
    @step('[Action] Open Recent Project')
    def open_recent_project(self, project_name, save_name):
        if not main_page.exist_file(Test_Material_Folder + project_name):
            assert False, f"Project file {project_name} doesn't exist!"

        # Open project
        main_page.top_menu_bar_file_open_recent_projects(Test_Material_Folder + project_name)

        # Select extract path
        main_page.delete_folder(Test_Material_Folder + save_name)
        main_page.select_file(Test_Material_Folder + save_name)
        main_page.handle_merge_media_to_current_library_dialog(do_not_show_again='no')
        return True
    
    def check_download_body_effect(self, wait_time=900):
        return self.body_effect_download_complete(wait_time)

    @step('[Action] Insert media to timeline')
    def temp_for_os_14_insert_function(self, press_down_times=0):
        # replace the function: Insert to timeline
        # e.g. main_page.tips_area_insert_media_to_selected_track(1) >>> Insert: press_down_times = 1
        # e.g. main_page.tips_area_insert_media_to_selected_track(3) >>> CrossFade: press_down_times = 3
        time.sleep(DELAY_TIME * 2)
        main_page.click(L.main.tips_area.btn_insert_to_selected_track)
        time.sleep(DELAY_TIME * 2)

        # Move mouse position to right side (Hover right click menu "1st item")
        # Get current media position
        start_pos = main_page.get_mouse_pos()
        main_page.mouse.move(start_pos[0] + 10, start_pos[1])

        if press_down_times > 0:
            for x in range(press_down_times):
                main_page.keyboard.down()
                time.sleep(DELAY_TIME * 2)
        time.sleep(DELAY_TIME * 2)
        main_page.press_enter_key()

    @exception_screenshot
    def easy_cutout(self):
        # Bug regression (VDE235413-0028)
        # Insert Sport 01.jpg
        main_page.select_library_icon_view_media('Sport 02.jpg')
        time.sleep(DELAY_TIME * 2)
        media_room_page.library_clip_context_menu_insert_on_selected_track()

        # Click TipsArea > Pip Designer
        check_status = tips_area_page.tools.select_PiP_Designer()
        if not check_status:
            raise Exception

        # Switch to Advanced mode
        pip_designer_page.switch_mode('Advanced')
        time.sleep(DELAY_TIME * 2)

        # Switch (Motion) tab
        pip_designer_page.advanced.switch_to_motion()

        # Unfold path
        pip_designer_page.advanced.unfold_path_menu(set_unfold=1)

        # Apply one path
        pip_designer_page.path.select_template(4)

        # Switch (Animation) tab
        pip_designer_page.advanced.switch_to_animation()

        # Unfold (In Animation) then apply one (In Animation)
        pip_designer_page.advanced.unfold_in_animation_menu(set_unfold=1)

        # Apply one animation
        pip_designer_page.in_animation.select_template(7)

        # Switch (Properties) tab
        pip_designer_page.advanced.switch_to_properties()

        # Apply cutout
        pip_designer_page.apply_chromakey()
        time.sleep(DELAY_TIME * 2)

        # Get cutout status after Enable (Auto cutout)
        self.check_downloading_AI_module()
        time.sleep(DELAY_TIME * 3)

        # Click [OK]
        pip_designer_page.click_ok()
        time.sleep(DELAY_TIME * 2)

        # Select clip # 1 of track 1 to Enter Pip Designer again
        timeline_operation_page.select_timeline_media(0,0)
        time.sleep(DELAY_TIME * 2)

        # Click TipsArea > Pip Designer
        check_status = tips_area_page.tools.select_PiP_Designer()
        if not check_status:
            raise Exception
        time.sleep(DELAY_TIME * 3)

        # Check cutout preview
        preview_0sec = main_page.snapshot(L.pip_designer.preview)


        # seek time code to (00:00:03:15)
        pip_designer_page.set_timecode('00_00_03_15')
        time.sleep(DELAY_TIME * 2)
        preview_new = main_page.snapshot(L.pip_designer.preview)
        effect_result_same = not main_page.compare(preview_0sec, preview_new, similarity=0.7)
        effect_result_diff = main_page.compare(preview_0sec, preview_new, similarity=0.4)
        check_cutout_result = effect_result_same and effect_result_diff
        if not check_cutout_result:
            logger('Verify preview no update after apply cutout then seek other timecode')
            raise Exception

        # Click [OK]
        pip_designer_page.click_ok()
        time.sleep(DELAY_TIME * 2)

        return check_cutout_result
    
    #  Only for debug
    @pytest.mark.skip
    @exception_screenshot
    def test_bft_debug(self):
        # Clear Cache (Clear sign in log) to become Essential build
        main_page.clear_log_in()

        main_page.clear_cache_and_gdpr()
        time.sleep(DELAY_TIME*4)
        main_page.launch_app()
        time.sleep(DELAY_TIME * 5)

        # [L9] Click [Accept and Continue] button
        btn_continue = main_page.exist(L.base.gdpr_dialog.btn_accept_continue)
        if btn_continue:
            main_page.click(L.base.gdpr_dialog.btn_accept_continue)

    # @step("[Initial] Check dependency test result")
    def ensure_dependency(self, dependency_test, run_dependency=True):
        """
        Ensures a dependency test is run and passed before continuing.

        Args:
            dependency_test (str): Name of the dependency test to check.
            logger (callable): Logging function.
            step (callable): Context manager for steps.
            run_dependency (bool): Whether to run the dependency test if it has not been run yet. 
                - If True: Run the dependency test if it has not been run yet./ If dependency test is failed, skip the current test.
                - If False: if the dependency test has not been run yet or it is failed, return None/ False directly

        Raises:
            pytest.skip: Skips the current test if the dependency fails or is skipped.
        """

        # Check the result of the dependency test
        result = pytest.test_results.get(dependency_test, None)

        if result is None:  # Dependency test not run
            with step(f"[Initial] Set up initialized status for the test case which is requiring [{dependency_test}] ready"):
                # close AP at first
                main_page.close_app()
                if run_dependency:
                    try:
                        # Dynamically call the dependency test
                        getattr(self, dependency_test)()
                    except AssertionError as e:
                        logger(f"{dependency_test} failed: {str(e)}")
                        pytest.skip(f"Skipping test case because [{dependency_test}] did not pass.")
                return None # Give boolen that dependency test is not run
        elif not result:  # Dependency test failed or skipped
            if run_dependency:
                logger(f"{dependency_test} result: {result}")
                pytest.skip(f"Skipping test case because [{dependency_test}] did not pass.")
            else:
                return False # Give boolen that dependency test is failed
        return True # Give boolen that dependency test is passed


    # 2023/11/15: test_1_1_1 ~ test_1_1_11 total case = 203
    # 9 uuid
    @exception_screenshot
    @pytest.mark.launch_process
    @pytest.mark.launch
    @pytest.mark.name('[test_launch_process_1_1] GDPR shows up when first launch')
    def test_launch_process_1_1(self):
        '''
        1. clear entire cache
        2. launch PDR
        3. check if GDPR dialog is shown
        '''
        # Clear Cache (Clear sign in log) to become Essential build
        main_page.clear_log_in()

        # Clear Cache + GDPR
        main_page.clear_cache_and_gdpr()

        # launch PDR
        main_page.launch_app()

        # # [L7] Pop up GDPR dialog
        with step("[Verify] Check if GDPR dialog is shown"):
            qdpr_window = main_page.exist(L.base.gdpr_dialog.main)

        assert qdpr_window, "GDPR dialog not found!"


    @pytest.mark.launch_process
    @pytest.mark.launch
    @pytest.mark.name('[test_launch_process_1_2] Click [Accept and Continue] button on GDPR dialog')
    @exception_screenshot
    def test_launch_process_1_2(self):
        '''
        1. Check if "Accept and Continue" button is shown on GDPR dialog
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_launch_process_1_1"
        self.ensure_dependency(dependency_test)

        # Start the test case, original uuid("98c0a3ab-d4de-46ef-bb16-39884f6a1caf") 
        with step("[Verify] Check if continue button is shown on GDPR dialog"):
            btn_continue = main_page.exist(L.base.gdpr_dialog.btn_accept_continue)
        assert btn_continue, "Accept and Continue button not found!"



    @pytest.mark.launch_process
    @pytest.mark.launch
    @pytest.mark.name('[test_launch_process_1_3] Check upgrade button or link on essential dialog')
    @exception_screenshot
    def test_launch_process_1_3(self):
        '''
        1. click [Accept and Continue] button
        2. check if upgrade link or button is shown on Essential dialog
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_launch_process_1_2"
        self.ensure_dependency(dependency_test)

        # [L11] Click [Upgrade Now] button
        # with uuid("c9b335af-3053-4807-accb-2671a5de7c46") as case:
        # Click [Upgrade Now]

        with step("[Action] Click [Accept and Continue] button"):
            main_page.click(L.base.gdpr_dialog.btn_accept_continue)

        with step("[Verify] Check if upgrade link or button is shown on Essential dialog"):
            # check if the upgrade link or button is shown in 10 secs
            upgrade_link = main_page.exist({'AXTitle': 'GET PREMIUM', 'AXRole': 'AXLink'}, timeout=10)
            upgrade_btn = main_page.exist({'AXTitle': 'Upgrade Now', 'AXRole': 'AXButton'}, timeout=10)

            if upgrade_link: main_page.mouse.click(*upgrade_link.center)
            elif upgrade_btn: main_page.mouse.click(*upgrade_btn.center)

            time.sleep(DELAY_TIME*1) # unable to do next step until web is opened, so added time sleep

        assert upgrade_link or upgrade_btn, f"Upgrade Now link/ button not found! {upgrade_link=}, {upgrade_btn=}"

    # @pytest.mark.skip
    @pytest.mark.launch_process
    @pytest.mark.launch
    @pytest.mark.name('[test_launch_process_1_4] Launch PDR Essential build')
    @exception_screenshot
    def test_launch_process_1_4(self):
        '''
        1. Click "Launch Free Version" button and enter main program
        2. Check if "Import Media" icon is shown on Media Room
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_launch_process_1_3"
        self.ensure_dependency(dependency_test)

        # # [L12] Launch PDR Essential build
        # with uuid("ebc38a68-9415-48ab-9914-16aa63afadb5") as case:

        # Launch PDR Essential
        with step("[Action] Click [Launch Free Version] button and enter main program by new project"):
            check_free_version = self.launch_Essential_build()

        if not check_free_version:
            assert False, "Launch Essential build failed! Error occurred when click 'Launch Free Version' button --> Click 'New Project' on Launcher"

        with step("[Verify] Check if 'Import Media' icon is shown on Media Room"):
            check_import_icon = main_page.exist(L.media_room.btn_media_filter_display_audio_only, timeout=10)
        
        if not check_import_icon:
            assert False, "Import Media icon not found!"

        assert True

    @pytest.mark.launch_process
    @pytest.mark.launch
    @pytest.mark.name('[test_launch_process_1_5] BB shows up and close by pressing ESC key')
    @exception_screenshot
    def test_launch_process_1_5(self):
        '''
        1. Check BB show up
        2. Close BB by pressing ESC key
        3. Check if BB is closed
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_launch_process_1_4"
        self.ensure_dependency(dependency_test)

        # Handle Seasonal BB (Click ESC to close BB)
        # with uuid("600a1107-4281-415c-bda2-f4923e7ebd48") as case:

        with step("[Verify] Check if seasonal BB shows"):
            # Check if seasonal BB is shown
            if not main_page.exist(L.base.seasonal_bb_window.main, timeout=7):
                assert False, "Seasonal BB not found!"
        
        with step("[Action] Close seasonal BB dialog"):
            # Close seasonal BB dialog
            main_page.press_esc_key()

        with step("[Verify] Check if seasonal BB is closed"):
            # Check if seasonal BB is closed
            close_status = False
            if not main_page.exist(L.base.seasonal_bb_window.main, timeout=10): # search for 10 secs
                close_status = True

            assert close_status, "Seasonal BB not closed! by pressing ESC key"


    @pytest.mark.launch_process
    @pytest.mark.launch
    @pytest.mark.name('[test_launch_process_1_6] Sign 365 account and restart AP')
    @exception_screenshot
    def test_launch_process_1_6(self):
        '''
        1. Sign in 365 account
        2. Restart AP
        3. Check PDR is launched after restart
        4. Click [No] on CEIP dialog and click [New Project] on Launcher
        5. Check PDR is launched by if 'Import Media' icon is shown on Media Room
        '''
        # with uuid("89b5f8e9-dc8f-42d7-9fda-2771939dfb81") as case:
        # with uuid("45d2632c-6975-4bed-bd4a-5c13667d1cc0") as case:
        logger('start test_launch_process_1_6')

        # Ensure the dependency test is run and passed (only need to open PDR Essential build)
        dependency_test = "test_launch_process_1_5"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            # clear log in cache
            main_page.clear_log_in()
            # launch APP
            main_page.launch_app()
            # launch PDR
            self.launch_Essential_build()
            
        # click [Sign in] icon to sign in 365 account
        main_page.handle_sign_in(account='sistarftcn.005@gmail.com', pw='ilovecc680520')

        # Click [Restart]
        with step("[Action] Click [Restart] button"):
            # if activate dialog is shown, click [Activate] button
            main_page.exist_click(L.main.activate_dialog.btn_activate, None, btn="left", timeout=6, no_warning=True)
            btn_restart = main_page.exist(
                {'AXTitle': 'Restart', 'AXIdentifier': 'IDC_CLALERT_BUTTON_0', 'AXRole': 'AXButton'}, timeout=15)
            if not btn_restart:
                assert False, "Restart button not found!"
            main_page.mouse.click(*btn_restart.center)
        
        with step("[Verify] PDR is launched after restart"):
            launch_status = False
            time.sleep(DELAY_TIME*2) # wait for PDR is closed at first
            if main_page.is_app_exist(timeout=10): # check app is exist in 10 secs
                launch_status = True

            assert launch_status, "PDR did not launch after restart!"

        with step("[Action] Click [New Project] on Launcher"):
            # if activate dialog is shown, click [Activate] button
            main_page.exist_click(L.main.activate_dialog.btn_activate, None, btn="left", timeout=6, no_warning=True)
            # click (No, thank you) checkbox
            # time.sleep(DELAY_TIME * 5)
            main_page.refresh_top()
            main_page.click_CEIP_dialog()
            main_page.refresh_top()
            main_page.click_new_project_on_launcher()
            main_page.refresh_top()

        with step("[Verify] Check PDR is launched by if 'Import Media' icon is shown on Media Room"):
            # Check restart ok
            verify_step = False
            if main_page.is_exist(L.media_room.btn_import_media, None, 20): # search for 20 secs
                verify_step = True


        assert verify_step, "Sign in PDR and relaunch AP FAILED!"

    @pytest.mark.launch_process
    @pytest.mark.launch
    @pytest.mark.name('[test_launch_process_1_7] Tick/Untick "Show Launcher after close program"')
    @exception_screenshot
    def test_launch_process_1_7(self):
        '''
        1. Close AP and back to launcher
        2. Check if "Show Launcher after close program" is default ticked
        3. Untick "Show Launcher after close program"
        4. Check if "Show Launcher after close program" is unticked
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_launch_process_1_6"
        self.ensure_dependency(dependency_test)

        # with uuid("ae748270-f3c2-40a4-abfb-29c9cac00762") as case:
        # (Close PDR) should back to launcher
        if not main_page.click_close_then_back_to_launcher():
            assert False, "Close AP failed!"

        # check the default value of "show launcher again when closing" (1: ticked, 0: unticked)
        verify_value = main_page.get_value_in_checkbox_show_launcher()
        if verify_value == 0:
            assert False, "Default value of 'show launcher again when closing' is incorrect (Expected: 1; Current:0)!"
        elif verify_value == None: assert False, "Get value in checkbox show launcher failed when launcher shows by closed AP!"

        # untick chx_show_launcher
        with step("[Action] Untick 'show launcher again when closing'"):
            main_page.click(L.base.launcher_window.chx_show_launcher)
            time.sleep(DELAY_TIME * 2)
        
        verify_value = main_page.get_value_in_checkbox_show_launcher()

        if verify_value == 1:
            assert False, "Untick 'show launcher again when closing' failed!"
        elif verify_value == None: assert False, "Get value in checkbox show launcher failed after untick!"

        assert True

    @pytest.mark.launch_process
    @pytest.mark.launch
    @pytest.mark.name('[test_launch_process_1_8] Launch/ Close PDR with "Show Launcher after close program" is unticked')
    @exception_screenshot
    def test_launch_process_1_8(self):
        '''
        1. Enter 'New Project' on Launcher
        2. Close PDR and back to launcher
        3. Check Launcher is not shown after close AP
        4. Launch PDR again
        5. Check Launcher is shown after launch AP
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_launch_process_1_7"
        self.ensure_dependency(dependency_test)

        # [L85] Tick/Un-tick "Show Launcher after close program"
        # with uuid("c7cdcba0-c817-4a1c-b3eb-52362d6ffae4") as case:
        # Click [New project] to enter timeline
        if not main_page.click_new_project_on_launcher():
            assert False, "Click 'New Project' on Launcher failed!"

        # Close PDR then close AP
        if not main_page.click_close_then_back_to_launcher():
            assert False, "Close AP failed to show launcher!"

        # Should not pop up launcher then return False
        if main_page.is_app_exist(timeout=5):
            assert False, "Launcher shows up incorrectly when 'show launcher again when closing' is unticked!"
        
        # launch PDR then set (chx_show_launcher) to default checkbox
        if not main_page.launch_app() or not main_page.is_app_exist():
            assert False, "Launch AP again failed!"

        # Check launch shows up after Launch AP
        with step("[Verify] Check if launcher shows when launch AP with 'show launcher again when closing' is unticked"):
            if not main_page.click(L.base.launcher_window.chx_show_launcher):
                assert False, "Launcher doesn't show when launch AP with 'show launcher again when closing' is unticked!"

        assert True
    

    # 11 uuid
    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.name('[test_media_room_func_2_1] Enter media room and check [Use Sample Media] shows')
    @exception_screenshot
    def test_media_room_func_2_1(self):
        '''
        1. Launch PDR
        2. click "New Project" on Launcher
        3. Check if "Media Library" is shown on Media Room
        '''
        # launch PDR in launcher
        with step("[Initial] Launch PDR with clear cache"):
            self.launch_365_build_with_clear_cache()

        # uuid("26e3ee5d-f35e-462d-bc4a-806d507ae850")
        with step("[Verify] Check [Use Sample Media] is shown on Media Room"):
            assert main_page.exist(L.media_room.string_use_sample_media, timeout=7), "Use Sample Media not found!"


    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.name('[test_media_room_func_2_2] Switch to another room (Particle Room) and back to Media Room')
    @exception_screenshot
    def test_media_room_func_2_2(self):
        '''
        1. Switch to another room (Particle Room)
        2. Switch back to Media Room
        3. Check if "Use Sample Media" is shown on Media Room
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_media_room_func_2_1"
        self.ensure_dependency(dependency_test)


        # [L97] On Boarding flow_1 > switch to another room & go back
        # with uuid("23a12e63-4e72-40b4-945d-ff28a89add36") as case:
        # enter particle room
        if not main_page.enter_room(5):
            assert False, "Enter Particle Room failed!"

        # enter media room
        if not main_page.enter_room(0):
            assert False, "Enter Media Room failed!"

        with step("[Verify] Check [Use Sample Media] is shown on Media Room"):
            assert main_page.exist(L.media_room.string_use_sample_media, timeout=7), "Use Sample Media not found!"

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.import_media
    @pytest.mark.name('[test_media_room_func_2_3] Click [Use Sample Media] and select an imported media')
    @exception_screenshot
    def test_media_room_func_2_3(self):
        '''
        1. Click "Use Sample Media" on Media Room
        2. Select an imported media
        '''
        # Ensure the dependency test is run and passed
        # if not run test_media_room_func_2_2, run test_media_room_func_2_1 to initialize the status
        dependency_test = "test_media_room_func_2_2"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            self.test_media_room_func_2_1() 

        # [L98] On Boarding flow_1 > click (use sample media) hyperlink
        # with uuid("d032fcd4-f9ce-4d86-95cb-fe61cbc6f3a7") as case:

        with step("[Action] Click [Use Sample Media] on Media Room"):
            main_page.click(L.media_room.string_use_sample_media) # "Use Sample Media" must shown in previous step

        select_media = main_page.select_library_icon_view_media('Landscape 02.jpg')
        assert select_media, "Select media failed!"

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.import_media
    @pytest.mark.bubble
    @pytest.mark.name('[test_media_room_func_2_4] Check bubble shows after click [Insert] button')
    @exception_screenshot
    def test_media_room_func_2_4(self):
        '''
        1. Click [Insert] button
        2. Check bubble shows after click [Insert] button
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_media_room_func_2_3"
        self.ensure_dependency(dependency_test)

        # # [L101] On Boarding flow_2> show two bubble
        # with uuid("f5a29d63-68fa-4554-8d72-05f5df80812a") as case:

        with step("[Action] Click [Insert] button"):
            # Click [Insert] button
            if not main_page.click(L.main.tips_area.btn_insert_to_selected_track):
                assert False, "Click [Insert] button failed!"

        with step("[Verify] Check bubble shows after click [Insert] button"):
            verify_bubble_1 = False
            verify_bubble_2 = False
            if main_page.exist(L.media_room.string_on_boarding_blue_bubble_media, timeout=5):
                verify_bubble_1 = True
            if main_page.exist(L.media_room.string_on_boarding_blue_bubble_tooltip, timeout=5):
                verify_bubble_2 = True

            assert verify_bubble_1 and verify_bubble_2, f"Bubble not found after click [Insert] button!, media bubble= {verify_bubble_1}, tooltip bubble= {verify_bubble_2}"



    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.bubble
    @pytest.mark.name('[test_media_room_func_2_5] Check bubble content is correct')
    @exception_screenshot
    def test_media_room_func_2_5(self):
        '''
        1. Check bubble content is correct
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_media_room_func_2_4"
        self.ensure_dependency(dependency_test)


        # # [L102] On Boarding flow_2> Continue above case > check UI response of "bubbles"
        # with uuid("db557877-2404-45b1-a573-bb9931430283") as case:

        blue_bubble_1_image = main_page.snapshot(L.media_room.string_on_boarding_blue_bubble_media, file_name=Auto_Ground_Truth_Folder + 'L102_1.png')
        blue_bubble_2_image = main_page.snapshot(L.media_room.string_on_boarding_blue_bubble_tooltip, file_name=Auto_Ground_Truth_Folder + 'L102_2.png')
        bubble_1_preview_result = main_page.compare(Ground_Truth_Folder + 'L102_1.png', blue_bubble_1_image)
        bubble_2_preview_result = main_page.compare(Ground_Truth_Folder + 'L102_2.png', blue_bubble_2_image)
        
        assert bubble_1_preview_result and bubble_2_preview_result, f"Bubble content is incorrect!, media bubble= {bubble_1_preview_result}, tooltip bubble= {bubble_2_preview_result}"
    
    
    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.bubble
    @pytest.mark.name('[test_media_room_func_2_6] Click anywhere to close bubble')
    @exception_screenshot
    def test_media_room_func_2_6(self):
        '''
        1. Click anywhere to close bubble
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_media_room_func_2_5"
        self.ensure_dependency(dependency_test)


        # # [L104] On Boarding flow_2> Continue above case to click anywhere > close all bubble
        # with uuid("c3af3f4a-a05d-4596-ab93-1f03b76b1f7c") as case:
        # Select timeline Photo
        timeline_operation_page.select_timeline_media(track_index=0, clip_index=0)

        with step("[Verify] Check bubbles are closed after clicking anywhere"):
            verify_bubble_1 = not main_page.is_exist(L.media_room.string_on_boarding_blue_bubble_media)
            verify_bubble_2 = not main_page.is_exist(L.media_room.string_on_boarding_blue_bubble_tooltip)

        assert verify_bubble_1 and verify_bubble_2, f"Bubble not closed after click anywhere!, media bubble= {verify_bubble_1}, tooltip bubble= {verify_bubble_2}"

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.stock_media
    @pytest.mark.name('[test_media_room_func_2_7] Check [Stock Media] button shows')
    @exception_screenshot
    def test_media_room_func_2_7(self):
        '''
        1. Check [Stock Media] button shows
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_media_room_func_2_6"
        self.ensure_dependency(dependency_test)

        # # [L118] Download from iStock Content (Stock Content Library refine)
        # with uuid("129dbc9e-602c-4a86-b469-42bbcddb58e3") as case:
        with step("[Verify] Check [Stock Media] button shows"):
            result = main_page.exist(L.media_room.btn_stock_media)
            assert result, "Stock Media button not found!"

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.pip_designer
    @pytest.mark.timeline
    @pytest.mark.bubble
    @pytest.mark.name('[test_media_room_func_2_8] Check Cutout bubble content is correct')
    @exception_screenshot
    def test_media_room_func_2_8(self):
        '''
        1. Set time code
        2. Import media to timeline
        3. Enter pip designer by double click video
        4. Check Cutout bubble content is correct
        '''
        
        # Ensure the dependency test is run and passed
        dependency_test = "test_media_room_func_2_7"
        self.ensure_dependency(dependency_test)

        # [L407] 3.4 Pip designer > Auto cutout > Double click video
        # with uuid("55f5f7ca-3abc-4533-84ca-58a046a00dc9") as case:
        # Set timecode :
        if not main_page.set_timeline_timecode('00_00_06_00'):
            assert False, "Set timecode failed!"

        # Insert Skateboard 03.mp4 to timeline
        if not main_page.select_library_icon_view_media('Skateboard 03.mp4'):
            assert False, "Select media failed!"

        if not main_page.tips_area_insert_media_to_selected_track():
            assert False, "Insert media failed!"
        # time.sleep(DELAY_TIME * 2)

        # Select timeline Video
        timeline_operation_page.select_timeline_media(track_index=0, clip_index=1)
        # time.sleep(DELAY_TIME * 2)

        # double click video to enter pip designer
        with step("[Action] Double click video to enter pip designer"):
            main_page.double_click()
        # time.sleep(DELAY_TIME * 3)

        blue_bubble_cutout = main_page.snapshot(L.pip_designer.chromakey.bubble_cutout,
                                                file_name=Auto_Ground_Truth_Folder + 'L407.png')
        cutout_bubble_preview = main_page.compare(Ground_Truth_Folder + 'L407.png', blue_bubble_cutout, similarity=0.85)
        assert cutout_bubble_preview, "Cutout bubble content is not as expected!"

    @pytest.mark.media_room_func
    @pytest.mark.pip_designer
    @pytest.mark.bubble
    @pytest.mark.name('[test_media_room_func_2_9] Check Cutout bubble is closed after clicking properties')
    @exception_screenshot
    def test_media_room_func_2_9(self):
        '''
        1. Click properties
        2. Check bubble is closed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_media_room_func_2_8"
        self.ensure_dependency(dependency_test)
        

        # [L408] 3.4 Pip designer > Auto cutout > click anywhere > can close bubble normally
        # with uuid("643bbe5b-fc4a-4a20-a1a0-e3c2b0013c64") as case:
        with step('[Action] Ckick properties to close bubble'):
            # click properties
            main_page.click(L.pip_designer.properties_title)
            time.sleep(DELAY_TIME * 2)
        with step('[Verify] Check bubble is closed after clicking properties'):
            # bubble cutout should be closed
            verify_result = False
            if not main_page.is_exist(L.pip_designer.chromakey.bubble_cutout):
                verify_result = True
            assert verify_result, "Bubble is not closed after clicking properties!"

    @pytest.mark.media_room_func
    @pytest.mark.pip_designer
    @pytest.mark.auto_cutout
    @pytest.mark.name('[test_media_room_func_2_10] Check Cutout button and close pip designer')
    @exception_screenshot
    def test_media_room_func_2_10(self):
        '''
        1. Check if cutout button is shown
        2. Close pip designer
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_media_room_func_2_9"
        self.ensure_dependency(dependency_test)

        # # [L406] 3.4 Pip designer > Auto cutout > Display cutout setting
        # with uuid("00f15326-015a-4964-b04a-02ab6761d196") as case:

        with step("[Verify] Check if cutout button is shown"):
            if not main_page.is_exist(L.pip_designer.chromakey.cutout_button):
                assert False, "Cutout button not found!"

            # click [OK] to close pip designer
            pip_designer_page.click_ok()
        assert True

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.pip_designer
    @pytest.mark.timeline
    @pytest.mark.content_pack
    @pytest.mark.pip_object
    @pytest.mark.name('[test_media_room_func_2_11] Add Sticker to timeline by R-click menu and unfold chroma key in pip designer')
    @exception_screenshot
    def test_media_room_func_2_11(self):
        '''
        1. Select timeline track2
        2. Enter pip designer
        3. Select template (search library: Winter 01)
        4. Add Sticker to timeline by R-click menu
        5. Select sticker on timeline
        6. Double click sticker to enter pip designer
        7. Unfold chroma key
        8. Check unfold chroma key tab correctly
        9. Fold chroma key
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_media_room_func_2_10"
        self.ensure_dependency(dependency_test)

        # [L425] 3.4 Pip designer > Auto cutout > double click pip template
        # with uuid("69c41107-275a-4644-94f3-fd43bcc33fbf") as case:
            # select timeline  track2
        if not main_page.timeline_select_track(2):
            assert False, "Select track failed!"

        # enter pip designer
        main_page.enter_room(4)

        # Select template (search library: Winter Sticker 01)
        sticker_name = 'Winter 01'
        media_room_page.search_library(sticker_name)
        time.sleep(DELAY_TIME * 4)
        if not main_page.select_library_icon_view_media(sticker_name):
            assert False, f"Select media {sticker_name} failed!"

        with step("[Action] Add Sticker to timeline by R-click menu"):
            # Download IAD template
            time.sleep(DELAY_TIME * 4)
            main_page.right_click()
            main_page.select_right_click_menu('Add to Timeline')
            # time.sleep(DELAY_TIME * 2)

        # Select timeline sticker
        with step("[Action] Select sticker on timeline"):
            timeline_operation_page.select_timeline_media(track_index=2, clip_index=0)
            # time.sleep(DELAY_TIME * 2)

        # double click video to enter pip designer
        with step("[Action] Double click sticker to enter pip designer"):
            main_page.double_click()
            # time.sleep(DELAY_TIME * 3)

        # unfold chroma key
        if not pip_designer_page.express_mode.unfold_properties_chroma_key_tab(1):
            assert False, "[Action] Unfold chroma key failed!"
        # time.sleep(DELAY_TIME * 2)

        # Verify step: Do Not find the cutout setting now
        with step("[Verify] Check if chroma tab is unfloded (Not show cutout button)"):
            if main_page.is_exist(L.pip_designer.chromakey.cutout_button):
                assert False, "[Verify] chroma key tab is not unfolded!, cutout button is shown!"

        # Fold chroma key
        pip_designer_page.express_mode.unfold_properties_chroma_key_tab(0)
        # time.sleep(DELAY_TIME * 2)

        # click [OK] to close pip designer
        pip_designer_page.click_ok()
        # time.sleep(DELAY_TIME * 2)

    @pytest.mark.media_room_func
    @pytest.mark.stock_media
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.content_pack
    @pytest.mark.name("[test_media_room_func_2_12] Verify preview update after Shutterstock stock media download")
    @exception_screenshot
    def test_media_room_func_2_12(self):
        """
        1. Close APP, clear cache, and start APP
        2. Set project aspect ratio to 16:9
        3. Open package project ('Packed_Project/can_del.pdk') to location ('Extracted_Folder/test_media_room_func_2_12')
        4. Screenshot preview (locator=main_page.area.preview.main)
        5. Open [Shutterstock] dialog in media room and switch to [Video] tab
        6. Search keyword 'bubble pink circle' and wait for DELAY_TIME*5
        7. Select stock media by thumbnail index (3)
        8. Handle high definition dialog
        9. Press [Esc] to close iStock window
        10. Check preview is different after download complete
        """
        with step("[Action] Close APP, clear cache, and start APP"):
            main_page.close_app()
            main_page.clear_cache()
            main_page.start_app()

        with step("[Action] Set project aspect ratio to 9:16"):
            time.sleep(DELAY_TIME)
            main_page.set_project_aspect_ratio_9_16()

        with step("[Action] Open package project to specified location"):
            self.open_packed_project('Packed_Project/can_del.pdk', 'Extracted_Folder/test_media_room_func_2_12')
            # Close PDR then re-launch
            main_page.close_and_restart_app()
            time.sleep(DELAY_TIME * 4)

        with step("[Action] Capture initial preview screenshot"):
            preview_before = main_page.snapshot(locator=main_page.area.preview.main)

        # [L27] 2.1 Media Room > Import  > Download fom Stock Content
        # with uuid("012b2e9c-9f94-4c7d-a5b2-b771fd5a5912") as case:

        with step("[Action] Open Shutterstock dialog and switch to [Video] tab"):
            media_room_page.import_media_from_shutterstock()
            download_from_ss_page.switch_to_video()

        with step("[Action] Search keyword 'bubble pink circle' and wait"):
            download_from_ss_page.search.search_text('bubble pink circle')
            time.sleep(DELAY_TIME * 5)

        with step("[Action] Select stock media by thumbnail index (3)"):
            download_from_ss_page.video.select_thumbnail_for_video_intro_designer(3)

        with step("[Action] Handle high definition dialog"):
            for _ in range(70):
                media_room_page.handle_high_definition_dialog()
                if main_page.exist(L.download_from_shutterstock.download.btn_complete_ok):
                    # Click [OK] when pop up download complete
                    download_from_ss_page.download.click_complete_ok()
                    time.sleep(DELAY_TIME * 5) # wait for download complete
                    break
                else:
                    time.sleep(DELAY_TIME)

        with step("[Action] Press [Esc] to close iStock window"):
            main_page.press_esc_key()

        with step("[Verify] Check that preview is different after download complete"):
            preview_after = main_page.snapshot(locator=main_page.area.preview.main)
            if main_page.compare(preview_before, preview_after, similarity=0.95):
                # Similarity should be less than 0.55 for a changed preview
                assert False, "Preview did not change after download! Similarity should < 0.95"

        assert True


    @pytest.mark.media_room_func
    @pytest.mark.stock_media
    @pytest.mark.content_pack
    @pytest.mark.name("[test_media_room_func_2_13] Verify preview update after Getty Images stock media download")
    @exception_screenshot
    def test_media_room_func_2_13(self):
        """
        0. Ensure the dependency test is run and passed
        1. Screenshot preview (locator=main_page.area.preview.main)
        2. Open [Shutterstock] dialog in media room and switch to [Video] tab
        3. Switch to [Getty Images] tab in [Download from Shutterstock] window
        4. Search keyword 'pink hand color 23 flower' and wait for DELAY_TIME*5
        5. Select stock media by thumbnail index (1)
        6. Handle high definition dialog
        7. Press [Esc] to close iStock window
        8. Check preview is different after download complete
        """
        dependency_test = "test_media_room_func_2_12"
        self.ensure_dependency(dependency_test)

        with step("[Action] Capture initial preview screenshot"):
            initial_preview = main_page.snapshot(locator=main_page.area.preview.main)

        with step("[Action] Open Shutterstock dialog in media room and switch to [Video] tab"):
            media_room_page.import_media_from_shutterstock()
            download_from_ss_page.switch_to_video()

        with step("[Action] Switch to Getty Images tab in Download from Shutterstock window"):
            getty_image_page.switch_to_GI()

        with step("[Action] Search keyword 'pink hand color 23 flower' and wait"):
            download_from_ss_page.search.search_text('pink hand color 23 flower')
            time.sleep(DELAY_TIME * 5)

        with step("[Action] Select stock media by thumbnail index (1)"):
            download_from_ss_page.video.select_thumbnail_for_video_intro_designer(1)

        with step("[Action] Handle high definition dialog"):
            for _ in range(70):
                media_room_page.handle_high_definition_dialog()
                if main_page.exist(L.download_from_shutterstock.download.btn_complete_ok):
                    # Click [OK] when pop up download complete
                    download_from_ss_page.download.click_complete_ok()
                    time.sleep(DELAY_TIME * 5) # wait for download complete
                    break
                else:
                    time.sleep(DELAY_TIME)

        with step("[Action] Press [Esc] to close iStock window"):
            main_page.press_esc_key()

        with step("[Verify] Check that preview is different after download complete"):
            preview_after = main_page.snapshot(locator=main_page.area.preview.main)
            if main_page.compare(initial_preview, preview_after, similarity=0.95):
                # Similarity should be less than 0.55 for a changed preview
                assert False, "Preview did not change after download! Similarity should < 0.95"

        assert True


    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.import_media
    @pytest.mark.name("[test_media_room_func_2_14] Verify preview is different after importing local media file")
    @exception_screenshot
    def test_media_room_func_2_14(self):
        """
        0. Ensure the dependency test is run and passed
        1. Switch to (Media Content) category in Media Room and capture screenshot (locator=main_page.area.preview.main)
        2. Import [Media File] from local (Test_Material_Folder + 'Produce_Local/Y man.mp4') and handle high definition dialog
        3. Check preview is different after import
        """
        dependency_test = "test_media_room_func_2_13"
        self.ensure_dependency(dependency_test)

        # [L25] 2.1 Media Room > Media Content > Import > Local (File can import correctly by import button)
        # with uuid("885259d0-006d-4260-b4ff-90b3f3d7cf7f") as case:

        with step("[Action] Switch to Media Content category and capture initial preview screenshot"):
            media_room_page.enter_media_content()
            initial_preview = main_page.snapshot(locator=main_page.area.preview.main)

        with step("[Action] Import media file and handle high definition dialog"):
            media_room_page.import_media_file(Test_Material_Folder + "Produce_Local/Y man.mp4")
            media_room_page.handle_high_definition_dialog(option='no')

        with step("[Verify] Check that preview is different after import"):
            preview_after = main_page.snapshot(locator=main_page.area.preview.main)
            if main_page.compare(initial_preview, preview_after, similarity=0.95):
                # Similarity should be less than 0.55 for a changed preview
                assert False, "Preview did not change after import! Similarity should < 0.95"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.library_preview
    @pytest.mark.name("[test_media_room_func_2_15] Click [Show Library Preview Window] and check result")
    @exception_screenshot
    def test_media_room_func_2_15(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Show Library Preview Window] from top menu bar and check result
        """
        dependency_test = "test_media_room_func_2_14"
        self.ensure_dependency(dependency_test)

        # [L18] 2.1 Media Room > Enable Library preview window
        # with uuid("9bb42cbf-e645-4b01-a9e2-48b2ba9d48d4") as case:

        with step("[Action] Click [Show Library Preview Window] from top menu bar"):
            enable_two_preivew = main_page.top_menu_bar_view_show_library_preview_window(is_enable=1)
            assert enable_two_preivew, "Click [Show Library Preview Window] failed!"

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.play_video
    @pytest.mark.name("[test_media_room_func_2_16] Verify library preview update after Play/ Pause/ Stop video")
    @exception_screenshot
    def test_media_room_func_2_16(self):
        """
        0. Ensure the dependency test is run and passed
        1. Screenshot (locator=L.library_preview.upper_view_region)
        2. Click [Preview Operation] for (Play)(0) in library preview window and wait for DELAY_TIME
        3. Click [Preview Operation] for (Pause)(0) in library preview window and wait for DELAY_TIME
        4. Check if preview is updated (similarity=0.98)
        5. Click [Preview Operation] for (Stop)(1) in library preview window and wait for DELAY_TIME
        6. Check if preview is the same as initial preview (similarity=0.95)
        """
        dependency_test = "test_media_room_func_2_15"
        self.ensure_dependency(dependency_test)

        # [L19] 2.1 Media Room > Library preview window > Playback Controls
        # with uuid("8e8d3530-c835-4d09-82d5-7ff0ab10bcf0") as case:

        with step("[Action] Capture initial library preview screenshot"):
            initial_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)

        with step("[Action] Click [Preview Operation] for Play in library preview window"):
            library_preview_page.library_preview_window_preview_operation(0)

        with step("[Action] Click [Preview Operation] for Pause in library preview window"):
            library_preview_page.library_preview_window_preview_operation(0)

        with step("[Verify] Check if preview is updated (should be different from initial, similarity < 0.98)"):
            updated_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)
            if main_page.compare(initial_preview, updated_preview, similarity=0.98):
                # Similarity should be less than 0.98 to confirm preview update
                assert False, "Preview did not update after Play/Pause operation! Similarity should be < 0.98"

        with step("[Action] Click [Preview Operation] for Stop in library preview window"):
            library_preview_page.library_preview_window_preview_operation(1)

        with step("[Verify] Check if preview is same as initial after Stop (similarity > 0.95)"):
            final_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)
            if not main_page.compare(initial_preview, final_preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Final preview does not match the initial preview! Similarity should be > 0.95"

        assert True


    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.library_preview
    @pytest.mark.name("[test_media_room_func_2_17] Verify preview update after undocking preview window")
    @exception_screenshot
    def test_media_room_func_2_17(self):
        """
        0. Ensure the dependency test is run and passed
        1. Screenshot (locator=L.library_preview.upper_view_region)
        2. Undock [Preview Window]
        3. Check if preview is updated (similarity=0.95)
        """
        dependency_test = "test_media_room_func_2_16"
        self.ensure_dependency(dependency_test)

        # [L22] 2.1 Media Room > Library preview window > Undock
        # with uuid("d8f210ce-d0dc-4de2-b2bf-3a16f104ca13") as case:

        with step("[Action] Capture initial library preview screenshot"):
            initial_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)

        with step("[Action] Undock the preview window"):
            library_preview_page.library_preview_click_undock()

        with step("[Verify] Check if preview is updated after undocking"):
            updated_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)
            if main_page.compare(initial_preview, updated_preview, similarity=0.95):
                # Similarity should be less than 0.95 when preview is updated
                assert False, "Preview did not update after undocking! Similarity should < 0.95"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.timecode
    @pytest.mark.library_preview
    @pytest.mark.clip_marker
    @pytest.mark.name('[test_media_room_func_2_18] Add Clip Marker and Modify Text')
    @exception_screenshot
    def test_media_room_func_2_18(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Set Timecode ('00_00_07_11') on Library Preview and screenshot (locator=L.library_preview.upper_view_region)
        2. Click [Add Clip Marker]
        3. Check the preview is updated after adding marker (similarity=0.95)
        4. Input [Text]('Test BFT and add marker') on [Modify Clip Marker]
        5. Check the preview is updated after adding text (similarity=0.95)
        '''
        dependency_test = "test_media_room_func_2_17"
        self.ensure_dependency(dependency_test)

        # [L21] 2.1 Media Room > Library preview window > Able to add marker
        # with uuid("97c72edd-d447-4142-8e00-80f5a86bb389") as case:

        with step("[Action] Set Timecode ('00_00_07_11') on Library Preview and screenshot"):
            library_preview_page.set_library_preview_timecode('00_00_07_11')
            initial_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)

        with step("[Action] Click [Add Clip Marker]"):
            library_preview_page.edit_library_preview_window_add_clip_marker()

        with step("[Verify] Check the preview is updated after adding marker"):
            preview_after_marker = main_page.snapshot(locator=L.library_preview.upper_view_region)
            if main_page.compare(initial_preview, preview_after_marker, similarity=0.99):
                assert False, "Preview did not update after adding marker! Similarity should < 0.99"

        with step("[Action] Input [Text]('Test BFT and add marker') on [Modify Clip Marker]"):
            library_preview_page.edit_library_preview_window_clip_marker_input_text('Test BFT and add marker')

        with step("[Verify] Check the preview is updated after adding text"):
            preview_after_text = main_page.snapshot(locator=L.library_preview.upper_view_region)
            if main_page.compare(preview_after_marker, preview_after_text, similarity=0.99):
                assert False, "Preview did not update after adding text! Similarity should < 0.99"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.mark_in_out
    @pytest.mark.library_preview
    @pytest.mark.trim
    @pytest.mark.timecode
    @pytest.mark.name('[test_media_room_func_2_19] Mark In/Out, Insert, and Trim Video')
    @exception_screenshot
    def test_media_room_func_2_19(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Set Timecode ('00_00_03_00') on Library Preview and screenshot (locator=L.library_preview.upper_view_region)
        2. Click [Mark In] and check the preview is updated after adding marker (similarity=0.95)
        3. Set Timecode ('00_00_10_07') on Library Preview and screenshot (locator=L.library_preview.upper_view_region)
        4. Click [Mark Out] and check the preview is updated after adding marker (similarity=0.95)
        5. Click [Insert] on selected track
        6. Click [Trim] button in [Tips Area] (type='video')
        7. Switch [Trim Mode] to ('Single') in [Precut Window]
        8. Get Single Trim Duration and check if it is ('00:00:07:07')
        9. Click [OK] Button to leave Precut Window
        '''
        dependency_test = "test_media_room_func_2_18"
        self.ensure_dependency(dependency_test)

        # [L20] 2.1 Media Room > Library preview window > Able to Mark in / out then insert timeline
        # with uuid("f8b3ffb5-4799-4a41-a42a-a5b8f9fe8800") as case:

        with step("[Action] Set Timecode ('00_00_03_00') on Library Preview and screenshot"):
            library_preview_page.set_library_preview_timecode('00_00_03_00')
            initial_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)

        with step("[Action] Click [Mark In] and check the preview update"):
            library_preview_page.edit_library_preview_window_click_mark_in()
            preview_after_mark_in = main_page.snapshot(locator=L.library_preview.upper_view_region)
            if main_page.compare(initial_preview, preview_after_mark_in, similarity=0.9999):
                assert False, "Preview did not update after adding Mark In! Similarity should < 0.9999"

        with step("[Action] Set Timecode ('00_00_10_07') on Library Preview and screenshot"):
            main_page.set_library_preview_timecode('00_00_10_07')
            preview_before_mark_out = main_page.snapshot(locator=L.library_preview.upper_view_region)

        with step("[Action] Click [Mark Out] and check the preview update"):
            library_preview_page.edit_library_preview_window_click_mark_out()
            preview_after_mark_out = main_page.snapshot(locator=L.library_preview.upper_view_region)
            if main_page.compare(preview_before_mark_out, preview_after_mark_out, similarity=0.9999):
                assert False, "Preview did not update after adding Mark Out! Similarity should < 0.9999"

        with step("[Action] Click [Insert] on selected track"):
            library_preview_page.edit_library_preview_window_click_insert_on_selected_track()

        with step("[Action] Click [Trim] button in [Tips Area] (type='video')"):
            tips_area_page.click_TipsArea_btn_Trim(type='video')

        with step("[Action] Switch [Trim Mode] to ('Single') in [Precut Window]"):
            precut_page.edit_precut_switch_trim_mode('Single')

        with step("[Verify] Get Single Trim Duration and check if it is ('00:00:07:07')"):
            trim_duration = precut_page.get_precut_single_trim_duration()
            if trim_duration != '00:00:07:07':
                assert False, f"Trim duration is incorrect! Expected: '00:00:07:07', Got: {trim_duration}"

        with step("[Action] Click [OK] Button to leave Precut Window"):
            precut_page.click_ok()

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.library_preview
    @pytest.mark.name('[test_media_room_func_2_20] Click Minimize button on Preview Window and check result')
    @exception_screenshot
    def test_media_room_func_2_20(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Click [Minimize] button on [Preview Window] and check result
        '''
        dependency_test = "test_media_room_func_2_19"
        self.ensure_dependency(dependency_test)

        # [L23] 2.1 Media Room > Library preview window > Minimize window
        # with uuid("4cc511f4-4fb7-4de7-8ef0-7982c3305ef9") as case:

        with step("[Action] Click [Minimize] button on [Preview Window]"):
            assert library_preview_page.library_preview_click_minimize(), "Preview window was not minimized correctly!"

        assert True


    @pytest.mark.media_room_func
    @pytest.mark.library_preview
    @pytest.mark.name('[test_media_room_func_2_21] Show, Dock, and Close Library Preview Window')
    @exception_screenshot
    def test_media_room_func_2_21(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Click [Show Library Preview] button when [Minimized window]
        2. Click [Dock] button on [Preview Window]
        3. Click [Close] button on [Preview Window]
        '''
        dependency_test = "test_media_room_func_2_20"
        self.ensure_dependency(dependency_test)

        # [L24] 2.1 Media Room > Library preview window > Disable library preview window
        # with uuid("5a30f3ff-290d-4179-9e15-06a92a2e3a4d") as case:

        with step("[Action] Click [Show Library Preview] button when [Minimized window]"):
            library_preview_page.library_preview_show_library_preview()

        with step("[Action] Click [Dock] button on [Preview Window]"):
            library_preview_page.library_preview_click_dock()

        with step("[Action] Click [Close] button on [Preview Window]"):
            assert library_preview_page.library_preview_click_close_preview(), "Preview window was not closed correctly!"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.library_preview
    @pytest.mark.search_library
    @pytest.mark.name('[test_media_room_func_2_22] Search Component, Select Media, and Verify Preview Update')
    @exception_screenshot
    def test_media_room_func_2_22(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Search component ('02') in library and screenshot (locator=L.base.Area.preview.main)
        2. Select media ('Travel 02.jpg') by library icon view and check search result
        3. Check preview is updated after search ('02') (similarity=0.95)
        '''
        dependency_test = "test_media_room_func_2_21"
        self.ensure_dependency(dependency_test)

        # [L31] 2.1 Media Room > Search > Keyword
        # with uuid("5c4130d7-69f4-4fbd-8463-114132f01b92") as case:

        with step("[Action] Search component ('02') in library and screenshot"):
            media_room_page.search_library('02')
            search_preview = main_page.snapshot(locator=L.base.Area.preview.main)

        with step("[Action] Select media ('Travel 02.jpg') by library icon view and check search result"):
            if not main_page.select_library_icon_view_media('Travel 02.jpg'):
                assert False, "Select media 'Travel 02.jpg' failed!"

        with step("[Verify] Check preview is updated after search ('02')"):
            updated_preview = main_page.snapshot(locator=L.base.Area.preview.main)
            if main_page.compare(search_preview, updated_preview, similarity=0.95):
                assert False, "Preview did not update correctly after search! Similarity should < 0.95"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.library_preview
    @pytest.mark.search_library
    @pytest.mark.name('[test_media_room_func_2_23] Screenshot, Cancel Search, and Verify Preview')
    @exception_screenshot
    def test_media_room_func_2_23(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Screenshot (locator=L.base.Area.preview.main)
        2. Click [Cancel] button in search library
        3. Check preview is the same as initial preview (similarity=0.95)
        '''
        dependency_test = "test_media_room_func_2_22"
        self.ensure_dependency(dependency_test)

        # [L32] 2.1 Media Room > Search > Cancel search
        # with uuid("87f7672e-ca55-4a88-a1fb-3eec037b21d7") as case:

        with step("[Action] Screenshot (locator=L.base.Area.preview.main)"):
            initial_preview = main_page.snapshot(locator=L.base.Area.preview.main)

        with step("[Action] Click [Cancel] button in search library"):
            media_room_page.search_library_click_cancel()

        with step("[Verify] Check preview is updated"):
            updated_preview = main_page.snapshot(locator=L.base.Area.preview.main)
            if main_page.compare(initial_preview, updated_preview, similarity=0.95):
                assert False, "Preview doesn't changed expectedly after canceling search! Similarity should be < 0.95"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.library_preview
    @pytest.mark.explore_view
    @pytest.mark.name('[test_media_room_func_2_24] Hide Explore View and Verify Media Content is hidden')
    @exception_screenshot
    def test_media_room_func_2_24(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Click [Display/Hide Explore View] button to hide Explore View
        2. Check if [Media Content] category (L.media_room.tag_media_content) is hidden
        '''
        dependency_test = "test_media_room_func_2_23"
        self.ensure_dependency(dependency_test)

        # [L33] 2.1 Media Room > Explorer view
        # with uuid("44845949-83ed-4c11-97cb-b9d9bcf61d78") as case:

        with step("[Action] Click [Display/Hide Explore View] button to hide Explore View"):
            media_room_page.click_display_hide_explore_view()

        with step("[Verify] Check if [Media Content] category is hidden"):
            is_hidden = not main_page.exist(L.media_room.tag_media_content, timeout=5)
            assert is_hidden, "[Media Content] category is still visible after hiding Explore View!"

        with step("[Action] Click [Display/Hide Explore View] button to display Explore View"):
            media_room_page.click_display_hide_explore_view()

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.library_preview
    @pytest.mark.custom_tag
    @pytest.mark.name('[test_media_room_func_2_25] Add New Custom Tag')
    @exception_screenshot
    def test_media_room_func_2_25(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Add new tag with name ('auto_Testing')
        '''
        dependency_test = "test_media_room_func_2_24"
        self.ensure_dependency(dependency_test)

        # [L34] 2.1 Media Room > Add new tag
        # with uuid("db26dc5e-dbbc-4439-b29c-87b426dd4c16") as case:

        with step("[Action] Add new tag with name ('auto_Testing')"):
            tag_added = media_room_page.add_new_tag('auto_Testing')
            assert tag_added, "Failed to add custom tag: auto_Testing"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.library_preview
    @pytest.mark.custom_tag
    @pytest.mark.name('[test_media_room_func_2_26] Rename Custom Tag')
    @exception_screenshot
    def test_media_room_func_2_26(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Rename tag by right click from ('auto_Testing') to ('QADF_testing')
        '''
        dependency_test = "test_media_room_func_2_25"
        self.ensure_dependency(dependency_test)

        # [L35] 2.1 Media Room > Modify tag name
        # with uuid("01dff930-9d5a-4c98-ad0a-4e2b306b1572") as case:

        with step("[Action] Rename tag by right click from ('auto_Testing') to ('QADF_testing')"):
            rename_success = media_room_page.right_click_rename_tag('auto_Testing', 'QADF_testing')
            assert rename_success, "Failed to rename custom tag from 'auto_Testing' to 'QADF_testing'"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.library_preview
    @pytest.mark.custom_tag
    @pytest.mark.name('[test_media_room_func_2_27] Add Media to Tag and Delete Tag')
    @exception_screenshot
    def test_media_room_func_2_27(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Enter [Media Content] Category
        2. Select media ('Landscape 02.jpg') by library icon view
        3. Add media to specific tag ('QADF_testing') by right click and check the result
        4. Delete tag ('QADF_testing', count=1) by right click
        '''
        dependency_test = "test_media_room_func_2_26"
        self.ensure_dependency(dependency_test)

        # [L36] 2.1 Media Room > Tag clip to custom tag
        # with uuid("11d4f4e0-284c-4255-b620-baab55eb233b") as case:

        with step("[Action] Enter [Media Content] Category"):
            media_room_page.enter_media_content()

        with step("[Action] Select media ('Landscape 02.jpg') by library icon view"):
            main_page.select_library_icon_view_media('Landscape 02.jpg')

        with step("[Action] Add media to specific tag ('QADF_testing') by right click"):
            tag_added = media_room_page.library_clip_context_menu_add_to('QADF_testing')
            if not tag_added:
                assert False, "Failed to add media to tag 'QADF_testing'"

        with step("[Action] Delete tag ('QADF_testing', count=1) by right click"):
            media_room_page.right_click_delete_tag('QADF_testing', count=1)

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.color_board
    @pytest.mark.timeline
    @pytest.mark.name('[test_media_room_func_2_28] Modify Color Board and Verify Preview')
    @exception_screenshot
    def test_media_room_func_2_28(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Select timeline track (1) and set timecode ('00_00_10_07') at main page
        2. Enter [Color Boards] in Media Room
        3. Modify [Color Board] Color to ('F2E0B7') in Media Room
        4. Check preview (locator=main_page.area.preview.main) as GT (Ground_Truth_Folder + 'L37.png')(Similarity=0.95)
        '''
        dependency_test = "test_media_room_func_2_27"
        self.ensure_dependency(dependency_test)

        # [L37] 2.1 Media Room > Color Board > Uniform color
        # with uuid("c1e06126-1100-45f2-85b5-a2c9ffe9e89b") as case:

        with step("[Action] Select timeline track (1) and set timecode ('00_00_10_07') at main page"):
            main_page.timeline_select_track(1)
            main_page.set_timeline_timecode('00_00_10_07')

        with step("[Action] Enter [Color Boards] in Media Room"):
            media_room_page.enter_color_boards()

        with step("[Action] Modify [Color Board] Color to ('F2E0B7') in Media Room"):
            media_room_page.library_menu_new_color_board(hex_color='F2E0B7')
            time.sleep(DELAY_TIME*2)

        with step("[Verify] Check preview as GT (L37.png)"):
            preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L37.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L37.png', preview, similarity=0.95)
            assert check_preview, "Preview does not match GT (L37.png)! Similarity should > 0.95"

    @pytest.mark.media_room_func
    @pytest.mark.color_board
    @pytest.mark.name('[test_media_room_func_2_29] Insert Media, Change Color, and Verify Preview')
    @exception_screenshot
    def test_media_room_func_2_29(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Insert media to selected track and screenshot (locator=main_page.area.preview.main)
        2. Click [Change Color] button in [Tips Area] and change color to ('882ECC')
        3. Check Preview is updated after changed color (Similarity=0.98)
        '''
        dependency_test = "test_media_room_func_2_28"
        self.ensure_dependency(dependency_test)

        # [L39] 2.1 Media Room > Color Board > Insert to timeline and change color
        # with uuid("5e96c098-f404-4992-bae7-3b946d2927b5") as case:

        with step("[Action] Insert media to selected track and take a screenshot"):
            main_page.tips_area_insert_media_to_selected_track()
            initial_preview = main_page.snapshot(locator=main_page.area.preview.main)
            check_custom_color = main_page.compare(Ground_Truth_Folder + 'L37.png', initial_preview)
            if not check_custom_color:
                assert False, "Preview does not match GT (L37.png)! Similarity should > 0.95"


        with step("[Action] Click [Change Color] button in [Tips Area] and change color to ('882ECC')"):
            tips_area_page.click_TipsArea_btn_ChangeColor('882ECC')

        with step("[Verify] Check Preview is updated after changed color (Similarity=0.98)"):
            updated_preview = main_page.snapshot(locator=main_page.area.preview.main)
            check_preview = main_page.compare(initial_preview, updated_preview, similarity=0.98)
            assert not check_preview, "Preview did not update after changing color! Similarity should < 0.98"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.gradient_color
    @pytest.mark.save_template
    @pytest.mark.name('[test_media_room_func_2_30] Set Gradient Color, Save Template, and Verify Preview')
    @exception_screenshot
    def test_media_room_func_2_30(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Set [Gradient Color] to (hex_color='7028E1')
        2. Set template name ('custom_purple') when saving template
        3. Check preview (locator=main_page.area.preview.main) as GT (Ground_Truth_Folder + 'L38.png')(Similarity=0.95)
        '''
        dependency_test = "test_media_room_func_2_29"
        self.ensure_dependency(dependency_test)

        # [L38] 2.1 Media Room > Color Board > Gradient color
        # with uuid("894866e2-b166-4edd-baff-ea6e9b856207") as case:

        with step("[Action] Set [Gradient Color] to ('7028E1')"):
            media_room_page.library_menu_new_gradient_color('7028E1')

        with step("[Action] Set template name ('custom_purple') when saving template"):
            title_designer_page.click_custom_name_ok('custom_purple')

        with step("[Verify] Check Preview is updated as GT (L38.png) (Similarity=0.95)"):
            preview_snapshot = main_page.snapshot(locator=main_page.area.preview.main)
            check_preview = main_page.compare(Ground_Truth_Folder + 'L38.png', preview_snapshot, similarity=0.95)
            if not check_preview:
                assert False, "Preview does not match GT (L38.png)! Similarity should > 0.95"
        assert True

    @pytest.mark.media_room_func
    @pytest.mark.color_board
    @pytest.mark.gradient_color
    @pytest.mark.name('[test_media_room_func_2_31] Insert Color Board, Change Gradient, and Verify Preview')
    @exception_screenshot
    def test_media_room_func_2_31(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Select 2nd color board by clicking (L.media_room.library_listview.unit_collection_view_item_second)
        2. Right click and Select right click menu ('Insert on Selected Track')
        3. Check preview (locator=main_page.area.preview.main) as GT (Ground_Truth_Folder + 'L38.png')(Similarity=0.95)
        4. Click [Change Color] by clicking (L.tips_area.button.btn_change_color)
        5. Handle Color Gradient to ('2DB727')
        6. Check preview (locator=main_page.area.preview.main) is updated (Similarity=0.9999)
        '''
        dependency_test = "test_media_room_func_2_30"
        self.ensure_dependency(dependency_test)

        # [L40] 2.1 Media Room > Color Board > Insert to timeline and change color
        # with uuid("db6ad390-d4fd-4758-ab3a-f0ba4fbf89bc") as case:

        with step("[Action] Select 2nd color board and insert on selected track"):
            main_page.click(L.media_room.library_listview.unit_collection_view_item_second)
            main_page.right_click()
            main_page.select_right_click_menu('Insert on Selected Track')

        with step("[Verify] Check Preview is updated as GT (L38.png) (Similarity=0.95)"):
            preview_snapshot = main_page.snapshot(locator=main_page.area.preview.main)
            check_preview = main_page.compare(Ground_Truth_Folder + 'L38.png', preview_snapshot, similarity=0.95)
            if not check_preview:
                assert False, "Preview does not match GT (L38.png)! Similarity should > 0.95"

        with step("[Action] Click [Change Color] button"):
            main_page.click(L.tips_area.button.btn_change_color)

        with step("[Action] Handle Color Gradient to ('2DB727')"):
            media_room_page.handle_color_gradient('2DB727')

        with step("[Verify] Check Preview is updated after changing color gradient (Similarity=0.9999)"):
            final_preview_snapshot = main_page.snapshot(locator=main_page.area.preview.main)
            final_check_preview = main_page.compare(preview_snapshot, final_preview_snapshot, similarity=0.9999)
            if final_check_preview:
                assert False, "Preview did not update correctly after changing color gradient! Similarity should < 0.9999"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.play_video
    @pytest.mark.content_pack
    @pytest.mark.name('[test_media_room_func_2_32] Play Downloaded Media and Verify Preview')
    @exception_screenshot
    def test_media_room_func_2_32(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Enter [Download] Category in Media Room
        2. Select media ('487360077_fhd') by library icon view and Press [Space] key
        3. Check if the preview window (main_page.area.preview.main, sec=5) is different when playing
        '''
        dependency_test = "test_media_room_func_2_31"
        self.ensure_dependency(dependency_test)


        # [L45] 2.1 Media Room > Downloaded > Downloaded file display correctly
        # with uuid("78cdbc6d-29f5-49f6-ade7-0ace8a99fa93") as case:

        with step("[Action] Enter [Download] Category in Media Room"):
            media_room_page.enter_downloaded()

        with step("[Action] Select media '487360077_fhd' and press [Space] key to play"):
            # the media is downloaded in test_media_room_func_2_13
            main_page.select_library_icon_view_media('466024610_fhd')
            main_page.press_space_key()

        with step("[Verify] Check if preview window is different when playing (sec=5)"):
            preview_changed = main_page.Check_PreviewWindow_is_different(area=main_page.area.preview.main, sec=5)
            if not preview_changed:
                assert False, "Preview did not update when playing media! It should change within 5 seconds."

        assert True


    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.my_project
    @pytest.mark.name('[test_media_room_func_2_33] Enter My Project and Select Media')
    @exception_screenshot
    def test_media_room_func_2_33(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter [My Project]
        2. Select media ('can_del') by library icon view and check result
        """
        dependency_test = "test_media_room_func_2_32"
        self.ensure_dependency(dependency_test)

        # [L46] 2.1 Media Room > My Project > Open / Save project > Show project thumb after save project
        # with uuid("9bec537a-3428-418f-bedb-c1dc1d023bcd") as case:
        with step('[Action] Enter My Project'):
            project_room_page.enter_project_room()

        with step('[Action] Select media "can_del" by library icon view and check result'):
            result = main_page.select_library_icon_view_media("can_del")
            if not result:
                assert False, "Failed to select media 'can_del' by library icon view"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.my_project
    @pytest.mark.file_location
    @pytest.mark.name('[test_media_room_func_2_34] Select media and open file location from context menu')
    @exception_screenshot
    def test_media_room_func_2_34(self):
        """
        0. Ensure the dependency test is run and passed
        1. Select media ('can_del') by library icon view
        2. Open [File Location] from [Library Clip] context menu by right click
        """
        dependency_test = "test_media_room_func_2_33"
        self.ensure_dependency(dependency_test)

        # [L48] 2.1 Media Room > My Project > Context menu > Open file location correctly
        # with uuid("c7470b6b-7f32-4a85-a838-4c29056f3f62") as case:

        with step('[Action] Select media "can_del" by library icon view'):
            result = main_page.select_library_icon_view_media("can_del")
            if not result:
                assert False, "Failed to select media 'can_del' by library icon view"

        with step('[Action] Open [File Location] from [Library Clip] context menu by right click'):
            result = media_room_page.library_clip_context_menu_open_file_location()
            if not result:
                assert False, "Failed to open [File Location] from [Library Clip] context menu by right click"

        assert True

    @pytest.mark.media_room_func
    @pytest.mark.media_room
    @pytest.mark.my_project
    @pytest.mark.name('[test_media_room_func_2_35] Select media and remove clip')
    @exception_screenshot
    def test_media_room_func_2_35(self):
        """
        0. Ensure the dependency test is run and passed
        1. Select media ('can_del') by library icon view
        2. Right click and select_right_click_menu('Remove')
        """
        dependency_test = "test_media_room_func_2_34"
        self.ensure_dependency(dependency_test)

        # [L50] 2.1 Media Room > My Project > Context Menu > Delete project
        # with uuid("992029d0-3f9e-4b72-b97a-ee36040ad761") as case:

        with step('[Action] Select media "can_del" by library icon view'):
            result = main_page.select_library_icon_view_media("can_del")
            if not result:
                assert False, "Failed to select media 'can_del' by library icon view"

        with step('[Action] Right click and select "Remove" from right click menu'):
            main_page.right_click()
            remove_selected = main_page.select_right_click_menu("Remove")
            if not remove_selected:
                assert False, "Failed to select 'Remove' from right click menu"

        assert True


    @pytest.mark.media_room_func
    @pytest.mark.timeline
    @pytest.mark.clip_marker
    @pytest.mark.name('[test_media_room_func_2_36] Remove All Clip Markers and Save Project')
    @exception_screenshot
    def test_media_room_func_2_36(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Select Timeline media ('Y man') and screenshot (locator=L.library_preview.upper_view_region)
        2. Right click and select_right_click_menu('Clip Marker', 'Remove All Clip Markers')
        3. Check preview is updated (Similarity=0.99)
        4. Save the Project as (name="test_media_room_func_2_36", folder_path=Test_Material_Folder + 'BFT_21_Stage1/')
        '''
        dependency_test = "test_media_room_func_2_35"
        self.ensure_dependency(dependency_test)

        with step("[Action] Select Timeline media 'Y man' and take a screenshot"):
            main_page.select_timeline_media('Y man')
            initial_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)

        with step("[Action] Right click and select 'Remove All Clip Markers'"):
            main_page.right_click()
            main_page.select_right_click_menu('Clip Marker', 'Remove All Clip Markers')

        with step("[Verify] Check preview is updated (Similarity=0.99)"):
            updated_preview = main_page.snapshot(locator=L.library_preview.upper_view_region)
            if not main_page.compare(initial_preview, updated_preview, similarity=0.99):
                assert False, "Preview did not update after removing all clip markers! Similarity should > 0.99"

        with step("[Action] Save the project as 'test_media_room_func_2_36'"):
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name="test_media_room_func_2_36",
                                          folder_path=Test_Material_Folder + 'BFT_21_Stage1/')

        assert True

    #  18 uuid
    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.launch
    @pytest.mark.content_pack
    @pytest.mark.name('[test_intro_room_func_3_1] Enter Video Intro and select favorite template to enter designer')
    @exception_screenshot
    def test_intro_room_func_3_1(self):
        '''
        1. Enter Video Intro Room from Launcher
        2. Select favorite template
        3. Double click to enter designer
        '''
        # launch APP
        if not main_page.start_app() or not main_page.is_app_exist():
            assert False, "Launch APP failed!"


        # [L111] 3.1 Video Intro Designer > Modify template > From Favorites
        # with uuid("e5d5704c-a66b-410f-8ec0-8e93053ee302") as case:

        # enter Video Intro Room > My Favorites category
        intro_video_page.enter_intro_video_room()
        # time.sleep(DELAY_TIME * 6)
        if not intro_video_page.enter_my_favorites():
            assert False, "Enter My Favorites failed!"

        # select 1st template
        intro_video_page.select_intro_template_method_2(1)

        # Double click to enter designer
        with step("[Action] Double click to enter designer"):
            main_page.double_click()

        with step("[Verify] Check if intro video designer is shown"):
            assert main_page.exist(L.intro_video_room.intro_video_designer.main_window, timeout=15), "Intro video designer not found!"

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.timeline
    @pytest.mark.name('[test_intro_room_func_3_2] Check preview intro video by Play/Pause/Stop/Enter timecode')
    @exception_screenshot
    def test_intro_room_func_3_2(self):
        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_1"
        self.ensure_dependency(dependency_test)

        # [L112] 3.1 Video Intro Designer > Preview template
        # with uuid("2efc9aa9-0f89-4f28-a1cf-1a1181d52f8e") as case:
        img_before = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
        time.sleep(DELAY_TIME)
        with step("[Action] Click [Play] to play the intro video"):
            intro_video_page.click_preview_operation('Play')
        time.sleep(DELAY_TIME * 2)
        with step("[Action] Click [Pause] to pause the intro video"):
            intro_video_page.click_preview_operation('Pause')

        with step("[Verify] Check if preview changed after Play/Pause the video"):
            # Verify step 1: Check preview
            img_after = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
            designer_preview_result = main_page.compare(img_before, img_after, similarity=1)

        with step("[Action] Click [Stop] to stop the intro video"):
            # Verify step 2: Check timecode
            intro_video_page.click_preview_operation('Stop')
            time.sleep(DELAY_TIME)

        with step("[Verify] Check if timecode is 00:00 after stop the video"):
            stop_timecode = intro_video_page.get_designer_timecode()

            if (stop_timecode == '00:00'):
                timocode_check = True
            else:
                logger('Verify FAIL')
                timocode_check = False
        
        assert not designer_preview_result and timocode_check, f"Preview intro video failed!, Play/Pause={not designer_preview_result}, stop={timocode_check}"

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.duration
    @pytest.mark.name('[test_intro_room_func_3_3] Set Duration time')
    @exception_screenshot
    def test_intro_room_func_3_3(self):
        '''
        1. Check default duration is 7 seconds
        2. Set new duration to 9 seconds
        3. Check new duration is 9 seconds
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_2"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            with step(f"[Initial] Set up initialized status"):
                self.test_intro_room_func_3_1()


        # [L113] 3.1 Video Intro Designer > Edit > Change template duration
        # with uuid("dad38202-8be2-45d8-a38a-aca3df0831d6") as case:
        if not intro_video_page.click_duration_btn():
            assert False, "Click duration button failed!"

        # Get default duration
        with step("[Verify] Check default duration is 7 seconds"):
            result = intro_video_page.duration_setting.get_org_duration()
            if result != '7 seconds':
                default_duration = False
            else:
                default_duration = True

        # Change duration
        if not intro_video_page.duration_setting.set_new_duration(9):
            assert False, "Set new duration failed!"

        with step("[Verify] Check default duration is 9 seconds"):
            get_value = intro_video_page.duration_setting.get_new_duration()

            # Current INT should transfer to String
            if get_value != '9':
                set_result = False
            else:
                set_result = True

        intro_video_page.duration_setting.click_OK()

        assert default_duration and set_result, f"Duration time error! Default duration={default_duration}, set new duration={set_result}"

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.replace_media
    @pytest.mark.color_board
    @pytest.mark.name('[test_intro_room_func_3_4] Replace Background Media > Use a Color Board > Check color code')
    @exception_screenshot
    def test_intro_room_func_3_4(self):
        '''
        1. Click [Replace Background Media] > Use a Color Board
        2. Set color to #7B17FF
        3. Check if color changed as expected
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_3"
        self.ensure_dependency(dependency_test)

        # [L116] 3.1 Video Intro Designer > Edit > Replace master video correctly from Color Board
        # with uuid("71de433f-e2cd-465d-b13d-4504f2263308") as case:

        # Click [Replace Background Media] > Use a Color Board
        intro_video_page.click_replace_media(3)
        self._set_color('7B17FF')

        with step("[Verify] Check if color changed as expected"):
            # Verify Step
            intro_video_page.click_replace_media(3)
            check_current_RBG = self._get_color()
            if check_current_RBG == '7B17FF':
                assert True, "Color changed as expected!"
            else:
                assert False, "Color changed failed!"

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.replace_media
    @pytest.mark.color_board
    @pytest.mark.name('[test_intro_room_func_3_5] Replace Background Media > Use a Color Board > Check Preview')
    @exception_screenshot
    def test_intro_room_func_3_5(self):
        '''
        1. Click [Replace Background Media] > Use a Color Board
        2. Set color to #95C029
        3. Check if preview changed after modified color again
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_4"
        self.ensure_dependency(dependency_test)

        # [L315] 3.1 Video Intro Designer > Edit > Add Color Board (Able to modify setting for color board)
        # with uuid("59f54e15-0b43-4b7e-8e2b-3f00ddfb41b7") as case:

        intro_video_page.click_replace_media(3)
        img_7B17FF = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
        self._set_color('95C029')

        img_95C029 = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)

        with step("[Verify] Check if preview changed after modified color again"):
            designer_preview_result = main_page.compare(img_7B17FF, img_95C029, similarity=0.98)
            assert not designer_preview_result, "Preview is not change after modified color again! Similarity should<0.98"

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.replace_media
    @pytest.mark.import_media
    @pytest.mark.name('[test_intro_room_func_3_6] Replace Background Media > Use a Local Content > Modify Position > Check Preview')
    @exception_screenshot
    def test_intro_room_func_3_6(self):
        '''
        1. Click [Replace Background Media] > Use a Local Content
        2. Select a local content
        3. Check if replace media with local content successfully
        4. Remove yellow MGT and Color board
        5. Move Sticker to down
        6. Check if preview changed correctly after modified
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_5"
        self.ensure_dependency(dependency_test)

        # [L306] 3.1 Video Intro Designer > Edit > Replace master video from local content
        # with uuid("6e03aff5-5870-41fc-add3-a2358348a59a") as case:
        intro_video_page.click_replace_media(1)
        if not main_page.select_file(Test_Material_Folder + 'Produce_Local/Produce_G367.mkv'):
            assert False, "Select file in file picker failed!"

        with step("[Verify] Check if replace media with local content successfully"):
            if not main_page.exist(L.trim.main_window, timeout=10):
                assert False, "Replace media with local content failed!"

        with step("[Action] Press Trim buton to apply effect"):
            time.sleep(DELAY_TIME)
            main_page.click(L.trim.btn_OK)
            time.sleep(DELAY_TIME * 5)

        # Remove yellow MGT and Color board
        for _ in range(2):
            intro_video_page.click_preview_center()
            intro_video_page.motion_graphics.click_remove_button()
            time.sleep(DELAY_TIME*2)

        # move Sticker (Pip_10_00000) to down
        intro_video_page.move_preview_object_to_down()

        # Leave edit mode
        intro_video_page.cancel_selection_button()
        time.sleep(DELAY_TIME)

        with step("[Verify] Check if preview changed correctly after modified"):
            current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area,
                                                        file_name=Auto_Ground_Truth_Folder + 'I114.png')
            check_result = main_page.compare(Ground_Truth_Folder + 'I114.png', current_image)

            assert check_result, "Preview is not change after modified! Similarity should> 0.95"

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.pip_object
    @pytest.mark.LUT
    @pytest.mark.content_pack
    @pytest.mark.name('[test_intro_room_func_3_7] Add/ Move Pip Object > Apply LUT Template')
    @exception_screenshot
    def test_intro_room_func_3_7(self):
        '''
        1. Add a pip object and check preivew
        2. Move pip object to left upper and check preview
        3. Apply LUT template and check preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_6"
        self.ensure_dependency(dependency_test)

        # # [L124] 3.1 Video Intro Designer > Edit > Add sticker
        # with uuid("f4df2783-70c0-4745-9d5c-fadc90167b44") as case:
        #     with uuid("8c048835-df6d-4d2a-af28-4fdba6c2a2ad") as case:
            # [L124] Click (Add sticker)


        with step("[Action] Add a pip object (sticker) and check preview changed correctly"):
            before_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
            intro_video_page.click_add_pip_object()

            # Video Overlay Room
            if not intro_video_page.select_pip_template(5, 'Travel'):
                assert False, "Select pip template failed!"
            time.sleep(DELAY_TIME*5)
            after_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
            with step("[Verify] Check if preview changed correctly after add a pip object"):
                if main_page.compare(before_image, after_image): # Expected is return False
                    assert False, "Preview not changed after add a pip object!"

        with step("[Action] Move Sticker to left upper and check if preview chanaged correctly"):
            before_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
            # move Sticker to left upper
            if not intro_video_page.move_preview_object_to_left_upper(x_threshold=0.5):
                assert False, "Move Sticker to left upper failed!"

            with step("[Verify] Check if preview changed correctly after moved a pip object"):
                after_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
                if main_page.compare(before_image, after_image): # Expected is return False
                    assert False, "Preview not changed after moved a pip object!"

        # Leave edit mode
        intro_video_page.cancel_selection_button()
        time.sleep(DELAY_TIME)


        with step("[Action] Apply LUT template and check preview changed correctly"):
            before_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
            # [L123] 3.1 Video Intro Designer > Edit > Apply LUT
            if not intro_video_page.click_LUT_btn():
                assert False, "Click LUT button failed!"

            with step("[Verify] Check if LUT window is shown"):
                elem = L.intro_video_room.intro_video_designer.color_filter_window.combobox_category
                if not main_page.exist(elem).AXTitle == 'Color LUT':
                    assert False, "LUT window not found!"

            if not intro_video_page.color_filter.select_LUT_template(4, 'Urban Minimalist'):
                assert False, "Select LUT template failed!"

            # Verify Step
            with step("[Verify] Check if LUT template is applied correctly with GT"):
                # Change compare with GT to compare preview changed or not due to highly changing frequency of added content package
                # current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area,
                #                                             file_name=Auto_Ground_Truth_Folder + 'I123.png')
                # check_result = main_page.compare(Ground_Truth_Folder + 'I123.png', current_image)
                after_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
                if main_page.compare(before_image, after_image, similarity=1): # Expected is return False
                    assert False, "Preview not changed after applied LUT template!"

        # Close (Color Filter) window
        if not intro_video_page.color_filter.close_x():
            assert False, "Close LUT window failed!"

        assert True

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.text
    @pytest.mark.name('[test_intro_room_func_3_8] Add Text > Enable Backdrop Function > Set Backdrop Type to Rounded Rectangle')
    @exception_screenshot
    def test_intro_room_func_3_8(self):
        '''
        1. Add text
        2. Enable backdrop function
        3. Set backdrop type to Rounded Rectangle
        4. Check if backdrop type is set correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_7"
        self.ensure_dependency(dependency_test)

        # [L119] 3.1 Video Intro Designer > Edit > Add general title
        # with uuid("b0027c68-672d-416d-a969-aa875ddaae46") as case:
        if not intro_video_page.click_add_text(1):
            assert False, "Click Add Text with option 'Add Text' failed!"
        
        with step("[Action] Enable backdrop function"):
            # Enable backdrop
            intro_video_page.general_title.click_backdrop_button()
            intro_video_page.backdrop_settings.enable_backdrop()
            
        if not intro_video_page.backdrop_settings.set_type(2, 4):
            assert False, "Set backdrop type failed!"

        with step("[Verify] Check if backdrop type is set correctly"):
            check_type = intro_video_page.backdrop_settings.get_fit_backdrop_status()
            if check_type != 'Rounded Rectangle':
                assert False, "Backdrop type is not set correctly, Expected is 'Rounded Rectangle'!"

        # Leave edit mode
        intro_video_page.cancel_selection_button()

        assert True

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.import_media
    @pytest.mark.stock_media
    @pytest.mark.name('[test_intro_room_func_3_9] Replace Background Media > Use a Stock Media > Check Preview')
    @exception_screenshot
    def test_intro_room_func_3_9(self):
        '''
        1. Replace media from iStock(Video)
        2. Check if replace media with SS content successfully
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_8"
        self.ensure_dependency(dependency_test)

        # [L115] 3.1 Video Intro Designer > Edit > Download and replace master video correctly form SS
        # with uuid("73912396-9399-463e-8fde-9e4e5c68b91e") as case:
        
        # Replace media from Shutterstock(Video)
        # 2023/05/04 modify: Replace media from iStock(Video)

        current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)

        intro_video_page.click_replace_media(2)
        # time.sleep(DELAY_TIME * 6)
        getty_image_page.handle_what_is_stock_media()
        #getty_image_page.switch_to_SS()
        # time.sleep(DELAY_TIME * 6)

        download_from_ss_page.search.search_text('crowned crane to walk')
        # time.sleep(DELAY_TIME * 6)
        download_from_ss_page.video.select_thumbnail_for_video_intro_designer(5)


        for _ in range(40):
            if main_page.exist(L.media_room.confirm_dialog.btn_no):
                media_room_page.handle_high_definition_dialog(option='no')
                time.sleep(DELAY_TIME*3)
                break
            else:
                time.sleep(DELAY_TIME)

        # Verify : If pop up Trim window, Press ESC to leave Trim window
        with step("[Action] Press ESC to leave Trim window if window shows"):
            if main_page.exist(L.trim.main_window, timeout=6):
                main_page.press_esc_key()
                time.sleep(DELAY_TIME * 2)
        
        with step("[Verify] Check if replace media with SS content successfully"):
            img_updated = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
            check_SS_result = main_page.compare(current_image, img_updated)
            assert not check_SS_result, "Replace media with SS content failed!"

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.text
    @pytest.mark.name('[test_intro_room_func_3_10] Add Motion Graphics Template')
    @exception_screenshot
    def test_intro_room_func_3_10(self):
        '''
        1. Add MGT template (Motion Graphics Template)
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_9"
        self.ensure_dependency(dependency_test)

        # [L120] 3.1 Video Intro Designer > Edit > Add MGT
        # with uuid("4c6d937b-e72a-4ed9-852c-2c1134cb7812") as case:
        intro_video_page.click_add_text(2)
        time.sleep(DELAY_TIME * 3)

        # Insert Speech bubble 01
        assert intro_video_page.motion_graphics.select_template(1, category=5), "Select MGT template failed!"

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.text
    @pytest.mark.layer_order
    @pytest.mark.name('[test_intro_room_func_3_11] Change layer order')
    @exception_screenshot
    def test_intro_room_func_3_11(self):
        '''
        1. Change layer order
        2. Check if layer order changed correctly on preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_10"
        self.ensure_dependency(dependency_test)

        # [L125] 3.1 Video Intro Designer > Edit > Change layer order
        # with uuid("963f4ce6-e3b2-46c7-9bdd-3aa36c1fd0bd") as case:

        with step("[Action] Change layer order"):
            time.sleep(DELAY_TIME * 3) # wait for loading
            before_img = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
            intro_video_page.click_layer_order(4)
            time.sleep(DELAY_TIME)
            intro_video_page.cancel_selection_button()
            time.sleep(DELAY_TIME)
        
            with step("[Verify] Check if layer order changed correctly on preview"):
                # Change compare with GT to compare preview changed or not due to highly changing frequency of added content package
                # current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area,
                #                                             file_name=Auto_Ground_Truth_Folder + 'I125.png')
                # check_result = main_page.compare(Ground_Truth_Folder + 'I125.png', current_image)
                after_img = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
                check_result = main_page.compare(before_img, after_img, similarity=0.98) # should return False
                assert not check_result, "Change layer order failed! Similarity should< 0.98"

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.crop
    @pytest.mark.name('[test_intro_room_func_3_12] Crop the layer to small')
    @exception_screenshot
    def test_intro_room_func_3_12(self):
        '''
        1. Click [Crop] button
        2. Resize to small
        3. Check if preview changed after crop
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_11"
        self.ensure_dependency(dependency_test)

        # [L117] 3.1 Video Intro Designer > Edit > Crop
        # with uuid("9d046ecb-a8ac-4339-9355-3f25d5b77d84") as case:

        current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
        # Click crop
        if not intro_video_page.click_crop_btn():
            assert False, "Click crop button failed!"

        # Resize to small
        with step("[Action] Resize to small and apply effect"):
            intro_video_page.crop_zoom_pan.resize_to_small()
            intro_video_page.crop_zoom_pan.leave_crop('Yes')

        with step("[Verify] Check if preview changed after crop"):
            time.sleep(DELAY_TIME*2) # wait applying effect completed
            img_cancel_crop = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)

            check_result = main_page.compare(current_image, img_cancel_crop, similarity=0.99)
            assert not check_result, "Crop effect failed! Similarity should<0.99"

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.import_media
    @pytest.mark.in_animation
    @pytest.mark.name('[test_intro_room_func_3_13] Add/ Move Image > Apply In Animation Effect > Check Preview')
    @exception_screenshot
    def test_intro_room_func_3_13(self):
        '''
        1. Add image to review and move to right upper
        2. Apply in_animation effect
        3. Check if preview changed after add animation
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_12"
        self.ensure_dependency(dependency_test)

        # [L121] 3.1 Video Intro Designer > Edit > Add image
        # with uuid("59ddae48-a065-48f3-a593-06cbf725c81f") as case:

        with step("[Action] Add image to preview area for applying in animation"):

            intro_video_page.click_add_image(1)
            
            main_page.select_file(Test_Material_Folder + 'fix_enhance_20/colorful.jpg')

            # move image to right > up
            time.sleep(DELAY_TIME)
            intro_video_page.move_preview_object_to_right_upper()

        with step("[Action] Apply in_animation effect"):
            # Add animation
            if not intro_video_page.image.click_animation_btn():
                assert False, "Click animation button failed!"

            # Unfold
            intro_video_page.image.in_animation.unfold_setting(1)

            # Select template
            check_image_result = intro_video_page.image.in_animation.select_template('Blizzard')
            if not check_image_result:
                assert False, "Select animation template failed!"
        

        # Verify Step
        with step("[Verify] Check if preview changed after add animation"):
            time.sleep(DELAY_TIME) # wait applying effect completed
            after_add_photo = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)

            # Set Video Intro timecode: 01:15
            intro_video_page.set_designer_timecode('01_15')
            time.sleep(DELAY_TIME)

            check_animation = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
            check_result = main_page.compare(after_add_photo, check_animation, similarity=0.98)
            assert not check_result, "Add animation effect failed! Similarity should<0.98"

        # [L319] 3.1 Video Intro Designer > Edit > Add BGM
        # 2023/05/05 update: Skip this case << Download from Meta / Shutterstock (Music) >>

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.save_template
    @pytest.mark.timeline
    @pytest.mark.name('[test_intro_room_func_3_14] Save/ Apply the template')
    @exception_screenshot
    def test_intro_room_func_3_14(self):
        '''
        1. Save template as stage_1
        2. Select saved template and apply
        3. Check if preview changed after play the video
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_13"
        self.ensure_dependency(dependency_test)

        # [L322] 3.1 Video Intro Designer > Save Template
        # with uuid("3049da80-c0d6-40f7-86db-e317ef278b7b") as case:

        with step('[Action] Save Template as stage_1'):        
            if not intro_video_page.click_btn_save_as('stage_1'):
                assert False, "Save template failed!"

        with step('[Action] Select saved template'):
            # Enter (Save Templates)
            if not intro_video_page.enter_saved_category(): assert False, "Enter saved category failed!"
            intro_video_page.select_intro_template_method_2(1)
            with step('[Action] Double click to select the template'):
                main_page.double_click()
            time.sleep(DELAY_TIME*3)

        # Already checked applied effect in previous test, no need to check it again
        # with step('[Verify] Check if the template is loaded correctly by GT'):
        #     # Verify Step 1: Check preview
        #     current_image = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area,
        #                                             file_name=Auto_Ground_Truth_Folder + 'I129.png')
        #     check_result = main_page.compare(Ground_Truth_Folder + 'I129.png', current_image)

        #     if not check_result:
        #         assert False, "Template is not loaded correctly by GT! Similarity should>0.95"

        with step('[Verify] Check if preview changed after play the video'):
            
            intro_video_page.set_designer_timecode('00_01')
            time.sleep(DELAY_TIME)
            with step('[Action] Play the video'):
                main_page.press_space_key()
                before_img = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)
            time.sleep(DELAY_TIME * 4)
            with step('[Action] Pause the video'):
                main_page.press_space_key()
                after_img = intro_video_page.snapshot(locator=L.intro_video_room.intro_video_designer.preview_area)

            check_result = main_page.compare(before_img, after_img, similarity=0.99) # Expected is return False
            if check_result:
                assert False, "Template is changed after play the video! Similarity should<0.99"
        assert True

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.text
    @pytest.mark.name('[test_intro_room_func_3_15] Move object to right upper > Edit text to Swimming ring > Share template')
    @exception_screenshot
    def test_intro_room_func_3_15(self):
        '''
        1. Move object to right upper
        2. Edit text to Swimming ring
        3. Share template
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_14"
        self.ensure_dependency(dependency_test)

        # [L128] 3.1 Video Intro Designer > Share after modify
        # with uuid("94ed80fa-11d3-4b2f-a414-dbcd960110e8") as case:

        with step('[Action] Move object to right upper'):
            # Modify step: Drag (photo) to lower position
            intro_video_page.hover_preview_center()
            main_page.right_click()
            intro_video_page.move_preview_object_to_right_upper(y_threshold=0.6)

        with step('[Action] Edit text to Swimming ring'):
            # Edit General title to Swimming ring
            intro_video_page.hover_preview_center(y_threshold=0.5)
            main_page.double_click()
            main_page.input_text('Swimming ring')
            # Leave (Edit mode)
            intro_video_page.cancel_selection_button()


        with step('[Action] Share template'):
            # Share template step:
            # Click [Share Template] button
            if not intro_video_page.click_btn_share_template('pink swimming ring'):
                assert False, "Click Share Template failed!"

            # Confirm Copyright Disclaimer
            if not intro_video_page.share_temp.click_confirm():
                assert False, "Click Confirm failed!"

            # Input 'Have a nice day' then click share
            share_result = intro_video_page.share_temp.click_share()
            assert share_result, "Share template failed!"

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.template
    @pytest.mark.shared_template
    @pytest.mark.save_project
    @pytest.mark.title_designer
    @pytest.mark.name('[test_intro_room_func_3_16] Add modified video intro to timeline > Save project > Remove shared template')
    @exception_screenshot
    def test_intro_room_func_3_16(self):
        '''
        1. Add modified video intro to timeline
        2. Check if video intro is added to timeline by warning message
        3. Check if video intro is added to timeline by GT
        4. Save the project
        5. Remove shared template
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_intro_room_func_3_15"
        self.ensure_dependency(dependency_test)

        # [L130] 3.1 Video Intro Designer > Add to timeline
        # with uuid("6ba6a1b7-3d61-43fd-97b8-17b5865d7d5a") as case:

        with step('[Action] Add modified video intro to timeline'):
            intro_video_page.click_btn_add_to_timeline()
            time.sleep(DELAY_TIME * 3)


        with step('[Verify] Check if video intro is added to timeline by warning message'):
            # Verify Step1 : Check (OH MINE) MGT is in Video track 2
            timeline_operation_page.select_timeline_media(track_index=2, clip_index=0)
            with step('[Action] Double click on clip to open title designer'):
                main_page.double_click()
            if not title_designer_page.mgt.handle_warning_msg(tick_option=0):
                assert False, "Warning message not found!"

            if not title_designer_page.mgt.click_warning_msg_ok():
                assert False, "Click OK on warning message failed!"


        with step('[Verify] Check if video intro is added to timeline by GT'):
            # Verify Step 2: Check preview
            title_designer_page.set_timecode('00_00_08_00')
            current_image = intro_video_page.snapshot(locator=L.title_designer.area.window_title_designer,
                                                        file_name=Auto_Ground_Truth_Folder + 'I130.png')
            check_result = main_page.compare(Ground_Truth_Folder + 'I130.png', current_image)

            # press ESC to leave title designer
            main_page.press_esc_key()

            if not check_result:
                assert False, "Video intro is not added to timeline by GT! Similarity should>0.95"

        with step('[Action] Save the project'):
            # Save project:
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_intro_room_func_3_16',
                                                folder_path=Export_Folder + 'BFT_21_Stage1/')
            time.sleep(DELAY_TIME * 8)

        # Remove (share Video Intro template)
        # If share successfully, then delete template
        with step('[Action] Remove shared template'):
            # Open (My Profile)
            intro_video_page.enter_my_profile()
            intro_video_page.my_profile.delete_1st_template()
            time.sleep(DELAY_TIME*2) # wait until delete completed
            # close (My Profile)
            main_page.press_esc_key()

    @pytest.mark.intro_room_func
    @pytest.mark.launch
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @pytest.mark.name('[test_intro_room_func_3_17] Check preview update after selecting Beauty category and intro template')
    @exception_screenshot
    def test_intro_room_func_3_17(self):
        """
        1. Restart APP
        2. Open packed project ('Packed_Project/test_intro_room_func_3_17_from_test_media_room_func_2_36.pdk', 'Extracted_Folder/test_intro_room_func_3_17')
        3. Enter Intro Video Room > Click specific category with name 'Beauty' > Screenshot (locator=main_page.area.preview.main)
        4. Select Intro Template with method 2 with index 2
        5. Check preview is updated correctly (Similarity=0.98)
        """
        # [L58] 2.2 Intro Video Room > Template display
        # with uuid("5656c3b0-9b2b-499a-bc27-f134bba2dc51") as case:

        with step('[Action] Restart APP'):
            main_page.close_and_restart_app()

        with step('[Action] Open packed project'):
            self.open_packed_project("Packed_Project/test_intro_room_func_3_17_from_test_media_room_func_2_36.pdk",
                                    "Extracted_Folder/test_intro_room_func_3_17")

        with step('[Action] Enter Intro Video Room, click specific category "Beauty" and capture preview screenshot'):
            intro_video_page.enter_intro_video_room()
            intro_video_page.click_intro_specific_category("Beauty")
            before_preview = main_page.snapshot(locator=main_page.area.preview.main)

        with step('[Action] Select Intro Template with method 2 with index 2'):
            intro_video_page.select_intro_template_method_2(2)

        with step('[Verify] Check preview is updated correctly'):
            new_preview = main_page.snapshot(locator=main_page.area.preview.main)
            # Similarity should be less than 0.98 indicating the preview has changed
            if main_page.compare(before_preview, new_preview, similarity=0.98):
                assert False, "Preview is not updated correctly! Similarity should < 0.98"

        assert True

    @pytest.mark.intro_room_func
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @pytest.mark.name('[test_intro_room_func_3_18] Check preview update after selecting Health category and intro template')
    @exception_screenshot
    def test_intro_room_func_3_18(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click specific category with name ('Health') > Screenshot (locator=main_page.area.preview.main)
        2. Select Intro Template with method 2 with index (10)
        3. Check preview is updated correctly (Similarity=0.98)
        """
        dependency_test = "test_intro_room_func_3_17"
        self.ensure_dependency(dependency_test)

        with step('[Action] Click specific category "Health" and capture preview screenshot'):
            intro_video_page.click_intro_specific_category("Health")
            initial_preview = main_page.snapshot(locator=main_page.area.preview.main)

        with step('[Action] Select Intro Template with method 2 with index 10'):
            intro_video_page.select_intro_template_method_2(10)

        with step('[Verify] Check preview is updated correctly'):
            updated_preview = main_page.snapshot(locator=main_page.area.preview.main)
            if main_page.compare(initial_preview, updated_preview, similarity=0.98):
                # Similarity should be less than 0.98 indicating that the preview has changed
                assert False, "Preview did not update correctly! Similarity should < 0.98"

        assert True

    @pytest.mark.intro_room_func
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @pytest.mark.name('[test_intro_room_func_3_19] Compare screenshots of Beauty and Handwritten categories')
    @exception_screenshot
    def test_intro_room_func_3_19(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click specific category with name ('Beauty') and capture screenshot (locator=L.media_room.library_frame)
        2. Click specific category with name ('Handwritten'), select Intro Template with method 2 with index 6, and capture screenshot (locator=L.media_room.library_frame)
        3. Compare the screenshots of the two categories, they should be different (Similarity=0.98)
        """
        dependency_test = "test_intro_room_func_3_18"
        self.ensure_dependency(dependency_test)

        # [L59] 2.2 Intro Video Room > Category display
        # with uuid("1e6335f3-c46a-4b2a-869a-c9768c44212b") as case:

        with step('[Action] Click specific category "Beauty" and capture screenshot'):
            intro_video_page.click_intro_specific_category("Beauty")
            screenshot_beauty = main_page.snapshot(locator=L.media_room.library_frame)

        with step('[Action] Click specific category "Handwritten", select Intro Template with method 2 with index 6, and capture screenshot'):
            intro_video_page.click_intro_specific_category("Handwritten")
            time.sleep(DELAY_TIME * 2)
            intro_video_page.select_intro_template_method_2(6)
            screenshot_handwritten = main_page.snapshot(locator=L.media_room.library_frame)

        with step('[Verify] Compare screenshots of Beauty and Handwritten categories'):
            if main_page.compare(screenshot_beauty, screenshot_handwritten, similarity=0.98):
                # Similarity should be less than 0.98 since the screenshots should be different
                assert False, "Screenshots of 'Beauty' and 'Handwritten' categories are too similar! Similarity should < 0.98"

        assert True


    @pytest.mark.intro_room_func
    @pytest.mark.my_profile
    @pytest.mark.name('[test_intro_room_func_3_20] Verify My Profile is empty correctly')
    @exception_screenshot
    def test_intro_room_func_3_20(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click specific category with name ('Beauty')
        2. Enter My Profile
        3. Compare preview (locator=L.intro_video_room.my_profile.main_window) with GT (similarity=0.8) to check if My Profile is empty correctly
        4. Press [Esc] key
        """
        dependency_test = "test_intro_room_func_3_19"
        self.ensure_dependency(dependency_test)

        # [L60] 2.2 Intro Video Room > My profile
        # with uuid("9f19ce26-268c-4255-9467-033156ceb53f") as case:

        with step('[Action] Click specific category "Beauty"'):
            intro_video_page.click_intro_specific_category("Beauty")

        with step('[Action] Enter My Profile'):
            intro_video_page.enter_my_profile()

        with step('[Verify] Check if My Profile preview is empty as GT'):
            my_profile_preview = main_page.snapshot(
                locator=L.intro_video_room.my_profile.main_window,
                file_name=Auto_Ground_Truth_Folder + 'L60.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L60.png',
                my_profile_preview,
                similarity=0.8
            )
            if not check_preview:
                # Similarity should be greater than 0.8 for an empty My Profile view
                assert False, "My Profile preview does not match GT (L60.png)! Similarity should > 0.8"

        with step('[Action] Press [Esc] key'):
            main_page.press_esc_key()

        assert True


    @pytest.mark.intro_room_func
    @pytest.mark.import_media
    @pytest.mark.name('[test_intro_room_func_3_21] Verify preview update after media replacement')
    @exception_screenshot
    def test_intro_room_func_3_21(self):
        """
        0. Ensure the dependency test is run and passed
        1. exist_click(L.media_room.input_search) > keyboard.send('universer') > press_enter_key() > time.sleep(DELAY_TIME * 3)
        2. self.sort_by_like() to sort by Like
        3. Select Intro Template with method 2 with index 1
        4. Click [Insert to Selected Track] button from Tip area
        5. Click [Yes] button (L.main.confirm_dialog.btn_yes) from [Do you want to edit the template in Video Intro designer?] dialog
        6. self.check_open_intro_template() to check open intro template result
        7. Click Replace Media and choose option (1)
        8. Select file (Test_Material_Folder + 'Produce_Local/4978895.mov') in file picker
        9. Check if pop up trim dialog is shown and close it
        10. Check preview (locator=L.intro_video_room.intro_video_designer.preview_area) is updated correctly with GT (Auto_Ground_Truth_Folder + 'L61_replace_Video.png')(similarity=0.95)
        11. Save custom template as (Test_save_intro)
        """
        dependency_test = "test_intro_room_func_3_20"
        self.ensure_dependency(dependency_test)

        # [L61] 2.2 Intro Video Room > Open Intro Video Designer
        # with uuid("eae9c5b2-b7b1-4cc9-99b0-8953963a869a") as case:

        with step('[Action] Click search input, type "universer", press enter, and wait'):
            main_page.exist_click(L.media_room.input_search)
            main_page.keyboard.send('universer')
            main_page.press_enter_key()
            time.sleep(DELAY_TIME * 3)

        with step('[Action] Sort media by Like'):
            self.sort_by_like()

        with step('[Action] Select Intro Template with method 2 with index 1'):
            intro_video_page.select_intro_template_method_2(1)

        with step('[Action] Click [Insert to Selected Track] button from Tip area'):
            tips_area_page.click_TipsArea_btn_insert_project()

        with step('[Action] Click [Yes] button from confirm dialog'):
            main_page.click(L.main.confirm_dialog.btn_yes)

        with step('[Verify] Check if intro template opened correctly'):
            self.check_open_intro_template()

        with step('[Action] Click Replace Media and choose option 1'):
            intro_video_page.click_replace_media(1)

        with step('[Action] Select file in file picker'):
            file_path = Test_Material_Folder + 'Produce_Local/4978895.mov'
            main_page.select_file(file_path)

        with step('[Action] Check and close pop up trim dialog if shown'):
            # Pop up trim dialog
            if not main_page.exist(L.trim.main_window, timeout=10):
                assert False, "Pop up trim dialog not found!"
            time.sleep(DELAY_TIME*0.5)
            main_page.press_esc_key()
            time.sleep(DELAY_TIME*0.5)


        with step('[Verify] Check preview is updated correctly'):
            preview = main_page.snapshot(
                locator=L.intro_video_room.intro_video_designer.preview_area,
                file_name=Auto_Ground_Truth_Folder + 'L61_replace_Video.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L61_replace_Video.png',
                preview,
                similarity=0.95
            )
            if not check_preview:
                # Similarity should be greater than 0.98 for updated preview
                assert False, "Preview does not match GT (L61_replace_Video.png)! Similarity should > 0.95"

        with step('[Action] Save custom template as (Test_save_intro)'):
            intro_video_page.click_btn_save_as(custom_name='Test_save_intro')
        assert True

    @pytest.mark.intro_room_func
    @pytest.mark.play_video
    @pytest.mark.name('[test_intro_room_func_3_22] Verify timeline addition and preview operations when playing')
    @exception_screenshot
    def test_intro_room_func_3_22(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter room (Title)(1) and Enter Intro Video Room
        2. Enter Saved Category > Select Intro Template with method 2 by index (1)
        3. Right click > Select (Add to Timeline) on right click menu
        4. Click [No] button on [Do you want to edit the template in the Video Intro Designer?] dialog
        5. Click preview operation (Play) in playback window
        6. Check if the preview window is different when playing
        7. Click preview operation (Stop) in playback window
        8. Click undo button
        """
        dependency_test = "test_intro_room_func_3_21"
        self.ensure_dependency(dependency_test)

        with step('[Action] Enter room "Title" with index 1 and then enter Intro Video Room'):
            main_page.enter_room(1)
            intro_video_page.enter_intro_video_room()


        # [L62] 2.2 Intro Video Room > Add template to timeline > Right click menu
        # with uuid("8996d86e-4c16-450e-9863-9e96aebf3400") as case:

        with step('[Action] Enter Saved Category and select Intro Template with method 2 by index 1'):
            intro_video_page.enter_saved_category()
            intro_video_page.select_intro_template_method_2(1)

        with step('[Action] Right click and select "Add to Timeline" from right click menu'):
            main_page.right_click()
            main_page.select_right_click_menu("Add to Timeline")

        with step('[Action] Click [No] button on confirm dialog'):
            main_page.click(L.base.confirm_dialog.btn_no)

        with step('[Action] Click preview operation "Play" in playback window'):
            playback_window_page.Edit_Timeline_PreviewOperation("Play")

        with step('[Verify] Check if the preview window is different when playing'):
            if not main_page.Check_PreviewWindow_is_different(sec=4):
                assert False, "Preview window did not change when playing! It should be different."

        with step('[Action] Click preview operation "Stop" in playback window'):
            playback_window_page.Edit_Timeline_PreviewOperation("Stop")

        with step('[Action] Click undo button'):
            main_page.click_undo()

        assert True
        
    @pytest.mark.intro_room_func
    @pytest.mark.save_project
    @pytest.mark.name('[test_intro_room_func_3_23] Verify timeline addition, preview update, and save project')
    @exception_screenshot
    def test_intro_room_func_3_23(self):
        """
        0. Ensure the dependency test is run and passed
        1. Select Intro Template with method 2 by index (1)
        2. Click [Insert to Selected Track] button
        3. Click [No] button on [Do you want to edit the template in the Video Intro Designer?] dialog
        4. Set timecode to (00_00_07_00) in main page
        5. Check preview (locator=main_page.area.preview.main) with GT (Auto_Ground_Truth_Folder + 'L63.png')(similarity=0.90)
        6. Set timecode to (00_00_00_00) in main page
        7. Save project as from top menu bar and handle [Save Project] Dialog with name 'test_intro_room_func_3_22' and folder_path (Test_Material_Folder + 'BFT_21_Stage1/')
        """
        dependency_test = "test_intro_room_func_3_22"
        self.ensure_dependency(dependency_test)


        # [L63] 2.2 Intro Video Room > Add template to timeline > Tips Area button
        # with uuid("0fb947c2-c718-4b81-8bed-7e0a78a84c33") as case:

        with step('[Action] Select Intro Template with method 2 by index 1'):
            intro_video_page.select_intro_template_method_2(1)

        with step('[Action] Click [Insert to Selected Track] button'):
            tips_area_page.click_TipsArea_btn_insert_project()

        with step('[Action] Click [No] button on confirm dialog'):
            main_page.click(L.base.confirm_dialog.btn_no)

        with step('[Action] Set timeline timecode to 00_00_07_00'):
            main_page.set_timeline_timecode("00_00_07_00", is_verify=True)

        with step('[Verify] Screenshot preview and compare with GT (L63.png)'):
            preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + "L63.png"
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + "L63.png",
                preview,
                similarity=0.90
            )
            if not check_preview:
                # Similarity should be greater than 0.90 for matching preview
                assert False, "Preview does not match GT (L63.png)! Similarity should > 0.90"

        with step('[Action] Set timeline timecode to 00_00_00_00'):
            main_page.set_timeline_timecode("00_00_00_00", is_verify=True)

        with step('[Action] Save project as and handle save dialog'):
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_intro_room_func_3_22', folder_path=Test_Material_Folder + 'BFT_21_Stage1/')

        assert True

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.launch
    @pytest.mark.flip
    @pytest.mark.name('[test_intro_room_func_3_24] Enter Intro Video Room, apply flips, and verify preview')
    @exception_screenshot
    def test_intro_room_func_3_24(self):
        '''
        1. Clear Cache > Start App
        2. Enter Intro Video Room  > Enter My Favorites
        3. Select Intro Template (1) with method 2
        4. Double click to enter [Intro Video Designer]
        5. Check enter [Intro Video Designer] by checking (L.intro_video_room.intro_video_designer) shows in 50 secs
        6. Click Preview Center > Click [Remove] button twice
        7. Click [Flip] button with option (1) to flip horizontally
        8. Click [Flip] button with option (2) to flip vertically
        9. Check preview (locator=L.intro_video_room.intro_video_designer.preview_area, file_name=Auto_Ground_Truth_Folder + 'L311_flip.png') matches Ground Truth (Ground_Truth_Folder + 'L311_flip.png') with similarity=0.95
        10. Click [Close] button to leave [Intro Video Designer]
        11. Handle [Save Change Warning] dialog before leaving with option ('No')
        '''

        with step('[Action] Clear Cache and Start App'):
            main_page.clear_cache()
            main_page.start_app()

        with step('[Action] Enter [Intro Video Room] and [My Favorites]'):
            # Enter Intro Video Room and select template
            intro_video_page.enter_intro_video_room()
            intro_video_page.enter_my_favorites()

        with step('[Action] Select Intro Template (1) with method 2'):
            intro_video_page.select_intro_template_method_2(1)

        # Double click to enter Intro Video Designer
        with step("[Action] Double click to enter [Intro Video Designer]"):
            main_page.double_click()

        # Check if Intro Video Designer is shown
        with step("[Verify] Check if intro video designer is shown"):
            if not main_page.exist(L.intro_video_room.intro_video_designer.main_window, timeout=50):
                assert False, "Intro video designer not found!"
        
        # [L311] 3.1 Video Intro Designer > Edit > Flip
        # with uuid("a24fa4d4-41c5-4de6-98c1-7a2912d599a4") as case:

        # Click Preview Center > Click [Remove] button
        with step("[Action] Click Preview Center > Click [Remove] button twice"):
            for _ in range(2):
                time.sleep(DELAY_TIME)
                intro_video_page.click_preview_center()
                intro_video_page.motion_graphics.click_remove_button()
                

        # Click [Flip] button with option (1) to flip horizontally
        with step("[Action] Click [Flip] button with option (1) to flip horizontally"):
            intro_video_page.click_flip(1)

        # Click [Flip] button with option (2) to flip vertically
        with step("[Action] Click [Flip] button with option (2) to flip vertically"):
            intro_video_page.click_flip(2)

        # Verify preview matches Ground Truth
        with step("[Verify] Check preview matches Ground Truth with similarity 0.95"):
            preview = main_page.snapshot(
                locator=L.intro_video_room.intro_video_designer.preview_area,
                file_name=Auto_Ground_Truth_Folder + 'L311_flip.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L311_flip.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L311_flip.png)! Similarity should > 0.95"

        # Click [Close] button to leave [Intro Video Designer]
        with step("[Action] Click [Close] button to leave [Intro Video Designer]"):
            intro_video_page.click_btn_close()

        # Handle [Save Change Warning] dialog with option ('No')
        with step("[Action] Handle [Save Change Warning] dialog with option ('No')"):
           intro_video_page.handle_warning_save_change_before_leaving('No')

        assert True

    @pytest.mark.intro_room_func
    @pytest.mark.intro_video_designer
    @pytest.mark.content_pack
    @pytest.mark.content_pack
    @pytest.mark.new_tag
    @pytest.mark.name('[test_intro_room_func_3_25] Verify New icon preview in Season Theme category')
    def test_intro_room_func_3_25(self):
        '''
        0. Ensure the dependency test ('test_intro_room_func_3_24') is run and passed
        1. Enter [Season Theme] category
        2. Find the specific tag ('New') and return tag object
        3. Check [New] icon preview (file_name=Auto_Ground_Truth_Folder + 'L192_new_icon.png', w=new_w, x=new_x, y=new_y, h=new_h) matches Ground Truth (Ground_Truth_Folder + 'L192_new_icon.png') with similarity=0.9
        '''
        dependency_test = "test_intro_room_func_3_24"
        self.ensure_dependency(dependency_test)

        # [L192] 2.2 Intro Video Room > New category / New icon
        # with uuid("d26cdbfa-4dec-4d94-81d1-30c26066c3a8") as case:

        with step("[Action] Enter [Season Theme] category"):
            can_find_category = intro_video_page.enter_season_theme_category('New')
            if not can_find_category:
                assert False, "[Season Theme] category not found!"

        with step("[Action] Find the specific tag ('New') and return tag object"):
            target_object = effect_room_page.find_specific_tag_return_tag("New")

        with step("[Verify] Check [New] icon preview matches Ground Truth"):
            x, y = target_object.AXPosition
            w, h = target_object.AXSize

            new_x = x + 13
            new_y = y
            new_w = h + 10
            new_h = h

            preview_snapshot = main_page.screenshot(file_name=Auto_Ground_Truth_Folder + 'L192_new_icon.png', w=new_w, x=new_x, y=new_y, h=new_h)

            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L192_new_icon.png', 
                preview_snapshot, 
                similarity=0.9
            )
            if not check_preview:
                assert False, "Preview does not match Ground Truth (L192_new_icon.png)! Similarity should > 0.9"

        assert True


    @pytest.mark.title_designer_func
    @pytest.mark.launch
    @pytest.mark.preferences
    @pytest.mark.title_designer
    @pytest.mark.title
    @pytest.mark.name('[test_title_designer_func_4_1] Set default Title duration to 10 > Open [Default] title designer by searching [Default] in library')
    @exception_screenshot
    def test_title_designer_func_4_1(self):
        '''
        1. Set default Title duration to 10
        2. Open [Default] title designer by searching [Default] in library
        3. Check open [Default] title designer with title content/ caption bar
        '''
        # launch APP
        main_page.start_app()

        # Open Preference > Editing > Set default Title duration to 10 (For v21.6.5303 PM request)
        with step('[Action] Set default Title duration to 10'):
            time.sleep(DELAY_TIME)
            main_page.click_set_user_preferences()
            preferences_page.switch_to_editing()
            preferences_page.editing.durations_title_set_value('10.0')
            preferences_page.click_ok()

        # [L132] 3.2 Title Designer > Open Title designer
        # with uuid("7a0b1dbb-0c33-4634-8289-ad6a0acd92e1") as case:
        with step('[Action] Open [Default] title designer by searching [Default] in library'):
            # enter Title room
            main_page.enter_room(1)

            # Select default title (21.6.5219 : search then select default title)
            media_room_page.search_library('Default')
            time.sleep(DELAY_TIME * 2)
            main_page.select_library_icon_view_media('Default')
            main_page.double_click()

        with step('[Verify] Check open [Default] title designer'):
            # Verify Step
            check_selected_object = title_designer_page.get_title_text_content()
            if check_selected_object == 'My Title':
                selected_title_content = True
            else:
                selected_title_content = False

            check_caption_bar_content = title_designer_page.get_full_title()
            if check_caption_bar_content == 'Title Designer | Default':
                check_caption_bar = True
            else:
                check_caption_bar = False

        assert selected_title_content and check_caption_bar, f'Open [Default] title designer failed! text content: {check_selected_object} ({check_selected_object}), caption bar: {check_caption_bar_content} ({check_caption_bar_content})'
    
    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.title
    @pytest.mark.name('[test_title_designer_func_4_2] Modify Text Title Content')
    @exception_screenshot
    def test_title_designer_func_4_2(self):
        '''
        1. Fold Font Face tab and switch to Express mode
        2. Input text to title ('ÆÂÇÐÉÑ ØÜ Ýåþðìü')
        3. Check if input text is correct
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_1"
        self.ensure_dependency(dependency_test)

        # if Font Face is already unfold, click arrow to fold
        title_designer_page.unfold_object_font_face_tab(0)

        # [L133] 3.2 Title Designer > Modify > Input text case
        # with uuid("12487b29-26d5-469a-8b57-64cb21a89679") as case:
        # Express mode
        title_designer_page.switch_mode(1)

        with step('[Action] Input text to title designer'):
            canvas_elem = main_page.exist(L.title_designer.area.frame_video_preview)
            main_page.mouse.click(*canvas_elem.center)
            main_page.double_click()
            title_designer_page.edit_object_title('ÆÂÇÐÉÑ ØÜ Ýåþðìü')

        # Verify step
        check_selected_object = title_designer_page.get_title_text_content()

        assert check_selected_object == 'ÆÂÇÐÉÑ ØÜ Ýåþðìü', f'Input text failed! Expected: ÆÂÇÐÉÑ ØÜ Ýåþðìü, Actual: {check_selected_object}'

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.title
    @pytest.mark.name('[test_title_designer_func_4_3] Set Text to Two line > Set Font /Paragraph > Check if Font /Paragraph is set correctly by GT > Check if able to switch mode with applied effect correctly')
    @exception_screenshot
    def test_title_designer_func_4_3(self):
        '''
        1. Set Text to Two line
        2. Set Font /Paragraph
        3. Check if Font /Paragraph is set correctly by GT
        4. Check if able to switch mode with applied effect correctly
        '''
        
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_2"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Text to Two line'):
            title_text_elem = main_page.exist(L.title_designer.area.edittext_text_content)
            main_page.mouse.click(*title_text_elem.center)
            main_page.press_enter_key()
            main_page.input_text('AWR')


        # [L137] 3.2 Title Designer > Set in [Object] > Font /Paragraph
        # with uuid("7b458139-00b3-4178-a4f6-8515fc581f6a") as case:
        with step('[Action] Set Font /Paragraph'):
            canvas_elem = main_page.exist(L.title_designer.area.frame_video_preview)
            main_page.mouse.click(*canvas_elem.center)
            main_page.double_click()
            # Set font
            title_designer_page.set_font_type('IM FELL DW Pica SC Regular')

            # Set size
            title_designer_page.set_font_size('36')

            # Set line spacing amount
            title_designer_page.set_line_spacing_amount('-8')

            # Set text spacing amount
            title_designer_page.set_text_spacing_amount('5')

            # Set font face color
            title_designer_page.set_font_face_color('120', '83', '236')

            # Set kerning
            title_designer_page.set_kerning_check()

            # Set align
            title_designer_page.set_align(2)
        express_mode_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)

        with step('[Verify] Check if Font /Paragraph is set correctly by GT'):
            # [L135] 3.2 Title Designer > Switch to Advanced mode
            # with uuid("9337d05d-e71b-452b-88ed-accf281de8f5") as case:

            # Advanced mode
            title_designer_page.switch_mode(2)

            advance_mode_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer,
                                                    file_name=Auto_Ground_Truth_Folder + 'L135.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L135.png',
                                                    advance_mode_preview)
            
            # close font/ paragraph tab
            title_designer_page.unfold_object_font_face_tab(0)
            
            if not compare_result:
                assert False, "Font /Paragraph is not set correctly by GT (L135.png)!"

        with step('[Verify] Check if switch mode with applied effect correctly'):
            # express mode
            compare_switch_advance_mode = main_page.compare(advance_mode_preview, express_mode_preview)
            title_designer_page.switch_mode(1)
            back_express_mode_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            compare_express = main_page.compare(back_express_mode_preview, express_mode_preview)
            if compare_switch_advance_mode:
                assert False, "Switch to Advanced mode with applied effect failed!"
            if not compare_express:
                assert False, "Switch back to Express mode with applied effect failed!"
            assert True        


    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.title
    @pytest.mark.preset
    @pytest.mark.name('[test_title_designer_func_4_4] Apply Character Presets')
    @exception_screenshot
    def test_title_designer_func_4_4(self):
        '''
        1. Apply Character Presets
        2. Check if apply preset correctly by Preview window
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_3"
        self.ensure_dependency(dependency_test)

        # [L136] 3.2 Title Designer > Set in [Object] > Character Presets
        # with uuid("917276cd-2119-4f6e-a94b-10d03795a2cf") as case:

        preset_ori = main_page.snapshot(locator=L.title_designer.area.window_title_designer)

        # Apply preset 10
        title_designer_page.apply_character_presets(9)

        with step('[Verify] Check if preview changed correctly after applied preset 10 by preview window'):
            # Check preview change
            preset_x = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            compare_preset_x = main_page.compare(preset_x, preset_ori, similarity=0.7)
            different_preset_x = not main_page.compare(preset_x, preset_ori, similarity=0.985)
            if not (compare_preset_x and different_preset_x):
                assert False, "Preview not changed after applied preset 10 by preview window! Similarity should be in 0.7~0.985"

        if main_page.exist(L.title_designer.character_presets.btn_character_presets).AXValue == 1:
            main_page.exist_click(L.title_designer.character_presets.btn_character_presets)
            time.sleep(DELAY_TIME*1.5)

        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.backdrop
    @pytest.mark.name('[test_title_designer_func_4_5] Check default backdrop type')
    @exception_screenshot
    def test_title_designer_func_4_5(self):
        '''
        1. Enter Backdrop Menu
        2. Check if default backdrop type is Fit with title
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_4"
        self.ensure_dependency(dependency_test)

        # [L141] 3.2 Title Designer > Set in [Object] > Backdrop
        # with uuid("09c9be51-6a81-4087-9df3-fdd9af36cf60") as case:
        with step('[Action] Enter Backdrop'):
            title_designer_page.backdrop.set_checkbox(bApply=1)
            title_designer_page.backdrop.set_unfold_tab()
            
        # Verify 1: Check apply type (Fit with title)
        with step('[Verify] Check the default backdrop type'):
            get_backdrop_type= title_designer_page.backdrop.get_type()
            if get_backdrop_type != 2:
                assert False, f'Backdrop type is not default! Expected: 2, Actual: {get_backdrop_type}'
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.backdrop
    @pytest.mark.name('[test_title_designer_func_4_6] Set backdrop type to Solid background bar') 
    @exception_screenshot
    def test_title_designer_func_4_6(self):
        '''
        1. Set backdrop type to Solid background bar
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_5"
        self.ensure_dependency(dependency_test)


        with step('[Action] Set backdrop type to Solid background bar (1)'):
            # Switch backdrop type (Solid background bar)
            title_designer_page.backdrop.set_type(1)

        with step('[Verify] Check if width is disabled due to backdrop type is Solid background bar'):
            # Verify 2: Check width disable
            check_width_disable_result = title_designer_page.backdrop.check_width_disable()
            assert check_width_disable_result, "Width is not disabled after set backdrop type as Solid background bar!"

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.backdrop
    @pytest.mark.name('[test_title_designer_func_4_7] Adjust Height value w & w/o maintain aspect ratio')
    @exception_screenshot
    def test_title_designer_func_4_7(self):
        '''
        1. Adjust Height value w maintain aspect ratio
        2. Adjust Height value w/o maintain aspect ratio
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_6"
        self.ensure_dependency(dependency_test)

        with step('[Action] Adjust Height value'):
            # Adjust Height value
            title_designer_page.backdrop.height.value.adjust_slider(1.73)
            time.sleep(DELAY_TIME)

        with step('[Verify] Check Height value'):
            # Check Height value
            get_height_value = title_designer_page.backdrop.height.value.get_value()
            if get_height_value != '1.73':
                assert False, f'Height value is not set correctly! Expected: 1.73, Actual: {get_height_value}'

        with step('[Action] Adjust Height value w/o maintain aspect ratio'):
            # Un-tick maintain aspect ratio
            title_designer_page.backdrop.set_maintain_aspect_ratio(0)
            title_designer_page.backdrop.height.value.click_arrow(0, 8)
        
        with step('[Verify] Check Height/ Width value w/o maintain aspect ratio'):
            # Check Height value
            get_height_value = title_designer_page.backdrop.height.value.get_value()
            if get_height_value != '1.81':
                assert False, f'Height value is not set correctly! Expected: 1.81, Actual: {get_height_value}'

            # Check Width value
            get_width_value = title_designer_page.backdrop.width.value.get_value()
            if get_width_value != '1.73':
                assert False, f'Width value is not set correctly! Expected: 1.73, Actual: {get_width_value}'
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.backdrop
    @pytest.mark.name('[test_title_designer_func_4_8] Set Color > Set Opacity by textbox and slider')
    @exception_screenshot
    def test_title_designer_func_4_8(self):
        '''
        1. Set Color
        2. Set Opacity by textbox and check value
        3. Set Opacity by slider and check value
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_7"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Color'):
            # Set uniform color
            title_designer_page.backdrop.apply_uniform_color('#3f24b2')

        with step('[Action] Set Opacity by textbox'):
            # scroll down (scroll bar)
            title_designer_page.drag_object_vertical_slider(1)
            # Set opacity
            title_designer_page.backdrop.opacity.value.set_value(88)

        with step('[Verify] Check Opacity value (Modified by textbox)'):
            get_opacity = title_designer_page.backdrop.opacity.value.get_value()
            if get_opacity != '88':
                assert False, f'Opacity value is not set correctly (Modified by textbox)! Expected: 88, Actual: {get_opacity}'
        
        with step('[Action] Adjust Opacity by slider'):
            title_designer_page.backdrop.opacity.value.adjust_slider(95)

        with step('[Verify] Check Opacity value (Modified by slider)'):
            get_opacity = title_designer_page.backdrop.opacity.value.get_value()
            if get_opacity != '95':
                assert False, f'Opacity value is not set correctly (Modified by slider)! Expected: 95, Actual: {get_opacity}'

        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.backdrop
    @pytest.mark.name('[test_title_designer_func_4_9] Adjust Offset Y')
    @exception_screenshot
    def test_title_designer_func_4_9(self):
        '''
        1. Adjust Offset X and check value
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_8"
        self.ensure_dependency(dependency_test)

        with step('[Action] Adjust Offset Y'):
            # Adjust offset Y to -0.809
            title_designer_page.backdrop.offset_y.value.set_value('-0.809')

        with step('[Verify] Check Offset Y value'):
            # Check offset Y value
            get_offset_y = title_designer_page.backdrop.offset_y.value.get_value()
            assert get_offset_y=='-0.809', f'Offset Y value is not set correctly! Expected: -0.809, Actual: {get_offset_y}'

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.backdrop
    @pytest.mark.name('[test_title_designer_func_4_10] Set backdrop type to Ellipse')
    @exception_screenshot
    def test_title_designer_func_4_10(self):
        '''
        1. Set backdrop type to Ellipse
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_9"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set backdrop type to Ellipse (2,1)'):
            # scroll down (scroll bar)
            title_designer_page.drag_object_vertical_slider(0.67)
            type_sloid = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            # Switch backdrop type (Fit with title) > Ellipse
            title_designer_page.backdrop.set_type(2,1)
            type_ellipse = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
        
        with step('[Verify] Check backdrop type is changed'):
            different_type_result = not main_page.compare(type_ellipse, type_sloid, similarity=0.99999)
            if not different_type_result:
                assert False, "Backdrop type is not changed after set backdrop type as Ellipse!"

        with step('[Action] Set to Initial Condition'):
            title_designer_page.backdrop.set_type(1)
            # fold tab
            title_designer_page.backdrop.set_unfold_tab(unfold=0)

        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.title
    @pytest.mark.font_face_color
    @pytest.mark.name('[test_title_designer_func_4_11] Apply Font Settings (Insert New > Size/ Font/ Color/ Space/ Kerning)')
    @exception_screenshot
    def test_title_designer_func_4_11(self):
        '''
        1. Set font settings and check if set correctly
        2. Insert new title and set font settings and check if set correctly
        3. Check if font settings are set correctly as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_10"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Font settings'):
            # Set font face color
            title_designer_page.set_check_font_face(bCheck=1)
            ori_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            title_designer_page.set_font_face_color('128', '215', '144')
            applied_color = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(ori_img, applied_color, similarity=0.98):
                assert False, "Font face color is not set correctly!"

            # Set font
            title_designer_page.set_font_type('Barbaro')
            applied_font = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(applied_color, applied_font, similarity=0.98):
                assert False, "Font is not set correctly!"

            # Disable Border (no verfiy step due to might be disabled)
            title_designer_page.apply_border(bApply=0)
            
            # Disable Shadow + fold tab (no verfiy step due to might be disabled)
            title_designer_page.set_check_shadow(bCheck=0)
            title_designer_page.unfold_object_shadow_tab(unfold=0)


        # [L134] 3.2 Title Designer > Insert new title
        # with uuid("3675bbb6-5abb-4a0c-80a4-f17f0b55b590") as case:
        with step('[Action] Insert new title adn set font settings'):
            ori_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            title_designer_page.insert_title(' suiod fw5')
            added_text = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(ori_img, added_text, similarity=0.98):
                assert False, "Insert new title failed!"

            # Set size
            title_designer_page.set_font_size('88')
            size_changed = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(added_text, size_changed, similarity=0.98):
                assert False, "Font size is not set correctly!"

            # Title font: Mystery Quest
            title_designer_page.set_font_type('Mystery Quest')
            font_changed = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(size_changed, font_changed, similarity=0.98):
                assert False, "Font is not set correctly!"

            # Set font face color
            title_designer_page.set_font_face_color('255', '27', '169')
            color_changed = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(font_changed, color_changed, similarity=0.995):
                assert False, "Font face color is not set correctly!"

            # Set line spacing amount
            title_designer_page.set_line_spacing_amount('0')
            line_spacing_changed = main_page.snapshot(locator=L.title_designer.area.window_title_designer)

            # Set text spacing amount
            title_designer_page.set_text_spacing_amount('0')
            text_spacing_changed = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(line_spacing_changed, text_spacing_changed, similarity=0.98):
                assert False, "Text spacing amount is not set correctly!"

            # Set kerning (No verfiy step due to might be disabled at first)
            title_designer_page.set_kerning_check(0)

        with step('[Verify] Check if font settings are set correctly as GT'):
            time.sleep(DELAY_TIME*2)
            second_title_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer,
                                                        file_name=Auto_Ground_Truth_Folder + 'L134.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L134.png',
                                                second_title_preview)
            assert compare_result, "Font settings are not set correctly as GT! But preview changed step by step when applying effect"

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.title
    @pytest.mark.shadow
    @pytest.mark.save_template
    @pytest.mark.name('[test_title_designer_func_4_12] Adjust Shadow settings -- Distance/ Blur/ Opacity/ Fill Shadow/ Direction')
    @exception_screenshot
    def test_title_designer_func_4_12(self):
        '''
        1. Enable Shadow
        2. Adjust Shadow settings -- Distance (Slider + Arrow) and check preview
        3. Adjust Shadow settings -- Blur (Textbox + Arrow) and check preview
        4. Adjust Shadow settings -- Opacity (Slider + Arrow) and check preview
        5. Adjust Shadow settings -- Fill Shadow (Slider + Arrow) and check preview
        6. Adjust Shadow settings -- Direction (Slider + Arrow) and check preview
        7. Check if shadow settings are set correctly by GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_11"
        self.ensure_dependency(dependency_test)


        # [L140] 3.2 Title Designer > Set in [Object] > Shadow
        # with uuid("cbe24c99-189b-4ce8-8255-16fd4f25e5a5") as case:
        with step('[Action] Enable Shadow'):
            # unfold tab
            title_designer_page.unfold_object_shadow_tab()

            # Set Shadow
            title_designer_page.apply_shadow(bApply=1)

            # scroll down (scroll bar)
            title_designer_page.drag_object_vertical_slider(1)

        with step('[Action] Adjust Shadow settings -- Distance (Slider + Arrow)'):
            before_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            # Set distance = 32.5 by slider and arrow
            title_designer_page.drag_shadow_distance_slider('32')
            distance_changed_slider = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(before_img, distance_changed_slider, similarity=0.998):
                assert False, "Shadow distance is not set correctly by slider!"

            for _ in range(5):
                title_designer_page.click_shadow_distance_arrow_btn(0)
                time.sleep(DELAY_TIME*0.5)
            distance_changed_arrow = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(distance_changed_slider, distance_changed_arrow, similarity=0.9999):
                assert False, "Shadow distance is not set correctly by arrow!"

        with step('[Action] Adjust Shadow settings -- Blur (Textbox + Arrow)'):
            before_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            # Set blur = 15
            title_designer_page.input_shadow_blur_value('16')
            blur_changed_textbox = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(before_img, blur_changed_textbox, similarity=0.998):
                assert False, "Shadow blur is not set correctly by textbox!"

            title_designer_page.click_shadow_blur_arrow_btn(1)
            blur_changed_arrow = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(blur_changed_textbox, blur_changed_arrow, similarity=0.9999):
                assert False, "Shadow blur is not set correctly by arrow!"

        with step('[Action] Adjust Shadow settings -- Opacity (Slider + Arrow)'):
            before_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            # Set opacity = 87
            title_designer_page.drag_shadow_opacity_slider('19')
            opacity_changed_slider = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(before_img, opacity_changed_slider, similarity=0.998):
                assert False, "Shadow opacity is not set correctly by slider!"

            title_designer_page.input_shadow_opacity_value('87')
            opacity_changed_textbox = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(opacity_changed_slider, opacity_changed_textbox, similarity=0.998):
                assert False, "Shadow opacity is not set correctly by textbox!"

        with step('[Action] Adjust Shadow settings -- Fill Shadow (Slider + Arrow)'):
            # Set fill shadow = 0
            title_designer_page.set_check_shadow_fill_shadow(bCheck=0)
            title_designer_page.set_shadow_fill_shadow_color('105','250', '5')
            no_fill_shadow_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)

            # Set fill shadow = 1
            title_designer_page.set_check_shadow_fill_shadow(bCheck=1)
            title_designer_page.set_shadow_fill_shadow_color('33', '134', '215')
            fill_shadow_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)

            # Check preview change
            compare_fill_preview = main_page.compare(no_fill_shadow_preview, fill_shadow_preview, similarity=0.94)
            different_fill = not main_page.compare(no_fill_shadow_preview, fill_shadow_preview, similarity=0.99)

            assert compare_fill_preview and different_fill, "Fill shadow is not set correctly! similar should be 0.94~0.99"

        with step('[Action] Adjust Shadow settings -- Direction (Slider + Arrow)'):
            ori_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            # Set distance = 76.8
            title_designer_page.input_shadow_distance_value('76.8')
            distance_changed_textbox = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(ori_preview, distance_changed_textbox, similarity=0.998):
                assert False, "Shadow distance is not set correctly by textbox!"

            # Set shadow direction = 125
            title_designer_page.input_shadow_direction_value('130')
            direction_changed_textbox = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(distance_changed_textbox, direction_changed_textbox, similarity=0.998):
                assert False, "Shadow direction is not set correctly by textbox!"

            title_designer_page.click_shadow_direction_arrow_btn(0)
            for _ in range(6):
                title_designer_page.click_shadow_direction_arrow_btn(1)
            distance_changed_arrow = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(direction_changed_textbox, distance_changed_arrow, similarity=0.9999):
                assert False, "Shadow direction is not set correctly by arrow!"

        with step('[Verify] Check if shadow settings are set correctly as GT'):
            main_page.move_mouse_to_0_0()
            time.sleep(DELAY_TIME)
            check_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer,
                                                        file_name=Auto_Ground_Truth_Folder + 'L140.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L140.png',
                                                check_preview)
            if not compare_result:
                assert False, "Shadow settings are not set correctly as GT (L140)! Preview changed step by step when applying effect"
        
        with step('[Action] Set to Initial Condition'):
            # fold tab
            title_designer_page.unfold_object_shadow_tab(unfold=0)

        with step('[Action] Save Template'):
            # Save Template
            title_designer_page.save_as_name('test_title_designer_func_4_12', click_ok=1)

            # Close title designer
            title_designer_page.click_ok()
            time.sleep(DELAY_TIME * 2)


        
        assert True

            
    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.save_template
    @pytest.mark.launch
    @pytest.mark.name('[test_title_designer_func_4_13] Reopen AP and add saved template')
    @exception_screenshot
    def test_title_designer_func_4_13(self):
        '''
        1. Reopen AP and enter Title Room
        2. Open [Custom] template "test_title_designer_func_4_12"
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_12"
        self.ensure_dependency(dependency_test)

        with step('[Action] Relaunch AP and enter Title Room'):
            # relaunch APP
            main_page.close_app()
            main_page.start_app()

            # enter Title Room
            main_page.enter_room(1)

        with step('[Action] Open [Custom] template "test_title_designer_func_4_12"'):

            # Custom template
            if not main_page.select_LibraryRoom_category('Custom'): 
                assert False, "Select [Custom] category failed!"

            # Select 1st Custom teplate "test_title_designer_func_4_12"
            main_page.select_library_icon_view_media('test_title_designer_func_4_12')
            main_page.double_click()
            time.sleep(DELAY_TIME * 4) # wait for loading
        
        assert True # if unable to found the template, the test will be failed when searching

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.canva
    @pytest.mark.name('[test_title_designer_func_4_14] Manual Adjust on canvas -- Resize and Rotate')
    @exception_screenshot
    def test_title_designer_func_4_14(self):
        '''
        1. Manual adjust on canvas -- Resize and Rotate
        2. Enter Advance mode and reach panel
        3. Check Adjusted width/ height/ rotate value
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_13"
        self.ensure_dependency(dependency_test)

        # [L149] 3.2 Title Designer > Manually adjust on canvas
        # with uuid("f54750cd-3f0e-463f-8b05-8b84ba456351") as case:

        with step('[Action] Manually adjust on canvas -- Resize and Rotate'):
            # Resize
            title_designer_page.adjust_title_on_canvas.resize_to_small(x=5, y=3)
            time.sleep(DELAY_TIME * 2)
            # Rotate
            title_designer_page.adjust_title_on_canvas.drag_rotate_clockwise('45')

        with step('[Action] Enter Advance mode and reach panel'):
            # Switch to Advance mode
            title_designer_page.switch_mode(2)
            time.sleep(DELAY_TIME)

            # Unfold Object
            title_designer_page.unfold_object_object_setting_tab()
            title_designer_page.drag_object_vertical_slider(0.757)

        with step('[Verify] Check width value'):
            # Verify step
            check_scale_width_value = title_designer_page.get_object_setting_scale_width_value()
            if float(check_scale_width_value) >= 1:
                assert False, f'Width value is not set correctly! Expected: < 1, Actual: {check_scale_width_value}'

        with step('[Verify] Check height value'):
            check_scale_height_value = title_designer_page.get_object_setting_scale_height_value()
            if float(check_scale_height_value) >= 1:
                assert False, f'Height value is not set correctly! Expected: < 1, Actual: {check_scale_height_value}'

        with step('[Verify] Check rotate value'):
            check_rotate_value = title_designer_page.get_object_setting_rotation_value()
            if float(check_rotate_value) <= 50:
                assert False, f'Rotate value is not set correctly! Expected: > 50, Actual: {check_rotate_value}'

        # close app due to the section is completed
        main_page.close_app()

        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.keyframe
    @pytest.mark.timeline
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_designer_func_4_15] Add keyframe on Position/ Scale/ Opacity/ Rotation')
    @exception_screenshot
    def test_title_designer_func_4_15(self):
        '''
        1. Add keyframe on Position/ Scale/ Opacity/ Rotation
        2. Check if keyframe settings are set correctly as GT
        '''

        # Ensure the dependency test is run and passed
        # Start a new section, starts from "test_title_designer_func_4_1"
        self.test_title_designer_func_4_1()

        # [L142] 3.2 Title Designer > Object Settings
        # with uuid("adfdbb15-9d4a-4338-be3a-39d0922f896a") as case:

        with step('[Action] Enter Advanced mode'):
            title_designer_page.switch_mode(2)

        with step('[Action] Add First Position keyframe at (00:00)'):
            # Add position 1st keyframe
            title_designer_page.click_object_setting_position_add_keyframe_control()

        with step('[Action] Add Second Position keyframe at (09:00) and adjust value'):
            title_designer_page.set_timecode('00_00_09_00')
            title_designer_page.input_object_setting_x_position_value('0.24')
            title_designer_page.input_object_setting_y_position_value('0.935')

        with step('[Action] Switch to previous keyframe (00:00)'):
            title_designer_page.click_object_setting_position_previous_keyframe()

        with step('[Action] Add First Scale keyframe at (00:00)'):
            # Add scale 1st keyframe
            title_designer_page.click_object_setting_scale_add_keyframe_control()

        with step('[Action] Add Second Scale keyframe at (08:00) and adjust value'):
            title_designer_page.set_timecode('00_00_08_00')
            # Add position 2nd keyframe
            title_designer_page.input_object_setting_scale_height_value('1.64')

        with step('[Action] Add First Opacity keyframe at (08:00)'):
            # scroll down (scroll bar)
            title_designer_page.drag_object_vertical_slider(1)
            # Add opacity keyframe
            title_designer_page.click_object_setting_opacity_add_keyframe_control()
        
        with step('[Action] Add Second Opacity keyframe at (03:00) and adjust value'):
            # Add 2nd keyframe
            title_designer_page.set_timecode('00_00_03_00')
            title_designer_page.drag_object_setting_opacity_slider('59')

        with step('[Action] Add First Rotation keyframe and adjust value'):
            title_designer_page.drag_object_vertical_slider(1)
            # Add rotate keyframe
            title_designer_page.input_object_setting_rotation_value('60')
            title_designer_page.click_object_setting_rotation_add_keyframe_control()

        with step('[Action] Add Second Rotation keyframe at (09:00) and adjust value'):
            # Add 2nd keyframe
            title_designer_page.set_timecode('00_00_09_00')
            title_designer_page.input_object_setting_rotation_value('260')

        with step('[Verify] Check if keyframe settings are set correctly as GT'):
            with step('[Action] Initialize preview'):
                # scroll simple track (scroll bar)
                title_designer_page.drag_simple_track_vertical_slider(0.97)
                title_designer_page.set_timecode('00_00_08_00')

            # Verify preview
            time.sleep(DELAY_TIME)
            check_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer,
                                                file_name=Auto_Ground_Truth_Folder + 'L142.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L142.png', check_preview, similarity=0.9)
            assert compare_result, "Keyframe settings are not set correctly as GT (L142)!"

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.keyframe
    @pytest.mark.ease_in_out
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_designer_func_4_16] Add Ease In/ Out on Scale keyframe')
    @exception_screenshot
    def test_title_designer_func_4_16(self):
        '''
        1. Adjust Ease in on Second Scale keyframe and check value
        2. Adjust Ease out on First Scale keyframe and check value
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_15"
        self.ensure_dependency(dependency_test)

        # [L143] 3.2 Title Designer > Object Settings > Ease in / Ease out work
        # with uuid("94d981a1-511c-44b0-996f-ec255d2ce28a") as case:

        with step('[Action] Adjust Ease in on Second Scale keyframe'):
            # scroll down (scroll bar)
            title_designer_page.drag_object_vertical_slider(0.65)
            time.sleep(DELAY_TIME)
            # Set Ease in on Scale keyframe
            title_designer_page.set_check_object_setting_scale_ease_in()
            title_designer_page.drag_object_setting_scale_ease_in_slider(0.71)
            check_ease_in_value = title_designer_page.get_object_setting_scale_ease_in_value()
            if float(check_ease_in_value) != 0.71:
                assert False, f'Ease in value is not set correctly! Expected: 0.71, Actual: {float(check_ease_in_value)}'

        with step('[Action] Adjust Ease out on First Scale keyframe'):
            # click previous keyframe
            title_designer_page.click_object_setting_scale_previous_keyframe()

            # Set Ease out on Scale keyframe
            title_designer_page.set_check_object_setting_scale_ease_out()
            title_designer_page.drag_object_setting_scale_ease_out_slider(0.83)
            check_ease_out_value = title_designer_page.get_object_setting_scale_ease_out_value()
            if float(check_ease_out_value) != 0.83:
                assert False, f'Ease out value is not set correctly! Expected: 0.83, Actual: {float(check_ease_out_value)}'
        assert True


    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.keyframe
    @pytest.mark.ease_in_out
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_designer_func_4_17] Reset Scale/ Position keyframe')
    @exception_screenshot
    def test_title_designer_func_4_17(self):
        '''
        1. Reset Scale keyframe and check if reset
        2. Reset Position keyframe and check if reset
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_16"
        self.ensure_dependency(dependency_test)

        with step('[Action] Reset Scale keyframe'):
            ori_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            # Reset Scale keyframe
            title_designer_page.click_object_setting_scale_reset_keyframe_control()
            time.sleep(DELAY_TIME*2)
            # Click [Yes] when pop up waring (This operation will reset all keyframe ...)
            main_page.exist_click(L.title_designer.backdrop.warning.btn_yes)

        with step('[Verify] Check if Scale keyframe is reset'):
            reseted_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(ori_img, reseted_img, similarity=0.98):
                assert False, "Scale keyframe is not reset!"
            
        with step('[Action] Reset Position keyframe'):
            # scroll upper (scroll bar)
            title_designer_page.drag_object_vertical_slider(0.52)
            time.sleep(DELAY_TIME)

            ori_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)

            # Reset Position keyframe
            title_designer_page.click_object_setting_position_reset_keyframe_control()

            # Click [Yes] when pop up waring (This operation will reset all keyframe ...)
            main_page.exist_click(L.title_designer.backdrop.warning.btn_yes)

        with step('[Verify] Check if Position keyframe is reset'):
            reseted_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(ori_img, reseted_img, similarity=0.98):
                assert False, "Position keyframe is not reset!"
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.keyframe
    @pytest.mark.ease_in_out
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_designer_func_4_18] Ease out on Rotation keyframe')
    @exception_screenshot
    def test_title_designer_func_4_18(self):
        '''
        1. Set Ease out on Rotation keyframe
        2. Check if keyframe settings are set correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_17"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Ease out on First Rotation keyframe'):

            # click next keyframe
            title_designer_page.click_object_setting_rotation_next_keyframe()

            # scroll down (scroll bar)
            title_designer_page.drag_object_vertical_slider(1)
            time.sleep(DELAY_TIME)

            # Set Ease out on Rotation keyframe
            title_designer_page.set_check_object_setting_rotation_ease_out()
            title_designer_page.input_object_setting_rotation_ease_out_value('0.75')

        with step('[Verify] Check if keyframe settings are set correctly'):
            check_ease_out_value = title_designer_page.get_object_setting_rotation_ease_out_value()
            assert float(check_ease_out_value) == 0.75, f'Ease out value is not set correctly! Expected: 0.75, Actual: {float(check_ease_out_value)}'


    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.keyframe
    @pytest.mark.timeline
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_designer_func_4_19] Switch to next/ previous keyframe')
    @exception_screenshot
    def test_title_designer_func_4_19(self):
        '''
        1. Switch to next keyframe on Opacity keyframe
        2. Check if switch to correct keyframe (08:00)
        3. Switch to previous keyframe on Rotation keyframe
        4. Check if switch to correct keyframe (03:00)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_18"
        self.ensure_dependency(dependency_test)

        # [L341] 3.2 Title Designer > Object Settings > Simple timeline Add / Remove / Switch keyframe
        # with uuid("ad107e46-3c92-4dcd-b68c-0d7122e36b04") as case:

        with step('[Action] Switch to next keyframe on Opacity keyframe'):
            # Check 2nd Title on simple track
            # Current timecode = 00:00:03:00
            title_designer_page.drag_simple_track_vertical_slider(1)

            # Click simple track : Opacity next keyframe
            title_designer_page.click_simple_track_opacity_next_keyframe(track_no=3)

        with step('[Verify] Check if switch to correct keyframe (08:00)'):
            # Verify next keyframe button
            current_time_code = title_designer_page.get_timecode()
            if current_time_code != '00:00:08:00':
                assert False, f'Next keyframe is not set correctly! Expected: 00:00:08:00, Actual: {current_time_code}'

        with step('[Action] Switch to previous keyframe on Rotation keyframe'):
            # Click simple track : Rotation previous keyframe
            title_designer_page.click_simple_track_opacity_previous_keyframe(track_no=4)

        with step('[Verify] Check if switch to correct keyframe (03:00)'):
            # Verify previous keyframe button
            current_time_code = title_designer_page.get_timecode()
            if current_time_code != '00:00:03:00':
                assert False, f'Previous keyframe is not set correctly! Expected: 00:00:03:00, Actual: {current_time_code}'
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.keyframe
    @pytest.mark.timeline
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_designer_func_4_20] Click [Previous] keyframe when no previous keyframe')
    @exception_screenshot
    def test_title_designer_func_4_20(self):
        '''
        1. Cancel Opacity keyframe at (03:00) by click again
        2. Jumps to 08:00 and click [Previous] keyframe
        3. Check if stay in 08:00 correctly (No previous keyframe)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_19"
        self.ensure_dependency(dependency_test)

        with step('[Action] Cancel Opacity keyframe at (03:00) by click again'):
            # Click simple track : Opacity keyframe [Reset] on the 3s keyframe
            title_designer_page.click_simple_track_opacity_keyframe_control(track_no=3)
            time.sleep(DELAY_TIME*2)

        with step('[Action] Jumps to 08:00 and click [Previous] keyframe'):
            # Jump to 8s keyframe > Then click [Previous] keyframe to check previous keyframe
            current_time_code = title_designer_page.set_timecode('00_00_08_00')
            title_designer_page.click_simple_track_opacity_previous_keyframe(track_no=3)

        with step('[Verify] Check if stay in 08:00 correctly (No previous keyframe)'):
            # Verify  keyframe Reset button
            current_time_code = title_designer_page.get_timecode()
            if current_time_code != '00:00:08:00':
                assert False, f'Previous keyframe is not set correctly! Expected: 00:00:08:00, Actual: {current_time_code}'
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.keyframe
    @pytest.mark.timeline
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_designer_func_4_21] Add Opacity keyframe at (09:00) and click [Previous] keyframe')
    @exception_screenshot
    def test_title_designer_func_4_21(self):
        '''
        1. Add Opacity keyframe at (09:00)
        2. Click [Previous] keyframe to check previous keyframe
        3. Check if changed to 08:00 correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_20"
        self.ensure_dependency(dependency_test)

        with step('[Action] Add Opacity keyframe at (09:00)'):
            # Click simple track : Opacity keyframe [Add] for Rotation keyframe
            title_designer_page.set_timecode('00_00_09_00')
            title_designer_page.click_simple_track_opacity_keyframe_control(track_no=3)
        
        with step('[Action] Click [Previous] keyframe to check previous keyframe'):
            # Then click [Previous] keyframe to check previous keyframe
            title_designer_page.click_simple_track_opacity_previous_keyframe(track_no=3)

        with step('[Verify] Check if changed to 08:00 correctly'):
            # Verify  keyframe Add button
            current_time_code = title_designer_page.get_timecode()
            if current_time_code != '00:00:08:00':
                assert False, f'Previous keyframe is not set correctly! Expected: 00:00:08:00, Actual: {current_time_code}'
        
        with step('[Initialize] Close object setting tab for next test'):
            # scroll upper (scroll bar)
            title_designer_page.drag_object_vertical_slider(0.64)

            # fold tab
            title_designer_page.unfold_object_object_setting_tab(0)

        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.special_effect
    @pytest.mark.name('[test_title_designer_func_4_22] Apply Special Effect -- LED sign')
    @exception_screenshot
    def test_title_designer_func_4_22(self):
        '''
        1. Enter Special Effect tab
        2. Apply LED sign effect and check preview
        '''
        # Ensure the dependency test is run and passed
        # Start a new section, starts from "test_title_designer_func_4_1"
        self.test_title_designer_func_4_1()

        # [L144] 3.2 Title Designer > Set in [Object] > Special Effect
        # with uuid("9019594e-a256-461d-9c2f-0657541e569a") as case:

        with step('[Action] Enter Advanced mode'):
            title_designer_page.switch_mode(2)

        with step('[Action] Enter Special Effect tab'):
            # fold object setting tab if opened
            title_designer_page.unfold_object_object_setting_tab(0)
        
            # unfold special effect tab if folded
            title_designer_page.special_effects.set_unfold_tab(1)
            time.sleep(DELAY_TIME*2)

        with step('[Action] Apply LED sign effect and check preview'):
            # Apply LED sign
            current_title_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)
            title_designer_page.special_effects.apply_effect(4)

            # Warning: Do you want to continue?
            title_designer_page.handle_special_effect_want_to_continue(option=1)
            led_title_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)
            is_applied_special_effect_led = not main_page.compare(current_title_preview, led_title_preview, similarity=0.995)
            if not is_applied_special_effect_led:
                assert False, "LED sign effect is not applied correctly on preview window!"
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.special_effect
    @pytest.mark.name('[test_title_designer_func_4_23] Check default size value and look 4 size value')
    @exception_screenshot
    def test_title_designer_func_4_23(self):
        '''
        1. Check default size value
        2. Apply Look 4 and check size value
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_22"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check default size value'):
            # scroll down (scroll bar)
            title_designer_page.drag_object_vertical_slider(1)
            time.sleep(DELAY_TIME)

            # Check size value
            get_current_value = title_designer_page.special_effects.size.value.get_value()
            if get_current_value != '53':
                assert False, f'Default size value is not set correctly! Expected: 53, Actual: {get_current_value}'

        with step('[Action] Set to the 4th looks in LED sign'):
            # Apply LED > Look 4
            title_designer_page.special_effects.set_look_menu(4)
            time.sleep(DELAY_TIME * 2)
            # Check current size
            get_current_value = title_designer_page.special_effects.size.value.get_value()
            if get_current_value != '49':
                assert False, f'Look 4 size value is not set correctly! Expected: 49, Actual: {get_current_value}'
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.special_effect
    @pytest.mark.name('[test_title_designer_func_4_24] Apply Electric Wave effect and adjust size and length value')
    @exception_screenshot
    def test_title_designer_func_4_24(self):
        '''
        1. Apply Electric Wave effect and check preview
        2. Adjust size and length value and check preview
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_23"
        self.ensure_dependency(dependency_test)
        
        with step('[Action] Apply Electric Wave effect'):
            title_designer_page.set_timecode('00_00_03_00')
            before_img = main_page.snapshot(locator=L.title_designer.area.obj_title)
            # Apply Electric Wave
            title_designer_page.special_effects.apply_effect(6)
            time.sleep(DELAY_TIME * 2)


        with step('[Verify] Check apply effect correctly by preview'):
            applied_electric = main_page.snapshot(locator=L.title_designer.area.obj_title)
            if main_page.compare(before_img, applied_electric, similarity=0.99):
                assert False, "Electric Wave effect is not applied correctly on preview window! Similarity should < 0.99"

        with step('[Action] Adjust size and length value'):
            # scroll down (scroll bar)
            title_designer_page.drag_object_vertical_slider(1)
            time.sleep(DELAY_TIME)
            # Set size to 108
            title_designer_page.special_effects.size.value.set_value(108)
            # Set Length to 167
            title_designer_page.special_effects.length.value.adjust_slider(167)
            time.sleep(DELAY_TIME * 2)

        with step('[Verify] Check if preview changed correctly'):
            electric_title_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)
            if main_page.compare(electric_title_preview, applied_electric, similarity=0.99):
                assert False, "Electric Wave effect is not applied correctly on preview window! Similarity should < 0.99"
        
        with step('[Initialize] Close special effect tab and save template'):
            title_designer_page.set_timecode('00_00_00_00')

            # scroll down (scroll bar)
            title_designer_page.drag_object_vertical_slider(1)
            time.sleep(DELAY_TIME)

            # fold special effect
            title_designer_page.special_effects.set_unfold_tab(0)
            time.sleep(DELAY_TIME)

            # Save Template
            title_designer_page.save_as_name('title_designer_func_4_24', click_ok=1)

            # Close title designer
            title_designer_page.click_ok()
            time.sleep(DELAY_TIME * 2)
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.open_project
    @pytest.mark.save_template
    @pytest.mark.timeline
    @pytest.mark.in_out_animation
    @pytest.mark.launch
    @pytest.mark.name('[test_title_designer_func_4_25] Reopen AP and open saved template > Apply In animation')
    @exception_screenshot
    def test_title_designer_func_4_25(self):
        '''
        1. Reopen AP and open saved template
        2. Enter Title Room and select saved template
        3. Apply In animation
        4. Check if preview changed correctly at (02:18)
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_24"
        self.ensure_dependency(dependency_test)

        with step('[Action] Reopen AP and open saved project'):
            # main_page.close_app()
            main_page.start_app()
            time.sleep(DELAY_TIME)

            project_name = 'Packed_Project/test_title_designer_func_4_25_from_test_intro_room_func_3_16.pdk'
            save_name = 'Extracted_Folder/test_title_designer_func_4_25'
            self.open_packed_project(project_name, save_name)

        with step('[Action] Enter title room and select saved template'):
            # enter Title Room
            main_page.enter_room(1)

            # Custom template
            main_page.select_LibraryRoom_category('Custom')

            # Select 1st Custom template "title_designer_func_4_24"
            main_page.select_library_icon_view_media('title_designer_func_4_24')
            main_page.double_click()
            time.sleep(DELAY_TIME * 3)

        # Current status: Open Title Designer (Advanced) and only unfold "Font / Paragraph"

        # [L145] 3.2 Title Designer > Set Animation > Starting Effect
        # with uuid("bb27103b-0bd1-4f73-9eb5-948375335ba1") as case:
        with step('[Action] Enter In Animation tab'):
            # Switch to Animation tab > Unfold
            title_designer_page.click_animation_tab()
            title_designer_page.unfold_animation_in_animation_tab()
            
        with step('[Action] Apply effect'):

            # Set timecode to snapshot before apply animation
            title_designer_page.set_timecode('00_00_02_18')
            no_in_animation_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            # title_designer_page.set_timecode('00_00_00_00')
            # Apply In animation: Popup > Magnets II
            title_designer_page.select_animation_in_animation_effect(4, 4)

            # Warning: Do you want to continue?
            title_designer_page.handle_special_effect_want_to_continue(option=1)
            time.sleep(DELAY_TIME)

        # check if preview changed
        with step('[Verify] Check if preview changed correctly at (02:18)'):
            in_animation_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(in_animation_preview, no_in_animation_preview, similarity=0.995):
                assert False, "In animation effect is not applied correctly on preview window! Similarity should < 0.995"
        assert True


    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.timeline
    @pytest.mark.in_out_animation
    @pytest.mark.play_video
    @pytest.mark.name('[test_title_designer_func_4_26] Play video by press space key and check preview')
    @exception_screenshot
    def test_title_designer_func_4_26(self):
        '''
        1. Play the vedio by press space key and check if preview changed at (00:00)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_25"
        self.ensure_dependency(dependency_test)

        with step('[Action] Play the vedio by press space key and check if preview changed at (00:00)'):
            title_designer_page.set_timecode('00_00_00_00')

            before_play_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)

            # Preview play > Pause
            main_page.press_space_key()
            time.sleep(DELAY_TIME*2)
            main_page.press_space_key()

            # check if preview changed
            play_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(play_preview, before_play_preview, similarity=0.98):
                assert False, "Not preview in animation correctly when playing the video by press space key! Similarity should < 0.98"
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.timeline
    @pytest.mark.in_out_animation
    @pytest.mark.play_video
    @pytest.mark.name('[test_title_designer_func_4_27] Click Stop and check if go to (00:00)')
    @exception_screenshot
    def test_title_designer_func_4_27(self):
        '''
        1. Set timecode to (02:18) and click [Stop] button
        2. Check if go to (00:00) after click [Stop] button
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_26"
        self.ensure_dependency(dependency_test)

        with step('[Action] set timecode to (02:18) and click [Stop] button'):
            # Set timecode :
            title_designer_page.set_timecode('00_00_02_18')
            # Click [Stop]
            title_designer_page.click_preview_operation('Stop')

        with step('[Verify] Check if go to (00:00) after click [Stop] button'):
            current_time_code = title_designer_page.get_timecode()
            if current_time_code != '00:00:00:00':
                assert False, f'Not go to (00:00) after click [Stop] button! Expected: 00:00:00:00, Actual: {current_time_code}'
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.in_out_animation
    @pytest.mark.name('[test_title_designer_func_4_28] Apply another effect and check preview')
    @exception_screenshot
    def test_title_designer_func_4_28(self):
        '''
        1. Apply another effect and check preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_27"
        self.ensure_dependency(dependency_test)

        with step('[Action] Apply another effect and check preview'):
            before_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            # Apply In animation: Video rotation > Rotate Counterclockwise
            title_designer_page.select_animation_in_animation_effect(8, 3)
            applied_effect = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(before_img, applied_effect, similarity=0.99):
                assert False, "Effect is not applied correctly on preview window! Similarity should < 0.99"
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.timeline
    @pytest.mark.in_out_animation
    @pytest.mark.play_video
    @pytest.mark.name('[test_title_designer_func_4_29] Stop playing video and check if go to (00:00)')
    @exception_screenshot
    def test_title_designer_func_4_29(self):
        '''
        1. Press space key to play video and click [Stop] button
        2. Check if go to (00:00) after click [Stop] button when playing video
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_28"
        self.ensure_dependency(dependency_test)

        with step('[Action] Press space key to play video and click [Stop] button'):

            # Preview play > Pause
            main_page.press_space_key()
            time.sleep(DELAY_TIME*1.6)

            # Click [Stop]
            title_designer_page.click_preview_operation('Stop')
            time.sleep(DELAY_TIME)

        with step('[Verify] Check if go to (00:00) after click [Stop] button when playing video'):
            current_time_code = title_designer_page.get_timecode()
            if current_time_code != '00:00:00:00':
                assert False, f'Not go to (00:00) after click [Stop] button! Expected: 00:00:00:00, Actual: {current_time_code}'
        
        with step('[Initialize] Close APP for next test'):
            # Close title designer
            title_designer_page.click_ok()
            time.sleep(DELAY_TIME * 2)
            # Close APP
            main_page.close_app()

        assert True


    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_designer_func_4_30] Insert new title and set x position = 0 and rotation = 90')
    @exception_screenshot
    def test_title_designer_func_4_30(self):
        '''
        1. Insert new title
        2. Enter Object setting tab
        3. set x position = 0 and check preview
        4. set rotation = 90 and check preview
        '''
        # Ensure the dependency test is run and passed
        # Start a new section, starts from "test_title_designer_func_4_1"
        self.test_title_designer_func_4_1()

        with step('[Action] Enter Advanced mode'):
            title_designer_page.switch_mode(2)

        with step('[Action] Insert new title'):
            ori_img = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            title_designer_page.insert_title(' suiod fw5')
            added_text = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(ori_img, added_text, similarity=0.98):
                assert False, "Insert new title failed!"

        with step('[Action] Enter object setting tab'):
            # ---------------------------------
            # Move 2nd title to left
            # Switch to Object tab > Unfold
            title_designer_page.click_object_tab()
            # Unfold tab
            title_designer_page.unfold_object_object_setting_tab(1)

        with step('[Action] Set x position = 0 of new added title'):
            before_img = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            # Set x position = 0
            title_designer_page.input_object_setting_x_position_value('0')
        
        with step('[Verify] Check if preview changed correctly for x position = 0'):
            x_value_changed = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(before_img, x_value_changed, similarity=0.98):
                assert False, "Set x position failed!"

        with step('[Action] Set rotation = 90 of new added title'):
            # Set roation = 90
            title_designer_page.input_object_setting_rotation_value('90')

        with step('[Verify] Check if preview changed correctly for rotation = 90'):
            rotation_value_changed = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(before_img, rotation_value_changed, similarity=0.98):
                assert False, "Set rotation failed!"
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.in_out_animation
    @pytest.mark.name('[test_title_designer_func_4_31] Apply out animation effect on 1st title')
    @exception_screenshot
    def test_title_designer_func_4_31(self):
        '''
        1. Highlight the 1st title
        2. Apply Out animation: Pop up III
        3. Check if preview changed correctly at (09:08)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_30"
        self.ensure_dependency(dependency_test)

        with step('[Action] Highlight the 1st title'):
            # fold tab
            title_designer_page.unfold_object_object_setting_tab(0)

            # ---------------------------------
            # Switch highlight to 1st title
            canvas_elem = main_page.exist(L.title_designer.area.frame_video_preview)
            main_page.mouse.click(*canvas_elem.center)

            # Switch to Animation tab > Unfold
            title_designer_page.click_animation_tab()

            # Warning: Do you want to continue?
            title_designer_page.handle_special_effect_want_to_continue(option=1)
            time.sleep(DELAY_TIME * 2)

        # [L146] 3.2 Title Designer > Set Animation > Ending Effect
        # with uuid("df9f83b6-b009-4cbe-9180-2168fd1ad35c") as case:

        with step('[Action] Enter out animation tab'):
            # Fold (In animation)
            title_designer_page.unfold_animation_in_animation_tab(0)

            # UnFold (Out animation)
            title_designer_page.unfold_animation_out_animation_tab()

        with step('[Action] Apply Out animation: Pop up III'):

            # Set timecode to snapshot before apply out animation
            title_designer_page.set_timecode('00_00_09_08')
            no_out_animation_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)


            # Apply Out animation: Pop up III
            title_designer_page.select_animation_out_animation_effect(6, 5)

            # Warning: Do you want to continue?
            title_designer_page.handle_special_effect_want_to_continue(option=1)


        # check if preview changed
        with step('[Verify] Check if preview changed correctly at (09:08)'):
            out_animation_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(out_animation_preview, no_out_animation_preview, similarity=0.995):
                assert False, "out animation effect is not applied correctly on preview window! Similarity should < 0.995"
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.in_out_animation
    @pytest.mark.play_video
    @pytest.mark.timeline
    @pytest.mark.name('[test_title_designer_func_4_32] Play video by press space key and check preview')
    @exception_screenshot
    def test_title_designer_func_4_32(self):
        '''
        1. Play the vedio by press space key and check if preview changed correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_31"
        self.ensure_dependency(dependency_test)


        with step('[Action] Play the vedio by press space key and check if preview changed at (07:50)'):
            title_designer_page.set_timecode('00_00_07_50')

            before_play_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)

            # Preview play > Pause
            main_page.press_space_key()
            time.sleep(DELAY_TIME*2)
            main_page.press_space_key()

            # check if preview changed
            play_preview = main_page.snapshot(locator=L.title_designer.area.window_title_designer)
            if main_page.compare(play_preview, before_play_preview, similarity=0.98):
                assert False, "Not preview out animation correctly when playing the video by press space key! Similarity should < 0.98"
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.motion
    @pytest.mark.path_effect
    @pytest.mark.name('[test_title_designer_func_4_33] Apply Motion -- Path effect twice')
    @exception_screenshot
    def test_title_designer_func_4_33(self):
        '''
        1. Enter Motion tab
        2. Apply path effect and check if preview
        3. Apply another path effect and check preview
        '''
        # Ensure the dependency test is run and passed
        # Start a new section, starts from "test_title_designer_func_4_1"
        self.test_title_designer_func_4_1()

        with step('[Action] Enter Advanced mode'):
            title_designer_page.switch_mode(2)

        # [L147] 3.2 Title Designer > Set Motion
        # with uuid("c37a6bbf-5989-49ce-bb91-47aac338ddb0") as case:
        with step('[Action] Set Enter Path Tab'):
            # Switch to Motion tab > Unfold
            title_designer_page.click_motion_tab()
            # UnFold Path
            title_designer_page.path.set_unfold()
            time.sleep(DELAY_TIME)

        with step('[Action] Apply path'):
            original_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            # scroll down (scroll bar)
            title_designer_page.drag_object_vertical_slider(1)
            # Apply path
            title_designer_page.path.select_path(3)

        with step('[Verify] Check if preview changed correctly'):
            # Verify preview 1
            path_3_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(original_preview, path_3_preview, similarity=0.98):
                assert False, "Path effect is not applied correctly on preview window! Similarity should < 0.98"

        with step('[Action] Apply another path effect again'):
            # scroll down (scroll bar)
            title_designer_page.drag_object_vertical_slider(1)
            # Apply path
            title_designer_page.path.select_path(10)

        with step('[Verify] Check if preview changed correctly'):
            # Verify preview 2
            path_10_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(path_3_preview, path_10_preview, similarity=0.9):
                assert False, "Path effect is not applied correctly on preview window! Similarity should < 0.9"


        with step('[Verify] Check if preview changed correctly as GT'):
            # Set timecode :
            title_designer_page.set_timecode('00_00_02_29')

            # Verify preview 3
            check_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview,
                                               file_name=Auto_Ground_Truth_Folder + 'L147.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L147.png', check_preview, similarity=0.9)
            if not compare_result:
                assert False, "Path effect is not applied correctly on preview window as GT (L147.png)!"

        assert True
            
    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.motion
    @pytest.mark.path_effect
    @pytest.mark.play_video
    @pytest.mark.name('[test_title_designer_func_4_34] Play the video and check path effect changed on preview')
    @exception_screenshot
    def test_title_designer_func_4_34(self):
        '''
        1. Play the video by press space key
        2. Check if preview changed correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_33"
        self.ensure_dependency(dependency_test)

        with step('[Action] Play the video by press space key'):
            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            # Preview play > Pause
            main_page.press_space_key()
            time.sleep(DELAY_TIME * 4)
            main_page.press_space_key()

        with step('[Verify] Check if preview changed correctly'):
            after_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(before_preview, after_preview, similarity=0.98):
                assert False, "Not preview path effect correctly when playing the video by press space key! Similarity should < 0.98"

        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.open_project
    @pytest.mark.particle
    @pytest.mark.launch
    @pytest.mark.name('[test_title_designer_func_4_35] Insert a particle twice and check preview/ particle title')
    @exception_screenshot
    def test_title_designer_func_4_35(self):
        '''
        1. Insert a particle
        2. Check if preview changed correctly
        3. Undo and insert another particle
        4. Check if preview changed correctly
        5. Check if inserted particle template title is Bamboo
        '''
        # Ensure the dependency test is run and passed
        # Start a new section, starts from "test_title_designer_func_4_1"
        
        with step('[Action] Reopen AP and open saved project'):
            main_page.close_app()
            main_page.start_app()
            time.sleep(DELAY_TIME)

            project_name = 'Packed_Project/test_title_designer_func_4_25_from_test_intro_room_func_3_16.pdk'
            save_name = 'Extracted_Folder/test_title_designer_func_4_25'
            self.open_packed_project(project_name, save_name)
                

        # Open Preference > Editing > Set default Title duration to 10 (For v21.6.5303 PM request)
        with step('[Action] Set default Title duration to 10'):
            time.sleep(DELAY_TIME)
            main_page.click_set_user_preferences()
            preferences_page.switch_to_editing()
            preferences_page.editing.durations_title_set_value('10.0')
            preferences_page.click_ok()

        with step('[Action] Open [Default] title designer by searching [Default] in library'):
            # enter Title room
            main_page.enter_room(1)

            # Select default title (21.6.5219 : search then select default title)
            media_room_page.search_library('Default')
            time.sleep(DELAY_TIME * 2)
            main_page.select_library_icon_view_media('Default')
            main_page.double_click()

        with step('[Verify] Check open [Default] title designer'):
            # Verify Step
            check_selected_object = title_designer_page.get_title_text_content()
            if check_selected_object != 'My Title':
                assert False, f"Open [Default] title designer failed! Expected: My Title, Actual: {check_selected_object}"
            check_caption_bar_content = title_designer_page.get_full_title()
            if check_caption_bar_content != 'Title Designer | Default':
                assert False, f"Open [Default] title designer failed! Expected: Title Designer | Default, Actual: {check_caption_bar_content}"


        # [L150] 3.2 Title Designer > Insert object > Particle
        # with uuid("01518edc-0a14-4a92-95c5-baaed5ae0c51") as case:

        with step('[Action] Insert a particle'):
            # Switch to Advance mode
            title_designer_page.switch_mode(2)

            # Switch to Object tab > Unfold
            title_designer_page.click_object_tab()

            # Set timecode :
            title_designer_page.set_timecode('00_00_05_28')

            before_applied_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)

            # Click [Insert particle]
            title_designer_page.click_insert_particle_btn()

            # Select Frame > 6th template
            title_designer_page.insert_particle(menu_index=6, particle_index=5)

        with step('[Verify] Check if preview changed correctly for the first particle'):
            frame_6_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(before_applied_preview, frame_6_preview, similarity=0.98):
                assert False, "Particle effect is not applied correctly on preview window! Similarity should < 0.98"

        with step('[Action] Undo and insert another particle'):
            title_designer_page.click_undo_btn()
            time.sleep(DELAY_TIME * 2)

            # Click [Insert particle]
            title_designer_page.click_insert_particle_btn()
            # Select Holiday > 1st template (naming: Bamboo)
            title_designer_page.insert_particle(menu_index=4, particle_index=0)

        with step('[Verify] Check if preview changed correctly for the second particle'):
            # Verify preview 2
            hodiday_4_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(frame_6_preview, hodiday_4_preview, similarity=0.9):
                assert False, "Particle effect is not applied correctly on preview window for the second time! Similarity should < 0.9"

        with step('[Verify] Check if inserted particle template title is Bamboo'):
            # Check insert template title
            elem = main_page.exist(L.title_designer.area.edittext_text_content)
            if elem.AXValue != 'Bamboo':
                assert False, f"Particle template title is not Bamboo! Expected: Bamboo, Actual: {elem.AXValue}"

        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.image
    @pytest.mark.name('[test_title_designer_func_4_36] Insert image and check preview/ image title')
    @exception_screenshot
    def test_title_designer_func_4_36(self):
        '''
        1. Insert an image
        2. Check if preview changed correctly
        3. Check if image title is beauty.jpg
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_35"
        self.ensure_dependency(dependency_test)

        # [L151] 3.2 Title Designer > Insert object > Image
        # with uuid("941b1888-0447-45df-b9fd-51f984b219b2") as case:

        with step('[Action] Insert an image'):
            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            # Click [Insert image]
            title_designer_page.insert_image(Test_Material_Folder + 'BFT_21_Stage1/beauty.jpg')

        with step('[Verify] Check if preview changed correctly'):
            # Check preview update:
            inserted_image_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(before_preview, inserted_image_preview, similarity=0.98):
                assert False, "Image is not inserted correctly on preview window! Similarity should < 0.98"

        with step('[Verify] Check if image title is beauty.jpg'):
            # Check insert template title
            elem = main_page.exist(L.title_designer.area.edittext_text_content)
            assert elem.AXValue == 'beauty.jpg', f'Image title is not beauty.jpg! Expected: beauty.jpg, Actual: {elem.AXValue}'

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.image
    @pytest.mark.name('[test_title_designer_func_4_37] Move/ Resize/ Rotate the Image object and check preview')
    @exception_screenshot
    def test_title_designer_func_4_37(self):
        '''
        1. Move the Image object and check preview
        2. Resize the Image object and check preview
        3. Rotate the Image object and check preview
        4. Check if preview changed correctly as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_36"
        self.ensure_dependency(dependency_test)

        with step('[Action] Move the Image object'):
            # Set timecode :
            title_designer_page.set_timecode('00_00_02_06')
            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            # Resize / move the Image object
            title_designer_page.adjust_title_on_canvas.drag_move_to_left(x=120)

        with step('[Verify] Check if preview changed correctly after move the image'):
            moved_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(before_preview, moved_preview, similarity=0.98):
                assert False, "Image is not moved correctly on preview window! Similarity should < 0.98"

        with step('[Action] Resize the Image object'):
            title_designer_page.adjust_title_on_canvas.resize_to_large(x=80, y=80)

        with step('[Verify] Check if preview changed correctly after resize the image'):
            resized_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(moved_preview, resized_preview, similarity=0.98):
                assert False, "Image is not resized correctly on preview window! Similarity should < 0.98"

        with step('[Action] Rotate the Image object'):
            title_designer_page.adjust_title_on_canvas.drag_rotate_clockwise(45)

        with step('[Verify] Check if preview changed correctly after rotate the image'):
            rotated_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(resized_preview, rotated_preview, similarity=0.98):
                assert False, "Image is not rotated correctly on preview window! Similarity should < 0.98"

        with step('[Verify] Check if preview changed correctly as GT'):
            current_image = main_page.snapshot(locator=L.title_designer.area.frame_video_preview, file_name=Auto_Ground_Truth_Folder + 'L151.png')
            check_image = main_page.compare(Ground_Truth_Folder + 'L151.png', current_image, similarity=0.9)
            if not check_image:
                assert False, "Image is not resized/ moved/ rotated correctly on preview window as GT (L151.png)! But checked preview changed step by step in previous steps"

        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.bg_image
    @pytest.mark.name('[test_title_designer_func_4_38] Insert Background Image and Delete Background Image')
    @exception_screenshot
    def test_title_designer_func_4_38(self):
        '''
        1. Insert Background Image
        2. Check if preview changed correctly
        3. Delete Background Image
        4. Check if preview changed correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_37"
        self.ensure_dependency(dependency_test)

        # [L152] 3.2 Title Designer > Insert object > Background Image
        # with uuid("ea00aff9-e85e-447f-981a-ecd745ad0838") as case:

        with step('[Action] Insert Background Image'):
            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            # Click [Insert BG]
            title_designer_page.insert_background(Test_Material_Folder + 'BFT_21_Stage1/outside.jpg')
            title_designer_page.insert_background_adjust_setting(0)

        with step('[Verify] Check if preview changed correctly'):
            inserted_BG_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(before_preview, inserted_BG_preview, similarity=0.98):
                assert False, "Background Image is not inserted correctly on preview window! Similarity should < 0.98"

        with step('[Verify] Check if preview changed correctly as GT'):
            # Check preview update:
            if not main_page.compare(Ground_Truth_Folder + 'L152.png', inserted_BG_preview, similarity=0.9):
                assert False, "Background Image is not inserted correctly on preview window as GT!"

        with step('[Action] Delete Background Image'):
            # Click (Delete BG) button
            title_designer_page.click_delete_background_btn()

        with step('[Verify] Check if preview changed correctly'):
            deleted_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(inserted_BG_preview, deleted_preview, similarity=0.98):
                assert False, "Background Image is not deleted correctly on preview window! Similarity should < 0.98"

        with step('[Initialize] Undo for next test'):
            # Undo
            title_designer_page.click_undo_btn()
        
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.max_min_window
    @pytest.mark.name('[test_title_designer_func_4_39] Maximize/ Minimize screen and check preview')
    @exception_screenshot
    def test_title_designer_func_4_39(self):
        '''
        1. Maximize screen
        2. Check if preview changed correctly as GT
        3. Minimize screen
        4. Check if preview changed correctly as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_38"
        self.ensure_dependency(dependency_test)

        # [L153] 3.2 Title Designer > Preview > in designer & full screen
        # with uuid("609fda02-864a-4c71-900b-6bf39f7b54ac") as case:

        with step('[Action] Maximize screen'):
            # Click [Stop]
            title_designer_page.click_preview_operation('Stop')
            # Click [full screen]
            title_designer_page.click_maximize_btn()

        with step('[Verify] Check if preview changed correctly as GT'):
            full_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview, file_name=Auto_Ground_Truth_Folder + 'L153_full.png')
            check_result_full = main_page.compare(Ground_Truth_Folder + 'L153_full.png', full_preview, similarity=0.85)
            if not check_result_full:
                assert False, "Preview is not maximized correctly on preview window as GT!"

        with step('[Action] Minimize screen'):
            # Click [restore button]
            title_designer_page.click_maximize_btn()

        with step('[Verify] Check if preview changed correctly as GT'):
            restore_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview, file_name=Auto_Ground_Truth_Folder + 'L153.png')
            check_result_restore = main_page.compare(Ground_Truth_Folder + 'L153.png', restore_preview, similarity=0.85)
            if not check_result_restore:
                assert False, "Preview is not minimized correctly on preview window as GT!"
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.save_template
    @pytest.mark.dz
    @pytest.mark.cyberlink_cloud
    @pytest.mark.name('[test_title_designer_func_4_40] Share to DZ (Completed Window pops up)')
    @exception_screenshot
    def test_title_designer_func_4_40(self):
        '''
        1. Share to DZ (check till completed window pops up)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_39"
        self.ensure_dependency(dependency_test)

        # [L154] 3.2 Title Designer > Share template DZ and Cloud
        # with uuid("441355f4-e673-45fc-b3e4-1b8189a15db8") as case:

        with step('[Action] Share template to DZ'):
            # Click [Share] > Upload to "Cyberlink Cloud and DZ"
            # Verify DZ link
            check_upload = title_designer_page.share_to_dz(name='title_particle_text', upload_option=0, style='Romance', tags='123', collection='test', description='Great', verify_dz_link=1)
            if not check_upload:
                assert False, "Share template to DZ failed!"

        with step('[Initialize] Close title designer window for next test'):
            # Click [Cancel] to close title designer
            title_designer_page.click_cancel()

        assert True


    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.save_template
    @pytest.mark.dz
    @pytest.mark.cyberlink_cloud
    @pytest.mark.name('[test_title_designer_func_4_41] Show uploaded content on download from CL/DZ window')
    @exception_screenshot
    def test_title_designer_func_4_41(self):
        '''
        1. Download the uploaded content form CL/DZ
        2. Delete the uploaded content form CL/DZ
        3. Check if show uploaded content on download from CL/DZ window
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_40"
        self.ensure_dependency(dependency_test)

        with step('[Action] Download the uploaded content form CL/DZ'):
            # Click download content form CL/DZ
            title_room_page.click_DownloadContent_from_DZCL()

            # Already enter "Download Title Templates" > Open My Cyberlink Cloud
            # Select template name "title_particle_text"
            check_CL_content = download_from_cl_dz_page.select_template('title_particle_text')

        with step('[Action] Delete the uploaded content form CL/DZ'):
            download_from_cl_dz_page.tap_delete_button()
            # Close "Download Title Templates" window
            # download_from_cl_dz_page.tap_close_button()
            main_page.press_esc_key()
            time.sleep(DELAY_TIME)

        with step('[Verify] Check if show uploaded content on download from CL/DZ window'):
            assert check_CL_content, "Show uploaded content on download from CL/DZ window failed!"


    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.save_template
    @pytest.mark.font_face
    @pytest.mark.name('[test_title_designer_func_4_42] Adjust font face color of the saved template')
    @exception_screenshot
    def test_title_designer_func_4_42(self):
        '''
        1. Open title designer with the saved template
        2. Adjust font face color the saved template
        3. Check if preview changed correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_41"
        self.ensure_dependency(dependency_test)

        # [L155] 3.2 Title Designer > Save template
        # with uuid("5ce4dc5e-1d12-4e48-83f2-ffcc25408da0") as case:

        with step('[Action] Open title designer with the saved template'):
            # Click "title_particle_text" template to title designer
            main_page.select_library_icon_view_media('title_particle_text')
            main_page.right_click()
            main_page.select_right_click_menu('Modify Template')

        with step('[Action] Adjust font face color the saved template'):
            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)

            # Enter title designer > Modify font face
            # Set font face color
            title_designer_page.set_font_face_color('85', '6', '208')

        with step('[Verify] Check if preview changed correctly'):
            font_face_color_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            if main_page.compare(before_preview, font_face_color_preview, similarity=0.99):
                assert False, "Font face color is not adjusted correctly on preview window! Similarity should < 0.99"

        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.save_template
    @pytest.mark.name('[test_title_designer_func_4_43] Reopen the saved template and check preview')
    @exception_screenshot
    def test_title_designer_func_4_43(self):
        '''
        1. Save the modified template
        2. Reopen the saved template again
        3. Check if preview changed after reopen the saved template
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_42"
        self.ensure_dependency(dependency_test)

        with step('[Action] Save the modified template'):
            # Save template
            main_page.click(L.title_designer.btn_save_as)
            title_designer_page.click_custom_name_ok('BFT_title_Save')
            before_reopen_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)

        with step('[Action] Reopen the saved template again'):
            # Click [Cancel]
            title_designer_page.click_cancel()
            # Verify Step
            main_page.select_library_icon_view_media('BFT_title_Save')
            main_page.right_click()
            main_page.select_right_click_menu('Modify Template')

        with step('[Verify] Check if preview changed after reopen the saved template (Should not change)'):
            # Set timecode :
            title_designer_page.set_timecode('00_00_05_00')
            time.sleep(DELAY_TIME * 4)

            after_reopen_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)
            check_save_result = main_page.compare(before_reopen_preview, after_reopen_preview, similarity=0.95)
            assert check_save_result, "Preview is changed after reopen the saved template!"

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.save_template
    @pytest.mark.timeline
    @pytest.mark.name('[test_title_designer_func_4_44] Add saved title template to timeline at (10:00)')
    @exception_screenshot
    def test_title_designer_func_4_44(self):
        '''
        1. Add saved title template to timeline at (10:00)
        2. Check if preview changed correctly as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_43"
        self.ensure_dependency(dependency_test)

        # [L156] 3.2 Title Designer > Add saved title template to timeline
        # with uuid("fb5b54c4-d0a8-4a3d-ac92-09e88ccf330b") as case:

        with step('[Action] Add saved title template to timeline at (10:00)'):
            # Click [Cancel] to close title designer
            title_designer_page.click_cancel()

            # select timeline track 1
            main_page.timeline_select_track(1)

            # Set timecode :
            main_page.set_timeline_timecode('00_00_10_00')
            time.sleep(DELAY_TIME * 2)

            # Drag BFT_title_Save to timeline track1
            main_page.drag_media_to_timeline_playhead_position('BFT_title_Save')
            
        with step('[Verify] Check if preview changed correctly as GT'):
            main_page.press_space_key()
            main_page.press_space_key()
        
            main_page.set_timeline_timecode('00_00_16_23')
            timeline_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L156.png')

            if not main_page.compare(Ground_Truth_Folder + 'L156.png', timeline_preview):
                assert False, "Preview is not added to timeline correctly as GT (L156.png)! Similarity should >0.95"
        assert True


  

    @pytest.mark.title_designer_func
    @pytest.mark.title_designer
    @pytest.mark.save_template
    @pytest.mark.timeline
    @pytest.mark.play_video
    @pytest.mark.name('[test_title_designer_func_4_45] Play title with press space key > Save project')
    @exception_screenshot
    def test_title_designer_func_4_45(self):
        '''
        1. Play the title with press space key
        2. Check if preview changed correctly
        3. Save project
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_designer_func_4_44"
        self.ensure_dependency(dependency_test)

        with step('[Action] Play timeline preview'):
            before_play_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            # Set timecode :
            main_page.set_timeline_timecode('00_00_10_00')
            # Play timeline preview
            main_page.press_space_key()
            time.sleep(DELAY_TIME * 6)
            main_page.press_space_key()

        with step('[Verify] Check if preview changed correctly'):
            played_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            if main_page.compare(before_play_preview, played_preview, similarity=0.995):
                assert False, "Not preview timeline correctly when playing the video by press space key! Similarity should < 0.995"

        with step('[Action] Save project'):
            # Save project:
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_title_designer_func_4_45',
                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')
            time.sleep(DELAY_TIME * 2)
        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_room
    @pytest.mark.title_designer
    @pytest.mark.object_setting
    @pytest.mark.render_order
    @pytest.mark.name('[test_title_designer_func_4_46] Verify Title Designer Render Order after adjusting object setting')
    @exception_screenshot
    def test_title_designer_func_4_46(self):
        '''
        1. Start APP > Enter Room (Title)(1)
        2. Select media ('Default') by library icon view
        3. Double Click to enter [Title Designer] > Switch to (Advanced mode)(2)
        4. Unfold [Object Setting] Tab > Drag Vertical Slider to (1)
        5. Check [Render Order] title (L.title_designer.object_setting.text_render_method) is shown
        '''
        # [L354] 3.2 Title Room (General title) > Advanced mode > render order > show "Render Method" in object Setting
        # with uuid("e8030cc4-82a8-439c-ac9a-0bcd3d49c522") as case:

        with step("[Action] Start APP > Enter Room (Title)(1)"):
            main_page.start_app()
            main_page.enter_room(1)
            # main_page.click(L.main.room_entry.btn_title_room) # Unable to use 'enter_room' function due to already in the title room
            # main_page.select_LibraryRoom_category('All Content')

        with step("[Action] Select media ('Default') by library icon view"):
            main_page.select_library_icon_view_media("Default")

        with step("[Action] Double Click to enter [Title Designer] > Switch to (Advanced mode)(2)"):
            main_page.double_click()
            title_designer_page.switch_mode(2)

        with step("[Action] Unfold [Object Setting] Tab > Drag Vertical Slider to (1)"):
            title_designer_page.unfold_object_object_setting_tab()
            title_designer_page.drag_object_vertical_slider(1)

        with step("[Verify] Check [Render Order] title (L.title_designer.object_setting.text_render_method) is shown"):
            render_order_title = main_page.is_exist(L.title_designer.object_setting.text_render_method)
            if not render_order_title:
                assert False, "[Render Order] title not found!"

        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_room
    @pytest.mark.title_designer
    @pytest.mark.object_setting
    @pytest.mark.render_order
    @pytest.mark.name('[test_title_designer_func_4_47] Verify Object Setting Render Method is Entire Title')
    @exception_screenshot
    def test_title_designer_func_4_47(self):
        '''
        0. Ensure the dependency test ('test_title_designer_func_4_46') is run and passed
        1. Get [Object Setting Render Method] and check result is ('Entire Title')
        '''
        dependency_test = "test_title_designer_func_4_46"
        self.ensure_dependency(dependency_test)

        # [L355] 3.2 Title Room (General title) > Advanced mode > render order > Default value
        # with uuid("7758cbe9-d24a-4d6c-a8e6-04e83e83807c") as case:

        with step("[Action] Get [Object Setting Render Method]"):
            render_method = title_designer_page.get_object_setting_render_method()

        with step("[Verify] Check result is ('Entire Title')"):
            if render_method != 'Entire Title':
                assert False, f"Expected render method to be 'Entire Title', got '{render_method}'"

        assert True


    @pytest.mark.title_designer_func
    @pytest.mark.title_room
    @pytest.mark.title_designer
    @pytest.mark.object_setting
    @pytest.mark.render_order
    @pytest.mark.name('[test_title_designer_func_4_48] Apply [Object Setting Render Method] and check the title is changed')
    @exception_screenshot
    def test_title_designer_func_4_48(self):
        '''
        0. Ensure the dependency test ('test_title_designer_func_4_47') is run and passed
        1. Set [Object Setting Render Method] with index (2) to ('Each Character')
        2. Get [Object Setting Render Method] and check result is ('Each Character')
        3. Set [Object Setting Render Method] with index (1) to ('Entire Title')
        4. Get [Object Setting Render Method] and check result is ('Entire Title')
        5. Drag Vertical Slider to (0.37)
        6. Fold [Object Setting] Tab (0)
        7. Click [Cancel] Button (1)
        '''
        dependency_test = "test_title_designer_func_4_47"
        self.ensure_dependency(dependency_test)

        # [L356] 3.2 Title Room (General title) > Advanced mode > render order > Can select "Entire Title" / "Each Charater"
        # with uuid("b64c71ab-fe02-491f-b07e-cf3da4e442d1") as case:

        with step("[Action] Set [Object Setting Render Method] with index (2) to ('Each Character')"):
            title_designer_page.set_object_setting_render_method(2)

        with step("[Verify] Get [Object Setting Render Method] and check result is ('Each Character')"):
            render_method = title_designer_page.get_object_setting_render_method()
            if render_method != 'Each Character':
                assert False, f"Expected render method to be 'Each Character', got '{render_method}'"

        with step("[Action] Set [Object Setting Render Method] with index (1) to ('Entire Title')"):
            title_designer_page.set_object_setting_render_method(1)

        with step("[Verify] Get [Object Setting Render Method] and check result is ('Entire Title')"):
            render_method = title_designer_page.get_object_setting_render_method()
            if render_method!= 'Entire Title':
                assert False, f"Expected render method to be 'Entire Title', got '{render_method}'"

        with step("[Action] Drag Vertical Slider to (0.37)"):
            title_designer_page.drag_object_vertical_slider(0.37)

        with step("[Action] Fold [Object Setting] Tab (0)"):
            title_designer_page.unfold_object_object_setting_tab(unfold=0)

        with step("[Action] Click [Cancel] Button (1)"):
            title_designer_page.click_cancel(1)

        assert True

    @pytest.mark.title_designer_func
    @pytest.mark.title_room
    @pytest.mark.title_designer
    @pytest.mark.object_setting
    @pytest.mark.backdrop
    @pytest.mark.name('[test_title_designer_func_4_49] Verify Backdrop Settings and Preview in Title Designer')
    @exception_screenshot
    def test_title_designer_func_4_49(self):
        '''
        0. Ensure the dependency test ('test_title_designer_func_4_48') is run and passed
        1. Select media ('Default') by library icon view
        2. Double Click to enter [Title Designer] > Apply Character Presets (2)
        3. Unfold [Character Presets] Tab > Unfold [Backdrop] tab
        4. Enable [Backdrop] checkbox
        5. Set [Backdrop - Fill Type] to (2)
        6. Apply [Backdrop - Gradient Begin] color to ('33BE9A')
        7. Check preview (L.title_designer.backdrop.btn_begin_with, file_name=Auto_Ground_Truth_Folder + 'L358_begin_color.png') matches Ground Truth (Ground_Truth_Folder + 'L358_begin_color.png') with similarity=0.95
        8. Apply [Backdrop - Gradient End] color to ('C14E88')
        9. Check preview (L.title_designer.backdrop.btn_end_with, file_name=Auto_Ground_Truth_Folder + 'L358_end_color.png') matches Ground Truth (Ground_Truth_Folder + 'L358_end_color.png') with similarity=0.95
        10. Fold [Backdrop] tab (0)
        '''
        dependency_test = "test_title_designer_func_4_48"
        self.ensure_dependency(dependency_test)

        # [L358] 3.2 Title Room (General title) > Advanced mode > WER regression (VDE235420-0025)
        # with uuid("d4132047-105f-4ebf-a861-0206ad6dd8f6") as case:
            
        with step("[Action] Select media ('Default') by library icon view"):
            main_page.select_library_icon_view_media("Default")

        with step("[Action] Double Click to enter [Title Designer] > Apply Character Presets (2)"):
            main_page.double_click()
            title_designer_page.apply_character_presets(2)

        with step("[Action] Unfold [Character Presets] Tab > Unfold [Backdrop] tab"):
            title_designer_page.unfold_object_character_presets_tab(0)
            title_designer_page.backdrop.set_unfold_tab()

        with step("[Action] Enable [Backdrop] checkbox"):
            title_designer_page.backdrop.set_checkbox(bApply=1)

        with step("[Action] Set [Backdrop - Fill Type] to (2)"):
            title_designer_page.backdrop.set_fill_type(2)

        with step("[Action] Apply [Backdrop - Gradient Begin] color to ('33BE9A')"):
            title_designer_page.backdrop.apply_gradient_begin('33BE9A')

        with step("[Verify] Check preview matches GT (L358_begin_color.png)"):
            preview = main_page.snapshot(
                locator=L.title_designer.backdrop.btn_begin_with, 
                file_name=Auto_Ground_Truth_Folder + 'L358_begin_color.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L358_begin_color.png', 
                preview, 
                similarity=0.95
            )
            if not check_preview:
                assert False, "Preview does not match Ground Truth (L358_begin_color.png)! Similarity should > 0.95"

        with step("[Action] Apply [Backdrop - Gradient End] color to ('C14E88')"):
            title_designer_page.backdrop.apply_gradient_end('C14E88')

        with step("[Verify] Check preview matches GT (L358_end_color.png)"):
            preview = main_page.snapshot(
                locator=L.title_designer.backdrop.btn_end_with, 
                file_name=Auto_Ground_Truth_Folder + 'L358_end_color.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L358_end_color.png', 
                preview, 
                similarity=0.95
            )
            if not check_preview:
                assert False, "Preview does not match Ground Truth (L358_end_color.png)! Similarity should > 0.95"

        with step("[Action] Fold [Backdrop] tab (0)"):
            title_designer_page.backdrop.set_unfold_tab(unfold=0)

        assert True


    @pytest.mark.title_designer_func
    @pytest.mark.title_room
    @pytest.mark.title_designer
    @pytest.mark.object_setting
    @pytest.mark.render_method
    @pytest.mark.save_template
    @pytest.mark.name('[test_title_designer_func_4_50] Save [Title] template and check [Render Method] is not changed after re-enter')
    @exception_screenshot
    def test_title_designer_func_4_50(self):
        '''
        0. Ensure the dependency test ('test_title_designer_func_4_49') is run and passed
        1. Unfold [Object Setting] Tab in [Title Designer]
        2. Drag Vertical Slider to (1) in [Title Designer]
        3. Check if [Render Order] title is shown in [Title Designer] by checking (L.title_designer.object_setting.text_render_method)
        4. Set [Object Setting Render Method] with index (2) to ('Each Character')
        5. Get [Object Setting Render Method] and check result is ('Each Character')
        6. Save template as ('test_title_designer_func_4_50') in [Title Designer]
        7. Click [OK] to leave [Title Designer]
        8. Select media ('test_title_designer_func_4_50') by library icon view
        9. Double Click to enter [Title Designer] > Drag Vertical Slider (1) in [Title Designer]
        10. Get [Object Setting Render Method] and check result is ('Each Character')
        11. Click [OK] button to leave [Title Designer]
        '''
        dependency_test = "test_title_designer_func_4_49"
        self.ensure_dependency(dependency_test)

        # [L357] 3.2 Title Room (General title) > Advanced mode > render order > Default is "Each character" when previous template is applied
        # with uuid("e8701bd9-89ab-416d-b587-74cd1ec92c5e") as case:

        with step("[Action] Unfold [Object Setting] Tab in [Title Designer]"):
            title_designer_page.unfold_object_object_setting_tab(unfold=1)

        with step("[Action] Drag Vertical Slider to (1) in [Title Designer]"):
            title_designer_page.drag_object_vertical_slider(1)

        with step("[Verify] Check if [Render Order] title is shown in [Title Designer]"):
            if main_page.is_not_exist(L.title_designer.object_setting.text_render_method):
                assert False, "Render Order title not found!"

        with step("[Action] Set [Object Setting Render Method] with index (2) to ('Each Character')"):
            title_designer_page.set_object_setting_render_method(2)

        with step("[Verify] Get [Object Setting Render Method] and check result is ('Each Character')"):
            render_method = title_designer_page.get_object_setting_render_method()
            if render_method != 'Each Character':
                assert False, f"Expected render method to be 'Each Character', got '{render_method}'"

        with step("[Action] Save template as ('test_title_designer_func_4_50') in [Title Designer]"):
            title_designer_page.save_as_name('test_title_designer_func_4_50', click_ok=1)

        with step("[Action] Click [OK] to leave [Title Designer]"):
            title_designer_page.click_ok()

        with step("[Action] Select media ('test_title_designer_func_4_50') by library icon view"):
            main_page.select_library_icon_view_media('test_title_designer_func_4_50')

        with step("[Action] Double Click to enter [Title Designer] > Drag Vertical Slider (1) in [Title Designer]"):
            main_page.double_click()
            title_designer_page.drag_object_vertical_slider(1)

        with step("[Verify] Get [Object Setting Render Method] and check result is ('Each Character')"):
            render_method = title_designer_page.get_object_setting_render_method()
            if render_method != 'Each Character':
                assert False, f"Expected render method to be 'Each Character after re-enter', got '{render_method}'"

        with step("[Action] Click [OK] button to leave [Title Designer]"):
            title_designer_page.click_ok()

        assert True

    # 13 uuid
    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.open_project
    @pytest.mark.mgt
    @pytest.mark.content_pack
    @pytest.mark.launch
    @pytest.mark.name('[test_title_mgt_func_5_1] Open Project > Motion Graphics title')
    @exception_screenshot
    def test_title_mgt_func_5_1(self):
        '''
        1. Open AP with project: BFT_21_Stage1/test_title_mgt_func_5_1_from_test_title_designer_func_4_45.pdk
        2. Open Title designer with Motion Graphics title
        3. Check if title of title designer is correct
        '''

        with step('[Action] Open AP and open saved project'):
            main_page.start_app()
            project_name = 'Packed_Project/test_title_mgt_func_5_1_from_test_title_designer_func_4_45.pdk'
            save_name = 'Extracted_Folder/test_title_mgt_func_5_1'
            self.open_packed_project(project_name, save_name)

        # [L158] 3.3 Title Designer (motion graphics title) > Open Title designer
        # with uuid("f36c7d26-cec9-47aa-a29c-9aff9bb61e6c") as case:
        with step('[Action] Open Title designer with Motion Graphics title'):
            # enter Title room
            main_page.enter_room(1)
            main_page.select_LibraryRoom_category('Motion Graphics')
            main_page.select_library_icon_view_media('Motion Graphics 002')

            # Enter title designer
            main_page.double_click()
            time.sleep(DELAY_TIME * 2)
            title_designer_page.mgt.click_warning_msg_ok()

        with step('[Verify] Check if title of title designer is correct'):
            check_title_caption = title_designer_page.get_title()

            if check_title_caption != 'Motion Graphics 002':
                assert False, f"Title designer is not opened correctly! Expected: Motion Graphics 002, Actual: {check_title_caption}"
        assert True

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.title
    @pytest.mark.name('[test_title_mgt_func_5_2] Check title track')
    @exception_screenshot
    def test_title_mgt_func_5_2(self):
        '''
        1. Enter MGT -- Title tab
        2. Check if title track is correct
        3. Switch to other track
        4. Check if title track is correct
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_1"
        self.ensure_dependency(dependency_test)

        # [L159] 3.3 Title Designer (motion graphics title) > Title > Select title track
        # with uuid("1819ea47-ec11-402e-ab01-bf894b84a615") as case:

        with step('[Action] Enter mgt -- title tab'):
            # Unfold Title
            title_designer_page.mgt.unfold_title_tab()

        with step('[Verify] Check if title track is correct'):
            # Get current selected track
            selected_track_elem = main_page.exist(L.title_designer.title.cbx_select_title).AXTitle
            if selected_track_elem != 'PowerDirector':
                assert False, f"Current selected track is not correct! Expected: PowerDirector, Actual: {selected_track_elem}"
            
        with step('[Action] Switch to other track'):
            # Switch to other track
            title_designer_page.mgt.select_title_track('By CyberLink')

        with step('[Verify] Check if title track is correct'):
            # Check current selected track
            selected_track_elem = main_page.exist(L.title_designer.title.cbx_select_title).AXTitle
            if selected_track_elem != 'By CyberLink':
                assert False, f"Current selected track is not correct! Expected: By CyberLink, Actual: {selected_track_elem}"
        assert True

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.title
    @pytest.mark.name('[test_title_mgt_func_5_3] Enter Text to MGT')
    @exception_screenshot
    def test_title_mgt_func_5_3(self):
        '''
        1. Enter text to MGT
        2. Check if text is entered correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_2"
        self.ensure_dependency(dependency_test)

        # [L160] 3.3 Title Designer (motion graphics title) > Title > Edit text
        # with uuid("b7e68c42-15cc-4296-92c2-8ed8ff57bbe1") as case:

        with step('[Action] Enter text to MGT'):
            title_designer_page.mgt.input_title_text('がぎぐげご さしすせ')

        with step('[Verify] Check if text is entered correctly'):
            # Check current selected track
            selected_track_elem = main_page.exist(L.title_designer.title.cbx_select_title).AXTitle
            if selected_track_elem != 'がぎぐげご さしすせ':
                assert False, f"Current selected track is not correct! Expected: がぎぐげご さしすせ, Actual: {selected_track_elem}"

        assert True

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.name('[test_title_mgt_func_5_4] Modify font type/ Apply Bold/ Apply Font Color')
    @exception_screenshot
    def test_title_mgt_func_5_4(self):
        '''
        1. Modify font type and check preview
        2. Apply Bold and check preview
        3. Apply Font Color and check preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_3"
        self.ensure_dependency(dependency_test)

        with step('[Action] Modify font type'):
            before_img = main_page.snapshot(locator=L.title_designer.main_window)
            # Modify font type
            title_designer_page.mgt.apply_font_type('Trebuchet MS Regular')
            
        with step('[Verify] Check if preview changed correctly after modify font type'):
            applied_font_type = main_page.snapshot(locator=L.title_designer.main_window)
            if main_page.compare(before_img, applied_font_type, similarity=0.999):
                assert False, "Font type is not applied correctly on preview window! Similarity should < 0.999"
        
        with step('[Action] Apply Bold'):
            # Apply Bold
            title_designer_page.mgt.click_bold_btn()

        with step('[Verify] Check if preview changed correctly after apply bold'):
            applied_bold = main_page.snapshot(locator=L.title_designer.main_window)
            if main_page.compare(applied_font_type, applied_bold, similarity=0.999):
                assert False, "Bold is not applied correctly on preview window! Similarity should < 0.999"
        
        with step('[Action] Apply Font Color'):
            # Apply font color
            title_designer_page.mgt.apply_font_face_color('2200E9')

        with step('[Verify] Check if preview changed correctly after apply font color'):
            applied_font_color = main_page.snapshot(locator=L.title_designer.main_window)
            if main_page.compare(applied_bold, applied_font_color, similarity=0.99999):
                assert False, "Font color is not applied correctly on preview window! Similarity should < 0.99999"
        assert True

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.title
    @pytest.mark.name('[test_title_mgt_func_5_5] Adjust Text/ Font Type/ Font Face Color for other track')
    @exception_screenshot
    def test_title_mgt_func_5_5(self):
        '''
        1. Switch to other track
        2. Enter text to MGT and check title
        3. Modify font type and check preview
        4. Apply Font Face Color and check preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_4"
        self.ensure_dependency(dependency_test)

        with step('[Action] Switch to other track'):
            # Switch to other track -----------------------------------
            title_designer_page.mgt.select_title_track('PowerDirector')

        with step('[Action] Enter text to MGT'):
            title_designer_page.mgt.input_title_text('許功蓋＠＃&*_-<>?')

        with step('[Verify] Check if text is entered correctly'):
            # Check current selected track
            selected_track_elem = main_page.exist(L.title_designer.title.cbx_select_title).AXTitle
            if selected_track_elem != '許功蓋＠＃&*_-<>?':
                assert False, f"Current selected track is not correct! Expected: 許功蓋＠＃&*_-<>?, Actual: {selected_track_elem}"

        with step('[Action] Modify font type'):
            before_preview = main_page.snapshot(locator=L.title_designer.main_window)
            # Modify font type
            title_designer_page.mgt.apply_font_type('Hoefler Text Regular')

        with step('[Verify] Check if preview changed correctly after modify font type'):
            applied_font_type = main_page.snapshot(locator=L.title_designer.main_window)
            if main_page.compare(before_preview, applied_font_type, similarity=0.99):
                assert False, "Font type is not applied correctly on preview window! Similarity should < 0.99"

        with step('[Action] Apply Font Face Color'):
            # Apply font color
            title_designer_page.mgt.apply_font_face_color('EA10D7')

        with step('[Verify] Check if preview changed correctly after apply font color'):
            applied_font_face_color = main_page.snapshot(locator=L.title_designer.main_window)
            if main_page.compare(applied_font_type, applied_font_face_color, similarity=0.99):
                assert False, "Font color is not applied correctly on preview window! Similarity should < 0.99"
        assert True


    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.graphics_color
    @pytest.mark.name('[test_title_mgt_func_5_6] Apply Graphics Color')
    @exception_screenshot
    def test_title_mgt_func_5_6(self):
        '''
        1. Room in
        2. Enter Graphics Color tab
        3. Apply Graphics Color -- A81B22
        4. Apply Graphics Color -- C8D996
        5. Apply Graphics Color -- 18FA4F
        6. Check if preview changed correctly as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_5"
        self.ensure_dependency(dependency_test)

        with step('[Action] Room in'):
            # Click [Zoom in] > 87%
            for x in range(3):
                title_designer_page.click_zoom_in()

        # [L161] 3.3 Title Designer (motion graphics title) > Able to change group color
        # with uuid("d8e3d3ad-3758-42e4-922b-6f74d499130a") as case:

        with step('[Action] UnFold Graphics Color tab'):
            # Fold Title tab
            title_designer_page.mgt.unfold_title_tab(unfold=0)
            # Unfold Graphics Color
            title_designer_page.mgt.unfold_graphics_color_tab()
        with step('[Action] Apply Graphics Color -- A81B22'):
            before_preview = main_page.snapshot(locator=L.title_designer.main_window)
            # Change color 1
            title_designer_page.mgt.apply_graphics_color(group_no=1, HexColor='A81B22')

        with step('[Action] Apply Graphics Color -- C8D996'):
            # Change color 2
            title_designer_page.mgt.apply_graphics_color(group_no=2, HexColor='C8D996')

        with step('[Action] Apply Graphics Color -- 18FA4F'):
            # Change color 3
            title_designer_page.mgt.apply_graphics_color(group_no=3, HexColor='18FA4F')

        with step('[Verfiy] Check if preview changed correctly as GT'):
            time.sleep(DELAY_TIME*1.5)
            mgt_preview = main_page.snapshot(locator=L.title_designer.main_window, file_name=Auto_Ground_Truth_Folder + 'L161.png')
            check_current_title = main_page.compare(Ground_Truth_Folder + 'L161.png', mgt_preview)
            if not check_current_title:
                assert False, "Preview is not changed correctly as GT (L161.png) !"
        assert True

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_mgt_func_5_7] Object Settings > Check default position')
    @exception_screenshot
    def test_title_mgt_func_5_7(self):
        '''
        1. Enter Object settings
        2. Check default position
        '''
        # Ensure the dependency test is run and passed
        self.test_title_mgt_func_5_1()

        # [L162] 3.3 Title Designer (motion graphics title) > Object Settings > Position
        # with uuid("14b89fd0-4bcb-4247-abaf-011187aa74e2") as case:

        with step('[Action] Enter Object Setting'):
            # Unfold Object Setting
            title_designer_page.mgt.unfold_object_setting_tab()

        with step('[Verify] Check if default position is correct'):
            default_x_value = title_designer_page.mgt.get_position_x_value()
            default_y_value = title_designer_page.mgt.get_position_y_value()
            assert default_x_value == '0.500' and default_y_value == '0.500', f"Default position is not correct! Expected: x=0.500, y=0.500; Actual: x={default_x_value}, y={default_y_value}"

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_mgt_func_5_8] Set Position vale by textbox/ arrow')
    @exception_screenshot
    def test_title_mgt_func_5_8(self):
        '''
        1. Set x position -- by textbox/ arrow
        2. Check x position value is correct
        3. Set y position -- by textbox/ arrow
        4. Check y position value is correct
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_7"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set x position -- by textbox/ arrow'):
            before_preview = main_page.snapshot(locator=L.title_designer.main_window)
            # Set x = 0.603
            title_designer_page.mgt.set_position_x_value('0.60')
            adjusted_by_textbox = main_page.snapshot(locator=L.title_designer.main_window)
            if main_page.compare(before_preview, adjusted_by_textbox, similarity=0.98):
                assert False, "Position x is not adjusted correctly by textbox! Similarity should < 0.98"
            
            title_designer_page.mgt.click_position_x_arrow_btn(0, 3)
            adjusted_by_arrow = main_page.snapshot(locator=L.title_designer.main_window)
            if main_page.compare(adjusted_by_textbox, adjusted_by_arrow, similarity=0.995):
                assert False, "Position x is not adjusted correctly by arrow! Similarity should < 0.995"
                
        with step('[Verify] Check x position value is correct'):
            check_x_value = title_designer_page.mgt.get_position_x_value()
            if check_x_value != '0.603':
                assert False, f"Position x is not correct! Expected: 0.603, Actual: {check_x_value}"
                
        with step('[Action] Set y position -- by textbox/ arrow'):
            # Set y = 0.531
            before_preview = main_page.snapshot(locator=L.title_designer.main_window)
            title_designer_page.mgt.set_position_y_value('0.53')
            adjusted_by_textbox = main_page.snapshot(locator=L.title_designer.main_window)
            if main_page.compare(before_preview, adjusted_by_textbox, similarity=0.98):
                assert False, "Position y is not adjusted correctly by textbox! Similarity should < 0.98"
            title_designer_page.mgt.click_position_y_arrow_btn(0, 1)
            if main_page.compare(adjusted_by_textbox, adjusted_by_arrow, similarity=0.995):
                assert False, "Position yx is not adjusted correctly by arrow! Similarity should < 0.995"

        with step('[Verify] Check y position value is correct'):
            check_y_value = title_designer_page.mgt.get_position_y_value()
            if check_y_value != '0.531':
                assert False, f"Position y is not correct! Expected: 0.531, Actual: {check_y_value}"
                
        assert True

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_mgt_func_5_9] Check Default Scale value')
    @exception_screenshot
    def test_title_mgt_func_5_9(self):
        '''
        1. Check if default scale is correct
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_8"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check if default scale is correct'):
            # Scroll down
            title_designer_page.drag_object_vertical_slider(1)

            # [L163] 3.3 Title Designer (motion graphics title) > Object Settings > Scale
            # with uuid("b30d1cc7-6482-472d-8a2f-382ed7bf011b") as case:
            default_w_value = title_designer_page.mgt.get_scale_width_value()
            default_h_value = title_designer_page.mgt.get_scale_height_value()

            assert default_w_value == '1.25' and default_h_value == '1.25', f'Default scale is not correct! Expected: w=1.25, h=1.25; Actual: w={default_w_value}, h={default_h_value}'

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_mgt_func_5_10] Set Scale width/ height value by textbox/ arrow')
    @exception_screenshot
    def test_title_mgt_func_5_10(self):
        '''
        1. Set Scale width value by textbox/ arrow with untick maintain_aspect_ratio
        2. Check scale width value is correct
        3. Set Scale height value by textbox/ arrow with untick maintain_aspect_ratio
        4. Check scale height value is correct
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_9"
        self.ensure_dependency(dependency_test)

        with step('[Action] Adjust Scale width value by textbox/ arrow with untick maintain_aspect_ratio'):
            # Set w = 2.01
            title_designer_page.mgt.set_scale_width_value('2.1')
            title_designer_page.mgt.click_maintain_aspect_ratio(0)
            title_designer_page.mgt.click_scale_width_arrow_btn(1, 9)
            
        with step('[Verify] Check scale width value is correct'):
            # Verify Step
            check_w_value = title_designer_page.mgt.get_scale_width_value()
            if check_w_value != '2.01':
                assert False, f"Scale width value is not correct! Expected: 2.01, Actual: {check_w_value}"

        with step('[Action] Adjust Scale height value by textbox/ arrow with untick maintain_aspect_ratio'):
            # Set h = 3.26
            title_designer_page.mgt.set_scale_height_value('3.3')
            title_designer_page.mgt.click_scale_height_arrow_btn(1, 4)

        with step('[Verify] Check scale height value is correct'):
            check_h_value = title_designer_page.mgt.get_scale_height_value()
            if check_h_value != '3.26':
                assert False, f"Scale height value is not correct! Expected: 3.26, Actual: {check_h_value}"
        assert True


    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_mgt_func_5_11] Check Default Rotation value')
    @exception_screenshot
    def test_title_mgt_func_5_11(self):
        '''
        1. Check if default rotation value is correct
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_10"
        self.ensure_dependency(dependency_test)
        
        # [L164] 3.3 Title Designer (motion graphics title) > Object Settings > Rotation
        # with uuid("a4cd66bc-3eb9-4e64-b37c-92ed9118657e") as case:

        with step('[Verify] Check default rotation value'):
            default_rotation_value = title_designer_page.mgt.get_rotation_value()
            assert default_rotation_value == '0.00', f"Default rotation value is not correct! Expected: 0.00, Actual: {default_rotation_value}"

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_mgt_func_5_12] Set Rotation value by textbox > Check ')
    @exception_screenshot
    def test_title_mgt_func_5_12(self):
        '''
        1. Set Rotation value by textbox
        2. Check rotation value is correct
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_11"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Rotation value by textbox'):
            title_designer_page.mgt.set_rotation_value('146')

        with step('[Verify] Check rotation value is correct'):
            check_rotation_value = title_designer_page.mgt.get_rotation_value()
            if check_rotation_value != '146.00':
                assert False, f"Rotation value is not correct! Expected: 146.00, Actual: {check_rotation_value}"
        assert True
        
    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.object_setting
    @pytest.mark.name('[test_title_mgt_func_5_13] Check if preview changed correctly as GT (from test_title_mgt_func_5_7~11)')
    @exception_screenshot
    def test_title_mgt_func_5_13(self):
        '''
        1. Check if preview changed correctly as GT (from test_title_mgt_func_5_7~12)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_12"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check Preview is correct as GT'):
            rotate_preview = main_page.snapshot(locator=L.title_designer.main_window,
                                                  file_name=Auto_Ground_Truth_Folder + 'L164.png')
            check_current_title = main_page.compare(Ground_Truth_Folder + 'L164.png', rotate_preview)

            if not check_current_title:
                assert False, "Preview is not changed correctly as GT (L164.png) !"
            assert True

        
    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.object_setting
    @pytest.mark.canva
    @pytest.mark.name('[test_title_mgt_func_5_14] Undo Rotation > Resize MGT to small')
    @exception_screenshot
    def test_title_mgt_func_5_14(self):
        '''
        1. Zoom out to 67%
        2. Click undo button to set rotation = 0
        3. Check rotation value =0
        4. Resize MGT to small
        5. Check if preview changed correctly after resize
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_13"
        self.ensure_dependency(dependency_test)

        with step('[Initial] Reset zoom to 67%'):
            # Click [Zoom out] twice : 67%
            for _ in range(2):
                title_designer_page.click_viewer_zoom_menu('67%')
                
        # [L165] 3.3 Title Designer (motion graphics title) > Adjust object on preview > Resize
        # with uuid("1ca3cc38-c3b0-4e76-a6dd-d29e2d813324") as case:

        with step('[Action] Click undo button to set rotation = 0'):
            # Click [Undo] button > Rotation = 0
            title_designer_page.click_undo_btn()
            time.sleep(DELAY_TIME)

        with step('[Verify] Check rotation value =0'):
            check_rotation_value = title_designer_page.mgt.get_rotation_value()
            if check_rotation_value != '0.00':
                assert False, f"Rotation value is not correct after undo! Expected: 0.00, Actual: {check_rotation_value}"

        with step('[Action] Resize MGT to small'):
            mgt_default_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)
            # Resize
            title_designer_page.adjust_title_on_canvas.resize_to_small(x=25, y=30)

        with step('[Verify] Check if preview changed correctly after resize'):
            mgt_resize_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)
            if main_page.compare(mgt_default_preview, mgt_resize_preview):
                assert False, "MGT is not resized correctly! Similarity should < 0.95"
        assert True
                

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.canva
    @pytest.mark.name('[test_title_mgt_func_5_15] Move MGT to right')
    @exception_screenshot
    def test_title_mgt_func_5_15(self):
        '''
        1. Select to other track
        2. Move MGT to right
        3. Check if preview changed correctly after move
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_14"
        self.ensure_dependency(dependency_test)
        
        # [L167] 3.3 Title Designer (motion graphics title) > Adjust object on preview > Move
        # with uuid("8a0620c0-7a8a-48c6-945d-640efcf63cbf") as case:

        with step('[Action] Select to other track'):
            # Scroll up
            title_designer_page.drag_object_vertical_slider(0)

            # Switch to other track
            title_designer_page.mgt.select_title_track('がぎぐげご さしすせ')

        with step('[Action] Move MGT to right'):
            before_move_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)
            # Move right
            title_designer_page.adjust_title_on_canvas.drag_move_MGT_to_right(drag_x=55)

        with step('[Verify] Check if preview changed correctly after move'):
            mgt_move_preview = main_page.snapshot(locator=L.title_designer.area.obj_title)
            if main_page.compare(before_move_preview, mgt_move_preview, similarity=0.96):
                assert False, "MGT is not moved correctly! Similarity should < 0.96"
        assert True

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.canva
    @pytest.mark.name('[test_title_mgt_func_5_16] Rotate MGT clockwise on canva')
    @exception_screenshot
    def test_title_mgt_func_5_16(self):
        '''
        1. Rotate MGT clockwise on canva
        2. Check if preview changed correctly after rotate
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_15"
        self.ensure_dependency(dependency_test)

        # [L166] 3.3 Title Designer (motion graphics title) > Adjust object on preview > Rotate

        # with uuid("ffe8e1ca-1579-4072-a267-44c543fc7f43") as case:
            # Max window (VDE224621-0024)
            # title_designer_page.click_maximize_btn()
        with step('[Action] Rotate MGT clockwise on canva'):
            before_rotate_preview = main_page.snapshot(locator=L.title_designer.main_window)
            # Rotate
            title_designer_page.adjust_title_on_canvas.drag_rotate_clockwise('120')
        
        with step('[Verify] Check if preview changed correctly after rotate'):
            after_rotate_preview = main_page.snapshot(locator=L.title_designer.main_window)

            if main_page.compare(before_rotate_preview, after_rotate_preview):
                assert False, "MGT is not rotated correctly! Similarity should < 0.95"
        assert True

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.play_video
    @pytest.mark.name('[test_title_mgt_func_5_17] Play the video > Check if preview changed correctly after play')
    @exception_screenshot
    def test_title_mgt_func_5_17(self):
        '''
        1. Play the video
        2. Check if preview changed correctly after play
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_16"
        self.ensure_dependency(dependency_test)

        # [L168] 3.3 Title Designer (motion graphics title) > Preview in designer
        # with uuid("eaaca4e6-220a-4e9f-bf56-15612cc92425") as case:
        with step('[Action] Play the video'):
            # Play then stop
            title_designer_page.mgt.click_preview_operation('Play')
        
        with step('[Verify] Check if preview changed correctly after play'):
            check_preview_update = main_page.Check_PreviewWindow_is_different(L.title_designer.area.frame_preview, sec=2)
            if not check_preview_update:
                assert False, "Preview is not updated after play in 2 secs!"
        assert True

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.play_video
    @pytest.mark.name('[test_title_mgt_func_5_18] Stop the video')
    @exception_screenshot
    def test_title_mgt_func_5_18(self):
        '''
        1. Stop the video
        2. Check back to 00:00 after stop video
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_17"
        self.ensure_dependency(dependency_test)

        with step('[Action] Stop the video'):
            title_designer_page.mgt.click_preview_operation('Stop')
            time.sleep(DELAY_TIME)
        
        with step('[Verify] Check back to 00:00 after stop video'):
            current_timecode = title_designer_page.get_timecode()
            if current_timecode != '00:00:00:00':
                assert False, f"Current timecode is not correct after stop video! Expected: 00:00:00:00, Actual: {current_timecode}"
        assert True

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.name('[test_title_mgt_func_5_19] Check preview at 03:00 (from test_title_mgt_func_5_7~18)')
    @exception_screenshot
    def test_title_mgt_func_5_19(self):
        '''
        1. Set timecode to 00:00:03:00
        2. Check if preview changed correctly after set timecode as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_18"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set timecode to 00:00:03:00'):
            # Set timecode :
            title_designer_page.set_timecode('00_00_03_00')

        with step('[Verify] Check if preview changed correctly after set timecode as GT'):

            current_timecode_preview = main_page.snapshot(locator=L.title_designer.area.frame_preview, file_name=Auto_Ground_Truth_Folder + 'L168.png')

            if not main_page.compare(Ground_Truth_Folder + 'L168.png', current_timecode_preview):
                assert False, "Preview is not changed correctly as GT (L168.png) !"
        assert True

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.timecode
    @pytest.mark.save_template
    @pytest.mark.name('[test_title_mgt_func_5_20] Save the template and apply > Check preview as GT')
    @exception_screenshot
    def test_title_mgt_func_5_20(self):
        '''
        1. Save Template
        2. Apply the saved templated
        3. Check if preview changed correctly after set timecode as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_19"
        self.ensure_dependency(dependency_test)

        # [L169] 3.3 Title Designer (motion graphics title) > Save / Save as template
        # with uuid("c95ee09b-deb2-48b5-a606-e08332a79148") as case:

        with step('[Action] Save template'):
            # Save template
            main_page.click(L.title_designer.btn_save_as)
            title_designer_page.click_custom_name_ok('BFT_MGT_Save')
            # Click [OK]
            title_designer_page.click_ok()

        with step('[Action] Apply the saved template'):
            main_page.select_library_icon_view_media('BFT_MGT_Save')
            main_page.double_click()
            time.sleep(DELAY_TIME * 2)
            title_designer_page.mgt.click_warning_msg_ok()

        with step('[Verify] Check if preview changed correctly after apply the saved template as GT'):
            # Set timecode :
            title_designer_page.set_timecode('00_00_03_00')
            time.sleep(DELAY_TIME*2)

            # # Set zoom menu to 67%
            # title_designer_page.mgt.click_zoom_in()
            # time.sleep(DELAY_TIME)

            saved_preview = main_page.snapshot(locator=L.title_designer.area.frame_preview,  file_name=Auto_Ground_Truth_Folder + 'L169.png')
            check_save_result = main_page.compare(Ground_Truth_Folder + 'L168.png', saved_preview, similarity=0.98)
            assert check_save_result, "Preview is not changed correctly as GT (L168.png) !"

    @pytest.mark.title_mgt_func
    @pytest.mark.title_designer
    @pytest.mark.mgt
    @pytest.mark.timeline
    @pytest.mark.save_project
    @pytest.mark.name('[test_title_mgt_func_5_21] Add saved template to timeline')
    @exception_screenshot
    def test_title_mgt_func_5_21(self):
        '''
        1. Add saved template to timeline
        2. Check if preview changed correctly after set timecode as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_20"
        self.ensure_dependency(dependency_test)

        # [L170] 3.3 Title Designer (motion graphics title) > Add saved
        # with uuid("6f207683-e25a-43e9-96d0-dde73bc9db9b") as case:

        with step('[Action] Add saved template to timeline'):
            # Click [OK]
            title_designer_page.click_ok()
            # select timeline track 2
            main_page.timeline_select_track(2)
            # Set timecode :
            main_page.set_timeline_timecode('00_00_09_00')
            # Drag BFT_title_Save to timeline track 2
            main_page.drag_media_to_timeline_playhead_position('BFT_MGT_Save', track_no=2)


        with step('[Verify] Check if preview changed correctly after set timecode as GT'):
            # Set timecode :
            main_page.set_timeline_timecode('00_00_03_00')
            time.sleep(DELAY_TIME)

            timeline_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L170.png')
            check_current_title = main_page.compare(Ground_Truth_Folder + 'L170.png', timeline_preview, similarity=0.85)
            if not check_current_title:
                assert False, "Preview is not changed correctly as GT (L170.png) !"

        with step('[Action] Save project'):
            # Save project:
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_title_mgt_func_5_21',
                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')
            
        assert True


    # 5 uuid
    @pytest.mark.title_search_func
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.recent_project
    @pytest.mark.name('[test_title_search_func_6_1] Open Recent Project on launcher')
    @exception_screenshot
    def test_title_search_func_6_1(self):
        '''
        1. Reopen APP and open project from recent project ('test_title_mgt_func_5_21.pds') from launcher
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_mgt_func_5_21"
        self.ensure_dependency(dependency_test)

        with step('[Action] Reopen APP and open project from recent project'):
            # launch APP
            main_page.launch_app()
            time.sleep(DELAY_TIME*0.5)
            # [L39] 1.3 New Launcher > Project area > Recent Project > Single Click
            # with uuid("18c53c7b-5889-45ea-bac4-c84392ec1ea1") as case:
            # Select 1st recently
            main_page.click(L.base.launcher_window.img_recently_icon)

        with step('[Verify] Check if project is opened correctly'):
                time.sleep(DELAY_TIME*3) # wait for project loaded
                # Verify Step:
                if not main_page.exist(L.base.main_caption):
                    assert False, 'Cannot find locator main_caption / Not find project name locator'
                elif main_page.exist(L.base.main_caption).AXValue == 'test_title_mgt_func_5_21':
                    assert True

    @pytest.mark.title_search_func
    @pytest.mark.title_room
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @pytest.mark.name('[test_title_search_func_6_2] Search library with keyword in title room')
    @exception_screenshot
    def test_title_search_func_6_2(self):
        '''
        1. Enter Title Room with all content category
        2. Search library with keyword [winter] and check if [winter wonderland] is found
        3. Click cancel search and search again with keyword [Ice Skates] and check if [Ice Skates] is found
        4. Click cancel search and search again with keyword [Colorful 01] and check if [Colorful 01] is found

        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_search_func_6_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Enter Title Room with all content category'):
            # [L208] 2.3 Title Room > Input some keyword
            # enter Title room
            main_page.enter_room(1)
            # switch to all content category
            media_room_page.select_specific_category('All Content')

        with step('[Action] Search library with keyword [winter]'):
            # with uuid("1a6f7ebb-0cba-423d-b0f0-a915e606484a") as case:
            # Select template (search library: Winter Sticker 01)
            media_room_page.search_library('winter')

        with step('[Verify] Check if search result is correct [winter wonderland]'):
            # verify step
            if not main_page.select_library_icon_view_media('Winter Wonderland'):
                assert False, "Cannot find [Winter Wonderland] in search result!"

        with step('[Action] Click cancel search and search again with keyword [Ice Skates]'):
            # Click cancel search
            media_room_page.search_library_click_cancel()

            # Select template (search library: Ice Skates)
            media_room_page.search_library('Ice Skates')

        with step('[Verify] Check if search result is correct [Ice Skates]'):
            if not main_page.select_library_icon_view_media('Ice Skates'):
                assert False, "Cannot find [Ice Skates] in search result!"
        
        with step('[Action] Click cancel search and search again with keyword [Colorful 01]'):
            # Click cancel search
            media_room_page.search_library_click_cancel()
            # Select template (search library: Colorful 01 )
            media_room_page.search_library('Colorful 01')

        with step('[Verify] Check if search result is correct [Colorful 01]'):
            if not main_page.select_library_icon_view_media('Colorful 01'):
                assert False, "Cannot find [Colorful 01] in search result!"
        assert True

    @pytest.mark.title_search_func
    @pytest.mark.title_room
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @pytest.mark.name('[test_title_search_func_6_3] Search library with should not found anything keyword in title room')
    @exception_screenshot
    def test_title_search_func_6_3(self):
        '''
        1. Click cancel search and search again with keyword [.] and check if nothing found
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_search_func_6_2"
        self.ensure_dependency(dependency_test)

        # [L209] 2.3 Title Room > Input . character
        # with uuid("4c4db52c-5f66-4ced-b560-b6749ec7da64") as case:

        with step('[Action] Click cancel search and search again with keyword [.]'):
            # Click cancel search
            media_room_page.search_library_click_cancel()

            media_room_page.search_library('.')

        with step('[Verify] Check if search result is correct (Should not find any result)'):
            # verify result:
            assert main_page.is_exist(L.media_room.txt_no_results_for_dot), "Found some result with keyword [.]! Should not find any result!"

    @pytest.mark.title_search_func
    @pytest.mark.title_room
    @pytest.mark.search_library
    @pytest.mark.name('[test_title_search_func_6_4] Check history search in Title Room')
    @exception_screenshot
    def test_title_search_func_6_4(self):
        '''
        1. Enter [Search the library] textbox and show history
        2. Check show correct search history
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_search_func_6_3"
        self.ensure_dependency(dependency_test)

        # [L211] 2.3 Title Room > check all search keyword
        # with uuid("de131070-6075-4176-84d2-0f4c0c641f6a") as case:

        with step('[Action] Enter [Search the library] textbox and show history'):
            # Enter Plain Text category
            media_room_page.select_LibraryRoom_category('Plain Text')

            # get search filed size / position
            search_object = main_page.exist(L.media_room.input_search)

            # click search filed
            main_page.click(L.media_room.input_search)
            time.sleep(DELAY_TIME * 1.5)
        
        with step('[Verify] Check show correct search history'):
            with step('[Action] Check snapshot region (Region: From import button to My Favorites)'):
                w, h = search_object.AXSize
                x, y = search_object.AXPosition

                # snapshot region (Region: From import button to My Favorites)
                new_x = x
                new_y = y
                new_w = w + 5
                new_h = h * 12
            all_search_result = main_page.screenshot(file_name=Auto_Ground_Truth_Folder + 'L211_all_search.png', w=new_w, x=new_x, y=new_y, h=new_h)
            assert main_page.compare(Ground_Truth_Folder + 'L211_all_search.png', all_search_result), "Search history is not correct as GT (L211_all_search.png)!"

    @pytest.mark.title_search_func
    @pytest.mark.title_room
    @pytest.mark.open_project
    @pytest.mark.name('[test_title_search_func_6_5] Check hint not show in Media room due to import project content in Library')
    @exception_screenshot
    def test_title_search_func_6_5(self):
        '''
        1. Enter Media room
        2. Check should NOT show any hint due to import project content in Library
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_title_search_func_6_4"
        self.ensure_dependency(dependency_test)

        # [L100] 2.1 Media Room > New One Boarding > On Boarding 1 > [Case 2] open one project
        # with uuid("fd97c083-8de8-4d12-b7a9-2ddf7caf9e0d") as case:
            # Verify step: should NOT show any hint due to import project's content in Library

        with step('[Action] Enter Media room'):
            # enter Media room
            main_page.enter_room(0)

        with step('[Verify] Should NOT show any hint due to import project content in library'):
            assert main_page.is_not_exist(L.media_room.string_use_sample_media), "Show hints in Media room! Should NOT show any hint due to import project content in Library"

    @pytest.mark.pip_designer_func
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.pip_room
    @pytest.mark.timeline
    @pytest.mark.content_pack
    @pytest.mark.name('[test_pip_designer_func_7_1] Add pip object to timeline')
    @exception_screenshot
    def test_pip_designer_func_7_1(self):
        '''
        1. Open AP and open saved project
        2. Select timeline track 3 and set timecode to (09:00)
        3. Open PiP designer
        4. Search > Select template [Mood 09]
        5. Add to timeline
        6. Check if template is added to timeline
        '''

        with step('[Action] Open AP and open saved project'):
            main_page.start_app()
            time.sleep(DELAY_TIME)

            project_name = 'Packed_Project/test_pip_designer_func_7_1_from_test_title_mgt_func_5_21.pdk'
            save_name = 'Extracted_Folder/test_pip_designer_func_7_1'
            self.open_packed_project(project_name, save_name)

        with step('[Action] Select timeline track 3 and set timecode to (09:00)'):
            # select timeline track 3
            main_page.timeline_select_track(3)
            # Set timecode :
            main_page.set_timeline_timecode('00_00_09_00')

        # [L374] 3.3 Pip Designer (Dialog_09) > Open PiP designer
        # with uuid("4ddeabc0-9f40-4621-bd9a-118beeef450e") as case:
        with step('[Action] Open PiP designer'):
            # enter PiP room
            main_page.enter_room(4)
            
        with step('[Action] Search > Select template [Mood 09]'):
            # Select template (21.6.5219 : search then select Mood Sticker 09)
            media_room_page.search_library('Mood 09')
            main_page.select_library_icon_view_media('Mood 09')
            # Download IAD template
            time.sleep(DELAY_TIME * 4)

        with step('[Action] Add to timeline'):
            main_page.right_click()
            main_page.select_right_click_menu('Add to Timeline')

        with step('[Action] Set template duration to 10 sec'):
            main_page.tips_area_click_set_length_of_selected_clip('00_00_10_00')

        with step('[Verify] Check if template is added to timeline'):
            # On timeline track 2 : Select Dialog_09 > double click to enter pip designer
            timeline_operation_page.select_timeline_media(track_index=4, clip_index=1)
            main_page.double_click()
            check_title = pip_designer_page.get_title()
            assert check_title == 'Mood 09', f"Template is not added to timeline! Expected: Mood 09, Actual: {check_title}"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.name('[test_pip_designer_func_7_2] Switch to Advance Mode and Express Mode')
    @exception_screenshot
    def test_pip_designer_func_7_2(self):
        '''
        1. Check default mode is Express Mode
        2. Switch to Advance Mode and check if switch correctly
        3. Switch to Express Mode and check if switch correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_1"
        self.ensure_dependency(dependency_test)

        # [L375] 3.3 Pip Designer > Switch to [Advance] mode or [Express] Mode
        # with uuid("ef3ed38d-1e2a-483d-a25e-f59b89c4fa5f") as case:

        with step('[Verify] Check default mode is Express Mode'):
            get_mode = pip_designer_page.express_mode.get_current_mode()
            if get_mode != 'Express Mode':
                assert False, f"Default mode is not Express Mode! Expected: Express Mode, Actual: {get_mode}"

        with step('[Action] Switch to [Advance] mode'):
            pip_designer_page.switch_mode('Advanced')

        with step('[Verify] Check switch to [Advance] mode'):
            animation_elem = main_page.exist(L.pip_designer.tab_animation)
            if animation_elem == None:
                assert False, "Cannot switch to [Advance] mode!"
        
        with step('[Action] Switch to [Express] mode'):
            pip_designer_page.switch_mode('Express')

        with step('[Verify] Check switch to [Express] mode'):
            get_mode = pip_designer_page.express_mode.get_current_mode()
            if get_mode != 'Express Mode':
                assert False, f"Cannot switch to [Express] mode! Expected: Express Mode, Actual: {get_mode}"
        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_3] Check default value of Opacity')
    @exception_screenshot
    def test_pip_designer_func_7_3(self):
        '''
        1. Unfold Object Settings
        2. Check default value of Opacity
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_2"
        self.ensure_dependency(dependency_test)

        # [L376] 3.3 Pip Designer > Set in [Properties] > Object Setting - Opacity
        # with uuid("6d387c5c-3982-4b6e-ab94-a79ee7b4cbd0") as case:
        with step('[Action] Unfold Object Settings'):
            # Switch to Express Mode
            pip_designer_page.switch_mode('Express')
            # Unfold Object Settings
            pip_designer_page.express_mode.unfold_properties_object_setting_tab()

        with step('[Verify] Check default value of Opacity'):
            get_opacity_default = pip_designer_page.express_mode.get_object_setting_opacity_value()

            assert get_opacity_default == '100%', f"Default value of Opacity is not correct! Expected: 100%, Actual: {get_opacity_default}"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_4] Adjust Opacity value by arrow')
    @exception_screenshot
    def test_pip_designer_func_7_4(self):
        '''
        1. Adjust Opacity value by arrow
        2. Check if Opacity value is changed correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_3"
        self.ensure_dependency(dependency_test)

        with step('[Action] Adjust Opacity value by arrow'):
            # Click arrow button to 76%
            pip_designer_page.express_mode.click_object_setting_opacity_arrow_btn(1,25)
            pip_designer_page.express_mode.click_object_setting_opacity_arrow_btn(0, 1)

        with step('[Verify] Check if Opacity value is changed correctly'):
            check_opacity = pip_designer_page.express_mode.get_object_setting_opacity_value()
            assert check_opacity == '76%', f"Opacity value is not changed correctly! Expected: 76%, Actual: {check_opacity}. Action: 100>75>76"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_5] Add 2 Position Keyframes > Switch to previous keyframe')
    @exception_screenshot
    def test_pip_designer_func_7_5(self):
        '''
        1. Switch to Advance Mode
        2. Add Position (0.5, 0.5) keyframe at (00:00)
        3. Add Scale (0.803, 0.68) keyframe at (04:12)
        4. Switch to previous keyframe and check if switch to (00:00) keyframe correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_4"
        self.ensure_dependency(dependency_test)

        # [L381] 3.3 Pip Designer > Object Setting > Able to add position/scale/opacity/Rotation keyframe with correct value
        # with uuid("91625334-9a98-4452-8055-5a199526738f") as case:

        with step('[Action] Switch to Advance Mode'):
            pip_designer_page.switch_mode('Advanced')

        with step('[Action] Add Position (0.5, 0.5) keyframe at (00:00)'):
            # Add position keyframe: 0s Position: (0.5, 0.5)
            pip_designer_page.add_remove_position_current_keyframe()

        with step('[Action] Add Position (0.803, 0.68) keyframe at (04:12)'):
            # Set (04:12), Position: (0.803, 0.68)
            pip_designer_page.set_timecode('00_00_04_12')
            pip_designer_page.input_x_position_value('0.803')
            pip_designer_page.input_y_position_value('0.68')

        with step('[Action] Switch to previous keyframe'):
            # Click previous keyframe
            pip_designer_page.tap_position_previous_keyframe()

        with step('[Verify] Check if switch to (00:00) keyframe correctly'):
            get_timecode = pip_designer_page.get_timecode()
            assert get_timecode == '00:00:00:00', f"Cannot switch to (00:00) keyframe correctly! Expected: 00:00:00:00, Actual: {get_timecode}"


    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_6] Switch to next keyframe > Check timecode/ x position/ y position')
    @exception_screenshot
    def test_pip_designer_func_7_6(self):
        '''
        1. Switch to next keyframe
        2. Check if switch to (04:12) keyframe correctly
        3. Check if x position is 0.803
        4. Check if y position is 0.68
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_5"
        self.ensure_dependency(dependency_test)

        with step('[Action] Switch to next keyframe'):
            # Click next keyframe
            pip_designer_page.tap_position_next_keyframe()

        with step('[Verify] Check if switch to (04:12) keyframe correctly'):
            get_timecode = pip_designer_page.get_timecode()
            if get_timecode != '00:00:04:12':
                assert False, f"Cannot switch to (04:12) keyframe correctly! Expected: 04:12, Actual: {get_timecode}"

        with step('[Verify] Check if x position is 0.803'):
            get_x_value = pip_designer_page.get_x_position_value()
            if get_x_value != '0.803':
                assert False, f"X position is not 0.803! Expected: 0.803, Actual: {get_x_value}"

        with step('[Verify] Check if y position is 0.68'):
            get_y_value = pip_designer_page.get_y_position_value()
            if get_y_value != '0.680':
                assert False, f"Y position is not 0.68! Expected: 0.68, Actual: {get_y_value}"

        assert True


    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_7] Delete 2nd Position Keyframe > Switch to previous keyframe')
    @exception_screenshot
    def test_pip_designer_func_7_7(self):
        '''
        1. Set Position (0.350, 0.761) keyframe at (07:15)
        2. Click previous keyframe and check if switch to (04:12) keyframe correctly
        3. Remove 2nd Position keyframe (only exist 1st, last keyframe)
        4. Click next keyframe > previous keyframe and check if switch to (00:00) keyframe correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_6"
        self.ensure_dependency(dependency_test)


        with step('[Action] Set Position (0.350, 0.761) keyframe at (07:15)'):
            pip_designer_page.set_timecode('00_00_07_15')
            pip_designer_page.input_x_position_value('0.350')
            pip_designer_page.input_y_position_value('0.761')

        with step('[Action] Click previous keyframe'):
            # Click previous keyframe
            pip_designer_page.tap_position_previous_keyframe()

        with step('[Verify] Check if switch to (04:12) keyframe correctly'):
            get_timecode = pip_designer_page.get_timecode()
            if get_timecode != '00:00:04:12':
                assert False, f"Cannot switch to (04:12) keyframe correctly! Expected: 04:12, Actual: {get_timecode}"

        with step('[Action] Delect position keyframe at (04:12)'):
            # Remove 2nd Position keyframe (only exist 1st, last keyframe)
            pip_designer_page.add_remove_position_current_keyframe()

        with step('[Action] Click next keyframe > previous keyframe'):
            # Click next keyframe
            pip_designer_page.tap_position_next_keyframe()
            # Click previous keyframe
            pip_designer_page.tap_position_previous_keyframe()

        with step('[Verify] Check if switch to (00:00) keyframe correctly'):
            get_timecode = pip_designer_page.get_timecode()
            if get_timecode != '00:00:00:00':
                assert False, f"Cannot switch to (00:00) keyframe correctly! Expected: 00:00:00:00, Actual: {get_timecode}"

        assert True


    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_8] Add 2 scale keyframes > Switch to previous keyframe')
    @exception_screenshot
    def test_pip_designer_func_7_8(self):
        '''
        1. Set Scale width (1.733) keyframe at (04:12)
        2. Set Scale height (2.857) keyframe at (07:15) w/o Maintain Aspect Ratio
        3. Switch to previous keyframe and check if switch to (04:12) keyframe correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_7"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Scale width (1.733) keyframe at (04:12)'):
            # Set Scale : 1st keyframe
            pip_designer_page.set_timecode('00_00_04_12')
            pip_designer_page.drag_scale_width_slider('1.733')
            pip_designer_page.add_remove_scale_current_keyframe()
            
        with step('[Action] Set Scale height (2.857) keyframe at (07:15) w/o Maintain Aspect Ratio'):
            # Set (07:15)
            pip_designer_page.set_timecode('00_00_07_15')
            pip_designer_page.click_scale_maintain_aspect_ratio(bCheck=0)
            # Set Scale : 2nd keyframe
            pip_designer_page.input_scale_height_value('2.857')

        with step('[Action] Switch to previous keyframe'):
            # Click previous keyframe
            pip_designer_page.tap_scale_previous_keyframe()

        with step('[Verify] Check if switch to (04:12) keyframe correctly'):
            get_timecode = pip_designer_page.get_timecode()
            assert get_timecode == '00:00:04:12', f"Cannot switch to (04:12) keyframe correctly! Expected: 04:12, Actual: {get_timecode}"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_9] Switch to next keyframe > Check timecode/ height scale/ width scale')
    @exception_screenshot
    def test_pip_designer_func_7_9(self):
        '''
        1. Switch to next keyframe
        2. Check if switch to (07:15) keyframe correctly
        3. Check if height scale is 2.857
        4. Check if width scale is 1.733
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_8"
        self.ensure_dependency(dependency_test)

        with step('[Action] Switch to next keyframe'):
            # Click next keyframe
            pip_designer_page.tap_scale_next_keyframe()

        with step('[Verify] Check if switch to (07:15) keyframe correctly'):
            get_timecode = pip_designer_page.get_timecode()
            if get_timecode != '00:00:07:15':
                assert False, f"Cannot switch to (07:15) keyframe correctly! Expected: 07:15, Actual: {get_timecode}"

        with step('[Verify] Check if height scale is 2.857'):
            get_height_value = pip_designer_page.get_scale_height_value()
            if get_height_value != '2.857':
                assert False, f"Height scale is not 2.857! Expected: 2.857, Actual: {get_height_value}"

        with step('[Verify] Check if width scale is 1.733'):
            get_width_value = pip_designer_page.get_scale_width_value()
            if get_width_value != '1.733':
                assert False, f"Width scale is not 1.733! Expected: 1.733, Actual: {get_width_value}"

        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_10] Set 2 Rotation Keyframes > Switch to next keyframe')
    @exception_screenshot
    def test_pip_designer_func_7_10(self):
        '''
        1. Set Rotation (0) keyframe at (04:12)
        2. Adjust UI to show Rotation keyframe track
        3. Set Rotation (270) keyframe at (03:10)
        4. Switch to next keyframe
        5. Check if switch to (07:15) keyframe correctly
        6. Check if degree is 0
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_9"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Rotation (0) keyframe at (07:15)'):

            # drag scroll bar
            pip_designer_page.drag_properties_scroll_bar(0.72)
            # Set Rotation : 1st keyframe on (04:12)  0 degree
            pip_designer_page.add_remove_rotation_current_keyframe()

        with step('[Action] Adjust UI to show Rotation keyframe track'):
            # drag simple timeline to larger (Can see Rotation keyframe track)
            pip_designer_page.drag_simple_timeline_track_to_lager()

            # Click max button
            pip_designer_page.click_maximize_btn()
            # drag properties scroll bar
            pip_designer_page.drag_properties_scroll_bar(0)

        with step('[Action] Set Rotation (270) keyframe at (03:10)'):
            # Set Rotation : 2nd keyframe (03:10) 270 degree
            pip_designer_page.set_timecode('00_00_03_10')
            pip_designer_page.add_remove_rotation_track_current_keyframe()
            pip_designer_page.input_rotation_degree_value(270)

        with step('[Action] Switch to next keyframe'):
            # Click next keyframe
            pip_designer_page.tap_rotation_next_keyframe()

        with step('[Verify] Check if switch to (07:15) keyframe correctly'):
            get_timecode = pip_designer_page.get_timecode()
            if get_timecode != '00:00:07:15':
                assert False, f"Cannot switch to (07:15) keyframe correctly! Expected: 07:15, Actual: {get_timecode}"

        with step('[Verify] Check if degree is 0'):

           # Check degree
            current_degree = pip_designer_page.exist(L.pip_designer.object_setting.rotation.degree_value)
            assert current_degree.AXValue == '0', f"Degree is not 0! Expected: 0, Actual: {current_degree.AXValue}"


    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_11] Add 3 Opacity Keyframes > Switch to previous keyframe')
    @exception_screenshot
    def test_pip_designer_func_7_11(self):
        '''
        1. Set Opacity (100) keyframe at (00:20)
        2. Set Opacity (100) keyframe at (01:20)
        3. Set Opacity (99) keyframe at (03:10)
        4. Swtich to previous keyframe
        5. Check if switch to (01:20) keyframe correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_10"
        self.ensure_dependency(dependency_test)

        # [L385] 3.3 Pip Designer > Adjust keyframe > Add
        # with uuid("9e576f88-8a62-47ff-bc6a-58f75116b112") as case:

        with step('[Action] Set Opcity (100) keyframe at (00:20)'):
            # Set Opacity : 1st keyframe (00:20)
            pip_designer_page.set_timecode('00_00_00_20')
            pip_designer_page.add_remove_opacity_track_current_keyframe()

        with step('[Action] Set Opcity (100) keyframe at (01:20)'):
            # Set Opacity : 2nd keyframe (01:20)
            pip_designer_page.set_timecode('00_00_01_20')
            pip_designer_page.add_remove_opacity_track_current_keyframe()

        with step('[Action] Set Opcity (99) keyframe at (03:10)'):
            # Set Opacity : 3rd keyframe (03:10)
            pip_designer_page.set_timecode('00_00_03_10')
            pip_designer_page.add_remove_opacity_track_current_keyframe()
            # Set Opacity to 99% on 3rd keyframe
            pip_designer_page.express_mode.drag_object_setting_opacity_slider('99')

        with step('[Action] Swtich to previous keyframe'):
            pip_designer_page.tap_opacity_track_previous_keyframe()
            
        with step('[Verify] Check if switch to (01:20) keyframe correctly'):
            # Verify step:
            check_timecode = pip_designer_page.get_timecode()
            assert check_timecode == '00:00:01:20', f"Cannot switch to (01:20) keyframe correctly! Expected: 01:20, Actual: {check_timecode}"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_12] Switch to next keyframe > Check timecode/ Opacity')
    @exception_screenshot
    def test_pip_designer_func_7_12(self):
        '''
        1. Set Opacity (25) keyframe at (01:20) and switch to next keyframe
        2. Check if switch to (03:10) keyframe correctly
        3. Check if Opacity is 99
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_11"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Opacity to 25 and switch to next keyframe'):
            pip_designer_page.express_mode.drag_object_setting_opacity_slider('25')
            pip_designer_page.tap_opacity_track_next_keyframe()
            
        with step('[Verify] Check if switch to (03:10) keyframe correctly'):
            check_timecode = pip_designer_page.get_timecode()
            if not check_timecode == '00:00:03:10':
                assert False, f"Cannot switch to (03:10) keyframe correctly! Expected: 03:10, Actual: {check_timecode}"

        with step('[Verify] Check if Opacity is 99%'):
            check_opacity = pip_designer_page.express_mode.get_object_setting_opacity_value()
            if not check_opacity == '99%':
                assert False, f"Opacity is not 99%! Expected: 99%, Actual: {check_opacity}"
        assert True


    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_13] Switch to (00:00) and check if preview is correct as GT')
    @exception_screenshot
    def test_pip_designer_func_7_13(self):
        '''
        1. Switch to (00:00) and check if preview is correct as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_12"
        self.ensure_dependency(dependency_test)

        # [L387] 3.3 Pip Designer > Adjust keyframe > Switch keyframe
        # with uuid("fb1acb9f-1c3a-4f23-b1c6-389d9d42d3d5") as case:

        with step('[Verify] Check if switch to (00:00) keyframe correctly'):
            pip_designer_page.set_timecode('00_00_00_00')
            time.sleep(DELAY_TIME*0.2)

            check_preview = main_page.snapshot(locator=L.pip_designer.designer_window,
                                               file_name=Auto_Ground_Truth_Folder + 'L185.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L185.png', check_preview)
            assert compare_result, "Preview is not correct as GT (L185.png)!"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_14] Reset all Position keyframe')
    @exception_screenshot
    def test_pip_designer_func_7_14(self):
        '''
        1. Reset all Position keyframe
        2. Check if all Position keyframe is removed (No Next/ Previous keyframe)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_13"
        self.ensure_dependency(dependency_test)

        with step('[Action] Reset Position keyframe'):
            # Reset all Position keyframe
            pip_designer_page.reset_position_keyframe()
            main_page.click(L.main.confirm_dialog.btn_yes)

        with step('[Verify] Check if all Position keyframe is removed'):
            # click next keyframe
            pip_designer_page.tap_position_next_keyframe()
            check_timecode = pip_designer_page.get_timecode()
            if not check_timecode == '00:00:00:00':
                assert False, f"Cannot remove all Position keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}"
            # click previous keyframe
            pip_designer_page.tap_position_previous_keyframe()
            check_timecode = pip_designer_page.get_timecode()
            if not check_timecode == '00:00:00:00':
                assert False, f"Cannot remove all Position keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}"
        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_15] Reset all Scale keyframe')
    @exception_screenshot
    def test_pip_designer_func_7_15(self):
        '''
        1. Reset all Scale keyframe
        2. Check if all Scale keyframe is removed (No Next/ Previous keyframe)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_14"
        self.ensure_dependency(dependency_test)

        with step('[Action] Reset all Scale keyframe'):
            # Reset all Scale keyframe
            pip_designer_page.reset_scale_keyframe()
            time.sleep(DELAY_TIME*2)
            main_page.click(L.main.confirm_dialog.btn_yes)
        
        with step('[Verify] Check if all Scale keyframe is removed'):
            # click next keyframe
            pip_designer_page.tap_scale_track_next_keyframe()
            check_timecode = pip_designer_page.get_timecode()
            if not check_timecode == '00:00:00:00':
                assert False, f"Cannot remove all Scale keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}"
            # click previous keyframe
            pip_designer_page.tap_scale_track_previous_keyframe()
            check_timecode = pip_designer_page.get_timecode()
            if not check_timecode == '00:00:00:00':
                assert False, f"Cannot remove all Scale keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}"
        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_16] Reset all Opacity keyframe')
    @exception_screenshot
    def test_pip_designer_func_7_16(self):
        '''
        1. Reset all Opacity keyframe
        2. Check if all Opacity keyframe is removed (No Next/ Previous keyframe)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_15"
        self.ensure_dependency(dependency_test)

        with step('[Action] Reset all Opacity keyframe'):
            # Reset all Opacity keyframe
            pip_designer_page.reset_position_opacity_keyframe()
            main_page.click(L.main.confirm_dialog.btn_yes)
        with step('[Verify] Check if all Opacity keyframe is removed'):
            # click next keyframe
            pip_designer_page.tap_opacity_track_next_keyframe()
            check_timecode = pip_designer_page.get_timecode()
            if not check_timecode == '00:00:00:00':
                assert False, f"Cannot remove all Opacity keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}"
            # click previous keyframe
            pip_designer_page.tap_opacity_track_previous_keyframe()
            check_timecode = pip_designer_page.get_timecode()
            if not check_timecode == '00:00:00:00':
                assert False, f"Cannot remove all Opacity keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}"
        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.name('[test_pip_designer_func_7_17] Reset all Rotation keyframe')
    @exception_screenshot
    def test_pip_designer_func_7_17(self):
        '''
        1. Reset all Rotation keyframe
        2. Check if all Rotation keyframe is removed (No Next/ Previous keyframe)
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_16"
        self.ensure_dependency(dependency_test)

        with step('[Action] Reset all Rotation keyframe'):
            # Reset all Rotation keyframe
            pip_designer_page.reset_rotation_keyframe()
            main_page.click(L.main.confirm_dialog.btn_yes)

        with step('[Verify] Check if all Rotation keyframe is removed'):
            # click next keyframe
            pip_designer_page.tap_rotation_track_next_keyframe()
            check_timecode = pip_designer_page.get_timecode()
            if not check_timecode == '00:00:00:00':
                assert False, f"Cannot remove all Rotation keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}"
            # click previous keyframe
            pip_designer_page.tap_rotation_track_previous_keyframe()
            check_timecode = pip_designer_page.get_timecode()
            if not check_timecode == '00:00:00:00':
                assert False, f"Cannot remove all Rotation keyframe correctly! Expected: 00:00:00:00, Actual: {check_timecode}"
        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.keyframe
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.ease_in_out
    @pytest.mark.name('[test_pip_designer_func_7_18] Add Ease in/out on keyframe')
    @exception_screenshot
    def test_pip_designer_func_7_18(self):
        '''
        1. Unfold Object Settings
        2. Add 1st keyframe at (00:00) for ease in/ out
        3. Add 2nd position keyframe at (05:04) for ease
        4. Add 3rd position keyframe at (10:00) for ease
        5. Add Ease in on 2nd position keyframe
        6. Add Ease out on 2nd position keyframe
        '''
        # Ensure the dependency test is run and passed
        self.test_pip_designer_func_7_1()

        with step('[Action] Unfold Object Settings'):
            # Switch to Advanced Mode
            pip_designer_page.switch_mode('Advanced')
            # Unfold Object Settings
            pip_designer_page.express_mode.unfold_properties_object_setting_tab()

        
        with step('[Action] Add 1st keyframe at (00:00) for ease in/ out'):
            # Set Scale  width / height to 0.378
            pip_designer_page.click_scale_maintain_aspect_ratio(bCheck=1)
            pip_designer_page.drag_scale_width_slider('0.378')

            # Set Position : 0s (0.919, 0.164)
            pip_designer_page.input_x_position_value('0.919')
            pip_designer_page.input_y_position_value('0.164')

            # [L382] 3.3 Pip Designer > Object Settings > Able to set Ease in/out setting
            # with uuid("1a408d6c-fdf1-4e46-9856-e3caaa0bcc65") as case:
                # Add position 1st keyframe
            pip_designer_page.add_remove_position_track_current_keyframe()

        with step('[Verify] Check if position/ timecode is correct for 1st keyframe'):
            # Check position (x/y) in timecode (00:00)
            current_timecode = pip_designer_page.get_timecode()
            if current_timecode != '00:00:00:00':
                assert False, f"Timecode is not 00:00:00:00! Expected: 00:00:00:00, Actual: {current_timecode}"
            check_x_position = pip_designer_page.get_x_position_value()
            if check_x_position != '0.919':
                assert False, f"X position is not 0.919! Expected: 0.919, Actual: {check_x_position}"
            check_y_position = pip_designer_page.get_y_position_value()
            if check_y_position != '0.164':
                assert False, f"Y position is not 0.164! Expected: 0.164, Actual: {check_y_position}"

        with step('[Action] Add 2nd position keyframe at (05:04) for ease in/ out'):
            pip_designer_page.set_timecode('00_00_05_04')
            pip_designer_page.input_x_position_value('0.106')
        
        with step('[Verify] Check if position/ timecode is correct for 2nd keyframe'):
            # Check position (x/y) in timecode (05:04)
            current_timecode = pip_designer_page.get_timecode()
            if current_timecode != '00:00:05:04':
                assert False, f"Timecode is not 00:00:05:04! Expected: 00:00:05:04, Actual: {current_timecode}"
            check_x_position = pip_designer_page.get_x_position_value()
            if check_x_position != '0.106':
                assert False, f"X position is not 0.106! Expected: 0.106, Actual: {check_x_position}"
            check_y_position = pip_designer_page.get_y_position_value()
            if check_y_position != '0.164':
                assert False, f"Y position is not 0.164! Expected: 0.164, Actual: {check_y_position}"

        with step('[Action] Add 3rd position keyframe at (10:00) for ease in/ out'):
            pip_designer_page.set_timecode('00_00_10_00')
            pip_designer_page.input_x_position_value('0.894')
            pip_designer_page.input_y_position_value('0.836')

        with step('[Verify] Check if position/ timecode is correct for 3rd keyframe'):
            # Check position (x/y) in timecode (10:00)
            current_timecode = pip_designer_page.get_timecode()
            if current_timecode != '00:00:10:00':
                assert False, f"Timecode is not 00:00:10:00! Expected: 00:00:10:00, Actual: {current_timecode}"
            check_x_position = pip_designer_page.get_x_position_value()
            if check_x_position != '0.894':
                assert False, f"X position is not 0.894! Expected: 0.894, Actual: {check_x_position}"
            check_y_position = pip_designer_page.get_y_position_value()
            if check_y_position != '0.836':
                assert False, f"Y position is not 0.836! Expected: 0.836, Actual: {check_y_position}"

        with step('[Action] Add Ease in on second position keyframe'):
            # switch to previous keyframe
            pip_designer_page.tap_position_previous_keyframe()
            # Enable Ease in and Ease out on keyframe
            pip_designer_page.click_position_ease_in_checkbox(1)
            pip_designer_page.input_position_ease_in_value('0.88')

        with step('[Verify] Check if Ease in setting is correct'):
            # Verify Step
            pip_designer_page.click_specific_keyframe(1)
            check_menu_ease_in_status = pip_designer_page.simple_timeline.right_click_menu.get_ease_in_status()
            if not check_menu_ease_in_status:
                assert False, "Cannot set Ease in on keyframe correctly!"

        with step('[Action] Add Ease out on second position keyframe'):
            pip_designer_page.click_position_ease_out_checkbox(1)
            pip_designer_page.input_position_ease_out_value('0.97')

        with step('[Verify] Check if Ease out setting is correct'):
            pip_designer_page.click_specific_keyframe(1)
            check_menu_ease_out_status = pip_designer_page.simple_timeline.right_click_menu.get_ease_out_status()
            if not check_menu_ease_out_status:
                assert False, "Cannot set Ease out on keyframe correctly!"
        assert True

        # # [L386] 3.3 Pip Designer > Adjust keyframe > Remove
        # with uuid("8249bb39-3372-4174-9cf8-813a881f9816") as case:
        #     # Remove Position keyframe: 1st , 2nd
        #     for x in range(2):
        #         # Click previous keyframe
        #         pip_designer_page.tap_position_track_previous_keyframe()
        #         # Remove keyframe
        #         pip_designer_page.add_remove_position_current_keyframe()

        #     # Remove Position keyframe: 3rd
        #     pip_designer_page.tap_position_next_keyframe()
        #     pip_designer_page.add_remove_position_current_keyframe()

        #     # Verify Step:
        #     # Click previous keyframe
        #     pip_designer_page.tap_position_track_previous_keyframe()

        #     check_timecode = pip_designer_page.get_timecode()
        #     logger(check_timecode)
        #     if check_timecode == '00:00:10:00':
        #         remove_keyframe_ok = True
        #     else:
        #         remove_keyframe_ok = False

        #     case.result = remove_keyframe_ok

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.motion
    @pytest.mark.path
    @pytest.mark.name('[test_pip_designer_func_7_19] Apply Path Template')
    @exception_screenshot
    def test_pip_designer_func_7_19(self):
        '''
        1. Set path template
        2. Check if path template is set correctly as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_18"
        self.ensure_dependency(dependency_test)

        # [L400] 3.3 Pip Designer > Set [Motion] > Select Path
        # with uuid("39370a35-82b8-44e5-a531-5560b5062ef0") as case:
        # with step('[Action] Set opacity to 100'):
        #     # Set opacity = 100
        #     pip_designer_page.express_mode.drag_object_setting_opacity_slider('100')

        with step('[Action] Set path template'):
            # Switch to motion > Unfold path menu
            pip_designer_page.advanced.switch_to_motion()
            pip_designer_page.advanced.unfold_path_menu()
            # Select path template
            pip_designer_page.path.select_template(index=3)
            # You have not saved the changes ... Do you want to save the changes now? Click [No]
            main_page.exist_click(L.title_designer.backdrop.warning.btn_no)

        with step('[Verify] Check if path template is set correctly as GT'):
            # Verify Step
            pip_designer_page.set_timecode('00_00_04_00')
            time.sleep(DELAY_TIME)
            check_preview = main_page.snapshot(locator=L.pip_designer.designer_window,
                                               file_name=Auto_Ground_Truth_Folder + 'L188.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L188.png', check_preview, similarity=0.85)

            assert compare_result, "Path template is not set correctly as GT(L188.png)!"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.canva
    @pytest.mark.name('[test_pip_designer_func_7_20] Resize Object on Canvas')
    @exception_screenshot
    def test_pip_designer_func_7_20(self):
        '''
        1. Switch to properties
        2. Set Rotation (0)
        3. Resize on Canvas : To larger
        4. Check if resize on canvas is correct by checking scale size
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_19"
        self.ensure_dependency(dependency_test)

        with step('[Action] Switch to properties'):
            # fold path menu
            pip_designer_page.advanced.unfold_path_menu(0)
            # Switch to properties
            pip_designer_page.advanced.switch_to_properties()

        # [L388] 3.3 Pip Designer > Manual adjust on canvas
        # with uuid("8a6515af-cdf1-4c1b-ac78-ac44dca720ca") as case:

        with step('[Action] Set Rotation (0)'):
            # Set rotation to 0
            pip_designer_page.input_rotation_degree_value(0)

        with step('[Action] Resize on Canvas : To larger'):
            # Resize on Canvas : To larger
            pip_designer_page.resize_on_canvas(drag_x=75, drag_y=60)

        with step('[Verify] Check if resize on canvas is correct by checking scale size'):
            # Verify Step: check scale size
            width_text_field = main_page.exist(L.pip_designer.object_setting.scale.width_value)
            assert float(width_text_field.AXValue)>0.378, f"Cannot resize on canvas correctly! Expected: > 0.378, Actual: {width_text_field.AXValue}"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.properties
    @pytest.mark.object_setting
    @pytest.mark.canva
    @pytest.mark.name('[test_pip_designer_func_7_21] Move Object to Left on Canvas')
    @exception_screenshot
    def test_pip_designer_func_7_21(self):
        '''
        1. Move object to left on Canvas
        2. Check if move object to left on canvas is correct
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_20"
        self.ensure_dependency(dependency_test)

        with step('[Action] Move object to left on Canvas'):
            # Move object to left on Canvas
            pip_designer_page.move_to_left_on_canvas(drag_x=40)

        with step('[Verify] Check if move object to left on canvas is correct'):
            # Verify Step: check position x value
            current_x_value = pip_designer_page.get_x_position_value()
            #if (current_x_value == '0.292') or (current_x_value == '0.285') or (current_x_value == '0.284'):
            assert float(current_x_value)>0.25, f"Cannot move object to left on canvas correctly! Expected: >0.25, Actual: {current_x_value}"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.flip
    @pytest.mark.name('[test_pip_designer_func_7_22] Flip Horizontally and Vertically')
    @exception_screenshot
    def test_pip_designer_func_7_22(self):
        '''
        1. Set Flip Horizontally and check preview
        2. Set Flip Vertically and check preview
        3. Check if Flip Horizontally and Vertically is correct as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_21"
        self.ensure_dependency(dependency_test)

        # [L383] 3.3 Pip Designer > Set in [Properties] > Flip
        # with uuid("a249d010-4d02-499a-9309-c57675e8b5a9") as case:

        with step('[Action] Set Flip Horizontally'):
            before_flip_horizontally = main_page.snapshot(locator=L.pip_designer.preview)
            pip_designer_page.apply_flip_horizontally()
        
        with step('[Verify] Check if preview changed correctly after apply Flip Horizontally'):
            after_flip_horizontally = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(before_flip_horizontally, after_flip_horizontally, similarity=0.98):
                assert False, "Preview is not changed correctly after apply Flip Horizontally!"

        with step('[Action] Set Flip Vertically'):
            pip_designer_page.apply_flip_vertically()
        
        with step('[Verify] Check if preview changed correctly after apply Flip Vertically'):
            after_flip_vertically = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(after_flip_horizontally, after_flip_vertically, similarity=0.98):
                assert False, "Preview is not changed correctly after apply Flip Vertically!"

        with step('[Verify] Check if Flip Horizontally and Vertically is correct as GT'):
            pip_designer_page.set_timecode('00_00_02_10')
            timeline_preview = main_page.snapshot(locator=L.pip_designer.preview,
                                                  file_name=Auto_Ground_Truth_Folder + 'L181.png')
            check_current_result = main_page.compare(Ground_Truth_Folder + 'L181.png', timeline_preview,
                                                     similarity=0.9)
            assert check_current_result, "Flip Horizontally and Vertically is not correct as GT(L181.png)!"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.motion
    @pytest.mark.name('[test_pip_designer_func_7_22] Set only show selected track on motion')
    @exception_screenshot
    def test_pip_designer_func_7_22(self):
        '''
        1. Switch to motion
        2. Set [Only show selected track]
        3. Check if [Only show selected track] box value is correct
        4. Check if [Only show selected track] is correct as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_21"
        self.ensure_dependency(dependency_test)

        # [L384] 3.3 Pip Designer > Only show the selected track in preview
        # with uuid("888b424f-1eab-496e-9288-6fda16cf3b57") as case:

        with step('[Action] Switch to motion'):
            # Fold Object Settings
            pip_designer_page.express_mode.unfold_properties_object_setting_tab(unfold=0)
            # Switch to motion
            pip_designer_page.advanced.switch_to_motion()

        with step('[Action] Set [Only show selected track]'):
            # Tick [Only show selected track]
            main_page.click(L.pip_designer.show_the_selected_track)
            time.sleep(DELAY_TIME)

        with step('[Verify] Check if [Only show selected track] box value is correct'):
            # Verify Step
            check_checkbox = pip_designer_page.get_selected_track_checkbox_status()
            if check_checkbox != 'Tick':
                assert False, "Cannot set [Only show selected track] correctly!"

        with step('[Verify] Check if [Only show selected track] is correct as GT'):
            pip_designer_page.set_timecode('00_00_05_25')
            check_preview = main_page.snapshot(locator=L.pip_designer.preview,
                                               file_name=Auto_Ground_Truth_Folder + 'L182.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L182.png', check_preview)
            if not compare_result:
                assert False, "Only show selected track is not correct as GT(L182.png)!"

        with step('[Initial] Un-Tick [Only show selected track]'):
            # Un-Tick [Only show selected track]
            main_page.click(L.pip_designer.show_the_selected_track)

        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.motion
    @pytest.mark.motion_blur
    @pytest.mark.name('[test_pip_designer_func_7_23] Apply Motion Blur -- Length and Density')
    @exception_screenshot
    def test_pip_designer_func_7_23(self):
        '''
        1. Set Motion Blur
        2. Set Blur length = 1.88 and check if Blur length is set correctly
        3. Set Blur density = 28 and check if Blur density is set correctly
        4. Check if Motion Blur is correct as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_22"
        self.ensure_dependency(dependency_test)

        # [L401] 3.3 Pip Designer > Set [Motion Blur]
        # with uuid("6ab4ebf9-4369-4944-bc0e-93eded165757") as case:

        with step('[Action] Set Motion Blur'):
            # Unfold Motion Blur
            pip_designer_page.advanced.unfold_motion_blur_menu()
            # Set checkbox of Motion Blur
            pip_designer_page.motion_blur.set_checkbox(tick=1)

        with step('[Action] Set Blur length = 1.88'):
            # Set Blur length = 1.88
            pip_designer_page.motion_blur.length.set_value(1.88)

        with step('[Verify] Check if Blur length is set correctly'):
            # Verify Step
            get_length = pip_designer_page.motion_blur.length.get_value()
            if get_length != '1.88':
                assert False, f"Blur length is not 1.88! Expected: 1.88, Actual: {get_length}"

        with step('[Action] Set Blur density = 28'):
            # Set Blur density = 28
            pip_designer_page.motion_blur.density.adjust_slider(28)

        with step('[Verify] Check if Blur density is set correctly'):
            get_density = pip_designer_page.motion_blur.density.get_value()
            if get_density != '28':
                assert False, f"Blur density is not 28! Expected: 28, Actual: {get_density}"


        with step('[Verify] Check if Motion Blur is correct as GT'):
            pip_designer_page.set_timecode('00_00_02_10')
            check_preview = main_page.snapshot(locator=L.pip_designer.preview,
                                               file_name=Auto_Ground_Truth_Folder + 'L181.png')

            # Compare preview is changed when apply motion blur
            compare_result = main_page.compare(Ground_Truth_Folder + 'L181.png', check_preview, similarity=0.98)
            assert compare_result, "Motion Blur is not correct as GT(L181.png)!"

            # case.result = (not compare_result) and check_length and check_density

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.properties
    @pytest.mark.border
    @pytest.mark.name('[test_pip_designer_func_7_24] Check Default Border/ Set Border size by arrow')
    @exception_screenshot
    def test_pip_designer_func_7_24(self):
        '''
        1. Apply Border
        2. Check if Default size is 3
        3. Set Border size = 7 by arrow button
        4. Check if Border size chagned by UI
        '''
        # Ensure the dependency test is run and passed
        self.test_pip_designer_func_7_1()
        # [L378] 3.3 Pip Designer > Set in [Properties] > Border
        # with uuid("fb425a56-1501-4a70-a285-f9398d894f8a") as case:

        with step('[Action] Apply Border'):
            # switch to advanced mode
            pip_designer_page.switch_mode('Advanced')
            # Switch to properties
            pip_designer_page.advanced.switch_to_properties()
            # Fold Object Settings
            pip_designer_page.express_mode.unfold_properties_object_setting_tab(unfold=0)
            # Apply border
            pip_designer_page.apply_border()
        
        with step('[Verify] Check if Default size is 3'):
            # Check Default size
            current_value = pip_designer_page.express_mode.get_border_size_value()
            if current_value != '3':
                assert False, f"Default size is not 3! Expected: 3, Actual: {current_value}"

        with step('[Action] Set Border size = 7 by arrow button'):
            before_preview = main_page.snapshot(locator=L.pip_designer.preview)
            # Set Border size = 7
            pip_designer_page.express_mode.click_border_size_arrow_btn(0,4)

        with step('[Verify] Check if Border size chagned by UI'):
            border_size_changed = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(before_preview, border_size_changed, similarity=0.999):
                assert False, "Border size is not changed by UI!"

        with step('[Verify] Check if Border size is set correctly'):
            current_value = pip_designer_page.express_mode.get_border_size_value()
            assert current_value == '7', f"Border size is not 7 after modified by arrow! Expected: 7, Actual: {current_value}"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.properties
    @pytest.mark.border
    @pytest.mark.blur
    @pytest.mark.name('[test_pip_designer_func_7_25] Apply Border -- Blur')
    @exception_screenshot
    def test_pip_designer_func_7_25(self):
        '''
        1. Set Border -- Blur value = 3
        2. Check if Border -- blur value is set correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_24"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Border -- Blur value = 3'):
            # Set Blur = 3
            pip_designer_page.express_mode.input_border_blur_value('3')

        with step('[Verify] Check if Border -- blur value is set correctly'):
            current_value = pip_designer_page.express_mode.get_border_blur_value()
            assert current_value == '3', f'Border blur value is not 3! Expected: 3, Actual: {current_value}'

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.properties
    @pytest.mark.border
    @pytest.mark.opacity
    @pytest.mark.name('[test_pip_designer_func_7_26] Apply Border -- Opacity')
    @exception_screenshot
    def test_pip_designer_func_7_26(self):
        '''
        1. Set Border -- Opacity = 96%
        2. Check if Border -- opacity value is set correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_25"
        self.ensure_dependency(dependency_test)

        with step('[Action] Apply Border -- Opacity = 96%'):
            # Set opacity = 96%
            pip_designer_page.express_mode.drag_border_opacity_slider('96')

        with step('[Verify] Check if Border -- opacity value is set correctly'):
            current_value = pip_designer_page.express_mode.get_border_opacity_value()
            assert current_value == '96%', f'Border opacity value is not 96%! Expected: 96%, Actual: {current_value}'

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.properties
    @pytest.mark.border
    @pytest.mark.color
    @pytest.mark.name('[test_pip_designer_func_7_27] Apply Border -- Color as 0F2E12')
    @exception_screenshot
    def test_pip_designer_func_7_27(self):
        '''
        1. Apply Border -- Color as 0F2E12
        2. Check if Border -- color is set correctly
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_26"
        self.ensure_dependency(dependency_test)


        with step('[Action] Set Border -- Color as 0F2E12'):
            before_preview = main_page.snapshot(locator=L.pip_designer.preview)
            # Set color
            pip_designer_page.express_mode.set_border_uniform_color('0F2E12')

        with step('[Verify] Check if Border -- color is set correctly'):
            applied_color = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(before_preview, applied_color, similarity=0.999):
                assert False, "Border color is not changed correctly!"
        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.properties
    @pytest.mark.shadow
    @pytest.mark.distance
    @pytest.mark.name('[test_pip_designer_func_7_28] Set Shadow -- Distance')
    @exception_screenshot
    def test_pip_designer_func_7_28(self):
        '''
        1. Enter Shadow menu
        2. Set Shadow -- Distance = 37.1
        3. Check if preview changed after adjust shadow distance
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_27"
        self.ensure_dependency(dependency_test)

        # [L379] 3.3 Pip Designer > Set in [Properties] > Shadow
        # with uuid("bad37a4f-6327-42ed-8214-4e245fdaa0a2") as case:
        with step('[Action] Enter Shadow menu'):
            # Fold border menu
            pip_designer_page.express_mode.unfold_properties_border_tab(0)
            # Unfold shadow menu
            pip_designer_page.express_mode.unfold_properties_shadow_tab(1)
            # Enable Shadow
            pip_designer_page.apply_shadow()

        with step('[Action] Set Shadow -- Distance = 37.1'):
            before_preview = main_page.snapshot(locator=L.pip_designer.preview)
            # Set distance = 37.1
            pip_designer_page.express_mode.input_shadow_distance_value('37.1')

        with step('[Verify] Check if preview changed after adjust shadow distance'):
            adjusted_distance = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(before_preview, adjusted_distance, similarity=0.98):
                assert False, "Shadow distance is not changed correctly!"
        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.properties
    @pytest.mark.shadow
    @pytest.mark.color
    @pytest.mark.name('[test_pip_designer_func_7_29] Apply Shadow -- Color')
    @exception_screenshot
    def test_pip_designer_func_7_29(self):
        '''
        1. Set Shadow -- Color = B7AFE3
        2. Check if preview changed after apply shadow color
        3. Check if preview changed correctly as GT (test_pip_designer_func_7_28~29)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_28"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Shadow -- Color = B7AFE3'):
            before_preview = main_page.snapshot(locator=L.pip_designer.preview)
            # Set color
            pip_designer_page.express_mode.set_shadow_select_color('B7AFE3')

        with step('[Verify] Check if preview changed after apply shadow color'):
            adjusted_color = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(before_preview, adjusted_color, similarity=0.998):
                assert False, "Shadow color is not changed correctly!"

        with step('[Verify] Check if preview changed correctly as GT (test_pip_designer_func_7_28~29)'):
            check_preview = main_page.snapshot(locator=L.pip_designer.preview,
                                               file_name=Auto_Ground_Truth_Folder + 'L189.png')

            # Compare preview is changed when apply Shadow
            compare_result = main_page.compare(Ground_Truth_Folder + 'L189.png', check_preview)
            assert compare_result, "Shadow color is not correct as GT(L189.png)!"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.properties
    @pytest.mark.fades
    @pytest.mark.fade_in_out
    @pytest.mark.name('[test_pip_designer_func_7_30] Fades -- Fade-in')
    @exception_screenshot
    def test_pip_designer_func_7_30(self):
        '''
        1. Enter Properties Fades menu
        2. Set Fade-in
        3. Check if preview changed after apply fade-in
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_29"
        self.ensure_dependency(dependency_test)

        # [L380] 3.3 Pip Designer > Set in [Properties] > Fade
        # with uuid("50370c50-3035-42d5-bab2-34a04165c2e2") as case:

        with step('[Action] Enter Properties Fades menu'):
            # Fold shadow menu
            pip_designer_page.express_mode.unfold_properties_shadow_tab(0)
            # Unfold fades menu
            pip_designer_page.express_mode.unfold_properties_fades_tab(type=1, unfold=1)
            # Apply faddes
            pip_designer_page.apply_fades()

        with step('[Action] Set Fade-in'):

            # Set timecode (00:00:00:24)
            pip_designer_page.set_timecode('00_00_00_24')
            time.sleep(DELAY_TIME)
            no_fade_in_preview = main_page.snapshot(locator=L.pip_designer.preview)

            # Apply fade-in and fade-out
            pip_designer_page.apply_enable_fade_in()

        with step('[Verify] Check if preview changed after apply fade-in'):
            has_fade_in_preview = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(no_fade_in_preview, has_fade_in_preview, similarity=0.99):
                assert False, "Fade-in is not changed correctly!"
        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.properties
    @pytest.mark.fades
    @pytest.mark.fade_in_out
    @pytest.mark.name('[test_pip_designer_func_7_31] Fades -- Fade-out')
    @exception_screenshot
    def test_pip_designer_func_7_31(self):
        '''
        1. Set Fade-out
        2. Check if preview changed after apply fade-out
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_30"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Fade-out'):
            # Set timecode (00:00:08:23)
            pip_designer_page.set_timecode('00_00_08_23')
            no_fade_out_preview = main_page.snapshot(locator=L.pip_designer.preview)
            pip_designer_page.apply_enable_fade_out()

        with step('[Verify] Check if preview changed after apply fade-out'):
            has_fade_out_preview = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(no_fade_out_preview, has_fade_out_preview, similarity=0.99):
                assert False, "Fade-out is not changed correctly!"
        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.properties
    @pytest.mark.chroma_key
    @pytest.mark.color
    @pytest.mark.name('[test_pip_designer_func_7_32] Set Chroma Key -- Color')
    @exception_screenshot
    def test_pip_designer_func_7_32(self):
        '''
        1. Enter Properties Chroma Key menu
        2. Click dropper button
        3. Select one color
        4. Check if preview changed after apply chroma key
        5. Check if preview changed correctly as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_31"
        self.ensure_dependency(dependency_test)

        # [L377] 3.3 Pip Designer > Set in [Properties] > Chroma Key
        # with uuid("3b57839e-be4f-45b4-9cf6-e11bf494a44b") as case:
        with step('[Action] Enter Properties Chroma Key menu'):
            # Fold fades menu
            pip_designer_page.express_mode.unfold_properties_fades_tab(type=1, unfold=0)
            # Unfold chroma key menu
            # pip_designer_page.express_mode.unfold_properties_chroma_key_tab(unfold=1)
            # Apply Chroma key
            pip_designer_page.apply_chromakey()
            
        with step('[Action] Click dropper button'):
            # Set timecode (00:00:04:00)
            pip_designer_page.set_timecode('00_00_04_00')
            before_preview = main_page.snapshot(locator=L.pip_designer.preview)
            # Click dropper button
            main_page.click(L.pip_designer.chromakey.btn_dropper)

        with step('[Action] Select one color'):
            # Select one color
            pip_object = main_page.exist(L.pip_designer.preview)
            org_pos = pip_object.AXPosition
            size_w, size_h = pip_object.AXSize

            des_pos = (org_pos[0] + size_w * 0.5, org_pos[1] + size_h * 0.35)
            main_page.mouse.click(*des_pos)

        with step('[Verify] Check if preview changed after apply chroma key'):
            applied_chromakey = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(before_preview, applied_chromakey, similarity=0.99):
                assert False, "Chroma key is not changed correctly!"

        with step('[Verify] Check if preview changed correctly as GT'):
            check_preview = main_page.snapshot(locator=L.pip_designer.preview,
                                               file_name=Auto_Ground_Truth_Folder + 'L175.png')
            # Compare preview after apply chromakey
            compare_result = main_page.compare(Ground_Truth_Folder + 'L175.png', check_preview, similarity=0.8)
            assert compare_result, "Chroma key is not correct as GT(L175.png)!"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.animation
    @pytest.mark.in_out_animation
    @pytest.mark.name('[test_pip_designer_func_7_33] Apply In Animation')
    @exception_screenshot
    def test_pip_designer_func_7_33(self):
        '''
        1. Enter In Animation Menu
        2. Apply in animation
        3. Check if preview changed after apply in animation as GT
        '''
        self.test_pip_designer_func_7_1()

        # [L389] 3.3 Pip Designer > Set Animation
        # with uuid("34f35e0f-aff7-46bc-8624-81866440a7f8") as case:
        with step('[Action] Enter In Animation Menu'):
            # switch to advanced mode
            pip_designer_page.switch_mode('Advanced')
            pip_designer_page.advanced.switch_to_animation()
            pip_designer_page.advanced.unfold_in_animation_menu(1)

        with step('[Action] Apply in animation'):
            # Apply (Brush Transition 02) animation
            #pip_designer_page.in_animation.select_effect('Glitch')
            pip_designer_page.in_animation.select_template(10)

        with step('[Verify] Check if preview changed after apply in animation as GT'):
            # Set timecode (00:00:01:09)
            pip_designer_page.set_timecode('00_00_01_09')
            time.sleep(DELAY_TIME * 3)
            check_preview = main_page.snapshot(locator=L.pip_designer.preview,
                                               file_name=Auto_Ground_Truth_Folder + 'L187.png')

            # Compare preview after apply chromakey
            compare_result = main_page.compare(Ground_Truth_Folder + 'L187.png', check_preview, similarity=0.9)
            assert compare_result, "In animation is not correct as GT(L187.png)! Similary should>0.9"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.play_video
    @pytest.mark.name('[test_pip_designer_func_7_34] Play Video')
    @exception_screenshot
    def test_pip_designer_func_7_34(self):
        '''
        1. Switch to Express mode
        2. Press Space key to play video
        3. Check if preview changed correctly after play
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_33"
        self.ensure_dependency(dependency_test)

        # [L402] 3.3 Pip Designer > Preview in Designer
        # with uuid("55666272-8ab9-4b7f-a6b1-dfbf0c6322ad") as case:
        with step('[Action] Switch to Express mode'):
            pip_designer_page.advanced.unfold_in_animation_menu(0)
            # Switch
            pip_designer_page.switch_mode('Express')

        with step('[Action] Press Space key to play video'):
            pip_designer_page.set_timecode('00_00_00_00')
            main_page.press_space_key()

        with step('[Verify] Check if preview changed correctly after play'):
            check_preview_update = main_page.Check_PreviewWindow_is_different(L.title_designer.area.frame_preview, sec=2)
            if not check_preview_update:
                assert False, "Preview is not updated after play in 2 secs!"
        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.play_video
    @pytest.mark.name('[test_pip_designer_func_7_35] Stop Video')
    @exception_screenshot
    def test_pip_designer_func_7_35(self):
        '''
        1. Click [Stop] button to stop video
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_34"
        self.ensure_dependency(dependency_test)

        with step('[Action] Click [Stop] button to stop video'):
            pip_designer_page.click_preview_operation('Stop')

        with step('[Verify] Check if switch to (00:00)'):
            current_timecode = pip_designer_page.get_timecode()
            assert current_timecode == '00:00:00:00', f"Cannot stop video correctly! Expected: 00:00:00:00, Actual: {current_timecode}"

        
            # # Set timecode (00:00:08:05)
            # pip_designer_page.set_timecode('00_00_08_05')
            # time.sleep(DELAY_TIME * 3)
            # check_preview = main_page.snapshot(locator=L.pip_designer.designer_window,
            #                                    file_name=Auto_Ground_Truth_Folder + 'L190.png')

            # # Compare preview
            # compare_result = main_page.compare(Ground_Truth_Folder + 'L190.png', check_preview, similarity=0.9)
            # logger(compare_result)

            # # Click max button / Leave full mode
            # pip_designer_page.click_maximize_btn()

            # case.result = compare_result

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.cyberlink_cloud
    @pytest.mark.dz
    @pytest.mark.name('[test_pip_designer_func_7_36] Share to Cloud')
    @exception_screenshot
    def test_pip_designer_func_7_36(self):
        '''
        1. Click [Share] button to upload template online
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_35"
        self.ensure_dependency(dependency_test)

        # [L403] 3.4 Pip Designer > [Share] template online
        # with uuid("fbce1533-d0d5-4ca9-9aed-2f0e4ade18c4") as case:
            # Click [Share] > Upload to "Cyberlink Cloud and DZ"
            # Verify DZ link
        
        with step('[Action] Click [Share] button to upload template online'):
            check_upload = pip_designer_page.share_to_cloud(name='dialog09_chroma', tags='123', collection='test', description='Apply chroma key', verify_dz_link=1)
            assert check_upload, "Cannot upload template online!"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.cyberlink_cloud
    @pytest.mark.dz
    @pytest.mark.save_template
    @pytest.mark.name('[test_pip_designer_func_7_37] Download Content from CL/DZ')
    @exception_screenshot
    def test_pip_designer_func_7_37(self):
        '''
        1. Click [Save as] button to save template
        2. Leave pip designer
        3. Download Content from CL/DZ
        4. Delete downloaded content and close window
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_36"
        self.ensure_dependency(dependency_test)

        with step('[Action] Click [Save as] button to save template'):
            # Click [Save as] > Save custom name to close PiP designer
            main_page.click(L.pip_designer.save_as_button)
            time.sleep(DELAY_TIME)
            pip_designer_page.input_template_name_and_click_ok('BFT_Pip_Custom')
            time.sleep(DELAY_TIME)

        with step('[Action] Leave pip designer'):
            pip_designer_page.click_ok()

        with step('[Action] Download Content from CL/DZ'):
            # Click download content form CL/DZ
            pip_room_page.click_DownloadContent_from_DZCL()

            # Already enter "Download PiP Objects" > Open My Cyberlink Cloud
            # Select template name "dialog09_chroma"
            check_CL_content = download_from_cl_dz_page.select_template('dialog09_chroma')
        
        with step('[Initial] Delete downloaded content and close window'):
            time.sleep(DELAY_TIME)
            download_from_cl_dz_page.tap_delete_button()
            # Close "Download PiP Objects" window
            # download_from_cl_dz_page.tap_close_button()
            main_page.press_esc_key()

        assert check_CL_content, "Cannot download content from CL/DZ!"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.save_template
    @pytest.mark.name('[test_pip_designer_func_7_38] Select saved template and check preview')
    @exception_screenshot
    def test_pip_designer_func_7_38(self):
        '''
        1. Select saved template and check preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_37"
        self.ensure_dependency(dependency_test)

        # [L404] 3.4 Pip Designer > Save template
        # with uuid("4b3b937e-ce77-4946-8c43-cb1eaaf4a264") as case:
        with step('[Action] Select saved template'):
            # Select custom template: BFT_PiP_Custom
            main_page.select_library_icon_view_media('BFT_Pip_Custom')
            time.sleep(DELAY_TIME * 5)
            # Check preview update
            check_result = main_page.Check_PreviewWindow_is_different(area=L.base.Area.preview.main, sec=3)
            assert check_result, "Cannot select saved template correctly!"

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.save_template
    @pytest.mark.timecode
    @pytest.mark.timeline
    @pytest.mark.name('[test_pip_designer_func_7_39] Add saved template to timeline')
    @exception_screenshot
    def test_pip_designer_func_7_39(self):
        '''
        1. Add saved template to timeline
        2. Check preview at (02:06) is as GT
        3. Save project
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_pip_designer_func_7_38"
        self.ensure_dependency(dependency_test)

        # [L405] 3.4 Pip Designer > Add saved pip template to timeline
        # with uuid("b63cc42d-7ae7-49e8-9584-36d0afb9af10") as case:

        with step('[Action] Add saved template to track 3'):
            # select timeline track 3
            main_page.timeline_select_track(3)
            # Set timecode :
            main_page.set_timeline_timecode('00_00_19_00')
            # Drag BFT_Pip_Custom to timeline track 3
            main_page.drag_media_to_timeline_playhead_position('BFT_Pip_Custom', track_no=3)

        with step('[Verify] Check preview at (02:06) is as GT'):
            # Set timecode :
            main_page.set_timeline_timecode('00_00_02_06')
            time.sleep(DELAY_TIME * 2)

            timeline_preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L193.png')
            check_current_dialog09 = main_page.compare(Ground_Truth_Folder + 'L193.png', timeline_preview, similarity=0.9)

        with step('[Initial] Save Project'):
        # Save project:
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_pip_designer_func_7_39',
                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')
            
        assert check_current_dialog09, "Cannot add saved template to timeline correctly as GT (L193.png)!"


    @pytest.mark.pip_designer_func
    @pytest.mark.launch
    @pytest.mark.timeline
    @pytest.mark.pip_designer
    @pytest.mark.motion
    @pytest.mark.path
    @pytest.mark.animation
    @pytest.mark.in_animation
    @pytest.mark.properties
    @pytest.mark.chromakey
    @pytest.mark.ai_module
    @pytest.mark.name('[test_pip_designer_func_7_40] Apply [Path]/ [In Animation]/ [Chromakey] in [Pip Designer] and create [New Workspace] for 5 times')
    @exception_screenshot
    def test_pip_designer_func_7_40(self):
        '''
        1. Clear Cache > Start App
        2. Clear [AI Module] files
        3. Select media ('Sport 02.jpg') by library icon view
        4. Insert clip in library to selected track
        5. Select [Pip Designer] from [Tip Areas] and check the result
        6. Switch to ('Advanced') mode in [Pip Designer] > Switch to Motion tab in [Pip Designer]
        7. Unfold [Path] menu > Select certain template (4) in [Path] menu
        8. Switch to [Animation] tab > Unfold [in animation] menu > Select [In Animation] template (7)
        9. Switch to [Properties] tab > Enable [Chromakey] in [Pip Designer]
        10. Wait for downloading AI module
        11. Click [OK] to leave [Pip Designer]
        12. Select timeline media with (0,0)
        13. Select [Pip Designer] from [Tip Areas] and check the result
        14. Screenshot (L.pip_designer.preview)
        15. Set timecode to ('00_00_03_15') at [Pip Designer]
        16. Check preview is different at 0 sec and 3 sec (similarity<0.7 and similarity>0.4)
        17. Click [OK] to leave [Pip Designer]
        18. Tap [New Workspace] via hotkey > Handle [No Save] dialog with option ('no')
        19. Repeat step 4 to step 18 for 5 times
        '''
        with step("[Action] Clear [AI Module] files > Clear Cache > Start App"):
            main_page.clear_cache()
            main_page.start_app()

        # [L426] 3.4 Auto Cutout > WER regression (VDE235413-0028)
        # with uuid("dc3024bf-ea9e-4c5a-9a05-f507cc8a3718") as case:

        for _ in range(5):
            logger(f'Doing the loop for the {_+1} time')
            with step("[Action] Clear [AI Module] files"):
                main_page.clear_AI_module()

            with step("[Action] Select media ('Sport 02.jpg') by library icon view"):
                main_page.select_library_icon_view_media('Sport 02.jpg')

            with step("[Action] Insert clip in library to selected track"):
                media_room_page.library_clip_context_menu_insert_on_selected_track()

            with step("[Action] Select [Pip Designer] from [Tip Areas] and check the result"):
                if not tips_area_page.tools.select_PiP_Designer():
                    assert False, "Pip Designer not selected correctly"

            with step("[Action] Switch to ('Advanced') mode in [Pip Designer] > Switch to Motion tab in [Pip Designer]"):
                pip_designer_page.switch_mode('Advanced')
                pip_designer_page.advanced.switch_to_motion()

            with step("[Action] Unfold [Path] menu > Select certain template (4) in [Path] menu"):
                pip_designer_page.advanced.unfold_path_menu(set_unfold=1)
                pip_designer_page.path.select_template(4)

            with step("[Action] Switch to [Animation] tab > Unfold [in animation] menu > Select [In Animation] template (7)"):
                pip_designer_page.advanced.switch_to_animation()
                pip_designer_page.advanced.unfold_in_animation_menu(set_unfold=1)
                pip_designer_page.in_animation.select_template(7)

            with step("[Action] Switch to [Properties] tab > Enable [Chromakey] in [Pip Designer]"):
                pip_designer_page.advanced.switch_to_properties()
                pip_designer_page.apply_chromakey(bApply=1)

            with step("[Action] Wait for downloading AI module"):
                self.check_downloading_AI_module()

            with step("[Action] Click [OK] to leave [Pip Designer]"):
                pip_designer_page.click_ok()

            with step("[Action] Select timeline media with (0,0)"):
                timeline_operation_page.select_timeline_media(0,0)

            with step("[Action] Select [Pip Designer] from [Tip Areas] and check the result"):
                if not tips_area_page.tools.select_PiP_Designer():
                    assert False, "Pip Designer not selected correctly with media '0'"

            with step("[Action] Screenshot (L.pip_designer.preview)"):
                preview_0sec = main_page.snapshot(locator=L.pip_designer.preview)

            with step("[Action] Set timecode to ('00_00_03_15') at [Pip Designer]"):
                pip_designer_page.set_timecode('00_00_03_15')

            with step("[Verify] Check preview is different at 0 sec and 3 sec (similarity<0.7 and similarity>0.4)"):
                preview_3sec = main_page.snapshot(locator=L.pip_designer.preview)

                if main_page.compare(preview_0sec, preview_3sec, similarity=0.7):
                    assert False, "Preview similarity should be less than 0.7 between 0 sec and 3 sec!"

                if not main_page.compare(preview_0sec, preview_3sec, similarity=0.4):
                    assert False, "Preview similarity should be greater than 0.4 between 0 sec and 3 sec!"

            with step("[Action] Click [OK] to leave [Pip Designer]"):
                pip_designer_page.click_ok()

            with step("[Action] Tap [New Workspace] via hotkey > Handle [No Save] dialog with option ('no')"):
                main_page.tap_NewWorkspace_hotkey()
                main_page.handle_no_save_project_dialog(option='no')

        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.launch
    @pytest.mark.import_media
    @pytest.mark.pip_designer
    @pytest.mark.chromakey
    @pytest.mark.express_mode
    @pytest.mark.ai_module
    @pytest.mark.timeline
    @pytest.mark.name('[test_pip_designer_func_7_41] Apply [ChromaKey] and re-enter [Pip Designer] to check preview and [Cutout] radio button')
    @exception_screenshot
    def test_pip_designer_func_7_41(self):
        '''
        1. Clear [AI Module] Files > Clear Cache > Start APP
        2. Import media from local file (Test_Material_Folder + 'BFT_21_Stage1/IMG_0008.HEIC')
        3. Select media ('IMG_0008.HEIC') by library icon view > right click > Choose ('Insert on Selected Track') in right click menu
        4. Select [Pip Designer] from [Tip Areas] and check result is True
        5. Enter [Express] mode in [Pip Designer]
        6. Enable [Chromakey] in [Pip Designer]
        7. Wait for downloading AI module
        8. Click [OK] to leave [Pip Designer]
        9. Select timeline media ('IMG_0008') > Double click to enter [Pip Designer]
        10. Check preview (L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L415_cutout.png') matches Ground Truth (Ground_Truth_Folder + 'L415_cutout.png') with similarity=0.94
        11. Check [Cutout] radio button is enabled by checking main_page.exist(L.pip_designer.chromakey.cutout_button).AXValue == 1
        '''
        with step("[Action] Clear [AI Module] Files > Clear Cache > Start APP"):
            main_page.clear_AI_module()
            main_page.clear_cache()
            main_page.close_and_restart_app()

        with step("[Action] Import media from local file (Test_Material_Folder + 'BFT_21_Stage1/IMG_0008.HEIC')"):
            media_room_page.import_media_file(Test_Material_Folder + 'BFT_21_Stage1/IMG_0008.HEIC')

        with step("[Action] Select media ('IMG_0008.HEIC') by library icon view > right click > Choose ('Insert on Selected Track') in right click menu"):
            main_page.select_library_icon_view_media('IMG_0008.HEIC')
            main_page.right_click()
            main_page.select_right_click_menu('Insert on Selected Track')

        with step("[Action] Select [Pip Designer] from [Tip Areas] and check result is True"):
            if not tips_area_page.tools.select_PiP_Designer():
                assert False, "Pip Designer not selected correctly"

        with step("[Action] Enter [Express] mode in [Pip Designer]"):
            pip_designer_page.switch_mode('Express')

        with step("[Action] Enable [Chromakey] in [Pip Designer]"):
            pip_designer_page.apply_chromakey(bApply=1)

        with step("[Action] Wait for downloading AI module"):
            self.check_downloading_AI_module()

        with step("[Action] Click [OK] to leave [Pip Designer]"):
            pip_designer_page.click_ok()

        # [L415] 3.4 Pip Designer > Auto Cutout > Double click photo > display cutout setting
        # with uuid("557bad84-ec61-4077-bf7a-bd8da4b70d2c") as case:

        with step("[Action] Select timeline media ('IMG_0008') > Double click to enter [Pip Designer]"):
            main_page.select_timeline_media(name='IMG_0008')
            main_page.double_click()

        with step("[Verify] Check preview (L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L415_cutout.png') matches Ground Truth (Ground_Truth_Folder + 'L415_cutout.png') with similarity=0.94"):
            preview = main_page.snapshot(locator=L.pip_designer.preview,
                                        file_name=Auto_Ground_Truth_Folder + 'L415_cutout.png')
            if not main_page.compare(Ground_Truth_Folder + 'L415_cutout.png', preview, similarity=0.94):
                assert False, "Preview does not match GT (L415_cutout.png)! Similarity should > 0.94"

        with step("[Verify] Check [Cutout] radio button is enabled by checking main_page.exist(L.pip_designer.chromakey.cutout_button).AXValue == 1"):
            cutout_button_elem = main_page.exist(L.pip_designer.chromakey.cutout_button)
            if cutout_button_elem.AXValue != 1:
                assert False, f"Cutout radio button is not enabled! AXValue is {cutout_button_elem.AXValue}, expected 1"

        assert True


    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.advanced_mode
    @pytest.mark.in_out_animation
    @pytest.mark.animation
    @pytest.mark.name('[test_pip_designer_func_7_42] Apply [In Animation] template in [Pip Designer] and check preview in [Animation] tab')
    @exception_screenshot
    def test_pip_designer_func_7_42(self):
        '''
        0. Ensure the dependency test ('test_pip_designer_func_7_41') is run and passed
        1. Switch to [Advanced] mode in [Pip Designer]
        2. Switch to [Animation] tab in [Pip Designer]
        3. Unfold [In Animation] menu in [Pip Designer]
        4. Check preview (L.pip_designer.properties, file_name=Auto_Ground_Truth_Folder + 'L390_in_animation_templates.png') matches Ground Truth (Ground_Truth_Folder + 'L390_in_animation_templates.png') with similarity=0.95
        '''
        dependency_test = "test_pip_designer_func_7_41"
        self.ensure_dependency(dependency_test)

        # [L390] 3.4 Pip Designer > Set [Animation] > In animation > Check library
        # with uuid("9e4e9e98-13b0-4aa8-9e9c-aef8dbf4db47") as case:

        with step("[Action] Switch to [Advanced] mode in [Pip Designer]"):
            pip_designer_page.switch_mode('Advanced')

        with step("[Action] Switch to [Animation] tab in [Pip Designer]"):
            pip_designer_page.advanced.switch_to_animation()

        with step("[Action] Unfold [In Animation] menu in [Pip Designer]"):
            pip_designer_page.advanced.unfold_in_animation_menu(set_unfold=1)

        with step("[Verify] Check preview matches GT (L390_in_animation_templates.png)"):
            preview = main_page.snapshot(
                locator=L.pip_designer.properties,
                file_name=Auto_Ground_Truth_Folder + 'L390_in_animation_templates.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L390_in_animation_templates.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L390_in_animation_templates.png)! Similarity should > 0.95"

        assert True


    @pytest.mark.pip_designer_func
    @pytest.mark.animation
    @pytest.mark.in_out_animation
    @pytest.mark.pip_designer
    @pytest.mark.timecode
    @pytest.mark.name('[test_pip_designer_func_7_43] Apply [In Animation] Template in [Pip Designer] and Verify Preview')
    @exception_screenshot
    def test_pip_designer_func_7_43(self):
        '''
        0. Ensure the dependency test ('test_pip_designer_func_7_42') is run and passed
        1. Set timecode to ('00_00_00_02') in [Pip Designer]
        2. Select [In Animation] template (4)
        3. Check preview (L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L391_apply_stomp_in.png') matches Ground Truth (Ground_Truth_Folder + 'L391_apply_stomp_in.png') with similarity=0.95
        4. Fold [In Animation] menu in [Pip Designer]
        '''
        dependency_test = "test_pip_designer_func_7_42"
        self.ensure_dependency(dependency_test)

        # [L391] 3.4 Pip Designer > Set [Animation] > In animation > apply new added animation
        # with uuid("e6ca106d-5040-4e05-99f6-09f331eb4b92") as case:

        with step("[Action] Set timecode to ('00_00_00_02') in [Pip Designer]"):
            pip_designer_page.set_timecode("00_00_00_02")

        with step("[Action] Select [In Animation] template (4)"):
            pip_designer_page.in_animation.select_template(4)

        with step("[Verify] Check preview matches GT (L391_apply_stomp_in.png)"):
            preview = main_page.snapshot(
                locator=L.pip_designer.preview,
                file_name=Auto_Ground_Truth_Folder + 'L391_apply_stomp_in.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L391_apply_stomp_in.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L391_apply_stomp_in.png)! Similarity should > 0.95"

        with step("[Action] Fold [In Animation] menu in [Pip Designer]"):
            pip_designer_page.advanced.unfold_in_animation_menu(set_unfold=0)

        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.launch
    @pytest.mark.pip_designer
    @pytest.mark.advanced_mode
    @pytest.mark.in_out_animation
    @pytest.mark.name('[test_pip_designer_func_7_44] Verify [Out Animation Template] Preview in Pip Designer')
    @exception_screenshot
    def test_pip_designer_func_7_44(self):
        '''
        1. Start App
        2. Import video from local file (Test_Material_Folder + 'Mark_Clips/1.mp4')
        3. Click [Insert] button from [Tip Areas]
        4. Select [Pip Designer] from [Tip Areas] and check result is True
        5. Switch to [Advanced] mode in [Pip Designer]
        6. Unfold [Out Animation] menu in [Pip Designer]
        7. Drag [Properties Scroll Bar] (0)
        8. Check preview (L.pip_designer.properties, file_name=Auto_Ground_Truth_Folder + 'L393_out_animation_templates.png') matches Ground Truth (Ground_Truth_Folder + 'L393_out_animation_templates.png') with similarity=0.95
        '''
        with step("[Action] Start App"):
            main_page.start_app()

        with step("[Action] Import video from local file"):
            media_room_page.import_media_file(Test_Material_Folder + 'Mark_Clips/1.mp4')
            time.sleep(DELAY_TIME) # wait to import files

        with step("[Action] Click [Insert] button from [Tip Areas]"):
            tips_area_page.click_TipsArea_btn_insert()

        with step("[Action] Select [Pip Designer] from [Tip Areas] and check result is True"):
            if not tips_area_page.tools.select_PiP_Designer():
                assert False, "Pip Designer did not open!"

        with step("[Action] Switch to [Advanced] mode in [Pip Designer]"):
            pip_designer_page.switch_mode('Advanced')
            pip_designer_page.advanced.switch_to_animation()

        # [L392] 3.4 Pip Designer > Set [Animation] > Out animation
        # with uuid("2114bde0-974a-4f03-a51b-558500d261bb") as case:

        with step("[Action] Unfold [Out Animation] menu in [Pip Designer]"):
            if not pip_designer_page.advanced.unfold_out_animation_menu(set_unfold=1):
                assert False, "Out Animation menu did not unfold!"

        with step("[Action] Drag [Properties Scroll Bar] (0)"):
            pip_designer_page.drag_properties_scroll_bar(0)

        # [L393] 3.4 Pip Designer > Set [Animation] > Out animation > Check library
        # with uuid("29f29f1f-c70d-4a5f-bfbd-1dd65597ffc1") as case:

        with step("[Verify] Check preview matches GT (L393_out_animation_templates.png)"):
            preview = main_page.snapshot(
                locator=L.pip_designer.properties,
                file_name=Auto_Ground_Truth_Folder + 'L393_out_animation_templates.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L393_out_animation_templates.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L393_out_animation_templates.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.animation
    @pytest.mark.in_out_animation
    @pytest.mark.name('[test_pip_designer_func_7_45] Verify Out Animation Template and Preview in Pip Designer')
    @exception_screenshot
    def test_pip_designer_func_7_45(self):
        '''
        0. Ensure the dependency test ('test_pip_designer_func_7_44') is run and passed
        1. Set timecode to ('00_00_30_03) at [Pip Designer]
        2. Select [Out Animation] template (10)
        3. Check preview (L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L394_apply_pan_out.png') matches Ground Truth (Ground_Truth_Folder + 'L394_apply_pan_out.png') with similarity=0.9
        4. Fold [Out Animation] menu in [Pip Designer]
        '''
        dependency_test = "test_pip_designer_func_7_44"
        self.ensure_dependency(dependency_test)

        # [L394] 3.4 Pip Designer > Set [Animation] > Out animation > apply new added animation
        # with uuid("50da7ef0-fa45-4676-b3a3-941b142ce4e9") as case:

        with step("[Action] Set timecode to '00_00_30_03' at [Pip Designer]"):
            pip_designer_page.set_timecode("00_00_30_03")

        with step("[Action] Select [Out Animation] template (10)"):
            pip_designer_page.in_animation.select_template(10)

        with step("[Verify] Check preview matches GT (L394_apply_pan_out.png) with similarity=0.9"):
            preview = main_page.snapshot(
                locator=L.pip_designer.preview,
                file_name=Auto_Ground_Truth_Folder + 'L394_apply_pan_out.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L394_apply_pan_out.png', preview, similarity=0.9):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L394_apply_pan_out.png)! Similarity should > 0.9"

        with step("[Action] Fold [Out Animation] menu in [Pip Designer]"):
            pip_designer_page.advanced.unfold_out_animation_menu(set_unfold=0)

        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.animation
    @pytest.mark.loop_animation
    @pytest.mark.name('[test_pip_designer_func_7_46] Verify [Loop Animation Template] Preview in Pip Designer')
    @exception_screenshot
    def test_pip_designer_func_7_46(self):
        '''
        0. Ensure the dependency test ('test_pip_designer_func_7_45') is run and passed
        1. Unfold [Loop Animation] menu and check result is True
        2. Check preview (L.pip_designer.properties, file_name=Auto_Ground_Truth_Folder + 'L396_loop_animation_templates.png') matches Ground Truth (Ground_Truth_Folder + 'L396_loop_animation_templates.png') with similarity=0.95
        '''
        dependency_test = "test_pip_designer_func_7_45"
        self.ensure_dependency(dependency_test)

        # [L395] 3.4 Pip Designer > Set [Animation] > Loop animation
        # with uuid("107183f7-e63a-42ff-86c8-3b66ab6e322e") as case:

        with step("[Action] Unfold [Loop Animation] menu and check result is True"):
            pip_designer_page.advanced.unfold_loop_animation_menu(set_unfold=1)

        # [L396] 3.4 Pip Designer > Set [Animation] > Loop animation > Check library
        # with uuid("c93474c8-c6a3-442d-ba57-5be47eb80ee5") as case:
        with step("[Verify] Check preview matches GT (L396_loop_animation_templates.png) with similarity=0.95"):
            preview = main_page.snapshot(
                locator=L.pip_designer.preview,
                file_name=Auto_Ground_Truth_Folder + 'L396_loop_animation_templates.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L396_loop_animation_templates.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L396_loop_animation_templates.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.animation
    @pytest.mark.loop_animation
    @pytest.mark.name('[test_pip_designer_func_7_47] Apply [Rotate Loop Animation] Template and Preview in Pip Designer')
    @exception_screenshot
    def test_pip_designer_func_7_47(self):
        '''
        0. Ensure the dependency test ('test_pip_designer_func_7_46') is run and passed
        1. Set timecode to ('00_00_20_03') at [Pip Designer]
        2. Select [Loop Animation] template (6)
        3. Check preview is updated with similarity >0.99
        3. Check preview (L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L397_apply_rotate_loop.png') matches Ground Truth (Ground_Truth_Folder + 'L397_apply_rotate_loop.png') with similarity=0.9
        4. Fold [Loop Animation] menu in [Pip Designer]
        '''
        dependency_test = "test_pip_designer_func_7_46"
        self.ensure_dependency(dependency_test)

        # [L397] 3.4 Pip Designer > Set [Animation] > Loop animation > apply new added animation
        # with uuid("7211df40-b1e2-422b-b598-b7ea9b2dec29") as case:

        with step("[Action] Set timecode to (00_00_20_03) at [Pip Designer]"):
            pip_designer_page.set_timecode("00_00_20_03")

        with step("[Action] Select [Loop Animation] template (6)"):
            init_preview = main_page.snapshot(locator=L.pip_designer.preview)
            pip_designer_page.in_animation.select_template(6)

        with step("[Verify] Check preview is upadted after applied effect with similiarity>0.99"):
            preview = main_page.snapshot(
                locator=L.pip_designer.preview,
                file_name=Auto_Ground_Truth_Folder + 'L397_apply_rotate_loop.png'
            )
            if main_page.compare(init_preview, preview, similarity=0.99):
                assert False, "Preview is not updated after applied effect! Similarity should <0.99"

        with step("[Verify] Check preview matches GT (L397_apply_rotate_loop.png) with similarity=0.9"):

            if not main_page.compare(Ground_Truth_Folder + 'L397_apply_rotate_loop.png', preview, similarity=0.9):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L397_apply_rotate_loop.png)! Similarity should > 0.9"

        with step("[Action] Fold [Loop Animation] menu in [Pip Designer]"):
            pip_designer_page.advanced.unfold_loop_animation_menu(set_unfold=0)

        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_designer
    @pytest.mark.animation
    @pytest.mark.in_out_animation
    @pytest.mark.loop_animation
    @pytest.mark.name('[test_pip_designer_func_7_48] Apply [In Animation]/ [Out Animation]/ [Loop Animation] in [Pip Designer] and check preview')
    @exception_screenshot
    def test_pip_designer_func_7_48(self):
        '''
        0. Ensure the dependency test ('test_pip_designer_func_7_47') is run and passed
        1. Unfold [In Animation] menu in [Pip Designer]
        2. Set timecode to ('00_00_00_03') at [Pip Designer]
        3. Select [In Animation] template (7)
        4. Check preview (L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L398_apply_fade_in.png') matches Ground Truth (Ground_Truth_Folder + 'L398_apply_fade_in.png') with similarity=0.95
        5. Fold [In Animation] menu in [Pip Designer]
        6. Set timecode to ('00_00_20_03') at [Pip Designer]
        7. Check preview (L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L399_apply_loop.png') matches Ground Truth (Ground_Truth_Folder + 'L399_apply_loop.png') with similarity=0.95
        8. Set timecode to ('00_00_30_03') at [Pip Designer]
        9. Check preview (L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L399_apply_out.png') matches Ground Truth (Ground_Truth_Folder + 'L399_apply_out.png') with similarity=0.95
        10. Switch to [Express] mode in [Pip Designer]
        11. Click [OK] to leave [Pip Designer]
        '''
        dependency_test = "test_pip_designer_func_7_47"
        self.ensure_dependency(dependency_test)

        # [L398] 3.4 Pip Designer > In + Out + Loop Animation
        # with uuid("a86e219b-0a1d-4a7f-b519-362bb7e82d87") as case:

        with step("[Action] Unfold [In Animation] menu in [Pip Designer]"):
            check_in_category = pip_designer_page.advanced.unfold_in_animation_menu(set_unfold=1)
            if not check_in_category:
                assert False, "In Animation menu did not unfold!"

        with step("[Action] Set timecode to ('00_00_00_03') at [Pip Designer]"):
            pip_designer_page.set_timecode("00_00_00_03")

        with step("[Action] Select [In Animation] template (7)"):
            pip_designer_page.in_animation.select_template(7)

        with step("[Verify] Check preview matches GT (L398_apply_fade_in.png) with similarity=0.95"):
            preview = main_page.snapshot(
                locator=L.pip_designer.preview,
                file_name=Auto_Ground_Truth_Folder + 'L398_apply_fade_in.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L398_apply_fade_in.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L398_apply_fade_in.png)! Similarity should > 0.95"

        with step("[Action] Fold [In Animation] menu in [Pip Designer]"):
            pip_designer_page.advanced.unfold_in_animation_menu(set_unfold=0)

        # [L399] 3.4 Pip Designer > In + Out + Loop Animation > select & apply (In + Out + Loop) Animation
        # with uuid("e9bd16c3-f7f5-4249-89c0-22eaf9082ac8") as case:

        with step("[Action] Set timecode to ('00_00_20_03') at [Pip Designer]"):
            pip_designer_page.set_timecode("00_00_20_03")

        with step("[Verify] Check preview matches GT (L399_apply_loop.png) with similarity=0.95"):
            preview = main_page.snapshot(
                locator=L.pip_designer.preview,
                file_name=Auto_Ground_Truth_Folder + 'L399_apply_loop.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L399_apply_loop.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L399_apply_loop.png)! Similarity should > 0.95"

        with step("[Action] Set timecode to ('00_00_30_03') at [Pip Designer]"):
            pip_designer_page.set_timecode("00_00_30_03")

        with step("[Verify] Check preview matches GT (L399_apply_out.png) with similarity=0.95"):
            preview = main_page.snapshot(
                locator=L.pip_designer.preview,
                file_name=Auto_Ground_Truth_Folder + 'L399_apply_out.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L399_apply_out.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L399_apply_out.png)! Similarity should > 0.95"

        with step("[Action] Switch to [Express] mode in [Pip Designer]"):
            pip_designer_page.switch_mode('Express')

        with step("[Action] Click [OK] to leave [Pip Designer]"):
            pip_designer_page.click_ok()

        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_room
    @pytest.mark.detail_view
    @pytest.mark.name('[test_pip_designer_func_7_49] Verify no Detail View icon in selected categories')
    @exception_screenshot
    def test_pip_designer_func_7_49(self):
        '''
        0. Ensure the dependency test ('test_pip_designer_func_7_48') is run and passed
        1. Enter Room (Pip)(4)
        2. Select Category ('My Favorites')
        3. Check [Detail View] icon (L.main.btn_library_details_view) is not shown in [My Favorites] category
        4. Select Category ('Custom')
        5. Check [Detail View] icon (L.main.btn_library_details_view) is not shown in [Custom] category
        6. Select Category ('Downloads')
        7. Check [Detail View] icon (L.main.btn_library_details_view) is not shown in [Downloads] category
        '''
        
        dependency_test = "test_pip_designer_func_7_48"
        self.ensure_dependency(dependency_test)

        # [L253] 2.3 Video Overlay Room > Check Custom, My Favorite category > Remove detail view icon
        # with uuid("95a75c0c-1d8e-41ec-9851-2859f001fd96") as case:

        with step("[Action] Enter Room (Pip)(4)"):
            main_page.enter_room(4)

        with step("[Action] Select Category ('My Favorites')"):
            main_page.select_LibraryRoom_category('My Favorites')

        with step("[Verify] Check if [Detail View] icon is not shown in [My Favorites] category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Detail View icon should not be visible in 'My Favorites' category"

        with step("[Action] Select Category ('Custom')"):
            main_page.select_LibraryRoom_category('Custom')

        with step("[Verify] Check if [Detail View] icon is not shown in [Custom] category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Detail View icon should not be visible in 'Custom' category"

        with step("[Action] Select Category ('Downloads')"):
            main_page.select_LibraryRoom_category('Downloads')

        with step("[Verify] Check if [Detail View] icon is not shown in [Downloads] category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Detail View icon should not be visible in 'Downloads' category"

        assert True

    @pytest.mark.pip_designer_func
    @pytest.mark.pip_room
    @pytest.mark.sort
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @pytest.mark.name('[test_pip_designer_func_7_50] Download 3 [Template] and Sort by [Name]/ [Created Date] in [Pip Room]')
    @exception_screenshot
    def test_pip_designer_func_7_50(self):
        '''
        0. Ensure the dependency test ('test_pip_designer_func_7_49') is run and passed
        1. Select Category ('All Content') in Library Room > at_download_list = ['winter', 'tutorial', 'new year', 'shape']
        2. Search media (at_download_list[x]) > Select 2nd media (L.media_room.library_listview.unit_collection_view_item_second) in library list view > Click [Cancel] button in search library for all contents in at_download_list
        3. Select Category ('Downloads') in Library Room > Screenshot (locator=L.base.Area.library_icon_view) in [Downloads] category
        4. Sort by [Name] in [Pip Room]
        5. Check preview is updated after [Sort by Name] with similarity<0.95
        6. Sort by [Created Date] in [Pip Room]
        7. Check preview is updated after [Sort by Created Date] with similarity<0.95
        8. Sort by [Name] in [Pip Room] to set to default status
        '''
        
        dependency_test = "test_pip_designer_func_7_49"
        self.ensure_dependency(dependency_test)

        # [L254] 2.3 Effect Room > Check other IAD category > sorting rule
        # with uuid("3b016c0d-8aab-42de-9a96-d2ab76b8cafb") as case:

        with step("[Action] Select Category ('All Content') in Library Room"):
            main_page.select_LibraryRoom_category('All Content')
        
        at_download_list = ['winter', 'tutorial', 'new year', 'shape']

        for item in at_download_list:
            with step(f"[Action] Search media '{item}' and select 2nd media, then click [Cancel]"):
                media_room_page.search_library(item)
                target = main_page.exist(L.media_room.library_listview.unit_collection_view_item_second)
                main_page.mouse.click(*target.center)
                time.sleep(DELAY_TIME * 3)
                media_room_page.search_library_click_cancel()

        with step("[Action] Select Category ('Downloads') in Library Room"):
            main_page.select_LibraryRoom_category('Downloads')

        with step("[Action] Screenshot (locator=L.base.Area.library_icon_view) in [Downloads] category"):
            downloads_snapshot = main_page.snapshot(locator=L.base.Area.library_icon_view)

        with step("[Action] Sort by [Name] in [Pip Room]"):
            pip_room_page.sort_by_name()

        with step("[Verify] Check preview is updated after [Sort by Name]"):
            preview_after_sort_name = main_page.snapshot(locator=L.base.Area.library_icon_view)
            if main_page.compare(downloads_snapshot, preview_after_sort_name, similarity=0.95):
                assert False, "Preview did not update as expected after sorting by Name! Similarity should < 0.95"

        with step("[Action] Sort by [Created Date] in [Pip Room]"):
            pip_room_page.sort_by_created_date()

        with step("[Verify] Check preview is updated after [Sort by Created Date]"):
            preview_after_sort_created_date = main_page.snapshot(locator=L.base.Area.library_icon_view)
            if main_page.compare(downloads_snapshot, preview_after_sort_created_date, similarity=0.95):
                assert False, "Preview did not update as expected after sorting by Created Date! Similarity should < 0.95"

        with step("[Action] Sort by [Name] in [Pip Room] to set to default status"):
            pip_room_page.sort_by_name()

        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.search_library
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.content_pack
    @pytest.mark.name('[test_shape_designer_func_8_1] Open Shape Designer with [Shape 010]')
    @exception_screenshot
    def test_shape_designer_func_8_1(self):
        '''
        1. Open AP and open saved project
        2. Enter PiP room
        3. Search [Shape 010] and open shape designer
        4. Check if Shape Designer (Shape 10) is opened
        '''

        with step('[Action] Open AP and open saved project'):
            main_page.start_app()
            time.sleep(DELAY_TIME)

            project_name = 'Packed_Project/test_shape_designer_func_8_1_from_test_pip_designer_func_7_38.pdk'
            save_name = 'Extracted_Folder/test_shape_designer_func_8_1'
            self.open_packed_project(project_name, save_name)

        # Open Preference > Editing > Set default Title duration to 10 (For v21.6.5303 PM request)
        with step('[Action] Set default Title duration to 10'):
            main_page.click_set_user_preferences()
            preferences_page.switch_to_editing()
            preferences_page.editing.durations_title_set_value('10.0')
            preferences_page.click_ok()

        # [L428] 3.5 Shape Designer (Shape 10) > Open Shape designer
        # with uuid("d31e8163-f315-43f3-bf3b-1ef15d347554") as case:
        with step('[Action] Enter pip room'):
            # enter PiP room
            main_page.enter_room(4)

        with step('[Action] Search [Shape 010] and open shape designer'):
            # Input search Shape 010
            main_page.exist_click(L.media_room.input_search)
            main_page.keyboard.send('Shape 010')
            main_page.press_enter_key()
            time.sleep(DELAY_TIME)
            main_page.select_library_icon_view_media('Shape 010')
            main_page.double_click()

        with step('[Verify] Check if Shape Designer (Shape 10) is opened'):
            check_title = shape_designer_page.get_title()
            assert check_title == 'Shape 010', f"Cannot open Shape Designer (Shape 10) correctly! Expected: Shape 010, Actual: {check_title}"

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.name('[test_shape_designer_func_8_2] Input text: Happy Hour')
    @exception_screenshot
    def test_shape_designer_func_8_2(self):
        '''
        1. Input text: Happy Hour
        2. Check if text is input correctly as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_1"
        self.ensure_dependency(dependency_test)

        # [L429] 3.5 Shape Designer (Shape 10) > Input text
        # with uuid("649e782e-02f5-4d11-98f8-43c305c69daa") as case:
        with step('[Action] Input text: Happy Hour'):
            shape_designer_page.click_center_on_Canvas()
            shape_designer_page.edit_title_on_Canvas('Happy Hour')

        with step('[Verify] Check if text is input correctly as GT'):
            check_preview = main_page.snapshot(locator=L.shape_designer.canvas_object_shape, file_name=Auto_Ground_Truth_Folder + 'L196.png')

            # Compare preview after select Shape 10 & input text : Happy Hour
            compare_result = main_page.compare(Ground_Truth_Folder + 'L196.png', Auto_Ground_Truth_Folder + 'L196.png')
            assert compare_result, "Cannot input text correctly as GT (L196.png)! Similary should>0.95"

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_type
    @pytest.mark.name('[test_shape_designer_func_8_3] Apply Linear Shape (8 and 4)')
    @exception_screenshot
    def test_shape_designer_func_8_3(self):
        '''
        1. Apply Shape 8 and check preview
        2. Apply Shape 4 and check preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_2"
        self.ensure_dependency(dependency_test)

        # [L431] 3.5 Shape Designer (Shape 10) > Properties tab > Shape Type (Linear shape)
        # with uuid("281801de-64bc-4c6c-8c47-ab1dd7f8e0fa") as case:
        with step('[Action] Enter shape type'):
            shape_designer_page.unselect_title_on_Canvas()
            # Unfold Shape Type
            shape_designer_page.properties.unfold_shape_type(set_unfold=1)
            # Drag scroll bar of (shape type) to 0
            shape_designer_page.properties.shape_type.drag_scroll_bar('0')

        with step('[Action] Apply shape 8'):
            check_preview_25 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Apply shape 8
            shape_designer_page.properties.shape_type.apply_type(8)
        
        with step('[Verify] Check preview after apply shape 8'):
            # Verify Step
            check_preview_08 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(check_preview_25, check_preview_08):
                assert False, "Shape 8 is not applied correctly! Similary should<0.95"
            
        with step('[Action] Apply shape 4'):
            # Apply shape 4
            shape_designer_page.properties.shape_type.apply_type(4)

        with step('[Verify] Check preview after apply shape 4'):
            # Verify Step
            # If preview (Linear 08 -> Linear 04) is not changed, it's known bug (VDE224706-0064)
            check_preview_04 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            compare_result_w_04 = main_page.compare(check_preview_08, check_preview_04, similarity=0.999)
            if compare_result_w_04:
                assert False, "Shape 4 is not applied correctly! Similary should<0.999"

        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_type
    @pytest.mark.name('[test_shape_designer_func_8_4] Apply General Shape (10 and 14 and 19)')
    @exception_screenshot
    def test_shape_designer_func_8_4(self):
        '''
        1. Leave Shape Designer and re-enter
        2. Apply General Shape (10) and check preview
        3. Apply General Shape (14) and check preview
        4. Apply General Shape (19) and check preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_3"
        self.ensure_dependency(dependency_test)


        # [L430] 3.5 Shape Designer (Shape 10) > Properties tab > Shape Type (General shape)
        # with uuid("1c24089b-4989-459e-b2aa-105da9c3cf1e") as case:

        with step('[Action] Leave Shape Designer and re-enter'):
            # Leave Shape Designer
            shape_designer_page.click_cancel(option=1)
            # Search [Shape 010] and open shape designer
            main_page.select_library_icon_view_media('Shape 010')
            main_page.double_click()
            # Edit text: Happy Hour
            shape_designer_page.click_center_on_Canvas()
            shape_designer_page.edit_title_on_Canvas('Happy Hour')

        with step('[Action] Apply General Shape (10)'):
            # Drag scroll bar of (shape type) to 0.314
            # shape_designer_page.properties.shape_type.drag_scroll_bar('0')
            # time.sleep(DELAY_TIME)
            # shape_designer_page.properties.shape_type.apply_type(10)
            shape_designer_page.properties.shape_type.drag_scroll_bar('0.14')
            # time.sleep(DELAY_TIME * 2)
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            shape_designer_page.properties.shape_type.apply_type(10)
        
        with step('[Verify] Check preview after apply shape 10'):
            check_preview_10 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_preview_10, similarity=0.98):
                assert False, "Shape 10 is not applied correctly! Similary should<0.98"

        with step('[Action] Apply General Shape (14)'):
            # Apply shape 14
            # shape_designer_page.properties.shape_type.apply_type(14)
            shape_designer_page.properties.shape_type.drag_scroll_bar('0.34')
            # Apply shape 14
            shape_designer_page.properties.shape_type.apply_type(14)
            # time.sleep(DELAY_TIME)
        with step('[Verify] Check preview after apply shape 14'):
            check_preview_14 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(check_preview_10, check_preview_14, similarity=0.98):
                assert False, "Shape 14 is not applied correctly! Similary should<0.98"

        with step('[Action] Apply General Shape (19)'):
            # Apply shape 19
            shape_designer_page.properties.shape_type.apply_type(19)
            # time.sleep(DELAY_TIME)
        with step('[Verify] Check preview after apply shape 19'):
            check_preview_19 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Compare preview after select Shape 19 vs Shape 14
            if main_page.compare(check_preview_19, check_preview_14):
                assert False, "Shape 19 is not applied correctly! Similary should<0.95"
            assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_preset
    @pytest.mark.name('[test_shape_designer_func_8_5] Apply Preset 4')
    @exception_screenshot
    def test_shape_designer_func_8_5(self):
        '''
        1. Enter Preset
        2. Apply preset 4
        3. Check preview after apply preset 4
        4. Compare preview after select Preset 4 as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_4"
        self.ensure_dependency(dependency_test)
        
        # [L432] 3.5 Shape Designer (Shape 10) > Properties tab > Preset
        # with uuid("53bde9e0-8ccd-4155-995c-50815b552ddd") as case:

        with step('[Action] Enter Preset'):
            # Fold Shape Type
            shape_designer_page.properties.unfold_shape_type(set_unfold=0)
            # Unfold Preset Type
            shape_designer_page.properties.unfold_shape_preset(set_unfold=1)

        with step('[Action] Apply preset 4'):
            check_preset_2 = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Apply preset 4
            shape_designer_page.properties.shape_preset.apply_preset(4)

        with step('[Verify] Check preview after apply preset 4'):
            check_preset_4 = main_page.snapshot(locator=L.shape_designer.canvas_split_view,
                                                file_name=Auto_Ground_Truth_Folder + 'L199.png')
            # Compare preview after apply preset 4
            should_different = main_page.compare(check_preset_2, check_preset_4, similarity=0.97)
            if should_different:
                assert False, "Preset 4 is not applied correctly! Similary should<0.97"

        with step('[Verify] Compare preview after select Preset 4 as GT'):
            compare_result = main_page.compare(Ground_Truth_Folder + 'L199.png', check_preset_4)
            if not compare_result:
                assert False, "Preset 4 is not correct as GT(L199.png)! Similary should>0.95"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_fill
    @pytest.mark.name('[test_shape_designer_func_8_6] Set [Gradient Begin color] in [Shape Fill] tab')
    @exception_screenshot
    def test_shape_designer_func_8_6(self):
        '''
        1. Enter [Shape Fill] tab
        2. Set Gradient Begin and check preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_5"
        self.ensure_dependency(dependency_test)

        # [L433] 3.5 Shape Designer (Shape 10) > Properties tab > Fill
        # with uuid("0925be85-d8bc-4a20-bd47-80b7c2f3ba35") as case:

        with step('[Action] Enter Fill tab'):
            # Fold Preset Type
            shape_designer_page.properties.unfold_shape_preset(set_unfold=0)
            # Unfold Fill Type
            shape_designer_page.properties.unfold_shape_fill(set_unfold=1)

        with step('[Action] Set Gradient Begin'):
            before_fill = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set Gradient begin : 362A45
            shape_designer_page.properties.shape_fill.set_gradient_begin('E31E35')

        with step('[Verify] Check preview changed after apply Gradient Begin'):
            applied_gradient_begin = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_fill, applied_gradient_begin, similarity=0.98):
                assert False, "Gradient Begin is not changed correctly! Similary should<0.98"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_fill
    @pytest.mark.name('[test_shape_designer_func_8_7] Set [Gradient End color] in [Shape Fill] tab')
    @exception_screenshot
    def test_shape_designer_func_8_7(self):
        '''
        1. Set Gradient End and check preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_6"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Gradient End'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set Gradient end : 91F3C1
            shape_designer_page.properties.shape_fill.set_gradient_end('91F3C1')

        with step('[Verify] Check preview changed after apply Gradient End'):
            applied_gradient_end = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, applied_gradient_end, similarity=0.98):
                assert False, "Gradient End is not changed correctly! Similary should<0.98"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_fill
    @pytest.mark.name('[test_shape_designer_func_8_8] Set [Blur Value] in [Shape Fill] tab')
    @exception_screenshot
    def test_shape_designer_func_8_8(self):
        '''
        1. Set Blur value and check value/ preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_7"
        self.ensure_dependency(dependency_test)
        
        with step('[Action] Set Blur value'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set blur : 5
            shape_designer_page.properties.shape_fill.blur.set_value(5)

        with step('[Verify] Check Blur value ==5'):
            # Get blur value
            check_blur = shape_designer_page.properties.shape_fill.blur.get_value()
            if check_blur != '5':
                assert False, f"Blur value is not correct! Expected: 5, Actual: {check_blur}"

        with step('[Verify] Check preview changed after apply Blur'):
            applied_blur = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, applied_blur, similarity=0.999):
                assert False, "Blur is not changed correctly! Similary should<0.999"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_fill
    @pytest.mark.name('[test_shape_designer_func_8_9] Set [Opacity] in [Shape Fill] tab')
    @exception_screenshot
    def test_shape_designer_func_8_9(self):
        '''
        1. Set Opacity value and check value/ preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_8"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Opacity value'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set opacity : 94%
            shape_designer_page.properties.shape_fill.opacity.click_arrow(1, 6)

        with step('[Verify] Check Opacity value ==94%'):
            # Get opacity value
            check_opacity = shape_designer_page.properties.shape_fill.opacity.get_value()
            if check_opacity != '94%':
                assert False, f"Opacity value is not correct! Expected: 94%, Actual: {check_opacity}"

        with step('[Verify] Check preview changed after apply Opacity'):
            applied_opacity = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, applied_opacity, similarity=0.9999):
                assert False, "Opacity is not changed correctly! Similary should<0.9999"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_fill
    @pytest.mark.name('[test_shape_designer_func_8_10] Check Previe from test_shape_designer_func_8_7~10')
    @exception_screenshot
    def test_shape_designer_func_8_10(self):
        '''
        1. Compare preview after select Shape 14 as GT (L199.png)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_9"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Compare preview after select Shape 14 as GT'):
            # Check shape preview
            check_fill = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            compare_different = main_page.compare(Auto_Ground_Truth_Folder + 'L199.png', check_fill, similarity=0.96)
            if not compare_different:
                assert False, "Fill is not correct as GT(L199.png)! Similary should>0.98"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_outline
    @pytest.mark.name('[test_shape_designer_func_8_11] Set [Size] in [Shape Outline] tab')
    @exception_screenshot
    def test_shape_designer_func_8_11(self):
        '''
        1. Enter [Shape Outline] tab and Maximize window
        2. Set Size to (2) and check preview/ size value
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_10"
        self.ensure_dependency(dependency_test)

        # [L434] 3.5 Shape Designer (Shape 10) > Properties tab > Outline
        # with uuid("81e6ab89-f81c-4ec3-926f-6611abe5cef2") as case:
        with step('[Action] Enter [Shape Outline] tab and Maximize window'):
            # Fold Fill Type
            shape_designer_page.properties.unfold_shape_fill(set_unfold=0)
            # Unfold Outline
            shape_designer_page.properties.unfold_shape_outline(set_unfold=1)
            # maximize
            shape_designer_page.click_restore_btn()
            time.sleep(DELAY_TIME*1.5)
            # Set checkbox
            shape_designer_page.properties.shape_outline.apply_checkbox()



        with step('[Action] Set Size to (2)'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set size
            shape_designer_page.properties.shape_outline.size.set_value(2)
        
        with step('[Verify] Check Size value'):
            # Get size value
            check_size = shape_designer_page.properties.shape_outline.size.get_value()
            if check_size != '2':
                assert False, f"Size value is not correct! Expected: 2, Actual: {check_size}"

        with step('[Verify] Check preview after apply Size'):
            check_outline_size = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_outline_size, similarity=0.9999):
                assert False, "Size is not changed correctly! Similary should<0.9999"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_outline
    @pytest.mark.name('[test_shape_designer_func_8_12] Set [Line Type] in [Shape Outline] tab')
    @exception_screenshot
    def test_shape_designer_func_8_12(self):
        '''
        1. Set Line Type to the 3rd type and check preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_11"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Line Type to the 3rd type'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set 3rd type
            shape_designer_page.properties.shape_outline.set_line_type(3)
        with step('[Verify] Check preview after apply Line Type'):
            check_outline_line_type = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_outline_line_type, similarity=0.99999):
                assert False, "Line Type is not changed correctly! Similary should<0.99999"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_outline
    @pytest.mark.name('[test_shape_designer_func_8_13] Set [Blur] in [Shape Outline] tab')
    @exception_screenshot
    def test_shape_designer_func_8_13(self):
        '''
        1. Set Blur and check preview/ blur value
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_12"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Blur to 11 by slider'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set blur
            shape_designer_page.properties.shape_outline.blur.set_slider(11)
        
        with step('[Verify] Check blur value'):
            # Get blur value
            check_blur = shape_designer_page.properties.shape_outline.blur.get_value()
            if check_blur != '11':
                assert False, f"Blur value is not correct! Expected: 11, Actual: {check_blur}"

        with step('[Verify] Check preview after apply Blur'):
            check_outline_blur = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_outline_blur, similarity=0.99999):
                assert False, "Blur is not changed correctly! Similary should<0.99999"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_outline
    @pytest.mark.name('[test_shape_designer_func_8_14] Set [Color] in [Shape Outline] tab')
    @exception_screenshot
    def test_shape_designer_func_8_14(self):
        '''
        1. Set Color to (F3C4DE) and check preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_13"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Color to (F3C4DE)'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set color
            shape_designer_page.properties.shape_outline.set_uniform_color('F3C4DE')
        with step('[Verify] Check preview after apply Color'):
            check_outline_color = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_outline_color, similarity=0.98):
                assert False, "Color is not changed correctly! Similary should<0.98"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_outline
    @pytest.mark.name('[test_shape_designer_func_8_15] Check preview from test_shape_designer_func_8_11~14')
    @exception_screenshot
    def test_shape_designer_func_8_15(self):
        '''
        1. Check preview from test_shape_designer_func_8_11~14
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_14"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check preview as GT'):
            # Click center
            shape_designer_page.click_center_on_Canvas()
            time.sleep(DELAY_TIME)

            check_preview = main_page.snapshot(locator=L.shape_designer.canvas_object_shape,
                                               file_name=Auto_Ground_Truth_Folder + 'L201.png')

            # Compare preview
            compare_result = main_page.compare(Ground_Truth_Folder + 'L201.png', check_preview, similarity=0.9)
            assert compare_result, "Preview is not correct as GT(L201.png)! Similary should>0.9"

            
    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_shadow
    @pytest.mark.name('[test_shape_designer_func_8_16] Set [Apply Shadow to] in [Shadow] tab')
    @exception_screenshot
    def test_shape_designer_func_8_16(self):
        '''
        1. Enter Shadow tab
        2. Set Apply Shadow to (Outline Only) and check value/ preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_15"
        self.ensure_dependency(dependency_test)


        # [L435] 3.5 Shape Designer (Shape 10) > Properties tab > Shadow
        # with uuid("f9c22e54-7e9d-4341-ac36-496bf86861d1") as case:

        with step('[Action] Enter Shadow tab'):
            # Fold Outline
            shape_designer_page.properties.unfold_shape_outline(set_unfold=0)
            # Unfold Shadow
            shape_designer_page.properties.unfold_shadow(set_unfold=1)
            # Set checkbox
            shape_designer_page.properties.shadow.apply_checkbox(1)

        with step('[Action] Switch to apply [Outline Only]'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set apply shadow to (Outline Only)
            shape_designer_page.properties.shadow.set_apply_shadow_to(2)

        with step('[Verify] Check [Apply Shadow to] == [Outline Only]'):
            check_shadow_to_result = shape_designer_page.properties.shadow.get_apply_shadow_to()
            if check_shadow_to_result != 'Outline Only':
                assert False, f"Apply Shadow to is not correct! Expected: Outline Only, Actual: {check_shadow_to_result}"

        with step('[Verify] Check preview after apply Shadow'):
            applied_shadow_to_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, applied_shadow_to_preview, similarity=0.9999):
                assert False, "Shadow is not changed correctly! Similary should<0.9999"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_shadow
    @pytest.mark.name('[test_shape_designer_func_8_17] Set [Distance] in [Shadow] tab')
    @exception_screenshot
    def test_shape_designer_func_8_17(self):
        '''
        1. Set [Distance] to (35.6) and check value/ preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_16"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set [Distance] to (35.6)'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set distance 
            shape_designer_page.properties.shadow.distance.set_value(35.6)

        with step('[Verify] Check [Distance] value'):
            # Get distance value
            check_distance = shape_designer_page.properties.shadow.distance.get_value()
            if check_distance != '35.6':
                assert False, f"Distance value is not correct! Expected: 35.6, Actual: {check_distance}"

        with step('[Verify] Check preview after apply [Distance]'):
            check_distance_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_distance_preview, similarity=0.9999):
                assert False, "Distance is not changed correctly! Similary should<0.9999"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_shadow
    @pytest.mark.name('[test_shape_designer_func_8_18] Set [Opacity] in [Shadow] tab')
    @exception_screenshot
    def test_shape_designer_func_8_18(self):
        '''
        1. Set [Opacity] to (88%) and check value/ preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_17"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set [Opacity] to (88%)'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set opacity
            shape_designer_page.properties.shadow.opacity.set_slider(88)

        with step('[Verify] Check [Opacity] value'):
            # Get opacity value
            check_opacity = shape_designer_page.properties.shadow.opacity.get_value()
            if check_opacity != '88%':
                assert False, f"Opacity value is not correct! Expected: 88%, Actual: {check_opacity}"
        
        # The change is too small (0.9999994), skip compare process
        # with step('[Verify] Check preview after apply [Opacity]'): 
        #     check_opacity_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
        #     if main_page.compare(before_preview, check_opacity_preview, similarity=0.98):
        #         assert False, "Opacity is not changed correctly! Similary should<0.98"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_shadow
    @pytest.mark.name('[test_shape_designer_func_8_19] Set [Blur] in [Shadow] tab')
    @exception_screenshot
    def test_shape_designer_func_8_19(self):
        '''
        1. Set [Blur] to (11) and check value/ preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_18"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set [Blur] to (11)'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set Blur
            shape_designer_page.properties.shadow.blur.set_value(11)

        with step('[Verify] Check [Blur] value'):
            # Get blur value
            check_blur = shape_designer_page.properties.shadow.blur.get_value()
            if check_blur != '11':
                assert False, f"Blur value is not correct! Expected: 11, Actual: {check_blur}"
        
        with step('[Verify] Check preview after apply [Blur]'):
            check_blur_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_blur_preview, similarity=0.99999):
                assert False, "Blur is not changed correctly! Similary should<0.99999"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_shadow
    @pytest.mark.name('[test_shape_designer_func_8_20] Set [Fill Shadow] in [Shadow] tab')
    @exception_screenshot
    def test_shape_designer_func_8_20(self):
        '''
        1. Set [Fill Shadow] to (On) and check value/ preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_19"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set [Fill Shadow] to (On)'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set Fill shadow
            shape_designer_page.properties.shadow.fill_shadow.apply_checkbox(1)

        with step('[Verify] Check [Fill Shadow] value'):
            # Get Fill shadow value
            check_fill_shadow = shape_designer_page.properties.shadow.fill_shadow.get_checkbox()
            if check_fill_shadow != True:
                assert False, f"Fill Shadow value is not correct! Expected: True, Actual: {check_fill_shadow}"
        
        with step('[Verify] Check preview after apply [Fill Shadow]'):
            check_fill_shadow_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_fill_shadow_preview, similarity=0.999):
                assert False, "Fill Shadow is not changed correctly! Similary should<0.999"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_shadow
    @pytest.mark.name('[test_shape_designer_func_8_21] Set [Direction] in [Shadow] tab')
    @exception_screenshot
    def test_shape_designer_func_8_21(self):
        '''
        1. Set [Direction] to (17) and check value/ preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_19"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set [Direction] to (17)'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set direction
            shape_designer_page.properties.shadow.direction.set_value(17)

        with step('[Verify] Check [Direction] value'):
            # Get direction value
            check_direction = shape_designer_page.properties.shadow.direction.get_value()
            if check_direction != '17':
                assert False, f"Direction value is not correct! Expected: 17, Actual: {check_direction}"

        with step('[Verify] Check preview after apply [Direction]'):
            check_direction_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_direction_preview, similarity=0.9999):
                assert False, "Direction is not changed correctly! Similary should<0.9999"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_shadow
    @pytest.mark.name('[test_shape_designer_func_8_22] Check preview from test_shape_designer_func_8_16~21')
    @exception_screenshot
    def test_shape_designer_func_8_22(self):
        '''
        1. Check preview from test_shape_designer_func_8_16~21
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_21"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check preview as GT'):
            check_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)

            # Compare preview
            compare_result = main_page.compare(Ground_Truth_Folder + 'L201.png', check_preview, similarity=0.98)
            if not compare_result:
                assert False, "Preview is not correct as GT(L201.png)! Similary should>0.98"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_title
    @pytest.mark.name('[test_shape_designer_func_8_23] Set [Font Type] in [Title] tab')
    @exception_screenshot
    def test_shape_designer_func_8_23(self):
        '''
        1. Enter Title tab
        2. Set [Font Type] to (PT Sans Bold) and check value/ preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_22"
        self.ensure_dependency(dependency_test)

        # [L436] 3.5 Shape Designer (Shape 10) > Properties tab > Title
        # with uuid("a148b797-eb2a-4bc8-89e3-ff4f648c6b05") as case:

        with step('[Action] Enter Title tab'):
            # Fold Shadow
            shape_designer_page.properties.unfold_shadow(set_unfold=0)
            # Unfold Title
            shape_designer_page.properties.unfold_title(set_unfold=1)

        with step('[Action] Set font type (PT Sans Bold)'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set font type: PT Sans Bold
            shape_designer_page.properties.title.set_font_type('PT Sans Bold')

        with step('[Verify] Check Font type value'):
            # Get font type value
            check_font_type = shape_designer_page.properties.title.get_font_type()
            if check_font_type != 'PT Sans Bold':
                assert False, f"Font type value is not correct! Expected: PT Sans Bold, Actual: {check_font_type}"
        
        with step('[Verify] Check preview after apply Font type'):
            check_font_type_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_font_type_preview, similarity=0.999):
                assert False, "Font type is not changed correctly! Similary should<0.999"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_title
    @pytest.mark.name('[test_shape_designer_func_8_24] Set [Size] in [Title] tab')
    @exception_screenshot
    def test_shape_designer_func_8_24(self):
        '''
        1. Set [Size] to (21) and check value/ preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_23"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set [Size] to (21)'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set size = 21
            shape_designer_page.properties.title.set_font_size(21)

        with step('[Verify] Check [Size] value'):
            # Get size value
            check_size = shape_designer_page.properties.title.get_font_size()
            if check_size != '21':
                assert False, f"Size value is not correct! Expected: 21, Actual: {check_size}"
        
        with step('[Verify] Check preview after apply [Size]'):
            check_size_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_size_preview, similarity=0.98):
                assert False, "Size is not changed correctly! Similary should<0.98"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_title
    @pytest.mark.name('[test_shape_designer_func_8_25] Set [Color] in [Title] tab')
    @exception_screenshot
    def test_shape_designer_func_8_25(self):
        '''
        1. Set [Color] to (B5FFFF) and check value/ preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_24"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set [Color] to (B5FFFF)'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            # Set font color
            shape_designer_page.properties.title.set_font_color('B5FFFF')

        with step('[Verify] Check preview after apply [Color]'):
            check_color_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_color_preview, similarity=0.98):
                assert False, "Color is not changed correctly! Similary should<0.98"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_title
    @pytest.mark.name('[test_shape_designer_func_8_26] Check preview from test_shape_designer_func_8_23~25')
    @exception_screenshot
    def test_shape_designer_func_8_26(self):
        '''
        1. Check preview from test_shape_designer_func_8_23~25
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_25"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check preview as GT'):
        
            # Compare preview
            check_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view, file_name=Auto_Ground_Truth_Folder + 'L203.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L203.png', check_preview, similarity=0.9)
            assert compare_result, "Preview is not correct as GT(L203.png)! Similary should>0.9"

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.canva
    @pytest.mark.name('[test_shape_designer_func_8_27] Manual adjust object to larger on canvas')
    @exception_screenshot
    def test_shape_designer_func_8_27(self):
        '''
        1. Initial till [Properties] tab with [Title] fold
        2. Manual adjust object to larger on canvas
        3. Check preview after manual adjust as GT
        '''

        with step('[Initial] Till [Properties] tab with [Title] fold'):
            # Ensure the dependency test is run and passed
            self.test_shape_designer_func_8_1()
            # Fold Title
            shape_designer_page.properties.unfold_title(set_unfold=0)

        # [L441] 3.5 Shape Designer (Shape 10) > Manual adjust on canvas
        # with uuid("47acdd2c-75cb-48c9-bce2-64a188a62cb4") as case:

        with step('[Action] Manual adjust object to larger on canvas'):
            shape_designer_page.adjust_object_on_Canvas_resize_to_large()

        with step('[Verify] Check preview after manual adjust as GT'):
            # Verify : Preview is changed
            check_resize = main_page.snapshot(locator=L.shape_designer.canvas_split_view,
                                               file_name=Auto_Ground_Truth_Folder + 'L204.png')
            compare_resize_result = main_page.compare(Ground_Truth_Folder + 'L204.png', check_resize)
            assert compare_resize_result, "Preview is not correct as GT(L204.png)! Similary should>0.95"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.canva
    @pytest.mark.keyframe
    @pytest.mark.name('[test_shape_designer_func_8_28] Move Object to left on canvas')
    @exception_screenshot
    def test_shape_designer_func_8_28(self):
        '''
        1. Move object to left on canvas and check preview
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_27"
        self.ensure_dependency(dependency_test)

        with step('[Initial] Undo large step in previous test'):
            shape_designer_page.click_undo()

        with step('[Action] Move object to left on canvas'):
            before_preview = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            shape_designer_page.adjust_object_on_Canvas_move_to_left()

        with step('[Verify] Check preview after move object to left'):
            # Verify : Preview is changed
            check_move_left = main_page.snapshot(locator=L.shape_designer.canvas_split_view)
            if main_page.compare(before_preview, check_move_left, similarity=0.999):
                assert False, "Move left is not correct! Similary should<0.999"

        with step('[Verify] Check position x value'):
            with step('[Action] Switch to Keyframe tab'):
                # Switch Keyframe menu
                shape_designer_page.click_keyframe_tab()

            # Verify position x value
            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()
            if current_x != '0.359':
                assert False, f"Position x value is not correct! Expected: 0.359, Actual: {current_x}"

        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_29] Set 1st Position keyframe at (00:00)')
    @exception_screenshot
    def test_shape_designer_func_8_29(self):
        '''
        1. Set 1st Position keyframe at (00:00) and check value
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_28"
        self.ensure_dependency(dependency_test)

        # [L438] 3.5 Shape Designer (Shape 10) > Keyframe tab > Adjust keyframe
        # with uuid("c70a3ee9-2263-4772-a7d7-d4f859315ec0") as case:

        with step('[Action] Set 1st Position keyframe at (00:00)'):
            # Set position = (0.199, 0.297)
            shape_designer_page.keyframe.object_settings.position.x.set_value(0.199)
            shape_designer_page.keyframe.object_settings.position.y.set_value(0.297)

            # Set position 1st keyframe on 0s
            shape_designer_page.keyframe.object_settings.position.keyframe.click_add_remove()

        with step('[Verify] Check x value after set 1st Position keyframe'):
            # Verify position x value
            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()
            if current_x != '0.199':
                assert False, f"Position x value is not correct! Expected: 0.199, Actual: {current_x}"

        with step('[Verify] Check y value after set 1st Position keyframe'):
            # Verify position y value
            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()
            if current_y != '0.297':
                assert False, f"Position y value is not correct! Expected: 0.297, Actual: {current_y}"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_30] Set 2nd Position keyframe at (05:25)')
    @exception_screenshot
    def test_shape_designer_func_8_30(self):
        '''
        1. Set 2nd Position keyframe at (05:25) and check value
        2. Switch to previous keyframe and check timecode
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_29"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set 2nd Position keyframe at (05:25)'):
            # Set timecode
            shape_designer_page.set_timecode('00_00_05_25')

            # Set position = (0.276, 0.621) w/ 2nd keyframe
            shape_designer_page.keyframe.object_settings.position.x.set_value(0.276)
            shape_designer_page.keyframe.object_settings.position.y.set_value(0.621)

        with step('[Verify] Check x value after set 2nd Position keyframe'):
            # Verify position x value
            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()
            if current_x != '0.276':
                assert False, f"Position x value is not correct! Expected: 0.276, Actual: {current_x}"

        with step('[Verify] Check y value after set 2nd Position keyframe'):
            # Verify position y value
            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()
            if current_y != '0.621':
                assert False, f"Position y value is not correct! Expected: 0.621, Actual: {current_y}"

        with step('[Action] Switch to previous keyframe'):
            # Click previous keyframe
            shape_designer_page.simple_timeline.position.click_previous_keyframe()

        with step('[Verify] Check timecode after switch to previous keyframe (00:00)'):
            # Verify timecode
            current_timecode = shape_designer_page.get_timecode()
            if current_timecode != '00:00:00:00':
                assert False, f"Timecode is not correct! Expected: 00:00:00:00, Actual: {current_timecode}"

        with step('[Verify] Check x value after switch to previous keyframe'):
            # Verify position x value
            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()
            if current_x != '0.199':
                assert False, f"Position x value is not correct! Expected: 0.199, Actual: {current_x}"
        
        with step('[Verify] Check y value after switch to previous keyframe'):
            # Verify position y value
            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()
            if current_y != '0.297':
                assert False, f"Position y value is not correct! Expected: 0.297, Actual: {current_y}"

        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_31] Set 3rd Position keyframe at (03:10)')
    @exception_screenshot
    def test_shape_designer_func_8_31(self):
        '''
        1. Set 3rd Position keyframe at (03:10) and check value
        2. Switch to next keyframe and check timecode
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_30"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set 3rd Position keyframe at (03:10)'):
            # Set timecode
            shape_designer_page.set_timecode('00_00_03_10')

            # Set position = (0.783, 0.440) w/ 3rd keyframe
            shape_designer_page.keyframe.object_settings.position.x.set_value(0.783)
            shape_designer_page.keyframe.object_settings.position.y.set_value(0.440)

        with step('[Verify] Check x value after set 3rd Position keyframe'):
            # Verify position x value
            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()
            if current_x != '0.783':
                assert False, f"Position x value is not correct! Expected: 0.783, Actual: {current_x}"

        with step('[Verify] Check y value after set 3rd Position keyframe'):
            # Verify position y value
            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()
            if current_y != '0.440':
                assert False, f"Position y value is not correct! Expected: 0.440, Actual: {current_y}"

        with step('[Action] Switch to next keyframe'):
            # Click next keyframe
            shape_designer_page.simple_timeline.position.click_next_keyframe()
        
        with step('[Verify] Check timecode after switch to next keyframe (05:25)'):
            # Verify timecode
            current_timecode = shape_designer_page.get_timecode()
            if current_timecode != '00:00:05:25':
                assert False, f"Timecode is not correct! Expected: 00:00:05:25, Actual: {current_timecode}"

        with step('[Verify] Check x value after switch to next keyframe'):
            # Verify position x value
            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()
            if current_x != '0.276':
                assert False, f"Position x value is not correct! Expected: 0.276, Actual: {current_x}"
        
        with step('[Verify] Check y value after switch to next keyframe'):
            # Verify position y value
            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()
            if current_y != '0.621':
                assert False, f"Position y value is not correct! Expected: 0.621, Actual: {current_y}"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_32] Set 1st Scale keyframe at (05:25)')
    @exception_screenshot
    def test_shape_designer_func_8_32(self):
        '''
        1. Set 1st Scale keyframe at (05:25) and check value
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_31"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set 1st Scale keyframe at (05:25)'):
            # Set scale 1st keyframe
            shape_designer_page.keyframe.object_settings.scale.keyframe.click_add_remove()

        with step('[Verify] Check scale width value after set 1st Scale keyframe'):
            # Verify scale value
            current_w = shape_designer_page.keyframe.object_settings.scale.w.get_value()
            if current_w != '0.351':
                assert False, f"Scale W value is not correct! Expected: 0.351, Actual: {current_w}"

        with step('[Verify] Check scale height value after set 1st Scale keyframe'):
            # Verify scale value
            current_h = shape_designer_page.keyframe.object_settings.scale.h.get_value()
            if current_h != '0.500':
                assert False, f"Scale H value is not correct! Expected: 0.500, Actual: {current_h}"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_33] Set 4th position keyframe at (08:10)')
    @exception_screenshot
    def test_shape_designer_func_8_33(self):
        '''
        1. Set 4th position keyframe at (08:10)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_32"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set 4th position keyframe at (08:10)'):
            # Set timecode
            shape_designer_page.set_timecode('00_00_08_10')
            # Set position = (0.676, 0.304) w/ 4th keyframe
            shape_designer_page.keyframe.object_settings.position.x.set_value(0.676)
            shape_designer_page.keyframe.object_settings.position.y.set_value(0.304)

        with step('[Verify] Check x value after set 4th Position keyframe'):
            # Verify position x value
            current_x = shape_designer_page.keyframe.object_settings.position.x.get_value()
            if current_x != '0.676':
                assert False, f"Position x value is not correct! Expected: 0.676, Actual: {current_x}"

        with step('[Verify] Check y value after set 4th Position keyframe'):
            # Verify position y value
            current_y = shape_designer_page.keyframe.object_settings.position.y.get_value()
            if current_y != '0.304':
                assert False, f"Position y value is not correct! Expected: 0.304, Actual: {current_y}"

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_34] Set 2nd Scale keyframe at (08:10)')
    @exception_screenshot
    def test_shape_designer_func_8_34(self):
        '''
        1. Set 2nd Scale keyframe at (08:10)
        2. Switch to previous keyframe and check timecode (05:25)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_33"
        self.ensure_dependency(dependency_test)


        with step('[Action] Set 2nd Scale keyframe at (08:10)'):
            # Set scale W = 0.672, H = 0.748 w/ 2nd keyframe
            shape_designer_page.keyframe.object_settings.scale.w.set_value(0.672)
            shape_designer_page.keyframe.object_settings.scale.h.set_value(0.748)

        with step('[Verify] Check scale width value after set 2nd Scale keyframe'):
            # Verify scale value
            current_w = shape_designer_page.keyframe.object_settings.scale.w.get_value()
            if current_w != '0.672':
                assert False, f"Scale W value is not correct! Expected: 0.672, Actual: {current_w}"
        
        with step('[Verify] Check scale height value after set 2nd Scale keyframe'):
            # Verify scale value
            current_h = shape_designer_page.keyframe.object_settings.scale.h.get_value()
            if current_h != '0.748':
                assert False, f"Scale H value is not correct! Expected: 0.748, Actual: {current_h}"

        with step('[Action] Switch to previous keyframe'):
            # Click previous keyframe
            shape_designer_page.simple_timeline.scale.click_previous_keyframe()
        
        with step('[Verify] Check timecode after switch to previous keyframe (05:25)'):
            # Verify timecode
            current_timecode = shape_designer_page.get_timecode()
            if current_timecode != '00:00:05:25':
                assert False, f"Timecode is not correct! Expected: 00:00:05:25, Actual: {current_timecode}"

        with step('[Verify] Check scale width value after switch to previous keyframe'):
            # Verify scale value
            current_w = shape_designer_page.keyframe.object_settings.scale.w.get_value()
            if current_w != '0.351':
                assert False, f"Scale W value is not correct! Expected: 0.351, Actual: {current_w}"
        
        with step('[Verify] Check scale height value after switch to previous keyframe'):
            # Verify scale value
            current_h = shape_designer_page.keyframe.object_settings.scale.h.get_value()
            if current_h != '0.500':
                assert False, f"Scale H value is not correct! Expected: 0.500, Actual: {current_h}"

        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_35] Set 1st Rotation keyframe at (08:10)')
    @exception_screenshot
    def test_shape_designer_func_8_35(self):
        '''
        1. Set 1st Rotation keyframe at (08:10)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_34"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set 1st Rotation keyframe at (08:10)'):
            # Set timecode
            shape_designer_page.set_timecode('00_00_08_10')
            # Set Rotation 1st keyframe on 8s 10 frame
            shape_designer_page.keyframe.object_settings.rotation.keyframe.click_add_remove()

            # Drag simple timeline scroll bar to 1
            #shape_designer_page.simple_timeline.drag_scroll_bar(1)
        with step('[Verify] Check Rotation value after set 1st Rotation keyframe'):
            # Verify Rotation value
            current_rotation = shape_designer_page.keyframe.object_settings.rotation.value.get_value()
            if current_rotation != '0.00':
                assert False, f"Rotation value is not correct! Expected: 0, Actual: {current_rotation}"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_36] Set 2nd Rotation keyframe at (05:25)')
    @exception_screenshot
    def test_shape_designer_func_8_36(self):
        '''
        1. Set 2nd Rotation keyframe at (05:25)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_35"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set 2nd Rotation keyframe at (05:25)'):
            # Set timecode
            shape_designer_page.set_timecode('00_00_05_25')
            time.sleep(DELAY_TIME*0.5)
            shape_designer_page.simple_timeline.drag_scroll_bar(0.99)

            # Set Rotation 2nd keyframe on (05:25)
            shape_designer_page.keyframe.object_settings.rotation.keyframe.click_add_remove()
            time.sleep(DELAY_TIME)

            # Set Rotation degree = 250
            shape_designer_page.keyframe.object_settings.rotation.value.set_value(250)


        with step('[Verify] Check Rotation value after set 2nd Rotation keyframe'):
            # Verify Rotation value
            current_rotation = shape_designer_page.keyframe.object_settings.rotation.value.get_value()
            if current_rotation != '250':
                assert False, f"Rotation value is not correct! Expected: 250, Actual: {current_rotation}"

        with step('[Action] Switch to next keyframe'):
            # Click next keyframe
            shape_designer_page.simple_timeline.rotation.click_next_keyframe()
        
        with step('[Verify] Check timecode after switch to next keyframe (08:10)'):
            # Verify timecode
            current_timecode = shape_designer_page.get_timecode()
            if current_timecode != '00:00:08:10':
                assert False, f"Timecode is not correct! Expected: 00:00:08:10, Actual: {current_timecode}"
        
        with step('[Verify] Check rotation value after switch to next keyframe'):
            # Verify Rotation value
            current_rotation = shape_designer_page.keyframe.object_settings.rotation.value.get_value()
            if current_rotation != '0.00':
                assert False, f"Rotation value is not correct! Expected: 0.00, Actual: {current_rotation}"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_37] Set 1st Opacity keyframe at (08:10)')
    @exception_screenshot
    def test_shape_designer_func_8_37(self):
        '''
        1. Set 1st Opacity keyframe at (08:10)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_36"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set 1st Opacity keyframe at (08:10)'):
            # Set timecode
            shape_designer_page.set_timecode('00_00_08_10')
            time.sleep(DELAY_TIME*0.5)
            # Set opacity 1st keyframe
            shape_designer_page.keyframe.object_settings.opacity.keyframe.click_add_remove()
        
        with step('[Verify] Check opacity value after set 1st Opacity keyframe'):
            # Verify opacity value
            current_opacity = shape_designer_page.keyframe.object_settings.opacity.value.get_value()
            if current_opacity != '100%':
                assert False, f"Opacity value is not correct! Expected: 100%, Actual: {current_opacity}"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_38] Set 2nd Opacity keyframe at (05:25)')
    @exception_screenshot
    def test_shape_designer_func_8_38(self):
        '''
        1. Set 2nd Opacity keyframe at (05:25)
        2. Switch to next keyframe and check timecode (08:10) and value (100%)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_37"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set 2nd Opacity keyframe at (05:25)'):
            # Set timecode
            shape_designer_page.set_timecode('00_00_05_25')
            # Set opacity 2nd keyframe
            shape_designer_page.keyframe.object_settings.opacity.keyframe.click_add_remove()
            # Adjust opacity value = 50%
            shape_designer_page.keyframe.object_settings.opacity.value.set_value(50)

        with step('[Verify] Check opacity value after set 2nd Opacity keyframe'):
            # Verify opacity value
            current_opacity = shape_designer_page.keyframe.object_settings.opacity.value.get_value()
            if current_opacity != '50':
                assert False, f"Opacity value is not correct! Expected: 50, Actual: {current_opacity}"
        with step('[Action] Switch to next keyframe'):
            # Click next keyframe
            shape_designer_page.simple_timeline.opacity.click_next_keyframe()
        with step('[Verify] Check timecode after switch to next keyframe (08:10)'):
            # Verify timecode
            current_timecode = shape_designer_page.get_timecode()
            if current_timecode != '00:00:08:10':
                assert False, f"Timecode is not correct! Expected: 00:00:08:10, Actual: {current_timecode}"
        with step('[Verify] Check opacity value after switch to next keyframe'):
            # Verify opacity value
            current_opacity = shape_designer_page.keyframe.object_settings.opacity.value.get_value()
            if current_opacity != '100%':
                assert False, f"Opacity value is not correct! Expected: 100%, Actual: {current_opacity}"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_39] Check preview as GT from test_shape_designer_func_8_29~38')
    @exception_screenshot
    def test_shape_designer_func_8_39(self):
        '''
        1. Check preview as GT from test_shape_designer_func_8_29~38
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_38"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check preview as GT'):
            # Set timecode
            shape_designer_page.set_timecode('00_00_06_29')
            # Compare preview
            check_preview = main_page.snapshot(locator=L.shape_designer.designer_window,
                                               file_name=Auto_Ground_Truth_Folder + 'L205.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L205.png', check_preview, similarity=0.88)
            assert compare_result, "Preview is not correct as GT(L205.png)! Similary should>0.88"

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_40] Set Postion Ease in at (08:10)')
    @exception_screenshot
    def test_shape_designer_func_8_40(self):
        '''
        1. Set Postion Ease in at (08:10) and check value
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_39"
        self.ensure_dependency(dependency_test)

        # [L439] 3.5 Shape Designer (Shape 10) > Keyframe tab > Adjust ease in / out
        # with uuid("4eda0d6a-b0ea-4100-a22a-317fffdfb976") as case:
        with step('[Action] Set Postion Ease in at (08:10)'):
            # Set timecode (08:10)
            shape_designer_page.set_timecode('00_00_08_10')
            # Position > Set Ease in
            shape_designer_page.keyframe.object_settings.position.ease_in.set_checkbox()
            time.sleep(DELAY_TIME * 2)
            # Set Ease in value = 0.61
            shape_designer_page.keyframe.object_settings.position.ease_in.set_value('0.61')

        with step('[Verify] Check Ease in checkbox status'):
            # Verify Ease in checkbox status
            ease_in_status = shape_designer_page.keyframe.object_settings.position.ease_in.get_checkbox()
            if not ease_in_status:
                assert False, f"Ease in checkbox is not checked! Expected: True, Actual: {ease_in_status}"

        with step('[Verify] Check Ease in value'):
            # Verify Ease in value
            ease_in_value = shape_designer_page.keyframe.object_settings.position.ease_in.get_value()
            if ease_in_value != '0.61':
                assert False, f"Ease in value is not correct! Expected: 0.61, Actual: {ease_in_value}"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_41] Set Postion Ease out at (05:25)')
    @exception_screenshot
    def test_shape_designer_func_8_41(self):
        '''
        1. Set Postion Ease out at (05:25) and check value
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_40"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Postion Ease out at (05:25)'):
            # Click previous keyframe
            shape_designer_page.simple_timeline.position.click_previous_keyframe()
            time.sleep(DELAY_TIME)
            # Position > Set Ease out
            shape_designer_page.keyframe.object_settings.position.ease_out.set_checkbox()
            time.sleep(DELAY_TIME)
            # Set Ease out value = 0.61
            shape_designer_page.keyframe.object_settings.position.ease_out.set_value('0.77')
        
        with step('[Verify] Check Ease out checkbox status'):
            # Verify Ease out checkbox status
            ease_out_status = shape_designer_page.keyframe.object_settings.position.ease_out.get_checkbox()
            if not ease_out_status:
                assert False, f"Ease out checkbox is not checked! Expected: True, Actual: {ease_out_status}"
        
        with step('[Verify] Check Ease out value'):
            # Verify Ease out value
            ease_out_value = shape_designer_page.keyframe.object_settings.position.ease_out.get_value()
            if ease_out_value != '0.77':
                assert False, f"Ease out value is not correct! Expected: 0.77, Actual: {ease_out_value}"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_42] Check preview as GT from test_shape_designer_func_8_40~41')
    @exception_screenshot
    def test_shape_designer_func_8_42(self):
        '''
        1. Check preview as GT from test_shape_designer_func_8_40~41
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_41"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check preview as GT'):
            # Set timecode
            shape_designer_page.set_timecode('00_00_06_29')
            # Compare preview
            check_preview = main_page.snapshot(locator=L.shape_designer.designer_window,
                                               file_name=Auto_Ground_Truth_Folder + 'L206.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L206.png', check_preview, similarity=0.98)
            assert compare_result, "Preview is not correct as GT(L206.png)! Similary should>0.98"

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_43] Remove 4th position keyframe at (08:10)')
    @exception_screenshot
    def test_shape_designer_func_8_43(self):
        '''
        1. Remove 4th position keyframe at (08:10)
        2. Switch to previous Position keyframe and check timecode (05:25)
        3. Switch to next Position keyframe and check timecode stay at (05:25)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_42"
        self.ensure_dependency(dependency_test)

        # [L440] 3.5 Shape Designer (Shape 10) > Add keyframe in simple timeline
        # with uuid("1df5b03f-b8c4-4da6-87be-582d3c308826") as case:
        with step('[Action] Remove 4th position keyframe at (08:10)'):
            # Click next keyframe
            shape_designer_page.simple_timeline.position.click_next_keyframe()
            # Remove 4th position keyframe
            shape_designer_page.simple_timeline.position.add_keyframe()

        with step('[Action] Switch to previous Position keyframe'):
            # Click previous keyframe
            shape_designer_page.simple_timeline.position.click_previous_keyframe()

        with step('[Verify] Check timecode at (05:25)'):
            # Verify timecode
            current_timecode = shape_designer_page.get_timecode()
            if current_timecode != '00:00:05:25':
                assert False, f"Timecode is not correct! Expected: 00:00:05:25, Actual: {current_timecode}"

        with step('[Action] Switch to next Position keyframe'):
            # Click next keyframe
            shape_designer_page.simple_timeline.position.click_next_keyframe()
        
        with step('[Verify] Check timecode stay at (05:25)'):
            # Verify timecode
            current_timecode = shape_designer_page.get_timecode()
            if current_timecode != '00:00:05:25':
                assert False, f"Timecode is not correct! Expected: 00:00:05:25, Actual: {current_timecode}"
        assert True

            # # Set timecode
            # shape_designer_page.set_timecode('00_00_05_13')
            # # Add scale keyframe
            # shape_designer_page.simple_timeline.scale.add_keyframe()
            # time.sleep(DELAY_TIME * 2)

            # # Set scale W = 0.982
            # shape_designer_page.keyframe.object_settings.scale.w.set_value(0.982)

            # # Set timecode
            # shape_designer_page.set_timecode('00_00_06_29')
            # time.sleep(DELAY_TIME * 1.5)

            # # Compare preview
            # check_preview = main_page.snapshot(locator=L.shape_designer.designer_window,
            #                                    file_name=Auto_Ground_Truth_Folder + 'L207.png')
            # compare_result = main_page.compare(Ground_Truth_Folder + 'L207.png', check_preview, similarity=0.88)
            # case.result = compare_result

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.timecode
    @pytest.mark.play_video
    @pytest.mark.name('[test_shape_designer_func_8_44] Play video')
    @exception_screenshot
    def test_shape_designer_func_8_44(self):
        '''
        1. [Initial] Minimalize window and switch to properties tab
        2. Play the video
        3. Check if preview changed correctly after play
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_43"
        self.ensure_dependency(dependency_test)

        # [L442] 3.5 Shape Designer (Shape 10) > Preview in designer
        # with uuid("57fc39a2-bd36-432d-a9f1-e9e148f9816d") as case:
        with step('[Initial] Minimalize window and switch to properties tab'):
            # Restore window
            shape_designer_page.click_restore_btn()
            # Switch to properties
            shape_designer_page.click_properties_tab()

        with step('[Action] Play the video'):
            # Set timecode at (00:00:00:00)
            shape_designer_page.set_timecode('00_00_00_00')
            # Click Play
            shape_designer_page.click_preview_operation('Play')

        with step('[Verify] Check if preview changed correctly after play'):
            check_preview_update = main_page.Check_PreviewWindow_is_different(L.title_designer.area.frame_preview, sec=2)
            if not check_preview_update:
                assert False, "Preview is not updated after play in 2 secs!"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.timecode
    @pytest.mark.play_video
    @pytest.mark.name('[test_shape_designer_func_8_45] Pause video')
    @exception_screenshot
    def test_shape_designer_func_8_45(self):
        '''
        1. Pause the video and check timecode is in (00:00:02:00) ~ (00:00:04:00)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_44"
        self.ensure_dependency(dependency_test)

        with step('[Action] Pause the video'):
            shape_designer_page.click_preview_operation('Stop')
            shape_designer_page.click_preview_operation('Play')
            time.sleep(2)

            # Click Pause
            shape_designer_page.click_preview_operation('Pause')
        with step('[Verify] Check timecode is in (00:00:02:00) ~ (00:00:04:00)'):
            # Verify timecode
            current_timecode = shape_designer_page.get_timecode()
            # check timecode in range (00:00:02:00) ~ (00:00:04:00)
            if current_timecode < '00:00:02:00' or current_timecode > '00:00:04:00':
                assert False, f"Timecode is not in range (00:00:02:00) ~ (00:00:04:00)! Actual: {current_timecode}"
        assert True

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.timecode
    @pytest.mark.play_video
    @pytest.mark.name('[test_shape_designer_func_8_46] Stop video')
    @exception_screenshot
    def test_shape_designer_func_8_46(self):
        '''
        1. Stop the video and check timecode back to (00:00:00:00)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_45"
        self.ensure_dependency(dependency_test)

        with step('[Action] Stop the video'):
            # Click Stop
            shape_designer_page.click_preview_operation('Stop')
        

        with step('[Verify] Check timecode back to (00:00:00:00)'):
            # Verify timecode
            current_timecode = shape_designer_page.get_timecode()
            if current_timecode != '00:00:00:00':
                assert False, f"Timecode is not correct! Expected: 00:00:00:00, Actual: {current_timecode}"
        assert True




            # # Set timecode
            # shape_designer_page.set_timecode('00_00_04_29')
            # time.sleep(DELAY_TIME * 1.5)

            # # Compare preview
            # check_preview = main_page.snapshot(locator=L.shape_designer.designer_window,
            #                                    file_name=Auto_Ground_Truth_Folder + 'L209.png')
            # compare_result = main_page.compare(Ground_Truth_Folder + 'L209.png', check_preview)
            # case.result = compare_result


    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.timecode
    @pytest.mark.save_template
    @pytest.mark.name('[test_shape_designer_func_8_47] Save Template')
    @exception_screenshot
    def test_shape_designer_func_8_47(self):
        '''
        1. Save as Template
        2. Check if title changed to saved template name
        3. Close Shape Designer
        4. Check if saved template is added to library
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_46"
        self.ensure_dependency(dependency_test)

        # [L443] 3.5 Shape Designer (Shape 10) > Save as template
        # with uuid("7a48ed0f-e18b-40e0-8749-82321bac9821") as case:
        with step('[Action] Save as template'):
            shape_designer_page.click_save_as()
            shape_designer_page.save_as.set_name('Custom_shape_10')
            shape_designer_page.save_as.click_ok()
            time.sleep(DELAY_TIME*2)

        with step('[Verify] Check if title changed to saved template name'):
            # Verify Step 1: check caption bar
            current_title = shape_designer_page.get_title()
            if current_title != 'Custom_shape_10':
                assert False, f"Title is not correct! Expected: Custom_shape_10, Actual: {current_title}"

        with step('[Action] Close Shape Designer'):
            # Click [OK]
            shape_designer_page.click_ok()

        with step('[Verify] Check if saved template is in library'):
            # Verify Step2:
            custom_select_result = main_page.select_library_icon_view_media('Custom_shape_10')
            if not custom_select_result:
                assert False, "Custom_shape_10 is not in library!"
        assert True
        
    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.timecode
    @pytest.mark.timeline
    @pytest.mark.save_template
    @pytest.mark.name('[test_shape_designer_func_8_48] Add saved template to timeline')
    @exception_screenshot
    def test_shape_designer_func_8_48(self):
        '''
        1. Add saved template to track1 timeline at (19:00)
        2. Check if saved template is in timeline by selected video track 1 and check title
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_47"
        self.ensure_dependency(dependency_test)


        # [L444] 3.5 Shape Designer (Shape 10) > Add saved template to timeline
        # with uuid("ae82fd12-b91f-40e1-ade5-5cca22803e7e") as case:

        with step('[Action] Add saved template to timeline'):
            # select timeline track 1
            main_page.timeline_select_track(1)
            main_page.set_timeline_timecode('00_00_19_00')
            main_page.select_library_icon_view_media('Custom_shape_10')
            main_page.right_click()
            main_page.select_right_click_menu('Add to Timeline')
            time.sleep(DELAY_TIME)

        with step('[Verify] Check if saved template is in timeline'):
            # Verify Step1 : Check (Custom_shape_10) is in Video track 1
            timeline_operation_page.select_timeline_media(track_index=0, clip_index=2)
            main_page.double_click()
            current_title = shape_designer_page.get_title()
            assert current_title == 'Custom_shape_10', f"Title is not correct! Expected: Custom_shape_10, Actual: {current_title}"

        # # Verify Step2: Play then Pause
        # # Click Play
        # shape_designer_page.click_preview_operation('Play')
        # time.sleep(DELAY_TIME * 2)

        # # Click Pause
        # shape_designer_page.click_preview_operation('Pause')
        # time.sleep(DELAY_TIME * 1.5)
        

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.timecode
    @pytest.mark.play_video
    @pytest.mark.name('[test_shape_designer_func_8_47] Check preview from test_shape_designer_func_8_27~48')
    @exception_screenshot
    def test_shape_designer_func_8_49(self):
        '''
        1. Check preview from test_shape_designer_func_8_27~48
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_48"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check preview as GT'):
            # Set timecode
            shape_designer_page.set_timecode('00_00_02_01')

            # Compare preview
            check_preview = main_page.snapshot(locator=L.shape_designer.designer_window,
                                               file_name=Auto_Ground_Truth_Folder + 'L211.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L211.png', check_preview,similarity=0.9)
            assert compare_result, "Preview is not correct as GT(L211.png)! Similary should>0.9"

        # # [L437] 3.5 Shape Designer (Shape 10) > Only show the selected track
        # with uuid("12c35c84-9c7b-4ba1-bcdb-7510d1dc1555") as case:
        #     # Click Stop
        #     shape_designer_page.click_preview_operation('Stop')
        #     time.sleep(DELAY_TIME)

        #     # Check checkbox default status
        #     elem_checkbox = main_page.exist(L.shape_designer.show_the_selected_track)
        #     default_value = elem_checkbox.AXValue
        #     if default_value == 0:
        #         default_status = True
        #     else:
        #         default_status = False
        #     logger(default_status)

    @pytest.mark.shape_designer_func
    @pytest.mark.shape_designer
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_designer_func_8_50] Only show the selected track')
    @exception_screenshot
    def test_shape_designer_func_8_50(self):
        '''
        1. Only show the selected track
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_shape_designer_func_8_49"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set only show the selected track'):
            # Set only show the selected track
            main_page.click(L.shape_designer.show_the_selected_track)

        with step('[Verify] Check preview as GT'):
            # Set timecode
            shape_designer_page.set_timecode('00_00_02_01')

            # Compare preview
            check_preview_204 = main_page.snapshot(locator=L.shape_designer.designer_window)
            compare_result = main_page.compare(Ground_Truth_Folder + 'L211_1.png', check_preview_204)
            if not compare_result:
                assert False, "Preview is the same as GT(L211_1.png)! Similary should>0.95"

        with step('[Initial] Save project'):
            shape_designer_page.click_cancel()

            # Save project:
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_shape_designer_func_8_50',
                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')
        assert True

    @pytest.mark.particle_designer_func
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.content_pack
    @pytest.mark.particle_room
    @pytest.mark.particle_designer
    @pytest.mark.search_library
    @pytest.mark.timeline
    @pytest.mark.name('[test_particle_designer_func_9_1] Open Particle Designer from Halloween 05')
    @exception_screenshot
    def test_particle_designer_func_9_1(self):
        '''
        1. Open AP and open saved project
        2. Enter Particle room
        3. Search and select Halloween
        4. Drag Halloween to timeline track 2
        5. Open Particle Designer from tips
        6. Check Particle Designer title
        '''
        with step('[Action] Open AP and open saved project'):
            main_page.start_app()
            time.sleep(DELAY_TIME)

            project_name = 'Packed_Project/test_particle_designer_func_9_1_from_test_shape_designer_func_8_50.pdk'
            save_name = 'Extracted_Folder/test_particle_designer_func_9_1'
            self.open_packed_project(project_name, save_name)

        # [L213] 3.6 Particle Designer (Should support opacity) > Open Particle designer
        # with uuid("51d8dc04-c9dc-4f8e-b7e2-bfb9e802e19b") as case:
        with step('[Action] Enter particle room'):
            # enter Particle room
            main_page.enter_room(5)

        with step('[Action] Search and select Halloween 05'):
            particle_room_page.search_Particle_room_library('Halloween')

            main_page.select_library_icon_view_media('Halloween 05')
            time.sleep(DELAY_TIME*7) # wait for downloading conponent

        with step('[Action] Drag Halloween to timeline track 2'):
            # Drag BFT_title_Save to timeline track 2
            main_page.drag_media_to_timeline_playhead_position('Halloween 05', track_no=2)

        with step('[Action] Open Particle Designer from tips'):
            # Click tips area [Designer] button
            main_page.tips_area_click_designer(2)

        with step('[Verify] Check Particle Designer title'):
            check_title = particle_designer_page.get_particle_designer_title()
            assert check_title == 'Halloween 05', f"Title is not correct! Expected: Halloween 05, Actual: {check_title}"

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_2] Check Default [Emit] value == 100000')
    @exception_screenshot
    def test_particle_designer_func_9_2(self):
        '''
        1. Check Default [Emit] value == 100000
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        # [L214] 3.6 Particle Designer (Should support opacity) > modify parameter
        # with uuid("56edc685-fdb3-4aa5-9fbb-36060e6a5223") as case:

        with step('[Action] Get Default value of Emit'):
            # Get default Emit / Max / Life / Size / Speed / Opacity  value
            default_emit_value = particle_designer_page.express_mode.get_Emit_value()
        with step('[Verify] Check Default value of Emit == 100000'):
            assert default_emit_value == 100000, f"Default Emit value is not correct! Expected: 100000, Actual: {default_emit_value}"

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_3] Check Default [Max] value == 100000')
    @exception_screenshot
    def test_particle_designer_func_9_3(self):
        '''
        1. Check Default [Max] value == 100000
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Get Default value of Max'):
            default_max_value = particle_designer_page.express_mode.get_Max_value()
        with step('[Verify] Check Default value of Max == 100000'):
            assert default_max_value == 100000, f"Default Max value is not correct! Expected: 100000, Actual: {default_max_value}"

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_4] Check Default [Life] value == 100000')
    @exception_screenshot
    def test_particle_designer_func_9_4(self):
        '''
        1. Check Default [Life] value == 100000
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Get Default value of Life'):
            default_life_value = particle_designer_page.express_mode.get_Life_value()
        with step('[Verify] Check Default value of Life == 100000'):
            assert default_life_value == 100000, f"Default Life value is not correct! Expected: 100000, Actual: {default_life_value}"

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_5] Check Default [Size] value == 100000')
    @exception_screenshot
    def test_particle_designer_func_9_5(self):
        '''
        1. Check Default [Size] value == 100000
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Get Default value of Size'):
            default_size_value = particle_designer_page.express_mode.get_Size_value()
        with step('[Verify] Check Default value of Size == 100000'):
            assert default_size_value == 100000, f"Default Size value is not correct! Expected: 100000, Actual: {default_size_value}"

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_6] Check Default [Speed] value == 100000')
    @exception_screenshot
    def test_particle_designer_func_9_6(self):
        '''
        1. Check Default [Speed] value == 100000
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Get Default value of Speed'):
            default_speed_value = particle_designer_page.express_mode.get_Speed_value()
        with step('[Verify] Check Default value of Speed == 100000'):
            assert default_speed_value == 100000, f"Default Speed value is not correct! Expected: 100000, Actual: {default_speed_value}"

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_7] Check Default [Opacity] value == 100000')
    @exception_screenshot
    def test_particle_designer_func_9_7(self):
        '''
        1. Check Default [Opacity] value == 100000
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Get Default value of Opacity'):
            default_opacity_value = particle_designer_page.express_mode.get_Opacity_value()
        with step('[Verify] Check Default value of Opacity == 100000'):
            assert default_opacity_value == 100000, f"Default Opacity value is not correct! Expected: 100000, Actual: {default_opacity_value}"

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_8] Change [Emit] value by slider')
    @exception_screenshot
    def test_particle_designer_func_9_8(self):
        '''
        1. Apply Emit (10407) by Slider
        2. Check value and preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Emit (10407) by slider'):
            before_emit_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            particle_designer_page.express_mode.drag_Emit_slider(10407)

        with step('[Verify] Check Emit value == 10407'):
            check_emit_value = particle_designer_page.express_mode.get_Emit_value()
            if check_emit_value != 10407:
                assert False, f"Emit value is not correct! Expected: 10407, Actual: {check_emit_value}"
        
        with step('[Verify] Check preview is changed'):
            after_emit_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            if main_page.compare(before_emit_preview, after_emit_preview, similarity=0.98):
                assert False, "Preview is not changed after set Emit value! Similary should<0.98"
        assert True

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_9] Change [Max] value by slider')
    @exception_screenshot
    def test_particle_designer_func_9_9(self):
        '''
        1. Apply [Max] (170621) by Slider
        2. Check value and preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Max (170621) by slider'):
            before_max_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            particle_designer_page.express_mode.drag_Max_slider(170621)
        with step('[Verify] Check Max value == 170621'):
            check_max_value = particle_designer_page.express_mode.get_Max_value()
            if check_max_value != 170621:
                assert False, f"Max value is not correct! Expected: 170621, Actual: {check_max_value}"
        with step('[Verify] Check preview is changed'):
            after_max_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            if main_page.compare(before_max_preview, after_max_preview, similarity=0.999):
                assert False, "Preview is not changed after set Max value! Similary should<0.999"
        assert True

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_10] Change [Life] value by slider')
    @exception_screenshot
    def test_particle_designer_func_9_10(self):
        '''
        1. Apply [Life] (200000) by Slider
        2. Check value and preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Life (200000) by slider'):
            before_life_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            particle_designer_page.express_mode.drag_Life_slider(200000)
        
        with step('[Verify] Check Life value == 200000'):
            check_life_value = particle_designer_page.express_mode.get_Life_value()
            if check_life_value != 200000:
                assert False, f"Life value is not correct! Expected: 200000, Actual: {check_life_value}"
        
        with step('[Verify] Check preview is changed'):
            after_life_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            if main_page.compare(before_life_preview, after_life_preview, similarity=0.999):
                assert False, "Preview is not changed after set Life value! Similary should<0.999"
        assert True
        
    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_11] Change [Size] value by slider')
    @exception_screenshot
    def test_particle_designer_func_9_11(self):
        '''
        1. Apply [Size] (171940) by Slider
        2. Check value and preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Size (171940) by slider'):
            before_size_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            particle_designer_page.express_mode.drag_Size_slider(171940)

        with step('[Verify] Check Size value == 171940'):
            check_size_value = particle_designer_page.express_mode.get_Size_value()
            if check_size_value != 171940:
                assert False, f"Size value is not correct! Expected: 171940, Actual: {check_size_value}"
        
        with step('[Verify] Check preview is changed'):
            after_size_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            if main_page.compare(before_size_preview, after_size_preview, similarity=0.98):
                assert False, "Preview is not changed after set Size value! Similary should<0.98"
        assert True
            
    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_12] Change [Size] value by [Plus] button')
    @exception_screenshot
    def test_particle_designer_func_9_12(self):
        '''
        1. Apply [Size] (178940) by [Plus] button
        2. Check value and preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Size (178940) by [Plus] button'):
            before_size_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            particle_designer_page.express_mode.click_Size_plus_btn(7)

        with step('[Verify] Check Size value == 178940'):
            check_size_value = particle_designer_page.express_mode.get_Size_value()
            if check_size_value != 178940:
                assert False, f"Size value is not correct! Expected: 178940, Actual: {check_size_value}"
            
        with step('[Verify] Check preview is changed'):
            after_size_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            if main_page.compare(before_size_preview, after_size_preview, similarity=0.999):
                assert False, "Preview is not changed after set Size value! Similary should<0.999"
        assert True
            
    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_13] Change [Speed] value by slider')
    @exception_screenshot
    def test_particle_designer_func_9_13(self):
        '''
        1. Apply [Speed] (126610) by Slider
        2. Check value and preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Speed (126610) by slider'):
            before_speed_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            particle_designer_page.express_mode.drag_Speed_slider(126610)
        
        with step('[Verify] Check Speed value == 126610'):
            check_speed_value = particle_designer_page.express_mode.get_Speed_value()
            if check_speed_value != 126610:
                assert False, f"Speed value is not correct! Expected: 126610, Actual: {check_speed_value}"
        
        with step('[Verify] Check preview is changed'):
            after_speed_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            if main_page.compare(before_speed_preview, after_speed_preview, similarity=0.98):
                assert False, "Preview is not changed after set Speed value! Similary should<0.98"
        assert True
            
    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_14] Change [Speed] value by [Minus] button')
    @exception_screenshot
    def test_particle_designer_func_9_14(self):
        '''
        1. Apply [Speed] (121610) by [Minus] button
        2. Check value and preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Speed (121610) by [Minus] button'):
            before_speed_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            particle_designer_page.express_mode.click_Speed_minus_btn(5)
        
        with step('[Verify] Check Speed value == 121610'):
            check_speed_value = particle_designer_page.express_mode.get_Speed_value()
            if check_speed_value != 121610:
                assert False, f"Speed value is not correct! Expected: 121610, Actual: {check_speed_value}"

        with step('[Verify] Check preview is changed'):
            after_speed_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            if main_page.compare(before_speed_preview, after_speed_preview, similarity=0.999):
                assert False, "Preview is not changed after set Speed value! Similary should<0.999"
        assert True

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_15] Change [Opacity] value by slider')
    @exception_screenshot
    def test_particle_designer_func_9_15(self):
        '''
        1. Apply [Opacity] (194574) by Slider
        2. Check value and preview
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_1"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Opacity (194574) by slider'):
            before_opacity_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            particle_designer_page.express_mode.drag_Opacity_slider(194574)
        
        with step('[Verify] Check Opacity value == 194574'):
            check_opacity_value = particle_designer_page.express_mode.get_Opacity_value()
            if check_opacity_value != 194574:
                assert False, f"Opacity value is not correct! Expected: 194574, Actual: {check_opacity_value}"

        with step('[Verify] Check preview is changed'):
            after_opacity_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            if main_page.compare(before_opacity_preview, after_opacity_preview, similarity=0.999):
                assert False, "Preview is not changed after set Opacity value! Similary should<0.999"
        assert True

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_particle_designer_func_9_16] Check Preview from test_particle_designer_func_9_8~15')
    @exception_screenshot
    def test_particle_designer_func_9_16(self):
        '''
        1. Check Preview from test_particle_designer_func_9_8~15
        '''

        # If the result from test_particle_designer_func_9_8~15 is True, else the test will be failed
        dependency_test_list = ["test_particle_designer_func_9_8", "test_particle_designer_func_9_9", "test_particle_designer_func_9_10", "test_particle_designer_func_9_11", "test_particle_designer_func_9_12", "test_particle_designer_func_9_13", "test_particle_designer_func_9_14", "test_particle_designer_func_9_15"]
        for dependency_test in dependency_test_list:
            if not self.ensure_dependency(dependency_test, run_dependency=False):
                assert False, f"Dependency test {dependency_test} is failed! Please check the result first!"

            # drag scroll bar to 1
            #particle_designer_page.drag_properties_scroll_bar(1)

        with step('[Verify] Check preview as GT'):
            # Set timecode = 00:00:04:09
            particle_designer_page.set_timecode('00_00_04_09')

            # Verify Step;
            check_preview = main_page.snapshot(locator=L.particle_designer.designer_window,
                                               file_name=Auto_Ground_Truth_Folder + 'L214.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L214.png', check_preview)

            assert compare_result, "Preview is not correct as GT(L214.png)! Similary should>0.95"

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.play_video
    @pytest.mark.name('[test_particle_designer_func_9_17] Play preview by [Next Frame] button')
    @exception_screenshot
    def test_particle_designer_func_9_17(self):
        '''
        1. Play preview by [Next Frame] button
        '''
        # Ensure the dependency test is run and passed
        dependency_test_list = ["test_particle_designer_func_9_8", "test_particle_designer_func_9_9", "test_particle_designer_func_9_10", "test_particle_designer_func_9_11", "test_particle_designer_func_9_12", "test_particle_designer_func_9_13", "test_particle_designer_func_9_14", "test_particle_designer_func_9_15"]
        for dependency_test in dependency_test_list:
            self.ensure_dependency(dependency_test)

        # [L215] 3.6 Particle Designer (Should support opacity) > preview in designer
        # with uuid("3bc57b03-6b38-45a7-b7d4-83db0bb56922") as case:
            # Seek next frame to 00:00:04:18
        with step('[Action] Reach (04:18) by click [Next_Frame] button'):
            for _ in range(9):
                particle_designer_page.click_preview_operation('Next_Frame')
                time.sleep(DELAY_TIME*0.5)

        with step('[Verify] Check timecode is (04:18)'):
            check_timecode = particle_designer_page.get_timecode()
            if check_timecode != '00:00:04:18':
                assert False, f"Timecode is not correct! Expected: 00:00:04:18, Actual: {check_timecode}"

        with step('[Verify] Check preview as GT'):
            # Verify Step;
            check_preview = main_page.snapshot(locator=L.particle_designer.designer_window)
            compare_result = main_page.compare(Ground_Truth_Folder + 'L214.png', check_preview)
            if compare_result:
                assert False, "Preview is the same as GT(L214.png at 04:09)! Similary should<0.95"
        assert True

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.save_template
    @pytest.mark.dz
    @pytest.mark.cyberlink_cloud
    @pytest.mark.name('[test_particle_designer_func_9_18] Save and share template to cloud')
    @exception_screenshot
    def test_particle_designer_func_9_18(self):
        '''
        1. Save and share template to cloud
        2. Check if title changed to saved name
        '''
        # Ensure the dependency test is run and passed
        dependency_test = 'test_particle_designer_func_9_17'
        self.ensure_dependency(dependency_test)

        # [L216] 3.6 Particle Designer (Should support opacity) > [Share] template online
        # with uuid("6030bf73-af59-4bef-ba28-051b275491ec") as case:

        with step('[Action] Save and share template to cloud'):
            check_upload = particle_designer_page.share_to_cloud(name='Halloween_design', tags='123', collection='test', description='white color', verify_dz_link=1)
            if not check_upload:
                assert False, "Cannot upload template to cloud! Please check the result first!"

        with step('[Verify] Check if title changed to saved name'):
            # Verify step: check title
            check_title = particle_designer_page.get_particle_designer_title()

            if check_title != 'Halloween_design':
                assert False, f"Title is not correct! Expected: Halloween_design, Actual: {check_title}"
        assert True

    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.save_template
    @pytest.mark.dz
    @pytest.mark.cyberlink_cloud
    @pytest.mark.name('[test_particle_designer_func_9_19] Download content form CL/DZ')
    @exception_screenshot
    def test_particle_designer_func_9_19(self):
        '''
        1. Save the template to Local as BFT_Halloween_custom
        2. Download content form CL/DZ
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_18"
        self.ensure_dependency(dependency_test)

        with step('[Action] Save template'):
            # ---------------------------------
            # Click [Save as] > Save custom name then close Particle designer
            particle_designer_page.save_as_name('BFT_Halloween_custom')
            time.sleep(DELAY_TIME)
            particle_designer_page.save_as_ok()
            particle_designer_page.click_OK()

        with step('[Action] Download content form CL/DZ'):
            # Click download content form CL/DZ
            particle_room_page.click_DownloadContent_from_DZCloud()
            
            # Already enter "Download Particle Objects" > Open My Cyberlink Cloud
            # Select template name "dialog09_chroma"
            check_CL_content = download_from_cl_dz_page.select_template('Halloween_design')
            if not check_CL_content:
                assert False, "Cannot find template in CL/DZ!"

        with step('[Initial] Delete saved template on dz/cloud'):
            download_from_cl_dz_page.tap_delete_button()
            # Close "Download Particle Objects" window
            # download_from_cl_dz_page.tap_close_button()
            main_page.press_esc_key()
        assert True


    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.save_template
    @pytest.mark.name('[test_particle_designer_func_9_20] Check preview changed after select saved custom template')
    @exception_screenshot
    def test_particle_designer_func_9_20(self):
        '''
        1. Check preview changed after select saved custom template
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_19"
        self.ensure_dependency(dependency_test)

        # [L217] 3.6 Particle Designer (Should support opacity) > Save / Save as template
        # with uuid("23140e39-6b80-4d37-b572-266f1481fca1") as case:

        with step('[Action] Selct saved custom template'):
            main_page.select_library_icon_view_media('BFT_Halloween_custom')

        with step('[Verify] Check preview changed'):
            check_different = main_page.Check_PreviewWindow_is_different(sec=4)
            assert check_different, "Preview is not changed after select saved custom template!"

    
    @pytest.mark.particle_designer_func
    @pytest.mark.particle_designer
    @pytest.mark.save_template
    @pytest.mark.timeline
    @pytest.mark.timecode
    @pytest.mark.name('[test_particle_designer_func_9_21] Add saved custom template to timeline')
    @exception_screenshot
    def test_particle_designer_func_9_21(self):
        '''
        1. Add saved custom template to timeline
        2. Check preview as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_particle_designer_func_9_20"
        self.ensure_dependency(dependency_test)

        # [L218] 3.6 Particle Designer (Should support opacity) > Add saved title template to timeline
        # with uuid("5945daf9-f385-471b-aa11-4b9445c4736f") as case:
        with step('[Action] Add saved custom template to timeline'):
            # select timeline track 1
            main_page.timeline_select_track(1)
            # Set CTI timeline to (00:00:29:00)
            main_page.set_timeline_timecode('00_00_29_00')
            # Add to timeline
            main_page.select_library_icon_view_media('BFT_Halloween_custom')
            main_page.tips_area_insert_media_to_selected_track()

        with step('[Verify] Check preview as GT'):
            main_page.set_timeline_timecode('00_00_03_02')
            timeline_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L217.png')
            check_timeline_particle = main_page.compare(Ground_Truth_Folder + 'L217.png', timeline_preview, similarity=0.8)
            if not check_timeline_particle:
                assert False, "Preview is not correct as GT(L217.png)! Similary should>0.8"

        with step('[Action] Save project'):
            # Save project:
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_particle_designer_func_9_21',
                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.timeline
    @pytest.mark.sample_media
    @pytest.mark.mask_designer
    @pytest.mark.name('[test_mask_designer_func_10_1] Open Mask Designer with Sport 02.jpg')
    @exception_screenshot
    def test_mask_designer_func_10_1(self):
        '''
        1. Open AP and open saved project
        2. Add Sport 02.jpg to timeline track3
        3. Open Mask Designer by tips area
        4. Check open Mask Designer window with Sport 02.jpg
        '''
        with step('[Action] Open AP and open saved project'):
            main_page.start_app()
            time.sleep(DELAY_TIME)

            project_name = 'Packed_Project/test_mask_designer_func_10_1_from_test_particle_designer_func_9_21.pdk'
            save_name = 'Extracted_Folder/test_mask_designer_func_10_1'
            self.open_packed_project(project_name, save_name)

        with step('[Action] Add Sport 02.jpg to timeline track3'):
            # select timeline track 3
            main_page.timeline_select_track(3)
            # Set timecode :
            main_page.set_timeline_timecode('00_00_24_00')
            # Drag Spor t02.jpg to timeline track3
            main_page.drag_media_to_timeline_playhead_position('Sport 02.jpg', track_no=3)

        # [L220] 3.7 Mask Designer (Sport 02.jpg) > Open Mask Designer
        # with uuid("152b2168-2061-4e23-bdf0-1301392bcdee") as case:
        with step('[Action] Open Mask Designer by tips area'):
            # Click Tools > select (Mask designer)
            main_page.click(L.main.tips_area.btn_tools)
            main_page.select_right_click_menu('Mask Designer')

        with step('[Verify] Check open Mask Designer window with Sport 02.jpg'):
            # Verify Step:
            check_mask_window = main_page.exist(L.mask_designer.mask_designer_window)
            if not check_mask_window:
                assert False, "Mask Designer window is not opened!"
            assert check_mask_window.AXTitle == 'Mask Designer  |  Sport 02', f"Show incorrect title on mask designer! Expected: Mask Designer  |  Sport 02, Actual: {check_mask_window.AXTitle}"

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.mask_preset
    @pytest.mark.name('[test_mask_designer_func_10_2] Apply Mask preset')
    @exception_screenshot
    def test_mask_designer_func_10_2(self):
        '''
        1. Apply a random mask from index 1~7 and check preview is changed
        2. Apply mask 8 and check preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_1"
        self.ensure_dependency(dependency_test)

        # [L221] 3.7 Mask Designer (Sport 02.jpg) > Apply default mask
        # with uuid("e4a71739-d5e3-4598-8f18-af2a81a6e91c") as case:

        random_idx = random.randrange(1,7) # Get random index from 1~7
        with step(f'[Action] Apply a random mask from index 1~7, selected index: {random_idx}'):
            mask_default_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            #check_timeline_particle = main_page.compare(Ground_Truth_Folder + 'L217.png', timeline_preview, similarity=0.93)
            mask_designer_page.MaskDesigner_Apply_template(random_idx)

        with step('[Verfiy] Check preview is changed after apply random mask'):
            mask_x_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            if main_page.compare(mask_default_preview, mask_x_preview, similarity=0.98):
                assert False, "Preview is not changed after apply random mask! Similary should<0.98"

        with step('[Action] Apply mask 8'):
            mask_designer_page.MaskDesigner_Apply_template(index=8)
        
        with step('[Verfiy] Check preview is changed after apply mask 8'):
            mask_star_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            if main_page.compare(mask_x_preview, mask_star_preview, similarity=0.98):
                assert False, "Preview is not changed after apply mask 8! Similary should<0.98"

        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.mask_preset
    @pytest.mark.canva
    @pytest.mark.name('[test_mask_designer_func_10_3] Move mask object')
    @exception_screenshot
    def test_mask_designer_func_10_3(self):
        '''
        1. Move mask object to lower right on canva
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_2"
        self.ensure_dependency(dependency_test)

        # [L233] 3.7 Mask Designer (Sport 02.jpg) > Manual adjust on canvas > Move > Operation works fine.
        # with uuid("1f9a1e2a-df56-4083-bb11-bfe9de94793d") as case:
        with step('[Action] Move mask object to lower right on canva'):
            before_move_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            # Move mask object to lower right
            mask_designer_page.move_object_on_canvas(offset_x=30, offset_y=40)

        with step('[Verify] Check preview is changed after move mask object'):
            # Verify Step:
            lower_right_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            if main_page.compare(before_move_preview, lower_right_preview, similarity=0.98):
                assert False, "Preview is not changed after move mask object! Similary should<0.98"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.custom_mask
    @pytest.mark.name('[test_mask_designer_func_10_4] Create custom mask from image')
    @exception_screenshot
    def test_mask_designer_func_10_4(self):
        '''
        1. Undo test_mask_designer_func_10_3 action
        2. Create custom mask from image
        3. Check preview is changed as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_3"
        self.ensure_dependency(dependency_test)
        # [L222] 3.7 Mask Designer (Sport 02.jpg) > custom mask from image
                    # click undo

        # with uuid("f244a59e-d7c8-4da3-b94e-65caa7672ca3") as case:
        with step('[Initial] Undo test_mask_designer_func_10_3 action'):
            mask_designer_page.tap_MaskDesigner_Undo_btn()
        
        with step('[Action] Create custom mask from image'):
            before_custom_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            mask_designer_page.Edit_MaskDesigner_CreateImageMask(Test_Material_Folder + 'BFT_21_Stage1/beauty.jpg')

        with step('[Verify] Check preview is changed after create custom mask from image'):
            mask_custom_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            if main_page.compare(before_custom_preview, mask_custom_preview, similarity=0.98):
                assert False, "Preview is not changed after create custom mask from image! Similary should<0.98"

        with step('[Verfify] Check preview as GT'):
            zero_sec_preview = main_page.snapshot(locator=L.mask_designer.mask_designer_window, file_name=Auto_Ground_Truth_Folder + 'L222.png')
            if not main_page.compare(Ground_Truth_Folder + 'L222.png', zero_sec_preview, similarity=0.93):
                assert False, "Preview is not correct as GT(L222.png)! Similary should>0.93"
        assert True
                
    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.custom_mask
    @pytest.mark.play_video
    @pytest.mark.name('[test_mask_designer_func_10_5] Play the video')
    @exception_screenshot
    def test_mask_designer_func_10_5(self):
        '''
        1. Play the video
        2. Check preview is changed when playing video
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_4"
        self.ensure_dependency(dependency_test)

        with step('[Action] Play the video'):
            # Play preview then check (preview is changed)
            mask_designer_page.Edit_MaskDesigner_PreviewOperation('play')

        with step('[Verify] Check preview is changed when playing video in 2 secs'):
            # Verify Step1:
            preview_is_updated = main_page.Check_PreviewWindow_is_different(area=L.mask_designer.preview_window, sec=2)
            assert preview_is_updated, "Preview is not changed when playing video in 2 secs!"

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.custom_mask
    @pytest.mark.play_video
    @pytest.mark.timecode
    @pytest.mark.name('[test_mask_designer_func_10_6] Stop the video')
    @exception_screenshot
    def test_mask_designer_func_10_6(self):
        '''
        1. Stop the video and check timecode is 00:00:00:00
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_5"
        self.ensure_dependency(dependency_test)

        with step('[Action] Click [Stop] button'):
            mask_designer_page.Edit_MaskDesigner_PreviewOperation('stop')
        
        with step('[Verify] Check timecode is 00:00:00:00'):
            check_timecode = mask_designer_page.get_timecode()
            if check_timecode != '00:00:00:00':
                assert False, f"Timecode is not correct! Expected: 00:00:00:00, Actual: {check_timecode}"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.custom_mask
    @pytest.mark.delete_mask
    @pytest.mark.name('[test_mask_designer_func_10_7] Remove custom mask')
    @exception_screenshot
    def test_mask_designer_func_10_7(self):
        '''
        1. Remove Custom Mask
        2. Check preview is changed after remove custom mask
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_6"
        self.ensure_dependency(dependency_test)

        with step('[Action] Remove custom mask'):
            before_delete_preview = main_page.snapshot(locator=L.mask_designer.mask_designer_window)
            # Remove custom mask
            check_remove_custom = mask_designer_page.Edit_MaskDesigner_RemoveCustomMask(index=1)
            if not check_remove_custom:
                assert False, "Cannot remove custom mask! Please check the result first!"

        with step('[Verify] Check preview is changed after remove custom mask'):
            after_delete_preview = main_page.snapshot(locator=L.mask_designer.mask_designer_window)
            if main_page.compare(before_delete_preview, after_delete_preview, similarity=0.98):
                assert False, "Preview is not changed after remove custom mask! Similary should<0.98"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.mask_preset
    @pytest.mark.invert_mask
    @pytest.mark.name('[test_mask_designer_func_10_8] Set [Only show the selected track] and tick invert mask')
    @exception_screenshot
    def test_mask_designer_func_10_8(self):
        '''
        1. Set [Only show the selected track]
        2. Tick invert mask
        3. Check preview is changed as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_7"
        self.ensure_dependency(dependency_test)

        # [L226] 3.7 Mask Designer (Sport 02.jpg) > Invert mask
        # with uuid("2010b0ee-ff55-4ac8-9556-d618b6cb89d0") as case:

        with step('[Action] Set [Only show the selected track]'):
            # Set (Only show the selected track)
            mask_designer_page.Edit_MaskDesigner_Only_Show_Selected_track_SetCheck()

        with step('[Action] Tick invert mask'):
            # Tick invert mask
            mask_designer_page.Edit_MaskDesigner_Invert_mask_SetCheck()
            
        with step('[Verify] Check preview is changed as GT'):
            # Verify Step:
            current_preview = main_page.snapshot(locator=L.mask_designer.preview_window, file_name=Auto_Ground_Truth_Folder + 'L226.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L226.png', current_preview)
            assert check_preview, "Preview is not correct as GT(L226.png)! Similary should>0.95"

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.text_mask
    @pytest.mark.name('[test_mask_designer_func_10_9] Create Text Mask')
    @exception_screenshot
    def test_mask_designer_func_10_9(self):
        '''
        1. Untick [Invert Mask]
        2. Click [Create Text Mask] and check [Mask Composer] window is opened
        3. Set text content
        4. Hide simple timeline
        5. Check preview is changed after create title mask
        '''
        # Ensure the dependency test is run and passed
        self.test_mask_designer_func_10_1()

        # [L223] 3.7 Mask Designer (Sport 02.jpg) > Create title mask
        # with uuid("efbff806-82b5-4247-a182-3edc78866548") as case:

        with step('[Action] Click [Create Text Mask]'):
            # Title mask
            mask_designer_page.click_create_text_mask_btn()
            
        with step('[Verfiy] Check [Mask Composer] window is opened'):
            # Check is in (Mask composer)
            current_status = mask_designer_page.is_enter_mask_composer()
            if not current_status:
                assert False, "No Enter Mask Composer window after click [Create Text Mask]!"
        
        with step('[Action] Set text content'):
            main_page.click(L.title_designer.area.edittext_text_content)
            main_page.mouse.click(times=3)
            main_page.keyboard.send('Etxkhq')
            main_page.press_enter_key()
            main_page.keyboard.send('WTrdi')
            time.sleep(DELAY_TIME)
            main_page.click(L.title_designer.btn_ok)
            
        with step('[Action] Hide simple timeline'):
            # Hide simple timeline
            main_page.click(L.mask_designer.btn_hide_timeline_mode)
            time.sleep(DELAY_TIME)

        with step('[Verify] Check preview is changed after create title mask'):
            # Verify Step:
            current_preview = main_page.snapshot(locator=L.mask_designer.mask_designer_window, file_name=Auto_Ground_Truth_Folder + 'L223.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L223.png', current_preview)
            if not check_preview:
                assert False, "Preview is not correct as GT(L223.png)! Similary should>0.95"


        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.canva
    @pytest.mark.name('[test_mask_designer_func_10_10] Rotate object')
    @exception_screenshot
    def test_mask_designer_func_10_10(self):
        '''
        1. Rotate object degree = 35 and check preview changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_9"
        self.ensure_dependency(dependency_test)

        # [L232] 3.7 Mask Designer (Sport 02.jpg) > Rotate
        # with uuid("5a933fab-12ff-464c-8551-b16ef67de363") as case:

        with step('[Action] Rotate object degree = 35'):
            before_rotate_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            # Rotate object degree = 35
            mask_designer_page.rotate_object_on_canvas()

        with step('[Verify] Check preview is changed after rotate object'):
            # Verify Step:
            after_rotate_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            if main_page.compare(before_rotate_preview, after_rotate_preview, similarity=0.98):
                assert False, "Preview is not changed after rotate object! Similary should<0.98"

        with step('[Initial] Show simple timeline'):
            # Show simple timeline
            main_page.click(L.mask_designer.btn_display_timeline_mode)
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.motion
    @pytest.mark.path_template
    @pytest.mark.name('[test_mask_designer_func_10_11] Apply path template')
    @exception_screenshot
    def test_mask_designer_func_10_11(self):
        '''
        1. Switch to [Motion] tab > [Path] tab
        2. Apply ramdom path template from index 5~20 and check preview is changed
        3. Apply path template 4 and check preview is changed
        4. Check preview as GT at (00:25)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_10"
        self.ensure_dependency(dependency_test)

            # [L230] 3.7 Mask Designer (Sport 02.jpg) > Set [Motion]
            # with uuid("b36192a8-c280-447a-89a5-f0dad4142943") as case:
            
                # # Un-tick (Only show the selected track)
                # mask_designer_page.Edit_MaskDesigner_Only_Show_Selected_track_SetCheck(check_it=False)

        with step('[Action] Switch to [Motion] tab > [Path] tab'):
                # Switch to Motion tab
                mask_designer_page.switch_to_motion()
                # Open path tab
                mask_designer_page.motion.open_path_tag()

        random_idx = random.randrange(5, 20)
        with step(f'[Action] Apply ramdom path template from index 5~20. Selected index: {random_idx}'):
            before_random_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            # random
            # Apply mask random (5 ~ 20)
            mask_designer_page.motion.select_path_template(random_idx)
            motion_x_preview = main_page.snapshot(locator=L.mask_designer.preview_window)

        with step('[Verify] Check preview is changed after apply random path template'):
            random_path_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            if main_page.compare(before_random_preview, random_path_preview, similarity=0.98):
                assert False, "Preview is not changed after apply random path template! Similary should<0.98"

        with step('[Action] Select path template 4'):
            mask_designer_page.motion.select_path_template(4)
        
        with step('[Verify] Check preview is changed after apply path template 4'):
            motion_fourth_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            if main_page.compare(motion_fourth_preview, motion_x_preview, similarity=0.98):
                assert False, "Preview is not changed after apply path template 4! Similary should<0.98"
            
        with step('[Verify] Check preview as GT at (00:25)'):
            # Set designer timecode (00:00:00:25)
            mask_designer_page.set_MaskDesigner_timecode('00_00_00_25')

            # Verify Step:
            current_preview = main_page.snapshot(locator=L.mask_designer.mask_designer_window, file_name=Auto_Ground_Truth_Folder + 'L232.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L232.png', current_preview)
            if not check_preview:
                assert False, "Preview is not correct as GT(L232.png)! Similary should>0.95"
        assert True


    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.object_settings
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_mask_designer_func_10_12] Set Rotation Keyframe and Switch to Previous Keyframe')
    @exception_screenshot
    def test_mask_designer_func_10_12(self):
        '''
        1. Add 1st rotation keyframe on (00:25)
        2. Fold Path tab and switch to Mask tab
        3. Add 2nd rotation keyframe on (00:02:20)
        4. Check rotation value on 2nd rotation keyframe
        5. Switch to previous rotation keyframe on (00:25)
        6. Check timecode on 1st rotation keyframe
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_11"
        self.ensure_dependency(dependency_test)

        # [L234] 3.7 Mask Designer (Sport 02.jpg) > Adjust keyframe in simple timeline
        # with uuid("ee9c8e69-b7c6-4288-956e-8074c75500d7") as case:

        with step('[Action] Add 1st rotation keyframe on (00:25)'):
            # Add 1st rotation keyframe on (00:00:00:25)
            mask_designer_page.simple_timeline.rotation.add_keyframe()

        with step('[Action] Fold Path tab and switch to Mask tab'):
            # Fold Path tab
            mask_designer_page.motion.open_path_tag(open=0)
            # Switch to Mask tab
            mask_designer_page.switch_to_mask()

        with step('[Action] Add 2nd rotation keyframe on (00:02:20)'):
            # Drag Properties scroll bar to down (1)
            mask_designer_page.drag_Mask_Settings_Scroll_Bar(1)
            # Set designer timecode (00:00:02:20)
            mask_designer_page.set_MaskDesigner_timecode('00_00_02_20')
            # Set Rotation degree = 75 (2nd keyframe)
            mask_designer_page.object_settings.set_rotation('75')

        with step('[Verify] Check rotation value on 2nd rotation keyframe'):
            # Verify Step:
            rotation_value = mask_designer_page.object_settings.get_rotation_value()
            if rotation_value != '75':
                assert False, f"Rotation value is not correct! Expected: 75, Actual: {rotation_value}"

        with step('[Action] Switch to previous rotation keyframe on (00:25)'):
            # Rotation : Click previous keyframe
            mask_designer_page.simple_timeline.rotation.click_previous_keyframe()

        with step('[Verify] Check timecode on 1st rotation keyframe'):
            # Verify Step:
            current_timecode = mask_designer_page.get_timecode()
            if current_timecode != '00:00:00:25':
                assert False, f"Timecode is not correct! Expected: 00:00:00:25, Actual: {current_timecode}"

        with step('[Verify] Check Rotation value on 1st rotation keyframe'):
            rotation_value = mask_designer_page.object_settings.get_rotation_value()
            if rotation_value != '35':
                assert False, f"Rotation value is not correct! Expected: 35, Actual: {rotation_value}"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.object_settings
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.path_template
    @pytest.mark.name('[test_mask_designer_func_10_13] Default Position keyframe from Path template')
    @exception_screenshot
    def test_mask_designer_func_10_13(self):
        '''
        1. Switch to default 1st Position keyframe (Added by Path template)
        2. Check timecode on 1st Position keyframe
        3. Switch to default 2nd Position keyframe (Added by Path template)
        4. Check timecode on 2nd Position keyframe
        5. Check Preview as GT at (05:00)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_12"
        self.ensure_dependency(dependency_test)

        with step('[Action] Switch to default 1st Position keyframe (Added by Path template)'):
            # Position : Click previous keyframe
            mask_designer_page.simple_timeline.position.click_previous_keyframe()

        with step('[Verify] Check timecode on 1st Position keyframe'):
            current_timecode = mask_designer_page.get_timecode()
            if current_timecode != '00:00:00:00':
                assert False, f"Timecode is not correct! Expected: 00:00:00:00, Actual: {current_timecode}"

        with step('[Action] Switch to default 2nd Position keyframe (Added by Path template)'):
            # Position : Click next keyframe
            mask_designer_page.simple_timeline.position.click_next_keyframe()

        with step('[Verify] Check timecode on 2nd Position keyframe'):
            current_timecode = mask_designer_page.get_timecode()
            if current_timecode != '00:00:05:00':
                assert False, f"Timecode is not correct! Expected: 00:00:05:00, Actual: {current_timecode}"
        
        with step('[Verify] Check Preview as GT at (05:00)'):
            current_preview = main_page.snapshot(locator=L.mask_designer.mask_designer_window, file_name=Auto_Ground_Truth_Folder + 'L234.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L234.png', current_preview)
            if not check_preview:
                assert False, "Preview is not correct as GT(L234.png)! Similary should>0.95"

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.name('[test_mask_designer_func_10_14] Adjust Feather radius by textbox')
    @exception_screenshot
    def test_mask_designer_func_10_14(self):
        '''
        1. Adjust Feather radius by textbox = 5
        2. Check Feather radius value is 5
        3. Check preview is changed after adjust Feather radius
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_13"
        self.ensure_dependency(dependency_test)

        with step('[Initial] Remove custom text mask'):
            # Drag Properties scroll bar to top (0)
            mask_designer_page.drag_Mask_Settings_Scroll_Bar(0)
            # Remove custom mask (Title mask)
            mask_designer_page.Edit_MaskDesigner_RemoveCustomMask(index=1)

        # [L227] 3.7 Mask Designer (Sport 02.jpg) > feather radius
        # with uuid("84117991-9ca4-43e0-a942-1dcb13a1bd6a") as case:

        with step('[Action] Adjust Feather radius by textbox'):
            before_feather_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            mask_designer_page.Edit_MaskDesigner_Feather_radius_InputValue('5')
        
        with step('[Verify] Check Feather radius value is 5'):
            # Verify Step
            check_value = main_page.exist(L.mask_designer.mask_property.feather_slider).AXValue
            if check_value != 5:
                assert False, f"Feather radius value is not correct! Expected: 5, Actual: {check_value}"

        with step('[Verify] Check preview is changed after adjust Feather radius'):
            applied_feather_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            if main_page.compare(before_feather_preview, applied_feather_preview, similarity=0.999):
                assert False, "Preview is not changed after adjust Feather radius! Similary should<0.999"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.object_settings
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.ease_in_out
    @pytest.mark.name('[test_mask_designer_func_10_15] Apply Ease In on 2nd Rotation keyframe')
    @exception_screenshot
    def test_mask_designer_func_10_15(self):
        '''
        1. Switch to 2nd Rotation keyframe (00:02:20)
        2. Set ease in value = 0.94
        3. Check preview is changed after apply Ease In
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_14"
        self.ensure_dependency(dependency_test)
        
        # [L229] 3.7 Mask Designer (Sport 02.jpg) > Set in [Object Settings] > Adjust ease in / ease out
        # with uuid("36403805-ed5c-4f70-91e5-1d2fa25e3049") as case:
        with step('[Action] Switch to 2nd Rotation keyframe (00:02:20)'):
            # Set designer timecode (00:00:02:10)
            mask_designer_page.set_MaskDesigner_timecode('00_00_02_10')
            no_ease_in_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            # Drag scroll bar to down
            mask_designer_page.drag_Mask_Settings_Scroll_Bar(1)
            # [Object setting] left panel: Click Rotation next keyframe to timecode (00:00:02:20)
            mask_designer_page.object_settings.rotation.click_next_keyframe()

        with step('[Action] Set ease in value = 0.94'):
            # Set ease in & ease in value = 0.94
            mask_designer_page.object_settings.rotation.ease_in.set_checkbox(value=True)
            time.sleep(DELAY_TIME*0.5) # wait the setting is enabled
            mask_designer_page.object_settings.rotation.ease_in.set_value('0.94')
        
        with step('[Verify] Check preview is changed after apply Ease In'):
            # Set designer timecode (00:00:02:10)
            mask_designer_page.set_MaskDesigner_timecode('00_00_02_10')
            apply_ease_in_preview = main_page.snapshot(locator=L.mask_designer.preview_window)

            # Similarity should less than 0.98, check_ease_out should be False
            check_ease_in = main_page.compare(no_ease_in_preview, apply_ease_in_preview, similarity=0.98)
            if check_ease_in:
                assert False, "Preview is not changed after apply Ease In! Similary should<0.98"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.object_settings
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.ease_in_out
    @pytest.mark.name('[test_mask_designer_func_10_16] Apply Ease out on 1st Rotation keyframe')
    @exception_screenshot
    def test_mask_designer_func_10_16(self):
        '''
        1. Switch to 1st Rotation keyframe (00:00:00:25)
        2. Set ease out value = 0.89
        3. Check preview is changed after apply Ease Out
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_15"
        self.ensure_dependency(dependency_test)

        with step('[Action] Switch to 1st Rotation keyframe (00:00:00:25)'):
            # Set designer timecode (00:00:00:29)
            mask_designer_page.set_MaskDesigner_timecode('00_00_00_29')
            no_ease_out_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            # [Object setting] left panel: Click Rotation previous keyframe to timecode (00:00:00:25)
            mask_designer_page.object_settings.rotation.click_previous_keyframe()

        with step('[Action] Set ease out value = 0.89'):
            # Set ease out & ease out value = 0.89
            mask_designer_page.object_settings.rotation.ease_out.set_checkbox(value=True)
            mask_designer_page.object_settings.rotation.ease_out.set_value('0.89')

        with step('[Verify] Check preview is changed after apply Ease Out'):
            # Set designer timecode (00:00:00:29)
            mask_designer_page.set_MaskDesigner_timecode('00_00_00_29')
            apply_ease_out_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            # Similarity should less than 0.98, check_ease_out should be False
            check_ease_out = main_page.compare(no_ease_out_preview, apply_ease_out_preview, similarity=0.98)
            if check_ease_out:
                assert False, "Preview is not changed after apply Ease Out! Similary should<0.98"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.object_settings
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_mask_designer_func_10_17] Reset Rotation Keyframe')
    @exception_screenshot
    def test_mask_designer_func_10_17(self):
        '''
        1. Reset Rotation keyframe
        2. Check timecode is not changed after click Previous/ Next keyframe
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_16"
        self.ensure_dependency(dependency_test)

        # [L228] 3.7 Mask Designer (Sport 02.jpg) > Set in [Object Settings] > Adjust keyframe
        # with uuid("1912a860-16dd-4c0f-9d4f-a91a54b5117c") as case:

        with step('[Action] Reset Rotation Keyframe'):
            # Rotation: Reset all rotation keyframe
            check_reset_btn = mask_designer_page.object_settings.rotation.click_reset_keyframe()
            if not check_reset_btn:
                assert False, "Cannot reset all rotation keyframe!"

        with step('[Verify] Check timecode is not changed after click Previous/ Next keyframe'):
            # Rotation: Get next keyframe status (False)
            mask_designer_page.object_settings.rotation.click_next_keyframe()
            current_time = mask_designer_page.get_timecode()
            if current_time != '00:00:00:29':
                assert False, f"Timecode is not correct if click next rotation keyframe after reset! Expected: 00:00:00:29, Actual: {current_time}"

            mask_designer_page.object_settings.rotation.click_previous_keyframe()
            current_time = mask_designer_page.get_timecode()
            if current_time != '00:00:00:29':
                assert False, f"Timecode is not correct if click previous rotation keyframe after reset! Expected: 00:00:00:29, Actual: {current_time}"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.object_settings
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name('[test_mask_designer_func_10_18] Next Position Keyframe on last keyframe')
    @exception_screenshot
    def test_mask_designer_func_10_18(self):
        '''
        1. Switch to last (2nd) Position Keyframe
        2. Click Next Position Keyframe
        3. Check timecode is not changed after click Next Position Keyframe
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_17"
        self.ensure_dependency(dependency_test)

        with step('[Action] Switch to last (2nd) Position Keyframe'):
            # Drag scroll bar to upper
            mask_designer_page.drag_Mask_Settings_Scroll_Bar(0.655)
            # Position: Click next keyframe to timecode (00:00:05:00)
            mask_designer_page.object_settings.position.click_next_keyframe()
            time.sleep(DELAY_TIME*2) # wait until switched

        with step('[Verify] Check timecode is correct on 2nd Position keyframe'):
            current_timecode = mask_designer_page.get_timecode()
            if current_timecode != '00:00:05:00':
                assert False, f"Timecode is not correct! Expected: 00:00:05:00, Actual: {current_timecode}"

        with step('[Action] Click Next Position Keyframe'):
            # Position: Get next keyframe status (False)
            mask_designer_page.object_settings.position.click_previous_keyframe()
            time.sleep(DELAY_TIME) # wait until switched

        
        with step('[Verify] Check timecode is not changed after click Next Position Keyframe'):
            current_timecode = mask_designer_page.get_timecode()
            if current_timecode != '00:00:05:00':
                assert False, f"Timecode is not correct! Expected: 00:00:05:00, Actual: {current_timecode}"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.motion
    @pytest.mark.path
    @pytest.mark.play_video
    @pytest.mark.name('[test_mask_designer_func_10_19] Play Video')
    @exception_screenshot
    def test_mask_designer_func_10_19(self):
        '''
        1. Play the video and check if preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_18"
        self.ensure_dependency(dependency_test)

        # [L235] 3.7 Mask Designer (Sport 02.jpg) > Check preview
        # with uuid("566f1b44-0467-4ba1-ba9c-32c908bd5d9d") as case:

        with step('[Action] Plat the video'):
            mask_designer_page.set_MaskDesigner_timecode('00_00_00_00')
            # Click [Play] button to check preview different
            mask_designer_page.Edit_MaskDesigner_PreviewOperation('Play')
        
        with step('[Verify] Check preview is changed after play the video'):
            check_preview_update = main_page.Check_PreviewWindow_is_different(L.mask_designer.preview_window, sec=3)
            assert check_preview_update, "Preview is not changed after play the video!"

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.motion
    @pytest.mark.path
    @pytest.mark.play_video
    @pytest.mark.name('[test_mask_designer_func_10_20] Stop Video')
    @exception_screenshot
    def test_mask_designer_func_10_20(self):
        '''
        1. Stop the video and check timecode at (00:00:00:00)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_19"
        self.ensure_dependency(dependency_test)

        with step('[Action] Stop the video'):
            # Click [Stop]
            mask_designer_page.Edit_MaskDesigner_PreviewOperation('Stop')

        with step('[Verify] Check timecode at (00:00:00:00)'):
            current_timecode = mask_designer_page.get_timecode()
            if current_timecode != '00:00:00:00':
                assert False, f"Timecode is not correct! Expected: 00:00:00:00, Actual: {current_timecode}"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.name('[test_mask_designer_func_10_21] Check Preview is as GT from test_mask_designer_func_10_9~20')
    @exception_screenshot
    def test_mask_designer_func_10_21(self):
        '''
        1. Check Preview is as GT from test_mask_designer_func_10_9~20
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_20"
        self.ensure_dependency(dependency_test)
        
        with step('[Verify] Check Preview is as GT from test_mask_designer_func_10_9~20'):
            # check preview
            mask_designer_page.set_MaskDesigner_timecode('00_00_03_03')

            current_preview = main_page.snapshot(locator=L.mask_designer.preview_window, file_name=Auto_Ground_Truth_Folder + 'L235.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L235.png', current_preview)
            assert check_preview, "Preview is not correct as GT(L235.png)! Similary should>0.95"

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.brush_mask
    @pytest.mark.canva
    @pytest.mark.name('[test_mask_designer_func_10_22] Brush Mask Designer -- Paint Mask w/ [Manual Brush] tool')
    @exception_screenshot
    def test_mask_designer_func_10_22(self):
        '''
        1. Enter [Paint Mask]
        2. Draw canvas w/ brush tool
        3. Check preview is changed after draw canvas w/ brush tool
        '''
        # Ensure the dependency test is run and passed
        self.test_mask_designer_func_10_1()

        # [L224] 3.7 Mask Designer (Sport 02.jpg) > Create Brush Mask
        # with uuid("60a044e9-e3b9-43c1-9cf4-58e937d2f0be") as case:
        with step('[Action] Enter [Paint Mask]'):
            mask_designer_page.switch_to_mask()

            # Click [Paint Mask]
            mask_designer_page.click_create_brush_mask_btn()
            check_enter = mask_designer_page.is_enter_brush_mask_designer()

            if not check_enter:
                assert False, "No Enter Brush Mask Designer window after click [Create Brush Mask]!"

        with step('[Action] Draw canvas w/ [Manual Brush] tool'):
            before_brush_preview = main_page.snapshot(locator=L.mask_designer.mask_property.brush_mask_designer.window)
            # Set tool width = 73
            mask_designer_page.brush_mask.width.set_value('73')
            # Draw canvas w/ brush tool
            mask_designer_page.brush_mask.drag_tool_on_canvas_from_upper_left()
            mask_designer_page.brush_mask.drag_tool_on_canvas_from_upper_right()
            mask_designer_page.brush_mask.drag_tool_on_canvas_from_upper_middle()

        with step('[Verify] Check preview is changed after draw canvas w/ brush tool'):
            apply_brush_preview = main_page.snapshot(locator=L.mask_designer.mask_property.brush_mask_designer.window)
            # Verify step (after used round tool)
            check_update = main_page.compare(before_brush_preview, apply_brush_preview)
            if check_update:
                assert False, "Preview is not changed after draw canvas w/ brush tool! Similary should<0.95"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.brush_mask
    @pytest.mark.canva
    @pytest.mark.name('[test_mask_designer_func_10_23] Brush Mask Designer -- Paint Mask w/ [Smart Brush] tool')
    @exception_screenshot
    def test_mask_designer_func_10_23(self):
        '''
        1. Reset Mask Designer
        2. Draw canvas w/ [Smart Brush] tool
        3. Check preview is changed after draw canvas w/ [smart brush] tool
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_22"
        self.ensure_dependency(dependency_test)

        with step('[Initial] Reset Mask Designer'):
            # Click reset button
            mask_designer_page.brush_mask.click_reset()
            main_page.click(L.main.confirm_dialog.btn_ok)

        with step('[Action] Draw canvas w/ [Smart Brush] tool'):
            before_brush_preview = main_page.snapshot(locator=L.mask_designer.mask_property.brush_mask_designer.window)
            # Change tool to (Add to selection)
            mask_designer_page.brush_mask.tools.set_smart_brush()
            # Set tool width = 22
            mask_designer_page.brush_mask.width.set_value('22')
            # Draw canvas w/ brush tool
            mask_designer_page.brush_mask.drag_tool_on_canvas_from_upper_left()
            mask_designer_page.brush_mask.drag_tool_on_canvas_from_upper_middle()
        
        with step('[Verify] Check preview is changed after draw canvas w/ [smart brush] tool'):
            apply_smart_preview = main_page.snapshot(locator=L.mask_designer.mask_property.brush_mask_designer.window)
            # Verify step (after used smart tool)
            check_smart = main_page.compare(apply_smart_preview, before_brush_preview)
            if check_smart:
                assert False, "Preview is not changed after draw canvas w/ smart brush tool! Similary should<0.95"
        
        with step('[Initial] Leave and Remove custom mask'):
            # Click OK button
            mask_designer_page.brush_mask.click_ok_btn()
            check_remove_custom = mask_designer_page.Edit_MaskDesigner_RemoveCustomMask(index=1)
            if not check_remove_custom:
                assert False, "Cannot remove custom mask!"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.selection_mask
    @pytest.mark.canva
    @pytest.mark.name('[test_mask_designer_func_10_24] Selection Mask -- Draw canvas w/ triangle')
    @exception_screenshot
    def test_mask_designer_func_10_24(self):
        '''
        1. Enter [Selection Mask]
        2. Draw canvas w/ triangle
        3. Check preview is changed after draw canvas w/ triangle
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_23"
        self.ensure_dependency(dependency_test)

        # [L225] 3.7 Mask Designer (Sport 02.jpg) > Create Selection Mask
        # with uuid("bdcee9e2-2f36-4b79-9444-fb6ad8484ebb") as case:

        with step('[Action] Enter [Selection Mask]'):
            # Click [Selection mask]
            mask_designer_page.click_create_selection_mask_btn()

        with step('[Action] Draw canvas w/ triangle'):
            # Draw mask
            mask_designer_page.draw_triangle_on_canvas(angle=5)

        with step('[Verify] Check preview is changed after draw canvas w/ triangle'):
            # Verify Step:
            current_preview = main_page.snapshot(locator=L.mask_designer.preview_window, file_name=Auto_Ground_Truth_Folder + 'L225.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L225.png', current_preview, similarity=0.8)
            assert check_preview, "Preview is not correct as GT(L225.png)! Similary should>0.8"


    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.mask
    @pytest.mark.mask_properties
    @pytest.mark.canva
    @pytest.mark.name('[test_mask_designer_func_10_25] Resize mask on canva')
    @exception_screenshot
    def test_mask_designer_func_10_25(self):
        '''
        1. Apply template 14
        2. Resize mask on canva
        3. Check preview changed after resize mask on canva
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_24"
        self.ensure_dependency(dependency_test)

        # [L231] 3.7 Mask Designer (Sport 02.jpg) > Manual adjust on canvas > Resize
        # with uuid("e8a7cdf0-52b7-4353-9cf0-5a9d85c88406") as case:

        with step('[Action] Apply Template 14'):
            mask_designer_page.set_MaskDesigner_timecode('00_00_01_26')
            # Apply template
            mask_designer_page.MaskDesigner_Apply_template(14)

        with step('[Action] Resize mask on canva'):
            inital_apply_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            # resize
            mask_designer_page.adjust_object_on_canvas_resize(x=35, y=30)

        with step('[Verify] Check preview changed after resize mask on canva'):
            after_resize_preview = main_page.snapshot(locator=L.mask_designer.preview_window)
            check_preview = main_page.compare(inital_apply_preview, after_resize_preview, similarity=0.965)
            if check_preview:
                assert False, "Preview is not changed after resize mask on canva! Similary should<0.965"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.cyberlink_cloud
    @pytest.mark.dz
    @pytest.mark.save_template
    @pytest.mark.shared_template
    @pytest.mark.name('[test_mask_designer_func_10_26] Share Template to Cloud')
    @exception_screenshot
    def test_mask_designer_func_10_26(self):
        '''
        1. Share Template to cloud
        2. Check window title after upload template to cloud
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_25"
        self.ensure_dependency(dependency_test)

        # [L236] 3.7 Mask Designer (Sport 02.jpg) > [Share] template online
        # with uuid("346b278c-7aa6-4d43-a4b3-c0da5abc1b53") as case:

        with step('[Action] Share Template to cloud'):
            # Apply template
            check_upload = mask_designer_page.share_to_cloud(name='mask_custom', tags='123', collection='test', description='move mask', verify_dz_link=1)
            if not check_upload:
                assert False, "Cannot upload template to cloud!"

        with step('[Verify] Check window title after upload template to cloud'):
            # Verify step: check title
            check_title = main_page.exist(L.mask_designer.mask_designer_window)
            if check_title.AXTitle != 'Mask Designer  |  mask_custom':
                assert False, f"Title is not correct after upload template to cloud! Expected: Mask Designer  |  mask_custom, Actual: {check_title.AXTitle}"
        assert True

    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.pip_room
    @pytest.mark.cyberlink_cloud
    @pytest.mark.dz
    @pytest.mark.save_template
    @pytest.mark.shared_template
    @pytest.mark.name('[test_mask_designer_func_10_27] Download Shared Template from CL/DZ')
    @exception_screenshot
    def test_mask_designer_func_10_27(self):
        '''
        1. Save Custom Mask Template for test_mask_designer_func_10_28
        2. Download Shared template from CL/DZ
        3. Remove Shared template
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_26"
        self.ensure_dependency(dependency_test)


        with step('[Action] Save Custom Mask Template for test_mask_designer_func_10_28'):
            # Click [Save as] > Save custom name then close Mask designer
            mask_designer_page.Edit_MaskDesigner_ClickSaveAs()
            mask_designer_page.save_as.input_name('BFT_mask_template')

        with step('[Action] Back to Pip Room'):
            mask_designer_page.save_as.click_ok()
            mask_designer_page.Edit_MaskDesigner_ClickOK()
            # Enter Pip Room
            main_page.enter_room(4)

        with step('[Action] Download Shared template from CL/DZ'):
            # Click download content form CL/DZ
            pip_room_page.click_DownloadContent_from_DZCL()
            # Already enter "Download PiP Objects" > Open My Cyberlink Cloud
            # Select template name "dialog09_chroma"
            check_CL_content = download_from_cl_dz_page.select_template('mask_custom')
            if not check_CL_content:
                assert False, "Cannot find the shared template from CL/DZ!"

        with step('[Initial] Remove Shared template'):
            download_from_cl_dz_page.tap_delete_button()
            # Close "Download PiP Objects" window
            # download_from_cl_dz_page.tap_close_button()
            main_page.press_esc_key()
        
        assert True


    @pytest.mark.mask_designer_func
    @pytest.mark.mask_designer
    @pytest.mark.pip_room
    @pytest.mark.save_template
    @pytest.mark.canva
    @pytest.mark.name('[test_mask_designer_func_10_28] Check Saved Custom Mask Template Preview in Main Program')
    @exception_screenshot
    def test_mask_designer_func_10_28(self):
        '''
        1. Click [Custom] Category
        2. Check Custom Mask Template is saved
        3. Check preview of the custom mask template
        4. Save the project
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_mask_designer_func_10_27"
        self.ensure_dependency(dependency_test)

        # [L237] 3.7 Mask Designer (Sport 02.jpg) > [OK] / [Save As] template
        # with uuid("c07c3fd9-1aca-4e3e-931e-bf159193b7a3") as case:

        with step('[Action] Click [Custom] Category in [Pip Room]'):
            # Pip Room > Enter custom category
            main_page.select_LibraryRoom_category('Custom')

        with step('[Verify] Check Custom Mask Template is saved'):
            # Verify step: custom preview normally
            main_page.select_library_icon_view_media('BFT_mask_template')

        with step('[Verify] Check preview as GT'):
            current_preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L237.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L237.png', current_preview)
            if not check_preview:
                assert False, "Preview is not correct as GT(L237.png)! Similary should>0.95"

        with step('[Action] Save project'):
            # Save project:
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_mask_designer_func_10_29',
                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')

        assert True
        

    @pytest.mark.stock_media_func
    @pytest.mark.launch
    @pytest.mark.particle_room
    @pytest.mark.search_library
    @pytest.mark.name('[test_stock_media_func_11_1] Search "\" in Particle Room')
    @exception_screenshot
    def test_stock_media_func_11_1(self):
        '''
        1. Launch APP and enter particle room
        2. Search IAD > Input "\" character
        3. Check No results for "\" character
        '''

        # launch APP
        with step('[Action] Launch APP and Enter Particle Room'):
            if not main_page.start_app() or not main_page.is_app_exist():
                assert False, "Launch APP failed!"
            # enter particle room
            main_page.enter_room(5)

        # [L210] 2.3 Particle Room > Search IAD > Input "\" character
        # with uuid("ba950f65-6338-457d-b7f8-4ee7aa3178c8") as case:

        with step('[Action] Search IAD > Input "\" character'):
            media_room_page.search_library('\\')

        with step('[Verify] Check No results for "\" character'):
            # Can find the object of (No results for "\")
            assert main_page.is_exist(L.media_room.txt_no_results_for_backslash), "Found results for '\' character incorrectly in particle room!"

    @pytest.mark.stock_media_func
    @pytest.mark.media_room
    @pytest.mark.stock_media
    @pytest.mark.name('[test_stock_media_func_11_2] Open [Stock Media] window in Media Room')
    @exception_screenshot
    def test_stock_media_func_11_2(self):
        '''
        1. Enter media room
        2. Click Stock Media button
        3. Check Stock Media window is opened
        '''

        # Ensure the dependency test is run and passed
        dependency_test = "test_stock_media_func_11_1"
        self.ensure_dependency(dependency_test)

        # [L119] 2.1 Media Room > Media Content > Import > click "Stock Media" button
        # with uuid("5edec452-198e-47b8-a0aa-c769b4fa8f5d") as case:
        with step('[Action] Click "Stock Media" button in Media Room'):
            # enter Media room
            main_page.enter_room(0)
            # click Stock Media button
            main_page.click(L.media_room.btn_stock_media)
            # time.sleep(DELAY_TIME * 10)
        
        with step('[Verify] Check Stock Media window is opened'):
            # verify step: should pop up Getty Image
            assert main_page.is_exist(L.download_from_shutterstock.window, timeout=15), "Stock Media window is not opened!"

    @pytest.mark.stock_media_func
    @pytest.mark.stock_media
    @pytest.mark.name('[test_stock_media_func_11_3] Check No popup "what\'s is premium media" dialog')
    @exception_screenshot
    def test_stock_media_func_11_3(self):
        '''
        1. Check No popup "what's is premium media" dialog
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_stock_media_func_11_2"
        self.ensure_dependency(dependency_test)

        # [L120] 2.1 Media Room > Media Content > Import > continue above case
        # with uuid("1cccbe9e-ebf5-40d8-a936-a08529baec5e") as case:
            # Verify 1: No popup "what's is premium media" dialog
        with step('[Verify] Check No popup "what\'s is premium media" dialog'):
            verify_1 = main_page.is_not_exist(L.gettyimage.what_is_stock_media_dialog)
            assert verify_1, "Popup \"what's is premium media\" dialog incorrectly! Should not popup!"

    @pytest.mark.stock_media_func
    @pytest.mark.stock_media
    @pytest.mark.name('[test_stock_media_func_11_4] Check Premium content shows up by icon size')
    @exception_screenshot
    def test_stock_media_func_11_4(self):
        '''
        1. Check Premium content shows up by icon size
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_stock_media_func_11_3"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check Premium content shows up by icon size'):
            # show premium content
            premium_icon = main_page.exist(L.gettyimage.video.thumbnail_icon.img_premium)
            icon_size = premium_icon.AXSize

            assert icon_size[0] == 24, f"Premium icon size is not correct! Expected: 24, Actual: {icon_size[0]}"

    @pytest.mark.stock_media_func
    @pytest.mark.stock_media
    @pytest.mark.content_pack
    @pytest.mark.name('[test_stock_media_func_11_5] Search and Filter content in Getty Image')
    @exception_screenshot
    def test_stock_media_func_11_5(self):
        '''
        1. Search keyword: child one two flower car
        2. Click Filter button
        3. Check preview as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_stock_media_func_11_4"
        self.ensure_dependency(dependency_test)

        with step('[Action] Search keyword: child one two flower car'):
            # # wait for GI all pages load ready
            # time.sleep(DELAY_TIME * 6)
            # input search keyword: child one two flower car
            download_from_ss_page.search.search_text('child one two flower car')
            time.sleep(DELAY_TIME * 10)
        # 2.1 Media Room > Media Content > Import > continue above case > switch to filters view

        with step('[Action] Click Filter button'):
            getty_image_page.click_filter_button()

        with step('[Verify] Check preview as GT'):
            # show two video after search keyword (one basic, one premium content)
            # snapshot GI window: window
            search_result_preview = main_page.snapshot(locator=L.gettyimage.window,
                                            file_name=Auto_Ground_Truth_Folder + 'L122_two_thumbnail.png')
            compare_result = main_page.compare(Ground_Truth_Folder + 'L122_two_thumbnail.png', search_result_preview)
            assert compare_result, "Preview is not correct as GT(L122_two_thumbnail.png)! Similary should>0.70"

    @pytest.mark.stock_media_func
    @pytest.mark.stock_media
    @pytest.mark.content_pack
    @pytest.mark.name('[test_stock_media_func_11_6] Check default [Download] button is disable')
    @exception_screenshot
    def test_stock_media_func_11_6(self):
        '''
        1. Check default [Download] button is disable
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_stock_media_func_11_5"
        self.ensure_dependency(dependency_test)

        # [L121] 2.1 Media Room > Media Content > Import > continue above case > try to select content
        # with uuid("fdcf3e37-caee-41a0-8f5b-d22289ca7c4b") as case:
        with step('[Verify] Check default [Download] button is disable'):
            # verify step: default download button is disable
            verify_step_1 = not download_from_ss_page.is_enabled_download()
            assert verify_step_1, "Default download button is enable! Should be disable"

    @pytest.mark.stock_media_func
    @pytest.mark.stock_media
    @pytest.mark.content_pack
    @pytest.mark.name('[test_stock_media_func_11_7] [Download] button is enable after select a clip')
    @exception_screenshot
    def test_stock_media_func_11_7(self):
        '''
        1. Select a clip
        2. Check [Download] button is enable after select a clip
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_stock_media_func_11_6"
        self.ensure_dependency(dependency_test)

        with step('[Action] Select a clip'):
            # single select one object
            download_from_ss_page.video.select_clip(1)

        with step('[Verify] Check [Download] button is enable after select a clip'):
            # verify step: default download button is enable
            verify_step_2 = download_from_ss_page.is_enabled_download()
            assert verify_step_2, "Download button is disable after select a clip! Should be enable"

    @pytest.mark.stock_media_func
    @pytest.mark.stock_media
    @pytest.mark.content_pack
    @pytest.mark.name('[test_stock_media_func_11_8] Filter [Basic] content')
    @exception_screenshot
    def test_stock_media_func_11_8(self):
        '''
        1. Filter [Basic] content
        2. Check preview as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_stock_media_func_11_7"
        self.ensure_dependency(dependency_test)

        # [L122] 2.1 Media Room > Media Content > Import > continue above case > switch to filters view
        # with uuid("f9b6814a-0aa1-4386-a66b-5d7090ff377d") as case:
        with step('[Action] Filter [Basic] content'):
            # snapshot for test_stock_media_func_11_10()
            all_content_result = main_page.snapshot(locator=L.gettyimage.window,
                                           file_name=Auto_Ground_Truth_Folder + 'L122_all_content.png')
            # Filter > click [Basic]
            getty_image_page.filter.set_collection_type(1)

        with step('[Verify] Check preview as GT'):
            search_result_basic = main_page.snapshot(locator=L.gettyimage.window,
                                           file_name=Auto_Ground_Truth_Folder + 'L122_basic.png')
            compare_basic_result_same = main_page.compare(Ground_Truth_Folder + 'L122_two_thumbnail.png', search_result_basic, similarity=0.85)
            compare_basic_result_different = not main_page.compare(Ground_Truth_Folder + 'L122_two_thumbnail.png',search_result_basic, similarity=1.00)

            assert compare_basic_result_same and compare_basic_result_different,\
                "Preview is not correct as GT(L122_basic.png)! Similary should >0.85 and <1.00"

    @pytest.mark.stock_media_func
    @pytest.mark.stock_media
    @pytest.mark.content_pack
    @pytest.mark.name('[test_stock_media_func_11_9] Filter [Premium] content')
    @exception_screenshot
    def test_stock_media_func_11_9(self):
        '''
        1. Filter [Premium] content
        2. Check preview as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_stock_media_func_11_8"
        self.ensure_dependency(dependency_test)
        
        with step('[Action] Filter [Premium] content'):
            # Filter > click [Premium]
            getty_image_page.filter.set_collection_type(2)

        with step('[Verify] Check preview as GT'):
            # Verify step: basic result  vs premium result
            #              0.96 % < similarity < 0.9985 %
            search_result_premium = main_page.snapshot(locator=L.gettyimage.window,
                                           file_name=Auto_Ground_Truth_Folder + 'L122_premium.png')
            check_premium_basic = main_page.compare(Auto_Ground_Truth_Folder+'L122_basic.png', search_result_premium, similarity=0.65)
            check_premium_basic_different = not main_page.compare(Auto_Ground_Truth_Folder+'L122_basic.png', search_result_premium, similarity=0.9985)
            # case.result = compare_result and compare_basic_result_same and check_premium_basic_different

            # # [L123] 2.1 Media Room > Media Content > Import > continue above case > tick Free
            # with uuid("54f66867-bcf5-4456-a329-99504b9b2c01") as case:
            #     case.result = compare_basic_result_same and compare_basic_result_different and check_premium_basic and check_premium_basic_different

            #     # [L124] 2.1 Media Room > Media Content > Import > continue above case > tick Premium
            #     with uuid("e0f1131a-def3-41f8-a528-44eb0248a93f") as case:
            #         case.result = check_premium_basic and check_premium_basic_different
            assert check_premium_basic and check_premium_basic_different,\
                "Preview is not correct as GT(L122_premium.png)! Similary should >0.65 and <0.9985"

    @pytest.mark.stock_media_func
    @pytest.mark.stock_media
    @pytest.mark.content_pack
    @pytest.mark.name('[test_stock_media_func_11_10] Check show [Basic]/ [Premium] content before filter')
    @exception_screenshot
    def test_stock_media_func_11_10(self):
        '''
        1. Check show [Basic]/ [Premium] content before filter
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_stock_media_func_11_9"
        self.ensure_dependency(dependency_test)

        # [L125] 2.1 Media Room > Media Content > Import > input keyword to search
        # with uuid("c6e3767d-5a15-43bd-a143-9e88d1b78ae5") as case:
        with step('[Verify] Check show [Basic]/ [Premium] content before filter'):
            compare_basic = not main_page.compare(Auto_Ground_Truth_Folder + 'L122_all_content.png', Auto_Ground_Truth_Folder + 'L122_basic.png', similarity=0.96)
            compare_premium = not main_page.compare(Auto_Ground_Truth_Folder + 'L122_all_content.png', Auto_Ground_Truth_Folder + 'L122_premium.png', similarity=0.96)
        
            assert compare_basic and compare_premium, f"Preview is not changed after set filter! Basic: {compare_basic}, Premium: {compare_premium}!"

    @pytest.mark.stock_media_func
    @pytest.mark.stock_media
    @pytest.mark.content_pack
    @pytest.mark.name('[test_stock_media_func_11_11] Download Photo Content')
    @exception_screenshot
    def test_stock_media_func_11_11(self):
        '''
        1. Clear Search and Filter
        2. Switch to [Photo] tab
        3. Download content
        4. Switch to [Video] tab and Close GettyImage Window
        5. Check preview as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_stock_media_func_11_10"
        self.ensure_dependency(dependency_test)


        # [L126] 2.1 Media Room > Media Content > Import > Download
        # with uuid("873c2b72-df56-41a2-ba29-2eba0c650e09") as case:
        with step('[Initial] Clear Search and Filter'):
            # Clear search
            download_from_ss_page.search.click_clear()
            # Filter > click [All]
            getty_image_page.filter.set_collection_type(0)

        with step('[Action] Switch to [Photo] tab'):
            # switch to photo
            download_from_ss_page.switch_to_photo()

        with step('[Action] Download content'):
            # single select one object > click download
            download_from_ss_page.photo.select_thumbnail_then_download(2)
            download_from_ss_page.photo.select_thumbnail_then_download(1)

        with step('[Action] Switch to [Video] tab and Close GettyImage Window'):
            # switch to video tab
            download_from_ss_page.switch_to_video()
            # close GI window
            download_from_ss_page.click_close()
            time.sleep(DELAY_TIME)

        with step('[Verify] Check preview as GT'):
            # Verify step:
            main_page.select_library_icon_view_media('1281693553')
            preview_image = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view,
                                           file_name=Auto_Ground_Truth_Folder + 'L126_preview.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L126_preview.png', preview_image, similarity=0.96)
            if not check_preview:
                assert False, "Preview is not correct as GT(L126_preview.png)! Similary should>0.96"

        with step('[Initial] Remove downloaded photo'):
            # remove downloaded photo
            main_page.select_library_icon_view_media('1281693553')
            main_page.right_click()
            main_page.select_right_click_menu('Remove from Disk')
            main_page.exist_click(L.media_room.confirm_dialog.btn_yes)

        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.launch
    @pytest.mark.name('[test_video_collage_designer_func_12_1] Open [Video Collage Designer]')
    @exception_screenshot
    def test_video_collage_designer_func_12_1(self):
        '''
        1. Launch APP
        2. Open [Video Collage Designer]
        3. Check Video Collage Designer is opened
        '''

        # launch APP
        with step('[Action] Launch APP'):
            if not main_page.start_app() or not main_page.is_app_exist():
                assert False, "Launch APP failed!"

        # [L240] 3.8 Video Collage Designer > Open [Video Collage Designer]
        # with uuid("ceac8405-fa0b-4210-a0d7-156b65fcdbde") as case:
        with step('[Action] Open [Video Collage Designer]'):
            main_page.top_menu_bar_plugins_video_collage_designer()

        with step('[Verify] Check Video Collage Designer is opened'):
            main_window = main_page.exist(L.video_collage_designer.main_window)
            assert main_window, "Video Collage Designer is not opened!"

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.import_media
    @pytest.mark.name('[test_video_collage_designer_func_12_2] Import Video/ Image to Video Collage Designer and add to section')
    @exception_screenshot
    def test_video_collage_designer_func_12_2(self):
        '''
        1. Select layout 7
        2. Import Video to Video Collage Designer
        3. Image mountain.mp4 to section 2
        4. Import Image to Video Collage Designer
        5. Image Sample.png to section 1
        6. Check preview as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_1"
        self.ensure_dependency(dependency_test)

        # [L242] 3.8 Video Collage Designer > Choose layout (Default)
        # with uuid("b2eeb6d2-27c9-40f3-91eb-21188f760789") as case:
        with step('[Action] Select layout 7'):
            # Select layout 7
            video_collage_designer_page.layout.select_layout(7)
            # [L243] 3.8 Video Collage Designer > Import (Image and Video)
            # with uuid("92df3704-1c50-4a1b-8b26-06bb72b48fb0") as case:
        with step('[Action] Import Video to Video Collage Designer'):
            # Import video to library
            imported_result = video_collage_designer_page.media.import_media(Test_Material_Folder + 'fix_enhance_20/mountain.mp4')
            media_room_page.handle_high_definition_dialog()
            if not imported_result:
                assert False, f"Cannot import video to Video Collage Designer! Imported media: {Test_Material_Folder + 'fix_enhance_20/mountain.mp4'}"

        with step('[Action] Image mountain.mp4 to section 2'):
            before_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            # Image mountain.mp4 to section 2
            video_collage_designer_page.media.click_auto_fill()
            added_video_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(before_preview, added_video_preview, similarity=0.98):
                assert False, "Preview is not changed after add video to section 2! Similary should<0.98"

        with step('[Action] Import Image to Video Collage Designer'):
            # Import Image to library
            import_photo_result = video_collage_designer_page.media.import_media(Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png')
            media_room_page.handle_high_definition_dialog()
            if not import_photo_result:
                assert False, f"Cannot import photo to Video Collage Designer! Imported media: {Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png'}"

        with step('[Action] Image Sample.png to section 1'):
            # Image Sample.png to section 1
            video_collage_designer_page.media.select_media('Sample.png')
            video_collage_designer_page.media.click_auto_fill()
            added_photo_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(added_video_preview, added_photo_preview, similarity=0.98):
                assert False, "Preview is not changed after add photo to section 1! Similary should<0.98"

        with step('[Verify] Check preview as GT'):
            # Verify Step:
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window, file_name=Auto_Ground_Truth_Folder + 'L242.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L242.png', current_preview, similarity=0.9)
            assert check_preview, "Preview is not correct as GT(L242.png)! Similary should>0.9"



    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.layout
    @pytest.mark.border
    @pytest.mark.name('[test_video_collage_designer_func_12_3] Video Collage Designer > layout and Color Board > Preview Check')
    @exception_screenshot
    def test_video_collage_designer_func_12_3(self):
        ''' 
        1. Select layout 10 and screenshot (locator=L.video_collage_designer.media_library)
        2. Check preview is changed after select layout 10
        3. Switch to Color Boards by select category (3) and screenshot (locator=L.video_collage_designer.media_library)
        4. Check preview is changed after switch to Color Boards
        5. Insert Blue Color Board and click auto fill
        6. Check preview is changed after insert Blue Color Board
        7. Switch to [Video Only] by select category (1)
        8. import video ('Skateboard 01.mp4') and click auto fill
        9. Check preview (locator=L.video_collage_designer.main_window) as GT (L244.png)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_2"
        self.ensure_dependency(dependency_test)

        # [L244] 3.8 Video Collage Designer > Filter options (Video only & color board)
        # with uuid("967c9ed2-79d9-4360-b314-5b7a18582f21") as case:
            # Select layout 11 (index=10)

        with step("Select layout 10 and screenshot"):
            preview_before = video_collage_designer_page.snapshot(locator=L.video_collage_designer.main_window)
            video_collage_designer_page.layout.select_layout(10)
        
        with step("Check preview is changed after select layout 10"):
            # Capture current preview
            layout_10_screenshot = video_collage_designer_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(preview_before, layout_10_screenshot, similarity=0.98):
                assert False, "Preview did not change after selecting layout 10! Similary should<0.98"

        with step("Switch to Color Boards by select category (3) and screenshot"):
            video_collage_designer_page.media.select_category(3)
            

        with step("Check preview is changed after switch to Color Boards"):
            color_board_screenshot = video_collage_designer_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(layout_10_screenshot, color_board_screenshot, similarity=0.98):
                assert False, "Preview did not change after selecting Color Boards! Similary should<0.98"

        with step("Insert Blue Color Board and click auto fill"):
            # Insert Blue color board
            main_page.double_click()
            time.sleep(DELAY_TIME)
            video_collage_designer_page.media.click_auto_fill()

        with step("Check preview is changed after insert Blue Color Board"):
            blue_color_board_screenshot = video_collage_designer_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(color_board_screenshot, blue_color_board_screenshot, similarity=0.98):
                assert False, "Preview did not change after inserting Blue Color Board! Similary should<0.98"

        with step("Switch to [Video Only] by select category (1)"):
            # switch to video only
            video_collage_designer_page.media.select_category(1)

        with step("Import video ('Skateboard 01.mp4') and click auto fill"):
            # Skateboard 01.mp4 to section 1
            video_collage_designer_page.media.select_media('Skateboard 01.mp4')
            video_collage_designer_page.media.click_auto_fill()

        with step("Check preview (locator=L.video_collage_designer.main_window) as GT (L244.png)"):
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,
                                                 file_name=Auto_Ground_Truth_Folder + 'L244.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L244.png', current_preview, similarity=0.9)

            # check_update = main_page.compare(all_media_library, color_board_media_library, similarity=0.9)
            # case.result = (not check_update) and check_preview

            assert check_preview, "Preview is not correct as GT(L244.png)! Similary should>0.9"

            # # [L245] 3.8 Video Collage Designer > [Auto Fill] button
            # with uuid("c38ba371-183f-4214-b115-02ba7d4cd789") as case:
            #     case.result = check_preview

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.border
    @pytest.mark.name('[test_video_collage_designer_func_12_4] Check Default Border Value is (0)')
    @exception_screenshot
    def test_video_collage_designer_func_12_4(self):
        ''' 
        1. Check Default Border Value is (0)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_3"
        self.ensure_dependency(dependency_test)

        # [L253] 3.8 Video Collage Designer > Adjust Border > Size
        # with uuid("5f8eeb3f-8323-4025-8701-eba85e26d586") as case:

        with step('[Verify] Check Default Border Value is (0)'):
            initial_border_value = video_collage_designer_page.border.get_border_value()

            assert initial_border_value == '0', f"Default Border Value is not (0)! Expected: 0, Actual: {initial_border_value}"

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.border
    @pytest.mark.name('[test_video_collage_designer_func_12_5] Set Border Value')
    @exception_screenshot
    def test_video_collage_designer_func_12_5(self):
        ''' 
        1. Set Border Value to 16 by Slider
        2. Check Border Value is (16)
        3. Check preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_4"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Border Value to 16 by Slider'):
            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            video_collage_designer_page.border.set_border_slider(16)
        
        with step('[Verify] Check Border Value is (16)'):
            apply_border_value = video_collage_designer_page.border.get_border_value()
            if apply_border_value != '16':
                assert False, f"Border Value is not (16)! Expected: 16, Actual: {apply_border_value}"

        with step('[Verify] Check preview is changed'):
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(before_apply_preview, current_preview, similarity=0.999):
                assert False, "Preview did not change after set border value to 16! Similary should<0.999"
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.border
    @pytest.mark.name('[test_video_collage_designer_func_12_6] Set Border Color')
    @exception_screenshot
    def test_video_collage_designer_func_12_6(self):
        ''' 
        1. Set Border Color to (C4DE5A)
        2. Check Border Color is (C4DE5A)
        3. Check preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_5"
        self.ensure_dependency(dependency_test)

        # [L254] 3.8 Video Collage Designer > Adjust Border > Change Color
        # with uuid("e8a29b39-2cbd-4533-9a6c-89c2362c6882") as case:

        with step('[Action] Set [Border Color] to (C4DE5A)'):
            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            # Set color to C4DE5A
            video_collage_designer_page.border.set_border_color('C4DE5A')

        with step('[Verify] Check [Border Color] is (C4DE5A)'):
            check_color = video_collage_designer_page.border.is_border_color('C4DE5A')
            if not check_color:
                assert False, "Border Color is not (C4DE5A)!"

        with step('[Verify] Check preview is changed'):
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(before_apply_preview, current_preview, similarity=0.999):
                assert False, "Preview did not change after set border color to C4DE5A! Similary should<0.999"
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.border
    @pytest.mark.name('[test_video_collage_designer_func_12_7] Check Default [Interclip Size] is (10)')
    @exception_screenshot
    def test_video_collage_designer_func_12_7(self):
        ''' 
        1. Check Default [Interclip Size] is (10)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_6"
        self.ensure_dependency(dependency_test)

        # [L255] 3.8 Video Collage Designer > Adjust Border > Interclip size
        # with uuid("5999111f-6785-45be-b1cd-d3ba9b243884") as case:
        with step('[Verify] Check Default [Interclip Size] is (10)'):
            initial_interclip_value = video_collage_designer_page.border.get_interclip_value()
            # Check initial value
            assert initial_interclip_value == '10', f"Default Interclip Size is not (10)! Expected: 10, Actual: {initial_interclip_value}"

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.border
    @pytest.mark.name('[test_video_collage_designer_func_12_8] Set [Interclip Size]')
    @exception_screenshot
    def test_video_collage_designer_func_12_8(self):
        ''' 
        1. Set [Interclip Size] to (20)
        2. Check [Interclip Size] is (20)
        3. Check preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_7"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set [Interclip Size] to (20)'):
            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            # Set interclip size = 20
            video_collage_designer_page.border.set_interclip_slider(20)

        with step('[Verify] Check [Interclip Size] is (20)'):
            current_interclip_value = video_collage_designer_page.border.get_interclip_value()
            if current_interclip_value != '20':
                assert False, f"Interclip Size is not (20)! Expected: 20, Actual: {current_interclip_value}"

        with step('[Verify] Check preview is changed'):
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(before_apply_preview, current_preview, similarity=0.999):
                assert False, "Preview did not change after set interclip size to 20! Similary should<0.999"
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.frame_animation
    @pytest.mark.timecode
    @pytest.mark.name('[test_video_collage_designer_func_12_9] Set [Frame Animation]')
    @exception_screenshot
    def test_video_collage_designer_func_12_9(self):
        ''' 
        1. Set [Frame Animation] to (From Beginning)
        2. Set [Frame Animation] to (During closing)
        3. Check preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_8"
        self.ensure_dependency(dependency_test)

        # [L258] 3.8 Video Collage Designer > Frame animation
        # with uuid("b5701127-215f-44e9-a122-efdc14274086") as case:
        with step('[Action] Set [Frame Animation] to (From Beginning)'):
            # Default is From Beginning
            video_collage_designer_page.set_timecode('00_00_00_12')
            from_beginning_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            # stop the preview to enable modifications
            video_collage_designer_page.click_preview_operation('STOP')
            time.sleep(DELAY_TIME)

        with step('[Action] Set [Frame Animation] to (During closing)'):
            # Set frame animation to During closing
            video_collage_designer_page.border.set_frame_animation(index=1)
            video_collage_designer_page.set_timecode('00_00_00_12')
        
        with step('[Verify] Check preview is changed'):
            during_closing_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(from_beginning_preview, during_closing_preview, similarity=0.999):
                assert False, "Preview did not change after set frame animation to During closing! Similary should<0.999"
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.frame_animation
    @pytest.mark.timecode
    @pytest.mark.name('[test_video_collage_designer_func_12_10] Check Preview as GT from test_video_collage_designer_func_12_2~9')
    @exception_screenshot
    def test_video_collage_designer_func_12_10(self):
        ''' 
        1. Check Preview as GT from test_video_collage_designer_func_12_2~9
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_9"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check Preview as GT from test_video_collage_designer_func_12_2~9'):
            video_collage_designer_page.click_preview_operation('STOP')
            video_collage_designer_page.set_timecode('00_00_09_17')

            # Verify Step:
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,
                                                 file_name=Auto_Ground_Truth_Folder + 'L258.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L258.png', current_preview)

            assert check_preview, "Preview is not correct as GT(L258.png)! Similary should>0.95"

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.border
    @pytest.mark.name('[test_video_collage_designer_func_12_11] Set [Fill Type] to [Solid Color] with (06471E)')
    @exception_screenshot
    def test_video_collage_designer_func_12_11(self):
        ''' 
        1. Set [Fill Type] to [Solid Color] with (06471E)
        2. Check [Fill Type] is [Solid Color] with (06471E)
        3. Check preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_10"
        self.ensure_dependency(dependency_test)

        # [L256] 3.8 Video Collage Designer > Adjust [Border] > Fill type - Uniform color
        # with uuid("95e51f49-8829-4b21-9886-08a95163ac0b") as case:
        with step('[Action] Set [Fill Type] to [Solid Color] with (06471E)'):
            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            video_collage_designer_page.click_preview_operation('STOP') # enable modifications
            video_collage_designer_page.border.set_uniform_color('06471E')

        with step('[Verify] Check [Fill Type] is [Solid Color] with (06471E)'):
            current_interclip_value = video_collage_designer_page.border.get_uniform_color()
            if current_interclip_value != '06471E':
                assert False, f"Fill Type is not [Solid Color] with (06471E)! Expected: 06471E, Actual: {current_interclip_value}"

        with step('[Verify] Check preview is changed'):
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(before_apply_preview, current_preview, similarity=0.99):
                assert False, "Preview did not change after set fill type to Solid Color! Similary should<0.99"
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.border
    @pytest.mark.name('[test_video_collage_designer_func_12_12] Set [Fill Type] to [Interclip Texture] with (Sample.png) and [Interclip Size] to 100')
    @exception_screenshot
    def test_video_collage_designer_func_12_12(self):
        ''' 
        1. Set [Fill Type] to [Interclip Texture] with (Sample.png) and check preview is changed
        2. Set [Interclip Size] to 100 adn Check preview is changed
        3. Check preview is as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_11"
        self.ensure_dependency(dependency_test)

        # [L257] 3.8 Video Collage Designer > Adjust [Border] > Fill type - interclip texture
        # with uuid("2113a2c8-b374-4e67-be7c-80b062d71439") as case:

        with step('[Action] Set [Fill Type] to [Interclip Texture] with (Sample.png)'):
            current_uniform_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            # Set fill type to interclip texture
            video_collage_designer_page.border.set_fill_type(1)
            video_collage_designer_page.border.select_interclip_texture(Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png')

        with step('[Verify] Check preview is changed'):
            # Verify Step:
            interclip_texture_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(current_uniform_preview, interclip_texture_preview, similarity=0.99):
                assert False, "Preview did not change after set fill type to Interclip Texture! Similary should<0.99"
        
        with step('[Action] Set [Interclip Size] to 100'):
            # Set interclip size to 100
            video_collage_designer_page.border.set_interclip_value(100)
            
        with step('[Verify] Check preview is changed'):
            interclip_size_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,
                                        file_name=Auto_Ground_Truth_Folder + 'L257.png')
            if main_page.compare(interclip_texture_preview, interclip_size_preview):
                assert False, "Preview did not change after set interclip size to 100! Similary should<0.95"

        with step('[Verify] Check preview is as GT'):
            check_interclip_texture = main_page.compare(Ground_Truth_Folder + 'L257.png', interclip_size_preview)
            assert check_interclip_texture, "Preview is not correct as GT(L257.png)! Similary should>0.95"

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.border
    @pytest.mark.frame_animation
    @pytest.mark.start_clip_playback
    @pytest.mark.name('[test_video_collage_designer_func_12_13] Set [Start clip playback] to (After frame animation)')
    @exception_screenshot
    def test_video_collage_designer_func_12_13(self):
        ''' 
        1. Set [Interclip] size to (16)
        2. Set [Frame Animation] to (From Beginning)
        3. Set [Start clip playback] to (After frame animation)
        4. Check preview is as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_12"
        self.ensure_dependency(dependency_test)

        # [L260] 3.8 Video Collage Designer > Start clip playback > After frame animation
        # with uuid("c240b30c-d5d9-4dbb-972f-6d687ee8fd9a") as case:
        with step('[Action] Set [Interclip] size to (16)'):
            # Set interclip size to 16
            video_collage_designer_page.border.set_interclip_value(16)

        with step('[Action] Set [Frame Animation] to (From Beginning)'):
            # Set frame animation to From Beginning
            video_collage_designer_page.border.set_frame_animation(index=0)

        with step('[Action] Set [Start clip playback] to (After frame animation)'):
            # Set (After frame animation)
            video_collage_designer_page.border.set_start_playback(1)

        with step('[Verify] Check preview is as GT'):
            video_collage_designer_page.set_timecode('00_00_01_29')

            # Verify Step:
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,
                                                 file_name=Auto_Ground_Truth_Folder + 'L260.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L260.png', current_preview)

            assert check_preview, "Preview is not correct as GT(L260.png)! Similary should>0.95"

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.canva
    @pytest.mark.duration_settings
    @pytest.mark.name('[test_video_collage_designer_func_12_14] Set [Duration Settings] to (9s)')
    @exception_screenshot
    def test_video_collage_designer_func_12_14(self):
        ''' 
        1. Enter [Duration Settings] window by right click on canva
        2. Set duration = 9s
        3. Reopen [Duration Settings] window by right click on canva
        4. Check duration is (9s)
        5. Press [Enter] key to leave [Duration Settings] window
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_13"
        self.ensure_dependency(dependency_test)

        # [L248] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Set duration
        # with uuid("57bbc6d9-bfd0-491b-a4a1-f6b5b7ab30a6") as case:

        with step('[Action] Enter [Duration Settings] window by right click on canva'):
            video_collage_designer_page.click_preview_operation('STOP')
            video_collage_designer_page.preview.enter_duration_setting_by_right_click_menu()

        with step('[Action] Set duration = 9s'):
            # set duration = 9s
            main_page.set_time_code(el_locator=L.main.duration_setting_dialog.txt_duration,duration='00_00_09_00')

        with step('[Action] Reopen [Duration Settings] window by right click on canva'):
            video_collage_designer_page.preview.enter_duration_setting_by_right_click_menu()
    
        with step('[Verify] Check duration is (9s)'):
            new_duration = main_page.exist(L.main.duration_setting_dialog.txt_duration)
            if not new_duration.AXValue == '00:00:09:00':
                assert False, f"Duration is not (9s)! Expected: 00:00:09:00, Actual: {new_duration.AXValue}"

        with step('[Action] Press [Enter] key to leave [Duration Settings] window'):
            main_page.press_enter_key()

        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.canva
    @pytest.mark.name('[test_video_collage_designer_func_12_15] Remove clip from slot by right click menu')
    @exception_screenshot
    def test_video_collage_designer_func_12_15(self):
        ''' 
        1. Remove clip from slot by right click menu
        2. Check preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_14"
        self.ensure_dependency(dependency_test)

        # [L252] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Remove clip from slot
        # with uuid("e272149d-73ff-419f-be46-df32f13e7aec") as case:
        with step('[Action] Remove clip from slot by right click menu'):
            before_deleted_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if not video_collage_designer_page.preview.remove_clip_on_preview_by_right_click_menu():
                assert False, "Cannot remove clip from slot by right click menu!"
        
        with step('[Verify] Check preview is changed'):
            time.sleep(DELAY_TIME*0.5) # wait preview changed
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(before_deleted_preview, current_preview, similarity=0.9999):
                assert False, "Preview did not change after remove clip from slot! Similary should<0.9999"
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.canva
    @pytest.mark.name('[test_video_collage_designer_func_12_16] Exchange slot media by dragging on preview')
    @exception_screenshot
    def test_video_collage_designer_func_12_16(self):
        ''' 
        1. Exchange slot media by dragging on preview
        2. Check preview is as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_15"
        self.ensure_dependency(dependency_test)
        # [L246] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Exchange slot media
        # with uuid("bbe3cfc9-06c2-45f8-9eab-a3c5a9bdd651") as case:

        with step('[Action] Exchange slot media by dragging on preview'):
            video_collage_designer_page.preview.exchange_media_by_drag_mouse_on_preview()
        
        with step('[Verify] Check preview is as GT'):
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,
                                                 file_name=Auto_Ground_Truth_Folder + 'L246.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L246.png', current_preview)

            assert check_preview, "Preview is not correct as GT(L246.png)! Similary should>0.95"

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.canva
    @pytest.mark.name('[test_video_collage_designer_func_12_17] Mute clip on preview')
    @exception_screenshot
    def test_video_collage_designer_func_12_17(self):
        ''' 
        1. Hover on Slot 3
        2. Check preview is as GT
        3. Click on Mute icon
        4. Check preview is changed after muted it
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_16"
        self.ensure_dependency(dependency_test)

        # [L250] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Mute/ un-mute
        # with uuid("63aa5fba-c432-4b8f-85c5-e125f457d1e2") as case:
        with step('[Action] Hover on Slot 3'):
            video_collage_designer_page.preview.hover_on_slot_with_layout_10(1, 0)

        with step('[Verify] Check preview is as GT'):
            # Verify Step:
            un_mute_icon_image = main_page.snapshot(locator=L.video_collage_designer.preview.btn_mute,
                                                 file_name=Auto_Ground_Truth_Folder + 'L250.png')
            if not main_page.compare(Ground_Truth_Folder + 'L250.png', un_mute_icon_image):
                assert False, "Preview is not correct as GT(L250.png)! Similary should>0.95"

        with step('[Action] Click on Mute icon'):
            main_page.click(L.video_collage_designer.preview.btn_mute)
            time.sleep(DELAY_TIME)

        with step('[Verify] Check preview is changed after muted it'):
            mute_icon_image = main_page.snapshot(locator=L.video_collage_designer.preview.btn_mute)
            if main_page.compare(mute_icon_image, un_mute_icon_image):
                assert False, "Preview did not change after muted it! Similary should<0.95"
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.import_media
    @pytest.mark.frame_animation
    @pytest.mark.start_clip_playback
    @pytest.mark.name('[test_video_collage_designer_func_12_18] Set [Start clip playback] to (With frame animation)')
    @exception_screenshot
    def test_video_collage_designer_func_12_18(self):
        ''' 
        1. Import media (Skateboard 03.mp4) and click auto fill
        2. Set [Start clip playback] to (With frame animation)
        3. Check preview is as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_17"
        self.ensure_dependency(dependency_test)

        # [L259] 3.8 Video Collage Designer > Start clip playback > With frame animation
        # with uuid("2c3ae0f3-5981-4f0a-ad2d-c5cf5f49ee80") as case:

        with step('[Action] Import media (Skateboard 03.mp4) and click auto fill'):
            # Add Skateboard 03.mp4 to Slot 4
            video_collage_designer_page.media.select_media('Skateboard 03.mp4')
            video_collage_designer_page.media.click_auto_fill()

        with step('[Action] Set [Start clip playback] to (With frame animation)'):
            # Set (With frame animation)
            video_collage_designer_page.border.set_start_playback(0)

        with step('[Verify] Check preview is as GT'):
            video_collage_designer_page.set_timecode('00_00_01_29')
            # Verify Step:
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,
                                                 file_name=Auto_Ground_Truth_Folder + 'L259.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L259.png', current_preview)

            assert check_preview, "Preview is not correct as GT(L259.png)! Similary should>0.95"

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.canva
    @pytest.mark.zoom
    @pytest.mark.name('[test_video_collage_designer_func_12_19] Check Zoom in/ Out functions show up when hover on the slot')
    @exception_screenshot
    def test_video_collage_designer_func_12_19(self):
        ''' 
        1. Hover on the slot
        2. Check Zoom in/ Out functions show up
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_18"
        self.ensure_dependency(dependency_test)

        # [L247] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Zoom Slider
        # with uuid("78bc1294-a79a-44e3-8857-783c1442ff48") as case:

        with step('[Action] Hover on the slot'):
            video_collage_designer_page.click_preview_operation('STOP') # enable modifications
            video_collage_designer_page.preview.hover_on_slot_with_layout_10(3, 0)
            
        with step('[Verify] Check Zoom in/ Out functions show up'):
            zoom_in_btn = main_page.exist(L.video_collage_designer.preview.btn_zoom_in)
            zoom_out_btn = main_page.exist(L.video_collage_designer.preview.btn_zoom_out)
            zoom_slider = main_page.exist(L.video_collage_designer.preview.slider_zoom)
            assert zoom_in_btn and zoom_out_btn and zoom_slider, f"Zoom in/ Out functions do not show up! Zoom in: {zoom_in_btn}, Zoom out: {zoom_out_btn}, Zoom slider: {zoom_slider}"
    
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.canva
    @pytest.mark.zoom
    @pytest.mark.name('[test_video_collage_designer_func_12_20] Zoom in by arrow')
    @exception_screenshot
    def test_video_collage_designer_func_12_20(self):
        ''' 
        1. Zoom in to (5) by arrow
        2. Check preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_19"
        self.ensure_dependency(dependency_test)

        with step('[Action] Click on Zoom In to 5 by arrow'):
            no_zoom_in_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            video_collage_designer_page.preview.zoom.zoom_in_by_arrow(times=5)
                
        with step('[Verify] Check preview is changed'):
            apply_zoom_in_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(no_zoom_in_preview, apply_zoom_in_preview, similarity=0.98):
                assert False, "Preview did not change after zoom in 5 times! Similary should<0.98"
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.canva
    @pytest.mark.zoom
    @pytest.mark.name('[test_video_collage_designer_func_12_21] Zoom out by slider')
    @exception_screenshot
    def test_video_collage_designer_func_12_21(self):
        ''' 
        1. Zoom out to (0) by slider
        2. Check preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_20"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Zoom to 0 by slider'):
            no_zoom_out_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            # Set zoom slider to (Zoom out)
            video_collage_designer_page.preview.zoom.zoom_by_slider(0)

        with step('[Verify] Check preview is changed'):
            apply_zoom_out_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(no_zoom_out_preview, apply_zoom_out_preview, similarity=0.98):
                assert False, "Preview did not change after zoom out to 0! Similary should<0.98"
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.trim
    @pytest.mark.in_position
    @pytest.mark.name('[test_video_collage_designer_func_12_22] Trim clip with (In Position)')
    @exception_screenshot
    def test_video_collage_designer_func_12_22(self):
        ''' 
        1. Open Trim window
        2. Set Trim (In Position) to 00:00:05:09
        3. Check Duration Time is changed to (00:00:05:27)
        4. Click [OK] to close trim window
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_21"
        self.ensure_dependency(dependency_test)

        # [L249] 3.8 Video Collage Designer > Edit in Tile (above 4 tiles) > Trim Video
        # with uuid("6531953b-b585-4c45-b250-8afa2a929835") as case:
        with step('[Action] Open Trim window'):
            video_collage_designer_page.preview.trim.open_trim_window()
        
        with step('[Action] Set Trim (In Position) to 00:00:05:09'):
            # Set (In Position) to 00;00;05;09
            precut_page.set_single_trim_precut_in_position('00_05_09')

        with step('[Verify] Check Duration Time is changed to (00:00:05:27)'):
            # Verify step: Get duration
            current_duration = precut_page.get_precut_single_trim_duration()
            if current_duration != '00:00:05:27':
                assert False, f"Duration Time is not (00:00:05:27)! Expected: 00:00:05:27, Actual: {current_duration}"
        
        with step('[Initial] Click [OK] to close trim window'):
            # click [OK] to close trim window
            precut_page.click_ok()
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.before_after_clip_playback
    @pytest.mark.color_board
    @pytest.mark.name('[test_video_collage_designer_func_12_23] Set [Before/ After Clip Playback] to (Display color board) and change color')
    @exception_screenshot
    def test_video_collage_designer_func_12_23(self):
        ''' 
        1. Set [Before/ After Clip Playback] to (Display color board)
        2. Set [Before/ After Clip Playback -- Color Board] color to (BE3400)
        3. Check preview is as GT
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_22"
        self.ensure_dependency(dependency_test)

        # [L262] 3.8 Video Collage Designer > Before/after clip playback > Display color board
        # with uuid("13847aea-4ede-4802-9b3f-0c308044aa69") as case:

        with step('[Action] Set [Before/ after clip playback] to (Display color board)'):
            # Scroll down to show (Before/after clip playback) settings
            video_collage_designer_page.border.set_scroll_bar(1)
            # Set Display color board
            video_collage_designer_page.border.set_before_after_clip_playback(1)

        with step('[Action] Set [Before/ After Clip Playback -- Color Board] color to (BE3400)'):
            # Set color
            video_collage_designer_page.border.set_before_after_color_board('BE3400')

        with step('[Verify] Check preview is as GT'):
            # Verify step:
            video_collage_designer_page.set_timecode('00_00_09_29')
            current_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,
                                                 file_name=Auto_Ground_Truth_Folder + 'L262.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L262.png', current_preview)
            assert check_preview, "Preview is not correct as GT(L262.png)! Similary should>0.95"

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.advanced_settings
    @pytest.mark.playback_timing
    @pytest.mark.timecode
    @pytest.mark.name('[test_video_collage_designer_func_12_24] Set [Playback timing] to (One after another) in Advanced Settings')
    @exception_screenshot
    def test_video_collage_designer_func_12_24(self):
        ''' 
        1. Enter Advanced Settings window
        2. Set [Playback timing] to (One after another)
        3. Click [OK] to close Advanced Settings window
        4. Check preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_23"
        self.ensure_dependency(dependency_test)

        # [L266] 3.8 Video Collage Designer > Advanced Settings > Playback timing > One after another
        # with uuid("f50cc40e-42c3-455e-8607-9b1802e32821") as case:

        with step('[Action] Enter Advanced Settings window'):
            video_collage_designer_page.set_timecode('00_00_04_29')
            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            video_collage_designer_page.click_preview_operation('STOP')
            # Click [Advanced Settings] button
            video_collage_designer_page.border.click_advanced_setting()
        
        with step('[Action] Set [Playback timing] to (One after another)'):
            # Set (One after another)
            video_collage_designer_page.border.advanced.set_playback_timing(2)

        with step('[Action] Click [OK] to close Advanced Settings window'):
            # Click [Advanced ok]
            video_collage_designer_page.border.advanced.click_ok()

        with step('[Verify] Check preview is changed'):
            # Verify step:
            video_collage_designer_page.set_timecode('00_00_04_29')
            after_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(after_apply_preview, before_apply_preview, similarity=0.98):
                assert False, "Preview did not change after set playback timing to One after another! Similary should<0.98"
            assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.timecode
    @pytest.mark.before_after_clip_playback
    @pytest.mark.name('[test_video_collage_designer_func_12_25] Set [Before/ after clip playback] to (Restart playback)')
    @exception_screenshot
    def test_video_collage_designer_func_12_25(self):
        ''' 
        1. Screenshot at (00:18) for further verification (locator=L.video_collage_designer.main_window)
        2. Set [Before/ after clip playback] to (Restart playback)
        3. Check preview is changed
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_24"
        self.ensure_dependency(dependency_test)

        # [L263] 3.8 Video Collage Designer > Before/after clip playback > Restart playback
        # with uuid("41e1f553-adaa-41ff-912a-91780fbe30ea") as case:
            #video_collage_designer_page.set_timecode('00_00_23_03')
        
        with step('[Action] Screenshot at (00:18) for further verification'):
            video_collage_designer_page.set_timecode('00_00_18_00')
            before_set_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            video_collage_designer_page.click_preview_operation('STOP')

        with step('[Action] Set [Before/ after clip playback] to (Restart playback)'):
            # Set Restart playback
            video_collage_designer_page.border.set_before_after_clip_playback(2)

        with step('[Verify] Check preview is changed'):
            # Verify step:
            video_collage_designer_page.set_timecode('00_00_18_00')
            after_set_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(before_set_preview, after_set_preview, similarity=0.98):
                assert False, "Preview did not change after set playback timing to Restart playback! Similary should<0.98"
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.timecode
    @pytest.mark.before_after_clip_playback
    @pytest.mark.name('[test_video_collage_designer_func_12_26] Set [Before/ after clip playback] to (Freeze)')
    @exception_screenshot
    def test_video_collage_designer_func_12_26(self):
        ''' 
        1. Set [Before/ after clip playback] to (Freeze)
        2. Check preview as GT at (00:18)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_25"
        self.ensure_dependency(dependency_test)

        # [L261] 3.8 Video Collage Designer > Before/after clip playback > Freeze
        # with uuid("3f20acc7-53cd-4fb9-abe5-a6f74ac92f01") as case:
        with step('[Action] Set [Before/ after clip playback] to (Freeze)'):
            video_collage_designer_page.click_preview_operation('STOP')
            # Set Freeze
            video_collage_designer_page.border.set_before_after_clip_playback(0)

        with step('[Verify] Check preview as GT at (00:18)'):
            # Verify step:
            video_collage_designer_page.set_timecode('00_00_18_00')

            after_freeze_preview = main_page.snapshot(locator=L.video_collage_designer.main_window,
                                             file_name=Auto_Ground_Truth_Folder + 'L261.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L261.png', after_freeze_preview)
            assert check_preview, "Preview is not correct as GT(L261.png)! Similary should>0.95"

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.timecode
    @pytest.mark.advanced_settings
    @pytest.mark.playback_timing
    @pytest.mark.name('[test_video_collage_designer_func_12_27] Set [Playback timing] to (One after another) in Advanced Settings')
    @exception_screenshot
    def test_video_collage_designer_func_12_27(self):
        ''' 
        1. ScreenShot at (07:00) for further verification (locator=L.video_collage_designer.main_window)
        2. Enter [Advanced Settings] window
        3. Set [Playback timing] to (One after another) in Advanced Settings
        4. Click [OK] to close Advanced Settings window
        5. Check preview is changed at (07:00)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_26"
        self.ensure_dependency(dependency_test)

        # [L264] 3.8 Video Collage Designer > Advanced Settings > Playback timing > All at once
        # with uuid("c8738608-13c3-42b0-a7d4-1dcfad025805") as case:

        with step('[Action] Screenshot at (07:00) for further verification (locator=L.video_collage_designer.main_window)'):
            video_collage_designer_page.click_preview_operation('STOP')
            video_collage_designer_page.set_timecode('00_00_07_00')
            before_apply_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            video_collage_designer_page.click_preview_operation('STOP')

        with step('[Action] Enter [Advanced Settings] window'):
            # Click [Advanced Settings] button
            video_collage_designer_page.border.click_advanced_setting()

        with step('[Action] Set [Playback timing] to (All at once)'):
            # Set (All at once)
            video_collage_designer_page.border.advanced.set_playback_timing(0)

        with step('[Action] Click [OK] to close Advanced Settings window'):
            # Click [Advanced ok]
            video_collage_designer_page.border.advanced.click_ok()

        with step('[Verify] Check preview is changed at (07:00)'):
            video_collage_designer_page.set_timecode('00_00_07_00')

            # Verify Step:
            all_at_once_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(before_apply_preview, all_at_once_preview, similarity=0.999):
                assert False, "Preview did not change after set playback timing to All at once! Similary should<0.999"
        assert True


    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.timecode
    @pytest.mark.advanced_settings
    @pytest.mark.playback_timing
    @pytest.mark.name('[test_video_collage_designer_func_12_28] Set [Playback timing] to (Delay 3 seconds) in Advanced Settings')
    @exception_screenshot
    def test_video_collage_designer_func_12_28(self):
        ''' 
        1. ScreenShot at (07:00) for further verification (locator=L.video_collage_designer.main_window)
        2. Enter [Advanced Settings] window
        3. Set [Playback timing] to (Delay 3 seconds) in Advanced Settings
        4. Click [OK] to close Advanced Settings window
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_27"
        self.ensure_dependency(dependency_test)

        # [L265] 3.8 Video Collage Designer > Advanced Settings > Playback timing > Delay three seconds
        # with uuid("8c66467f-082c-4788-9878-7e4cf92aa5c5") as case:
        with step('[Action] Screenshot at (07:00) for further verification (locator=L.video_collage_designer.main_window)'):
            all_at_once_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            video_collage_designer_page.click_preview_operation('STOP')

        with step('[Action] Enter [Advanced Settings] window'):
            # Click [Advanced Settings] button
            video_collage_designer_page.border.click_advanced_setting()

        with step('[Action] Set [Playback timing] to (Delay three seconds)'):
            # Set (Delay three seconds)
            video_collage_designer_page.border.advanced.set_playback_timing(1)
            time.sleep(DELAY_TIME*2)
            video_collage_designer_page.border.advanced.set_delay_sec(3)

        with step('[Action] Click [OK] to close Advanced Settings window'):
            # Click [Advanced ok]
            time.sleep(DELAY_TIME)
            video_collage_designer_page.border.advanced.click_ok()

        with step('[Verify] Check preview is changed at (07:00)'):
            # Verify step:
            time.sleep(DELAY_TIME)
            video_collage_designer_page.set_timecode('00_00_07_00')
            after_delay_3_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(all_at_once_preview, after_delay_3_preview, similarity=0.999):
                assert False, "Preview did not change after set playback timing to Delay three seconds! Similary should<0.999"
        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.timecode
    @pytest.mark.advanced_settings
    @pytest.mark.playback_timing
    @pytest.mark.name('[test_video_collage_designer_func_12_29] Set [Match collage duration to] to (Shortest Clip) and Verify Timecode')
    @exception_screenshot
    def test_video_collage_designer_func_12_29(self):
        ''' 
        1. Click [Stop] button and enter [Advanced Settings] window
        2. Set [Match collage duration to] to (Shortest Clip)(2)
        3. Click [OK] to close Advanced Settings window
        4. Set timecode to (00:00:10:30)
        5. Check timecode is (00:00:05:27)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_28"
        self.ensure_dependency(dependency_test)

        # [L269] 3.8 Video Collage Designer > Advanced Settings > Match collage duration to > Shortest Clip
        # with uuid("c425f63d-e7f7-4a78-a05b-a488a0b84ca8") as case:

        with step('[Action] Click [Stop] button and enter [Advanced Settings] window'):
            video_collage_designer_page.click_preview_operation('STOP')
            video_collage_designer_page.border.click_advanced_setting()

        with step('[Action] Set [Match collage duration to] to (Shortest Clip)(2)'):
            video_collage_designer_page.border.advanced.set_match_collage_duration_to(2)

        with step('[Action] Click [OK] to close Advanced Settings window'):
            video_collage_designer_page.border.advanced.click_ok()

        with step('[Action] Set timecode to (00:00:10:30)'):
            time.sleep(DELAY_TIME)
            video_collage_designer_page.set_timecode('00_00_10_30')

        with step('[Verify] Check timecode is (00:00:05:27)'):
            timecode = main_page.exist(L.video_collage_designer.time_code).AXValue
            if timecode != '00:00:05:27':
                assert False, f"Timecode is not at ('00:00:05:27'), Expected: 00:00:05:27, Actual: {timecode}"

        assert True

    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.timecode
    @pytest.mark.advanced_settings
    @pytest.mark.match_collage_duration_to
    @pytest.mark.name('[test_video_collage_designer_func_12_30] Set [Match collage duration to] (Clip 3) and verify timecode adjustment')
    @exception_screenshot
    def test_video_collage_designer_func_12_30(self):
        '''
        1. Click [Stop] button and Click [Advanced Settings] button
        2. Set [Match collage duration to] to (Clip 3)(5)
        3. Click [OK] to close Advanced Settings window
        4. Set timecode to (00:00:18:10)
        5. Check timecode is (00:00:13:00)
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_29"
        self.ensure_dependency(dependency_test)
        
        # [L270] 3.8 Video Collage Designer > Advanced Settings > Match collage duration to > Clip N
        # with uuid("df6edb35-12ab-45c4-9f3b-4f0cf1044bde") as case:

        with step("Click [Stop] button and Click [Advanced Settings] button"):
            video_collage_designer_page.click_preview_operation("Stop")
            video_collage_designer_page.border.click_advanced_setting()

        with step("Set [Match collage duration to] to (Clip 3)(5)"):
            video_collage_designer_page.border.advanced.set_match_collage_duration_to(5)

        with step("Click [OK] to close Advanced Settings window"):
            video_collage_designer_page.border.advanced.click_ok()

        with step("Set timecode to (00:00:18:10)"):
            video_collage_designer_page.set_timecode("00_00_18_10")
        with step("Check timecode is (00:00:13:00)"):
            current_timecode = video_collage_designer_page.get_timecode()
            if current_timecode != "00:00:13:00":
                assert False, f"Timecode is incorrect! Expected: 00:00:13:00, Actual: {current_timecode}"
        assert True

    @exception_screenshot
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.advanced_settings
    @pytest.mark.playback_timing
    @pytest.mark.match_collage_duration_to
    @pytest.mark.timecode
    @pytest.mark.name('[test_video_collage_designer_func_12_31] Set [Match collage duration] to (Longest Clip) & [Playback Timing - Delay Time] to (1)')
    def test_video_collage_designer_func_12_31(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Stop] button and Click [Advanced Settings] button
        2. Set [Match collage duration to] to (Longest Clip)(1)
        3. Set [Playback Timing - Delay Time] to (1)
        4. Click [OK] to close Advanced Settings window
        5. Set timecode to (00:00:18:29)
        6. Check timecode is (00:00:11:00)
        """
        # # [L268] 3.8 Video Collage Designer > Advanced Settings > Match collage duration to > Longest
        # with uuid("b0f2b7b4-15cc-4b14-85e4-a932883c3de9") as case:

        # Step 0: Ensure dependency test is run and passed
        dependency_test = "test_video_collage_designer_func_12_30"
        self.ensure_dependency(dependency_test)
        
        # Step 1: Click [Stop] button and [Advanced Settings] button
        with step('[Action] Click [Stop] button and [Advanced Settings] button'):
            video_collage_designer_page.click_preview_operation('STOP')
            video_collage_designer_page.border.click_advanced_setting()
        
        # Step 2: Set [Match collage duration to] to (Longest Clip)(1)
        with step('[Action] Set [Match collage duration to] to (Longest Clip)'):
            video_collage_designer_page.border.advanced.set_match_collage_duration_to(1)
        
        # Step 3: Set [Playback Timing - Delay Time] to (1)
        with step('[Action] Set [Playback Timing - Delay Time] to (1)'):
            video_collage_designer_page.border.advanced.set_delay_sec(1)
        
        # Step 4: Click [OK] to close Advanced Settings window
        with step('[Action] Click [OK] to close Advanced Settings window'):
            video_collage_designer_page.border.advanced.click_ok()
        
        # Step 5: Set timecode to (00:00:18:29)
        with step('[Action] Set timecode to (00:00:18:29)'):
            video_collage_designer_page.set_timecode('00_00_18_29')
        
        # Step 6: Check timecode is (00:00:11:00)
        with step('[Verify] Check timecode is (00:00:11:00)'):
            current_timecode = video_collage_designer_page.get_timecode()
            if current_timecode != '00:00:11:00':
                assert False, f"Expected timecode '00:00:11:00', but got {current_timecode}"
        
        assert True
        
    @exception_screenshot
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.advanced_settings
    @pytest.mark.timecode
    @pytest.mark.name('[test_video_collage_designer_func_12_32] Set [Match collage duration] to (All Video) & check timecode')
    def test_video_collage_designer_func_12_32(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Stop] button and Click [Advanced Settings] button
        2. Set [Match collage duration to] to (All Video)(0)
        3. Click [OK] to close Advanced Settings window
        4. Set timecode to (00:00:18:29)
        5. Check timecode is (00:00:13:00)
        """
        dependency_test = "test_video_collage_designer_func_12_31"
        self.ensure_dependency(dependency_test)


        # [L267] 3.8 Video Collage Designer > Advanced Settings > Match collage duration to > All Videos
        # with uuid("dd2c1071-c8ba-4f9a-a76f-7c0ba43c966b") as case:

        with step('[Action] Click [Stop] button and [Advanced Settings] button'):
            video_collage_designer_page.click_preview_operation('STOP')
            video_collage_designer_page.border.click_advanced_setting()

        with step('[Action] Set [Match collage duration to] to (All Video)'):
            video_collage_designer_page.border.advanced.set_match_collage_duration_to(0)

        with step('[Action] Click [OK] to close Advanced Settings window'):
            video_collage_designer_page.border.advanced.click_ok()

        with step('[Action] Set timecode to (00:00:18:29)'):
            video_collage_designer_page.set_timecode('00_00_18_29')

        with step('[Verify] Check timecode is (00:00:13:00)'):
            current_timecode = video_collage_designer_page.get_timecode()
            if current_timecode != '00:00:13:00':
                assert False, f"Timecode is not correct! Expected: 00:00:13:00, Actual: {current_timecode}"

        assert True


    @exception_screenshot
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.name('[test_video_collage_designer_func_12_33] Check preview is as GT (L267.png)')
    def test_video_collage_designer_func_12_33(self):
        """
        0. Ensure the dependency test is run and passed
        1. screenshot (locator=L.video_collage_designer.main_window)
        2. Check preview is as GT (L267.png) (similarity=0.95)
        """
        dependency_test = "test_video_collage_designer_func_12_32"
        self.ensure_dependency(dependency_test)

        with step('[Action] Screenshot (locator=L.video_collage_designer.main_window)'):
            current_preview = main_page.snapshot(
                locator=L.video_collage_designer.main_window,
                file_name=Auto_Ground_Truth_Folder + 'L267.png'
            )

        with step('[Verify] Check preview is as GT (L267.png)'):
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L267.png',
                current_preview,
                similarity=0.95
            )
            assert check_preview, "Preview does not match Ground Truth (L267.png)! Similarity should be >0.95"



    @exception_screenshot
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.name('[test_video_collage_designer_func_12_34] Check preview is as GT (L271.png) at (00:00:08:05)')
    def test_video_collage_designer_func_12_34(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Stop] button and set timecode to (00:00:08:05)
        2. Check preview is as GT (L271.png)
        """
        # [L271] 3.8 Video Collage Designer > [Preview] in designer
        # with uuid("b47f849f-5fae-4bab-8b57-595bb7f6e2aa") as case:

        dependency_test = "test_video_collage_designer_func_12_33"
        self.ensure_dependency(dependency_test)

        with step('[Action] Click [Stop] button and set timecode to (00:00:08:05)'):
            video_collage_designer_page.click_preview_operation('STOP')
            video_collage_designer_page.set_timecode('00_00_08_05')

        with step('[Verify] Check preview is as GT (L271.png)'):
            current_preview = main_page.snapshot(
                locator=L.video_collage_designer.main_window,
                file_name=Auto_Ground_Truth_Folder + 'L271.png'
            )
            is_preview_correct = main_page.compare(
                Ground_Truth_Folder + 'L271.png',
                current_preview,
                similarity=0.95
            )
            if not is_preview_correct:
                assert False, "Preview does not match Ground Truth (L271.png)! Similarity should be >0.95"

        assert True

    @exception_screenshot
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.save_template
    @pytest.mark.name('[test_video_collage_designer_func_12_35] Save As custom layout')
    def test_video_collage_designer_func_12_35(self):
        """
        0. Ensure the dependency test is run and passed
        1. Save As the custom layout with name (video_collage_custom_test)
        2. Screenshot (locator=L.video_collage_designer.layout.frame) and compare with GT (L272.png)
        """
        # [L272] 3.8 Video Collage Designer > Advanced Settings > [Save as] Video Collage layout
        # with uuid("7a264c7c-3140-489d-960b-38f2bf42a0c6") as case:

        dependency_test = "test_video_collage_designer_func_12_34"
        self.ensure_dependency(dependency_test)

        with step('[Action] Save As the custom layout with name (video_collage_custom_test)'):
            video_collage_designer_page.click_save_as_with_name("video_collage_custom_test")

        with step('[Verify] Screenshot layout frame and compare with GT (L272.png)'):
            current_layout = main_page.snapshot(
                locator=L.video_collage_designer.layout.frame,
                file_name=Auto_Ground_Truth_Folder + 'L272.png'
            )
            is_layout_correct = main_page.compare(
                Ground_Truth_Folder + 'L272.png',
                current_layout,
                similarity=0.95
            )
            if not is_layout_correct:
                # Similarity should be greater than 0.95
                assert False, "layout preview does not match GT (L272.png)! Similarity should > 0.95"

        assert True


    @exception_screenshot
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.layout
    @pytest.mark.name('[test_video_collage_designer_func_12_36] Set layout to another and back to original one')
    def test_video_collage_designer_func_12_36(self):
        """
        0. Ensure the dependency test is run and passed
        1. Screenshot current preview (locator=L.video_collage_designer.main_window)
        2. Set layout to 13th (index=13)
        3. Check if the preview is updated (similarity=0.95)
        4. Set layout to 1st (index=1)
        5. Check if the preview is updated (similarity=0.95)
        6. Check if the preview is the same as the first screenshot (similarity=0.99)
        """
        dependency_test = "test_video_collage_designer_func_12_35"
        self.ensure_dependency(dependency_test)

        with step('[Action] Screenshot current preview (locator=L.video_collage_designer.main_window)'):
            initial_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)

        with step('[Action] Set layout to 13th (index=13)'):
            video_collage_designer_page.layout.select_layout(13)

        with step('[Verify] Check if the preview is updated after setting layout to 13'):
            preview_after_13 = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(initial_preview, preview_after_13, similarity=0.95):
                # Similarity should be less than 0.95 when preview is updated
                assert False, "Preview did not update after setting layout to 13! Similarity should < 0.95"

        with step('[Action] Set layout to 1st (index=1)'):
            video_collage_designer_page.layout.select_layout(1)

        with step('[Verify] Check if the preview is updated after setting layout to 1'):
            preview_after_1 = main_page.snapshot(locator=L.video_collage_designer.main_window)
            if main_page.compare(preview_after_13, preview_after_1, similarity=0.95):
                # Similarity should be less than 0.95 when preview is updated
                assert False, "Preview did not update after setting layout to 1! Similarity should < 0.95"

        with step('[Verify] Check if the preview is the same as the initial preview'):
            if not main_page.compare(initial_preview, preview_after_1, similarity=0.99):
                # Similarity should be greater than 0.99 for matching preview
                assert False, "Final preview does not match the initial preview! Similarity should > 0.99"

        assert True

    @exception_screenshot
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.cyberlink_cloud
    @pytest.mark.dz
    @pytest.mark.save_template
    @pytest.mark.shared_template
    @pytest.mark.name('[test_video_collage_designer_func_12_37] Share to DZ with name (test_video_collage) and check upload result')
    def test_video_collage_designer_func_12_37(self):
        """
        0. Ensure the dependency test is run and passed
        1. Share to DZ with name (test_video_collage) and check upload result
        """
        # [L273] 3.8 Video Collage Designer > [Share] template online
        # with uuid("c956d061-593c-439f-84c8-a9222942b172") as case:

        dependency_test = "test_video_collage_designer_func_12_36"
        self.ensure_dependency(dependency_test)

        with step('[Action] Share to DZ with name (test_video_collage) and check upload result'):
            upload_result = video_collage_designer_page.share_to_dz("test_video_collage")
            if not upload_result:
                assert False, "Share to DZ failed! Upload result is false."

        # current_L273_preview = main_page.snapshot(locator=L.video_collage_designer.main_window)
        # logger(current_L273_preview)

        assert True

    @exception_screenshot
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.save_template
    @pytest.mark.canva
    @pytest.mark.name('[test_video_collage_designer_func_12_38] Check Preview on main program')
    def test_video_collage_designer_func_12_38(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [OK] to leave [video collage designer] window
        2. Screenshot (locator=L.base.Area.preview.only_mtk_view) at 0s and compare with GT (L274_0sec.png)(similarity=0.9)
        3. Set timecode at (00:00:09:00)
        4. Screenshot (locator=L.base.Area.preview.only_mtk_view) at 9s and compare with GT (L274_9sec.png)(similarity=0.9)
        """
        dependency_test = "test_video_collage_designer_func_12_37"
        self.ensure_dependency(dependency_test)

        with step('[Action] Click [OK] to leave [video collage designer] window'):
            video_collage_designer_page.click_ok()

        with step('[Verify] Screenshot preview at 0s and compare with GT (L274_0sec.png)'):
            preview_0s = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L274_0sec.png'
            )
            check_preview_0s = main_page.compare(
                Ground_Truth_Folder + 'L274_0sec.png',
                preview_0s,
                similarity=0.9
            )
            if not check_preview_0s:
                # Similarity should be greater than 0.9
                assert False, "Preview at 0s does not match GT (L274_0sec.png)! Similarity should > 0.9"

        with step('[Action] Set timecode at (00:00:09:00)'):
            main_page.set_timeline_timecode('00_00_09_00')

        with step('[Verify] Screenshot preview at 9s and compare with GT (L274_9sec.png)'):
            preview_9s = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L274_9sec.png'
            )
            check_preview_9s = main_page.compare(
                Ground_Truth_Folder + 'L274_9sec.png',
                preview_9s,
                similarity=0.9
            )
            if not check_preview_9s:
                # Similarity should be greater than 0.9
                assert False, "Preview at 9s does not match GT (L274_9sec.png)! Similarity should > 0.9"

        assert True


    @exception_screenshot
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.saved_template
    @pytest.mark.name('[test_video_collage_designer_func_12_39] Remove custom templates and check preview change')
    def test_video_collage_designer_func_12_39(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Video Collage] button in [Tips Area]
        2. Check if [Video Collage Designer] is opened
        3. Screenshot (locator=L.video_collage_designer.main_window)
        4. Remove 2 custom templates by selecting layout (1) > right-click menu > delete ('Delete (only for Custom/Downloaded)') > click [Yes]
        5. Check preview is changed
        """
        # [L275] 3.8 Video Collage Designer > Back to Designer from tips area [Video Collage] button
        # with uuid("39a7ac17-ade8-4e8f-b87f-b0ff4cb815bd") as case:

        dependency_test = "test_video_collage_designer_func_12_38"
        self.ensure_dependency(dependency_test)

        with step('[Action] Click [Video Collage] button in [Tips Area]'):
            tips_area_page.click_TipsArea_btn_VideoCollage()
            
        with step('[Verify] Check if [Video Collage Designer] window is opened'):
            if not video_collage_designer_page.check_window_opened():
                assert False, "[Video Collage Designer] window did not open!"

        with step('[Action] Take initial screenshot of main window'):
            before_removal = main_page.snapshot(
                locator=L.video_collage_designer.main_window,
                file_name=Auto_Ground_Truth_Folder + 'before_removal.png'
            )

        with step('[Action] Remove 2 custom templates'):
            for _ in range(2):
                # Select layout 1 (assumed to be the custom template layout)
                video_collage_designer_page.layout.select_layout(1)
                main_page.right_click()
                # Remove first custom template via right-click menu and confirm deletion
                main_page.select_right_click_menu('Delete (only for Custom/Downloaded)')
                video_collage_designer_page.layout.click_remove_yes()


        with step('[Verify] Check preview is changed after template removal'):
            after_removal = main_page.snapshot(
                locator=L.video_collage_designer.main_window,
                file_name=Auto_Ground_Truth_Folder + 'after_removal.png'
            )
            # Expect preview to change, so similarity should be less than 0.99
            if main_page.compare(before_removal, after_removal, similarity=0.99):
                assert False, "Preview did not change after removal! Similarity should < 0.99"

        assert True


    @exception_screenshot
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.save_project
    @pytest.mark.name('[test_video_collage_designer_func_12_40] Pack project material and check result')
    def test_video_collage_designer_func_12_40(self):
        """
        0. Ensure the dependency test is run and passed
        1. Pack project material (Test_Material_Folder + 'BFT_21_Stage1/test_video_collage_designer_func_12_40/') and check result
        """
        dependency_test = "test_video_collage_designer_func_12_39"
        self.ensure_dependency(dependency_test)
        
        with step('[Action] Pack project material and check result'):
            pack_result = main_page.top_menu_bar_file_pack_project_materials(
                Test_Material_Folder + 'BFT_21_Stage1/test_video_collage_designer_func_12_40/'
            )
            if not pack_result:
                assert False, "Pack project material failed!"
        
            # wait pack project processing ready
            time.sleep(DELAY_TIME * 5)

        assert True

    @exception_screenshot
    @pytest.mark.video_collage_designer_func
    @pytest.mark.video_collage_designer
    @pytest.mark.launch
    @pytest.mark.name('[test_video_collage_designer_func_12_41] Check media "Mahoroba.mp3" is available in the library after app restart')
    def test_video_collage_designer_func_12_41(self):
        """
        0. Ensure the dependency test is run and passed
        1. Close and restart the app
        2. Check if the media (Mahoroba.mp3) is available in the library
        """
        dependency_test = "test_video_collage_designer_func_12_40"
        self.ensure_dependency(dependency_test)
        
        # [L277] 3.8 Video Collage Designer > Re-launch PDR
        # with uuid("ab28eca5-7ac6-451d-953a-ced27c3579e3") as case:

        with step('[Action] Close and restart the app'):
            main_page.close_and_restart_app()
        
        with step('[Verify] Check if media "Mahoroba.mp3" is available in the library'):
            # Search for the media "Mahoroba.mp3" in the library
            media_found = main_page.select_library_icon_view_media("Mahoroba.mp3")
            if not media_found:
                assert False, 'Media "Mahoroba.mp3" is not available in the library!'
        
        assert True



    @pytest.mark.produce_func
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.import_media
    @pytest.mark.timecode
    @pytest.mark.name('[test_produce_func_13_1] Open Recent Project')
    @exception_screenshot
    def test_produce_func_13_1(self):
        '''
        1. Start App
        2. Open recent packed project from top menu
        3. Click [Browse] on [Missing Dialog] and select file
        4. Set timecode to (00:00:11:23)
        5. Screenshot and compare with GT (similarity=0.9)
        '''
        # [L389] 5. Produce > Open Recent project
        # with uuid("4cc570a7-5122-4edc-880b-1bc832bd6a40") as case:

        with step('[Action] Start App'):
            main_page.start_app()

        with step('[Action] Open recent packed project from top menu'):
            self.open_packed_project('Packed_Project/test_produce_func_13_1.pdk', 'test_produce_func_13_1')

        with step('[Action] Click [Browse] on [Missing Dialog] and select file'):
            project_new_page.open_project.file_missing.click_browse()
            main_page.select_file(Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png')
            time.sleep(DELAY_TIME*2)

        with step('[Action] Set timecode to (00:00:11:23)'):
            main_page.set_timeline_timecode('00_00_11_23')
            main_page.set_timeline_timecode('00_00_11_23')
            time.sleep(DELAY_TIME*0.5)

        with step('[Action] Screenshot and compare with GT (similarity=0.9)'):
            screenshot_path = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L389.png')
            comparison_result = main_page.compare(screenshot_path, Ground_Truth_Folder + 'L389.png', similarity=0.9)
            if comparison_result < 0.9:
                assert False, f"Similarity is below the expected value. Expected > 0.9, but got {comparison_result}"
        assert True

    @pytest.mark.produce_func
    @pytest.mark.name('[test_produce_func_13_2] Verify Produce Page and File Extension Selection')
    @exception_screenshot
    def test_produce_func_13_2(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Click [Produce] Button and Check Enter [Produce] Page
        2. Select [File Extenstion] to (m2ts)
        3. Check if the selected file extension is (M2TS)
        '''
        # 確保依賴測試已經執行並且通過
        dependency_test = "test_produce_func_13_1"
        self.ensure_dependency(dependency_test)

        # [L390] 5. Produce > H.264 AVC > Format : M2TS
        # with uuid("96a3cc91-a4f0-40ea-a95c-92238604beca") as case:

        with step('[Action] Click [Produce] Button and Check Enter [Produce] Page'):
            main_page.click_produce()
            if not produce_page.check_enter_produce_page():
                assert False, "[Produce] Page did not open!"

        with step('[Action] Select [File Extension] to (m2ts)'):
            produce_page.local.select_file_extension('m2ts')

        with step('[Verify] Check if the selected file extension is (M2TS)'):
            selected_extension = main_page.exist(L.produce.local.cbx_file_extension).AXTitle
            if selected_extension != 'M2TS':
                assert False, f"File extension is not correct! Expected: M2TS, Actual: {selected_extension}"

        assert True

    @pytest.mark.produce_func
    @pytest.mark.produce_page
    @pytest.mark.profile_name
    @pytest.mark.name('[test_produce_func_13_3] Set [Profile Name]')
    @exception_screenshot
    def test_produce_func_13_3(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Select profile name to (AVC 1280 x 720/24p (16 Mbps))(3)
        2. Check profile name is (AVC 1280 x 720/24p (16 Mbps))
        '''
        dependency_test = "test_produce_func_13_2"
        self.ensure_dependency(dependency_test)

        # [L391] 5. Produce > H.264 > Format : 1280x720/24p
        # with uuid("88eaa322-c562-42ae-aa49-9546031d7ab7") as case:

        with step('[Action] Select profile name to (AVC 1280 x 720/24p (16 Mbps))'):
            produce_page.local.select_profile_name(3)

        with step('[Verify] Check profile name is (AVC 1280 x 720/24p (16 Mbps))'):
            current_profile = produce_page.local.get_profile_name()
            assert current_profile == "AVC 1280 x 720/24p (16 Mbps)", \
                f"Profile name mismatch! Expected: AVC 1280 x 720/24p (16 Mbps), Got: {current_profile}"

        # Get produced file name
        self.exported_file = produce_page.get_produced_filename()

        assert True


    @pytest.mark.produce_func
    @pytest.mark.produce
    @pytest.mark.fast_video_rendering
    @pytest.mark.name('[test_produce_func_13_4] Set and check Fast Video Rendering Technology to Hardware')
    @exception_screenshot
    def test_produce_func_13_4(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Set [Fast Video Rendering Technology] to (Hardware)
        2. Check if the [Fast Video Rendering Technology] is set to (Hardware)
        '''
        
        dependency_test = "test_produce_func_13_3"
        self.ensure_dependency(dependency_test)

        # [L392] 5. Produce > H.264 > Select encode type (HW)
        # with uuid("f59de452-91d4-44c6-967e-f20638dbfe2f") as case:

        with step('[Action] Set [Fast Video Rendering Technology] to (Hardware)'):
            produce_page.local.set_fast_video_rendering_hardware_encode()

        with step('[Verify] Check if the [Fast Video Rendering Technology] is set to (Hardware)'):
            status = produce_page.local.get_fast_video_rendering_hardware_encode_status()
            assert status, f"Expected Fast Video Rendering Technology to be True, but got {status}"

        assert True

    @pytest.mark.produce_func
    @pytest.mark.produce
    @pytest.mark.check_upload_copy_to_cl
    @pytest.mark.name('[test_produce_func_13_5] Enable [Check Upload Copy to CyberLink Cloud]')
    @exception_screenshot
    def test_produce_func_13_5(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Set [Check Upload Copy to CyberLink Cloud] to (Yes)(1)
        2. Check if the [Check Upload Copy to CyberLink Cloud] is set to (Yes)(True)
        '''
        dependency_test = "test_produce_func_13_4"
        self.ensure_dependency(dependency_test)

        # [L393] 5. Produce > H.264 > Upload a copy to Cloud
        # with uuid("d3b1d266-84a5-4c43-9c48-5d73b14f6fd1") as case:

        with step('[Action] Set [Check Upload Copy to CyberLink Cloud] to (Yes)'):
            produce_page.local.set_check_upload_copy_to_cyberlink_cloud(is_check=1)

        with step('[Verify] Check if the [Check Upload Copy to CyberLink Cloud] is set to (Yes)'):
            status = produce_page.local.check_visible_upload_copy_to_cyberlink_cloud()
            assert status, f"Upload Copy to CyberLink Cloud setting is not enabled as expected! Expected: True, Got: {status}"

        assert True


    @pytest.mark.produce_func
    @pytest.mark.produce
    @pytest.mark.timecode
    @pytest.mark.name('[test_produce_func_13_6] Set [timecode] to (last frame)')
    @exception_screenshot
    def test_produce_func_13_6(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Set timecode to last frame (00:00:50:00)
        2. Check if the timecode is set to (00:00:32:00)
        '''
        dependency_test = "test_produce_func_13_5"
        self.ensure_dependency(dependency_test)

        # [L394] 5. Produce > H.264 > Start [Produce] w/ handle (Convert to MP4 = No)
        # with uuid("7849c8fe-7f00-4830-a9a3-bf15ffc129da") as case:

        with step('[Action] Set timecode to last frame (00:00:50:00)'):
            produce_page.local.set_preview_timecode('00_00_50_00')

        with step('[Verify] Check if the timecode is set to (00:00:32:00)'):
            current_timecode = produce_page.get_preview_timecode()
            if current_timecode != '00:00:32:00':
                assert False, f"Timecode is not correct! Expected: 00:00:32:00, Actual: {current_timecode}"

        assert True

    @pytest.mark.produce_func
    @pytest.mark.name('[test_produce_func_13_7] Start produce and verify completion within 60 seconds')
    @exception_screenshot
    def test_produce_func_13_7(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Click [Start] Button to start produce
        2. Click (No)(0) on [Convert CyberLink Cloud Copy to MP4] dialog
        3. Check if the produce is complete in 60 seconds
        '''
        dependency_test = "test_produce_func_13_6"
        self.ensure_dependency(dependency_test)

        with step('[Action] Click [Start] Button to start produce'):
            produce_page.exist_click(L.produce.btn_start_produce)

        with step('[Action] Click (No) on [Convert CyberLink Cloud Copy to MP4] dialog'):
            produce_page.local.click_option_convert_cyberlink_cloud_copy_to_mp4_dialog(option=0)

        with step('[Verify] Check if the produce is complete in 60 seconds'):
            if not produce_page.check_produce_complete():
                assert False,  "Produce is not complete within 60 seconds"

        assert True

    @pytest.mark.produce_func
    @pytest.mark.produce
    @pytest.mark.search_library
    @pytest.mark.name('[test_produce_func_13_8] Check Produced media show in library and able to select')
    @exception_screenshot
    def test_produce_func_13_8(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Check [Back] button show on [Produce] page after produce complete in (40) secs
        2. Click [Back] button on [Produce] page after produce complete
        3. Check able to Select media by library icon view with self.exported_file
        '''
        dependency_test = "test_produce_func_13_7"
        self.ensure_dependency(dependency_test)

        with step('[Verify] Check [Back] button show on [Produce] page after produce complete in (40) secs'):
            for _ in range(40):
                back_btn = main_page.exist(L.produce.btn_back_to_edit_after_upload_cl)
                if back_btn:
                    break
                else:
                    time.sleep(DELAY_TIME)
            if not back_btn:
                assert False, "Back button did not show up on [Produce] page after produce complete!"

        with step('[Action] Click [Back] button on [Produce] page after produce complete'):
            produce_page.local.click_back_btn_on_produce_page_after_upload()

        with step('[Verify] Check able to select media by library icon view with self.exported_file'):
            main_page.select_library_icon_view_media(self.exported_file) # will excpetion if not found
                
        assert True



    
    @pytest.mark.produce_func
    @pytest.mark.import_media
    @pytest.mark.cyberlink_cloud
    @pytest.mark.produced_media
    @pytest.mark.name('[test_produce_func_13_9] Import and remove downloaded media then verify preview change')
    @exception_screenshot
    def test_produce_func_13_9(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Import media from CyberLink Cloud
        2. Select content in folder level (folder_index=0, click_times=2)
        3. Input text in search library ({self.exported_file})
        4. Tap [Select All] button
        5. Check if the [Remove] button is enabled (True)
        6. Screenshot (L.import_downloaded_media_from_cl.downloaded_media_window)
        7. Tap [Remove] button
        8. Check if preview changed
        9. Close [Downloaded Media] Window
        '''
        dependency_test = "test_produce_func_13_8"
        self.ensure_dependency(dependency_test)

        with step('[Action] Import media from CyberLink Cloud'):
            media_room_page.import_media_from_cyberlink_cloud()

        with step('[Action] Select content in folder level (folder_index=0, click_times=2)'):
            import_media_from_cloud_page.select_content_in_folder_level(folder_index=0, click_times=2)

        with step('[Action] Input text in search library ({self.exported_file})'):
            import_media_from_cloud_page.input_text_in_seacrh_library(self.exported_file)

        with step('[Action] Tap [Select All] button'):
            import_media_from_cloud_page.tap_select_deselect_all_btn()

        with step('[Verify] Check if the [Remove] button is enabled (True)'):
            remove_status = import_media_from_cloud_page.get_remove_btn_status()
            assert remove_status is True, "Remove button is not enabled as expected"

        with step('[Action] Capture preview before removal'):
            preview_before = main_page.snapshot(locator=L.import_downloaded_media_from_cl.downloaded_media_window)

        with step('[Action] Tap [Remove] button'):
            import_media_from_cloud_page.tap_remove_btn()

        with step('[Verify] Check if preview changed'):
            preview_after = main_page.snapshot(locator=L.import_downloaded_media_from_cl.downloaded_media_window)
            if main_page.compare(preview_before, preview_after, similarity=0.98):
                # Similarity should be less than 0.95 after removal
                assert False, "Preview did not change after removal! Similarity should < 0.98"

        with step('[Action] Close [Downloaded Media] Window'):
            import_media_from_cloud_page.close_download_media_window()

        assert True

    @pytest.mark.produce_func
    @pytest.mark.play_video
    @pytest.mark.produced_media
    @pytest.mark.name('[test_produce_func_13_10] Play Produced video')
    @exception_screenshot
    def test_produce_func_13_10(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Select media (self.exported_file) by library icon view
        2. Click [Play] button in playback window
        3. Check if the preview window is different when playing in (area=L.base.Area.preview.main, sec=5)
        4. Click [Stop] button in playback window
        '''
        dependency_test = "test_produce_func_13_9"
        self.ensure_dependency(dependency_test)
        
        # [L395] 5. Produce > Playback produced clip
        # with uuid("5143f3c6-d5a5-4414-90ff-f4bdb3722454") as case:

        with step('[Action] Select media by library icon view'):
            main_page.select_library_icon_view_media(self.exported_file)

        with step('[Action] Click Play button in playback window'):
            playback_window_page.Edit_Timeline_PreviewOperation('Play')

        with step('[Verify] Check if preview window is different when playing'):
            preview_changed = main_page.Check_PreviewWindow_is_different(area=L.base.Area.preview.main, sec=5)
            if not preview_changed:
                # Similarity should be > expected threshold
                assert False, "Preview is not updated when playing video in 5 secs!"

        with step('[Action] Click Stop button in playback window'):
            playback_window_page.Edit_Timeline_PreviewOperation('stop')

        assert True

    @pytest.mark.produce_func
    @pytest.mark.produced_media
    @pytest.mark.name('[test_produce_func_13_11] Set timecode, compare preview, and move clip to trash')
    @exception_screenshot
    def test_produce_func_13_11(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Set timecode to (00:00:11:23)
        2. Screenshot (locator=main_page.area.preview.main) and compare with GT (L389.png) (similarity=0.93)
        3. Select media (self.exported_file) by library icon view and Move clip in library to trash can
        '''
        dependency_test = "test_produce_func_13_10"
        self.ensure_dependency(dependency_test)
        

        with step('[Action] Set timecode to (00:00:11:23)'):
            main_page.set_timeline_timecode('00_00_11_23')

        with step('[Verify] Screenshot preview and compare with GT (L389.png)'):
            preview_snapshot = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L389.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L389.png', preview_snapshot, similarity=0.93)
            if not check_preview:
                # Similarity should be greater than 0.93
                assert False, "Preview does not match GT (L389.png)! Similarity should > 0.93"

        with step('[Action] Select media and move clip to trash can'):
            main_page.select_library_icon_view_media(self.exported_file)
            media_room_page.library_clip_context_menu_move_to_trash_can()

        assert True


    @pytest.mark.produce_func
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.timecode
    @pytest.mark.name("[test_produce_func_13_12] Verify preview match after opening packed project and setting timecode")
    @exception_screenshot
    def test_produce_func_13_12(self):
        '''
        1. Start APP > Select Track (1)
        2. Open packed project ('Packed_Project/test_produce_func_13_12.pdk', 'Extracted_Folder/test_produce_func_13_12')
        3. Set timecode ('00_00_11_04') at main page
        4. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L380.png') matches Ground Truth (Ground_Truth_Folder + 'L380.png') with similarity 0.95
        '''
        with step("[Action] Select Track 1 on timeline"):
            main_page.start_app()
            main_page.timeline_select_track(1)


        # [L380] 5. Produce > XAVCS > Open Saved project
        # with uuid("8d2e8c7e-3108-4cfa-bcf8-bb37446caa2a") as case:

        with step("[Action] Open packed project"):
            self.open_packed_project(
                "Packed_Project/test_produce_func_13_12.pdk",
                "Extracted_Folder/test_produce_func_13_12"
            )

        with step("[Action] Set timeline timecode to '00_00_11_04'"):
            time.sleep(DELAY_TIME*2)
            main_page.set_timeline_timecode("00_00_11_04", is_verify=True)

        with step("[Verify] Check preview matches GT (L380.png)"):
            time.sleep(DELAY_TIME)
            preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + "L380.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "L380.png", preview, similarity=0.95):
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match GT (L380.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.produce_func
    @pytest.mark.produce_page
    @pytest.mark.profile_format
    @pytest.mark.profile_name
    @pytest.mark.name("[test_produce_func_13_13] Verify Produce page, file format selection, produced filename and profile type existence")
    @exception_screenshot
    def test_produce_func_13_13(self):
        '''
        0. Ensure the dependency test ('test_produce_func_13_12') is run and passed
        1. Click [Produce] button and check [Produce] page show
        2. Select file format ('xavc_s') and get produced filename
        3. Check if produced file name is 'first_project.mp4'
        4. Check if [Profile Type] combobox (L.produce.local.cbx_profile_type) exists
        '''
        dependency_test = "test_produce_func_13_12"
        self.ensure_dependency(dependency_test)

        # [L381] 5. Produce > XAVCS > Select [Format] > XAVCS
        # with uuid("6c6e909c-0333-4047-8f90-926208a8dd2b") as case:

        with step("[Action] Click [Produce] button and verify Produce page is displayed"):
            main_page.click_produce()
            if not produce_page.check_enter_produce_page():
                assert False, "[Produce] page did not open!"

        with step("[Action] Select file format 'xavc_s' and retrieve produced filename"):
            produce_page.local.select_file_format('xavc_s')
            produced_filename = produce_page.get_produced_filename()

        with step("[Verify] Check if produced filename is 'first_project.mp4'"):
            if produced_filename != "first_project.mp4":
                assert False, f"Produced filename mismatch! Expected 'first_project.mp4', got '{produced_filename}'"

        with step("[Verify] Check if [Profile Type] combobox exists"):
            profile_combo = main_page.exist(L.produce.local.cbx_profile_type)
            if not profile_combo:
                assert False, "[Profile Type] combobox does not exist!"

        assert True

    @pytest.mark.produce_func
    @pytest.mark.profile_name
    @pytest.mark.name('[test_produce_func_13_14] Set and verify [Profile Name]')
    @exception_screenshot
    def test_produce_func_13_14(self):
        """
        0. Ensure the dependency test ('test_produce_func_13_13') is run and passed
        1. Select [Profile Name] by index (2)
        2. Get [Profile Name] value
        3. Check if [Profile Name] is ('XAVC S 1280 x 720/30p (17 Mbps)')
        """
        dependency_test = "test_produce_func_13_13"
        self.ensure_dependency(dependency_test)

        # [L382] 5. Produce > XAVCS > Select [Format] > 1280x720/30p (17Mbps)
        # with uuid("a89579e5-7a01-4abb-948e-ff28e225df65") as case:

        with step('[Action] Select [Profile Name] by index (2)'):
            produce_page.local.select_profile_name(2)

        with step('[Action] Get [Profile Name] value'):
            current_profile = produce_page.local.get_profile_name()

        with step('[Verify] Check if [Profile Name] is (XAVC S 1280 x 720/30p (17 Mbps))'):
            if current_profile != "XAVC S 1280 x 720/30p (17 Mbps)":
                assert False, f"Profile name mismatch! Expected: XAVC S 1280 x 720/30p (17 Mbps), Got: {current_profile}"
        assert True


    @pytest.mark.produce_func
    @pytest.mark.fast_video_rendering
    @pytest.mark.name('[test_produce_func_13_15] Disable Fast Video Rendering and verify Hardware Encode checkbox')
    @exception_screenshot
    def test_produce_func_13_15(self):
        """
        0. Ensure the dependency test ('test_produce_func_13_14') is run and passed
        1. Disable [Fast Video Rendering]
        2. Check if the [Hardware Encode] checkbox (L.produce.local.rdb_fast_video_rendering_hardware_encode) is disabled
        """
        dependency_test = "test_produce_func_13_14"
        self.ensure_dependency(dependency_test)

        # [L383] 5. Produce > XAVCS > Select encode type > SW
        # with uuid("65a87f83-cfe7-4064-8dfa-b15ea92952d6") as case:

        with step('[Action] Disable [Fast Video Rendering]'):
            produce_page.local.set_fast_video_rendering(is_checked=0)

        with step('[Verify] Check if the [Hardware Encode] checkbox is enabled'):
            status = produce_page.local.get_fast_video_rendering_hardware_encode_status()
            if status:
                assert False, "Hardware Encode checkbox should be disabled, but it is enabled!"

        assert True

    @pytest.mark.produce_func
    @pytest.mark.surround_sound
    @pytest.mark.name('[test_produce_func_13_16] Enable Surround Sound and verify Theater option')
    @exception_screenshot
    def test_produce_func_13_16(self):
        """
        0. Ensure the dependency test ('test_produce_func_13_15') is run and passed
        1. Enable [Surround Sound] > Set [Surround Sound] to (Theater) option
        2. Check if [Surround Turn Theater] button (L.produce.local.rdb_surround_sound_true_theater) value is Enabled (1)
        """
        dependency_test = "test_produce_func_13_15"
        self.ensure_dependency(dependency_test)


        # [L385] 5. Produce > XAVCS > Set [Surround Sound] > TT Surround
        # with uuid("c459820f-964b-481b-b4c7-7cbfbea9eb3b") as case:

        with step('[Action] Enable [Surround Sound] > Set [Surround Sound] to (Theater) option'):
            produce_page.local.set_surround_sound()
            produce_page.local.set_surround_sound_true_theater_option_theater()


        with step('[Verify] Check if [Surround Turn Theater] button is Enabled (1)'):
            check_surround = main_page.exist(L.produce.local.rdb_surround_sound_true_theater).AXValue
            if check_surround !=1:
                assert False, f"Expected Surround Turn Theater button to be enabled (1), but got {check_surround}"

        assert True

    @pytest.mark.produce_func
    @pytest.mark.produce
    @pytest.mark.name('[test_produce_func_13_17] Verify produced filename after selecting output folder')
    @exception_screenshot
    def test_produce_func_13_17(self):
        """
        0. Ensure the dependency test ('test_produce_func_13_16') is run and passed
        1. If file exists (Test_Material_Folder + 'BFT_21_Stage1/produce/L386_xavc.mp4'), delete the folder (Test_Material_Folder + 'BFT_21_Stage1/produce')
        2. Click [Select Output Folder] button and select output folder (Test_Material_Folder + 'BFT_21_Stage1/produce/L386_xavc.mp4')
        3. Get produced filename
        4. Check if produced file name is ('L386_xavc.mp4')
        """
        dependency_test = "test_produce_func_13_16"
        self.ensure_dependency(dependency_test)

        # [L386] 5. Produce > XAVCS > Set output folder and file name
        # with uuid("0092cf6f-fc69-455b-b4f1-558b992e2ee5") as case:

        with step('[Action] Delete output folder if produced file exists'):
            output_file = Test_Material_Folder + 'BFT_21_Stage1/produce/L386_xavc.mp4'
            output_folder = Test_Material_Folder + 'BFT_21_Stage1/produce'
            if main_page.exist_file(output_file):
                main_page.delete_folder(output_folder)

        with step('[Action] Click [Select Output Folder] and select output folder'):
            produce_page.select_output_folder(output_file)

        with step('[Action] Get produced filename'):
            produced_filename = produce_page.get_produced_filename()

        with step('[Verify] Check produced filename is (L386_xavc.mp4)'):
            if not produced_filename == "L386_xavc.mp4":
                assert False, f"Produced filename mismatch! Expected: L386_xavc.mp4, Got: {produced_filename}"

        assert True

    @pytest.mark.produce_func
    @pytest.mark.produce
    @pytest.mark.check_upload_copy_to_cl
    @pytest.mark.name('[test_produce_func_13_18] Enable and verify [Upload Copy to CyberLink Cloud]')
    @exception_screenshot
    def test_produce_func_13_18(self):
        """
        0. Ensure the dependency test ('test_produce_func_13_17') is run and passed
        1. Enable [Upload Copy to CyberLink Cloud]
        2. Check [Upload Copy to CyberLink Cloud] is visible
        """
        dependency_test = "test_produce_func_13_17"
        self.ensure_dependency(dependency_test)

        # [L384] 5. Produce > XAVCS > Upload a copy to Cloud
        # with uuid("ca0790d0-ef40-4058-b787-2e3ceaf5cbf3") as case:

        with step('[Action] Enable [Upload Copy to CyberLink Cloud]'):
            produce_page.local.set_check_upload_copy_to_cyberlink_cloud(is_check=1)

        with step('[Verify] Check [Upload Copy to CyberLink Cloud] is visible'):
            visible_status = produce_page.local.check_visible_upload_copy_to_cyberlink_cloud()
            if not visible_status:
                assert False, "Upload Copy to CyberLink Cloud is not visible as expected."

        assert True


    @pytest.mark.produce_func
    @pytest.mark.produce
    @pytest.mark.check_upload_copy_to_cl
    @pytest.mark.name('[test_produce_func_13_19] Start produce, verify completion, and select component')
    @exception_screenshot
    def test_produce_func_13_19(self):
        """
        0. Ensure the dependency test ('test_produce_func_13_18') is run and passed
        1. Click [Start Produce]
        2. Click [Yes] button on [Convert CyberLink Cloud Copy to MP4] dialog
        3. Check [Produce] is completed in 600 times
        4. Check [Back to Edit] button (L.produce.btn_back_to_edit_after_upload_cl) is visible in 60 times after video upload to cloud
        5. Click [Back to Edit] button
        6. Select component ('L386_xavc.mp4') from library icon view and check result
        """
        dependency_test = "test_produce_func_13_18"
        self.ensure_dependency(dependency_test)

        # [L387] 5. Produce > XAVCS > Start Produce
        # with uuid("15d3cb75-1abf-4e44-bfbe-9602f92cf5fb") as case:

        with step('[Action] Click [Start Produce]'):
            produce_page.click(L.produce.btn_start_produce)

        with step('[Action] Click [Yes] button on [Convert CyberLink Cloud Copy to MP4] dialog'):
            time.sleep(DELAY_TIME)
            produce_page.local.click_option_convert_cyberlink_cloud_copy_to_mp4_dialog(option=1)

        with step('[Verify] Check [Produce] is completed in 600 secs'):
            if not produce_page.check_produce_complete(wait_time=600):
                assert False, "Produce did not complete within 600 seconds"

        with step('[Verify] Check [Back to Edit] button is visible in 60 seconds after video upload to cloud'):
            if not produce_page.local.check_back_btn_shows_on_upload_to_cyberlink_cloud_in_secs(wait_time=60):
                assert False, "Back to Edit button did not appear within 60 seconds after video upload to cloud"

        with step('[Action] Click [Back to Edit] button'):
            produce_page.local.click_back_btn_on_produce_page_after_upload()

        with step('[Action] Select component (L386_xavc.mp4) from library icon view and check result'):
            if not main_page.select_library_icon_view_media('L386_xavc.mp4'):
                assert False, 'Failed to select component "L386_xavc.mp4" from library icon view'

        assert True

    @pytest.mark.produce_func
    @pytest.mark.produce
    @pytest.mark.check_upload_copy_to_cl
    @pytest.mark.name('[test_produce_func_13_20] Import and remove downloaded media then verify preview change')
    @exception_screenshot
    def test_produce_func_13_20(self):
        """
        0. Ensure the dependency test ('test_produce_func_13_19') is run and passed
        1. Import media from [CyberLink Cloud]
        2. Select content in folder level (folder_index=0, click_times=2)
        3. Input text ('L386_xavc') in search library at cloud page
        4. Tap [Select] All button
        5. Check if [Remove] button is enabled
        6. Click [Remove] button
        7. Click [Close] button to leave [Download media from CyberLink Cloud] window
        """
        dependency_test = "test_produce_func_13_19"
        self.ensure_dependency(dependency_test)

        with step('[Action] Import media from [CyberLink Cloud]'):
            media_room_page.import_media_from_cyberlink_cloud()

        with step('[Action] Select content in folder level (folder_index=0, click_times=2)'):
            import_media_from_cloud_page.select_content_in_folder_level(folder_index=0, click_times=2)

        with step('[Action] Input text ("L386_xavc") in search library'):
            import_media_from_cloud_page.input_text_in_seacrh_library('L386_xavc')

        with step('[Action] Tap [Select] All button'):
            import_media_from_cloud_page.tap_select_deselect_all_btn()

        with step('[Verify] Check if [Remove] button is enabled'):
            remove_status = import_media_from_cloud_page.get_remove_btn_status()
            if not remove_status:
                assert False, "Remove button is not enabled as expected"

        with step('[Action] Click [Remove] button'):
            import_media_from_cloud_page.tap_remove_btn()

        with step('[Action] Click [Close] button to leave [Download media from CyberLink Cloud] window'):
            import_media_from_cloud_page.close_download_media_window()

        assert True


    @pytest.mark.produce_func
    @pytest.mark.play_video
    @pytest.mark.produced_media
    @pytest.mark.name('[test_produce_func_13_21] Play Produced video')
    @exception_screenshot
    def test_produce_func_13_21(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Select media ('L386_xavc.mp4') by library icon view
        2. Click [Play] button in playback window
        3. Check if the preview window is different when playing in (area=L.base.Area.preview.main, sec=5)
        4. Click [Stop] button in playback window
        '''
        dependency_test = "test_produce_func_13_20"
        self.ensure_dependency(dependency_test)

        # [L388] 5. Produce > XAVCS > Playback produced clip
        # with uuid("b8960b0f-b0f8-4451-b163-12501bca2c9c") as case:

        with step('[Action] Select media by library icon view'):
            main_page.select_library_icon_view_media('L386_xavc.mp4')

        with step('[Action] Click Play button in playback window'):
            playback_window_page.Edit_Timeline_PreviewOperation('Play')

        with step('[Verify] Check if preview window is different when playing'):
            preview_changed = main_page.Check_PreviewWindow_is_different(area=L.base.Area.preview.main, sec=5)
            if not preview_changed:
                # Similarity should be > expected threshold
                assert False, "Preview is not updated when playing video in 5 secs!"

        with step('[Action] Click Stop button in playback window'):
            playback_window_page.Edit_Timeline_PreviewOperation('stop')

        assert True

    @pytest.mark.produce_func
    @pytest.mark.produced_media
    @pytest.mark.name('[test_produce_func_13_22] Select component, set timecode and verify preview')
    @exception_screenshot
    def test_produce_func_13_22(self):
        """
        0. Ensure the dependency test ('test_produce_func_13_20') is run and passed
        1. Select component ('L386_xavc.mp4') from library icon view
        2. Set timecode to ('00_00_55_11') at main page
        3. Check preview (locator=main_page.area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L388.png') matches GT (Ground_Truth_Folder + 'L388.png') with similarity 0.9
        """
        dependency_test = "test_produce_func_13_21"
        self.ensure_dependency(dependency_test)

        with step('[Action] Set timecode to (00_00_55_11) at main page'):
            main_page.set_timeline_timecode('00_00_55_11', is_verify=True)

        with step('[Verify] Check preview matches GT (L388.png) with similarity 0.9'):
            preview_snapshot = main_page.snapshot(
                locator=main_page.area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L388.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L388.png', preview_snapshot, similarity=0.9):
                assert False, "Preview does not match Ground Truth (L388.png)! Similarity should > 0.9"

        assert True


    # 8 uuid
    @pytest.mark.new_project_func
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.import_media
    @pytest.mark.my_project
    @pytest.mark.name('[test_new_project_func_14_1] Check content in [My Project] after open packed project')
    @exception_screenshot
    def test_new_project_func_14_1(self):
        '''
        1. Launch APP and enter My project and screenshot (locator=main_page.area.library_icon_view)
        2. Open Packed project (Test_Material_Folder + 'BFT_21_Stage1/can_del.pdk')
        3. Enter My project and screenshot (locator=main_page.area.library_icon_view)
        4. Check the similarity between 2 screenshots is 0.82~0.999
        5. Close and restart the app
        '''
        
        # [L47] 2.1 Media Room > My Project > Open 
        # with uuid("30dd64f8-7edd-4a15-a3a0-61f667a3b5fc") as case:

        with step('[Action] Launch APP and enter My project'):
            main_page.start_app()
            project_room_page.enter_project_room()
            first_screenshot = main_page.snapshot(locator=main_page.area.library_icon_view)

        with step('[Action] Open Packed project'):
            self.open_packed_project('Packed_Project/can_del.pdk', 'Extracted_Folder/test_new_project_func_14_1')

        with step('[Action] Enter My project again and take screenshot'):
            project_room_page.enter_project_room()
            second_screenshot = main_page.snapshot(locator=main_page.area.library_icon_view)

        with step('[Verify] Check preview changed and similarity within 0.82~0.999'):
            should_update = main_page.compare(first_screenshot, second_screenshot, similarity=0.82)
            if not should_update:
                # Similarity should be greater than 0.82
                assert False, "Preview did not change after opening packed project! Similarity should > 0.82"
            should_not_the_same = main_page.compare(first_screenshot, second_screenshot, similarity=0.999)
            if should_not_the_same:
                # Similarity should be less than 0.999
                assert False, "Preview did not change after opening packed project! Similarity should < 0.999"

        with step('[Action] Close and restart the app'):
            main_page.close_and_restart_app()

        assert True

    @pytest.mark.new_project_func
    @pytest.mark.my_project
    @pytest.mark.timeline
    @pytest.mark.name('[test_new_project_func_14_2] Insert Project to selected track and check preview update')
    @exception_screenshot
    def test_new_project_func_14_2(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Enter My Project
        2. Select media project ('can_del') by library icon view and screenshot (locator=L.timeline_operation.workspace)
        3. Insert Project to selected track
        4. Select timeline track 2 and check preview update
        '''
        # Ensure the dependency test is run and passed
        dependency_test = "test_new_project_func_14_1"
        self.ensure_dependency(dependency_test)
        
        # [L51] 2.1 Media Room > My Project > Nested project editing
        # with uuid("811ecd35-7548-48d3-8f55-9d25ad29d0f9") as case:

        with step('[Action] Enter My Project'):
            project_room_page.enter_project_room()

        # Step 2: Select media project ('can_del') by library icon view and screenshot
        with step('[Action] Select media project and take screenshot'):
            main_page.select_library_icon_view_media('can_del')
            initial_workspace_snapshot = main_page.snapshot(locator=L.timeline_operation.workspace)

        # Step 3: Insert Project to selected track
        with step('[Action] Insert Project to selected track'):
            project_room_page.tips_area_insert_project_to_selected_track()

        # Step 4: Select timeline track 2 and check preview update
        with step('[Action] Select timeline track 2'):
            main_page.timeline_select_track(2)
        
        with step('[Verify] Check preview update'):
            updated_workspace_snapshot = main_page.snapshot(locator=L.timeline_operation.workspace)
            if main_page.compare(initial_workspace_snapshot, updated_workspace_snapshot, similarity=0.95):
                # Similarity should be less than 0.95 for preview update
                assert False, "Preview update not detected! Similarity should < 0.95"

        assert True

    @pytest.mark.new_project_func
    @pytest.mark.timeline
    @pytest.mark.sample_media
    @pytest.mark.name('[test_new_project_func_14_3] Click [View Entire Video] and insert media')
    @exception_screenshot
    def test_new_project_func_14_3(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Select timeline track 1
        2. Click [View Entire Video] and screenshot (locator=L.timeline_operation.workspace)
        3. Enter [Media Content]
        4. Select media (Landscape 01.jpg) by library icon view
        5. Right Click and select (Insert on Selected Track) on right click menu
        6. Click the [View Entire Video] button and check preview update
        '''
        
        dependency_test = "test_new_project_func_14_2"
        self.ensure_dependency(dependency_test)
        
        with step('[Action] Select timeline track 1'):
            main_page.timeline_select_track(1)

        with step('[Action] Click [View Entire Video] and take screenshot'):
            # Click [View Entire Video]
            timeline_operation_page.click_view_entire_video_btn()
            initial_workspace_snapshot = main_page.snapshot(locator=L.timeline_operation.workspace)

        with step('[Action] Enter [Media Content]'):
            media_room_page.enter_media_content()

        with step('[Action] Select media (Landscape 01.jpg) by library icon view'):
            main_page.select_library_icon_view_media('Landscape 01.jpg')

        with step('[Action] Right Click and select (Insert on Selected Track)'):
            main_page.right_click()
            main_page.select_right_click_menu("Insert on Selected Track")

        with step('[Action] Click [View Entire Video] and check preview update'):
            timeline_operation_page.click_view_entire_video_btn()
            updated_workspace_snapshot = main_page.snapshot(locator=L.timeline_operation.workspace)
            if main_page.compare(initial_workspace_snapshot, updated_workspace_snapshot, similarity=0.95):
                # Similarity should be less than 0.95 for updated preview
                assert False, "Preview did not update after inserting media! Similarity should < 0.95"

        assert True

    @pytest.mark.new_project_func
    @pytest.mark.timecode
    @pytest.mark.aspect_ratio
    @pytest.mark.name("[test_new_project_func_14_4] Verify main page preview matches GT after aspect ratio and timecode update")
    @exception_screenshot
    def test_new_project_func_14_4(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Set [Project Aspect Ratio] to (4:3)
        2. Set main page timecode to (00:00:08:00)
        3. Screenshot (locator=main_page.area.preview.main) and compare with GT (L53.png) (similarity=0.95)
        '''

        dependency_test = "test_new_project_func_14_3"
        self.ensure_dependency(dependency_test)
        
        # [L53] 2.1 Media Room > Insert clip to timeline & preview (4:3)
        # with uuid("167d01d3-97d1-4ca7-95df-36bdaff67a08") as case:

        with step("[Action] Set [Project Aspect Ratio] to (4:3)"):
            main_page.set_project_aspect_ratio_4_3()
        
        with step("[Action] Set main page timecode to (00:00:08:00)"):
            main_page.set_timeline_timecode("00:00:08:00")
        
        with step("[Verify] Screenshot preview and compare with GT (L53.png)"):
            current_preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + "L53.png")
            check_preview = main_page.compare(Ground_Truth_Folder + "L53.png", current_preview, similarity=0.95)
            if not check_preview:
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match Ground Truth (L53.png)! Similarity should > 0.95"
        
        assert True

    @pytest.mark.new_project_func
    @pytest.mark.timeline
    @pytest.mark.name("[test_new_project_func_14_5] Insert media from library and verify preview update")
    @exception_screenshot
    def test_new_project_func_14_5(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Click preview operation [Stop] in playback window
        2. Select timeline track 2 and screenshot (locator=L.timeline_operation.workspace)
        3. Select media (Mahoroba.mp3) by library icon view
        4. Insert media to selected track
        5. Check preview updated
        '''
        # [L52] 2.1 Media Room > Insert clip to timeline & preview > Able to insert clip to selected track
        # with uuid("d52b3eed-f381-4384-8166-cfa75b44b373") as case:

        dependency_test = "test_new_project_func_14_4"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Click preview operation [Stop] in playback window"):
            playback_window_page.Edit_Timeline_PreviewOperation('stop')
        
        with step("[Action] Select timeline track 2 and screenshot workspace"):
            main_page.timeline_select_track(2)
            before_preview = main_page.snapshot(locator=L.timeline_operation.workspace)
        
        with step('[Action] Select media (Mahoroba.mp3) by library icon view'):
            main_page.select_library_icon_view_media("Mahoroba.mp3")

        with step("[Action] Insert media to selected track"):
            main_page.tips_area_insert_media_to_selected_track()
        
        with step("[Verify] Check preview updated"):
            after_preview = main_page.snapshot(locator=L.timeline_operation.workspace)
            if main_page.compare(before_preview, after_preview, similarity=0.98):
                # Similarity should be less than 0.95 when preview is updated
                assert False, "Preview did not update after inserting media! Similarity should < 0.98"
        
        assert True


    @pytest.mark.new_project_func
    @pytest.mark.custom_tag
    @pytest.mark.name('[test_new_project_func_14_6] Add/ Delete Custom Tag')
    @exception_screenshot
    def test_new_project_func_14_6(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter My Project
        2. Add new tag with name (auto_Testing_project_tag)
        3. Select media (can_del) by library icon view
        4. Right Click and select [Add to custom tag] on right click menu and check if the tag is added
        5. Delete tag (auto_Testing_project_tag) by right click and check if the tag is deleted
        """
        dependency_test = "test_new_project_func_14_5"
        self.ensure_dependency(dependency_test)

        # [L49] 2.1 Media Room > My Project > Context menu > Add to tag fine
        # with uuid("662a20c0-623c-4131-9a3f-fc76be83780e") as case:
        with step('[Action] Enter My Project'):
            project_room_page.enter_project_room()

        with step('[Action] Add new tag with name auto_Testing_project_tag'):
            media_room_page.add_new_tag('auto_Testing_project_tag')

        with step('[Action] Select media "can_del" by library icon view'):
            main_page.select_library_icon_view_media("can_del")

        with step('[Action] Right Click and select [Add to custom tag] on right click menu'):
            main_page.right_click()
            tag_added = main_page.select_right_click_menu("Add to custom tag", 'auto_Testing_project_tag')
            if not tag_added:
                assert False, "Failed to add custom tag: auto_Testing_project_tag"
            time.sleep(DELAY_TIME) # wait till added tag ends

        with step('[Action] Delete tag auto_Testing_project_tag by right click'):
            deletion_success = media_room_page.right_click_delete_tag("auto_Testing_project_tag", count=1)
            if not deletion_success:
                assert False, "Failed to delete tag: auto_Testing_project_tag"

        assert True


    @pytest.mark.new_project_func
    @pytest.mark.timeline
    @pytest.mark.show_timeline_preview_volume_meter
    @pytest.mark.name('[test_new_project_func_14_7] Enable/ Disable [Show Timeline Preview Volume Meter]')
    @exception_screenshot
    def test_new_project_func_14_7(self):
        """
        0. Ensure the dependency test is run and passed
        1. Select timeline track 2 and Screenshot (locator=L.base.Area.preview.main)
        2. Enable [Show Timeline Preview Volume Meter] from top menu bar and check preview update
        3. Click [Play] button in playback window > wait for 3 seconds > Click [Stop] button in playback window
        4. Check preview is as step 2
        5. Disable [Show Timeline Preview Volume Meter] from top menu bar and check preview is as step 1
        """
        dependency_test = "test_new_project_func_14_6"
        self.ensure_dependency(dependency_test)

        # [L56] 2.1 Media Room > Insert clip to timeline & preview > Enable volume meter (form View menu)
        # with uuid("520dee77-bb49-428a-8477-dcaf33324820") as case:

        with step('[Action] Select timeline track 2 and take initial screenshot'):
            main_page.timeline_select_track(2)
            initial_preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L56.png')

        with step('[Action] Enable timeline preview volume meter and capture updated preview'):
            main_page.top_menu_bar_view_show_timeline_preview_volume_meter()
            volume_preview = main_page.snapshot(locator=main_page.area.preview.main)
            if main_page.compare(volume_preview, initial_preview, similarity=0.999999):
                assert False, "Preview did not update after enabling volume meter! Similarity should < 0.999999"

        with step('[Action] Play preview for 3 seconds then stop playback'):
            playback_window_page.Edit_Timeline_PreviewOperation("Play")
            time.sleep(DELAY_TIME*3)
            playback_window_page.Edit_Timeline_PreviewOperation("Stop")

        with step('[Verify] Check preview remains as after volume meter enabled'):
            preview_after_play = main_page.snapshot(locator=main_page.area.preview.main)
            if not main_page.compare(volume_preview, preview_after_play, similarity=0.95):
                assert False, "Preview does not match the volume meter enabled state after playback! Similarity should > 0.95"

        with step('[Action] Disable timeline preview volume meter and capture final preview'):
            main_page.top_menu_bar_view_show_timeline_preview_volume_meter()
            final_preview = main_page.snapshot(locator=L.base.Area.preview.main)
            # Verify final preview matches initial state: similarity should be greater than 0.95
            if not main_page.compare(initial_preview, final_preview, similarity=0.95):
                assert False, "Preview did not revert to initial state after disabling volume meter! Similarity should > 0.95"

        assert True


    @pytest.mark.new_project_func
    @pytest.mark.new_workspace
    @pytest.mark.name('[test_new_project_func_14_8] Open [New Workspace] by hotkey')
    @exception_screenshot
    def test_new_project_func_14_8(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter [Media Content]
        2. Open [New Workspace] by hotkey and Handle [Do you want to save changes] dialog with (No)
        3. Check "Use Sample Media" String shows in media room
        """
        dependency_test = "test_new_project_func_14_7"
        self.ensure_dependency(dependency_test)

        # [L54] 2.1 Media Room > Insert clip to timeline & preview > Project aspect ratio 9:16
        # with uuid("9c2cb23c-3a2d-48f1-8a0a-178e7f0ffbba") as case:

        with step('[Action] Enter [Media Content]'):
            media_room_page.enter_media_content()

        with step('[Action] Open [New Workspace] via hotkey and handle save dialog (No)'):
            main_page.tap_NewWorkspace_hotkey()
            main_page.handle_no_save_project_dialog()

        with step('[Verify] Check "Use Sample Media" string is shown in Media Room'):
            if not main_page.exist(L.media_room.string_use_sample_media, timeout=7):
                assert False, "Use Sample Media not found in Media Room!"
        assert True


    @pytest.mark.new_project_func
    @pytest.mark.aspect_ratio
    @pytest.mark.import_media
    @pytest.mark.timeline
    @pytest.mark.name('[test_new_project_func_14_9] Set aspect ratio 9:16, import and insert media, then verify preview')
    @exception_screenshot
    def test_new_project_func_14_9(self):
        """
        0. Ensure the dependency test is run and passed
        1. Set [Project Aspect Ratio] to (9:16)
        2. Import media (Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png') to library
        3. Select media (Sample.png) by library icon view
        4. Insert media to selected track from tip area
        5. Screenshot (locator=L.base.Area.preview.only_mtk_view) and compare with GT (Ground_Truth_Folder + 'L54.png') (similarity=0.93)
        """
        dependency_test = "test_new_project_func_14_8" 
        self.ensure_dependency(dependency_test)

        with step('[Action] Set Project Aspect Ratio to 9:16'):
            main_page.set_project_aspect_ratio_9_16()

        with step('[Action] Import media Sample.png to library'):
            media_room_page.import_media_file(Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png')

        with step('[Action] Select media (Sample.png) by library icon view'):
            main_page.select_library_icon_view_media('Sample.png')

        with step('[Action] Insert media to selected track from tip area'):
            main_page.tips_area_insert_media_to_selected_track(option=-1)


        with step('[Verify] Screenshot preview and compare with GT (L54.png)'):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L54.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L54.png',
                preview,
                similarity=0.93
            )
            if not check_preview:
                # Similarity should be greater than 0.93
                assert False, "Preview does not match GT (L54.png)! Similarity should > 0.93"

        assert True

    @pytest.mark.new_project_func
    @pytest.mark.new_workspace
    @pytest.mark.aspect_ratio
    @pytest.mark.import_media
    @pytest.mark.timeline
    @pytest.mark.name('[test_new_project_func_14_10] Open New Workspace, set aspect 1:1, import media, and verify preview')
    @exception_screenshot
    def test_new_project_func_14_10(self):
        """
        0. Ensure the dependency test is run and passed
        1. Open [New Workspace] by hotkey and handle [Do you want to save changes] dialog with (No)
        2. Set [Project Aspect Ratio] to (1:1)
        3. Import media (Test_Material_Folder + 'Subtitle_Room/JPN.mp4') to library
        4. Select media (JPN.mp4) by library icon view
        5. Insert media to selected track from tip area
        6. Handle aspect ratio conflict dialog
        7. Set timecode to (00:00:28:03) at main page
        8. Screenshot (locator=main_page.area.preview.main) and compare with GT (Ground_Truth_Folder + 'L55.png') (similarity=0.94)
        """
        dependency_test = "test_new_project_func_14_9"
        self.ensure_dependency(dependency_test)

        # [L55] 2.1 Media Room > Insert clip to timeline & preview > Project aspect ratio 1:1
        # with uuid("7a173798-3d3b-45e1-955d-1907aaf3c7dd") as case:
        with step('[Action] Open New Workspace via hotkey and handle save dialog (No)'):
            main_page.tap_NewWorkspace_hotkey()
            main_page.handle_no_save_project_dialog(option='no')

        with step('[Action] Set Project Aspect Ratio to 1:1'):
            main_page.set_project_aspect_ratio_1_1()

        with step('[Action] Import media JPN.mp4 to library'):
            media_path = Test_Material_Folder + 'Subtitle_Room/JPN.mp4'
            media_room_page.import_media_file(media_path)

        with step('[Action] Select media (JPN.mp4) by library icon view'):
            main_page.select_library_icon_view_media('JPN.mp4')

        with step('[Action] Insert media to selected track from tip area'):
            main_page.click(L.main.tips_area.btn_insert_to_selected_track)

        with step('[Action] Handle aspect ratio conflict dialog'):
            main_page.handle_aspect_ratio_conflict()

        with step('[Action] Set timecode to 00:00:28:03 at main page'):
            main_page.set_timeline_timecode('00_00_28_03')

        with step('[Verify] Screenshot preview and compare with GT (L55.png)'):
            preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + 'L55.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L55.png',
                preview,
                similarity=0.94
            )
            if not check_preview:
                # Similarity should be greater than 0.94
                assert False, "Preview does not match GT (L55.png)! Similarity should > 0.94"

        assert True




    @pytest.mark.search_media_func
    @pytest.mark.launch
    @pytest.mark.search_library
    @pytest.mark.timecode
    @pytest.mark.name('[test_search_media_func_15_1] Search "cybercoffee" in Intro Room')
    @exception_screenshot
    def test_search_media_func_15_1(self):
        """
        1. Clear cache and start APP
        2. Enter Intro Video Room
        3. Search conponent ("cybercoffee") in library with (intro_room=True)
        4. Set main page time code to ("00_00_01_22"), take screenshot (locator=L.base.Area.preview.only_mtk_view), and compare with GT (Ground_Truth_Folder + 'L194.png') (similarity=0.94)
        """
        with step('[Action] Clear cache and start APP'):
            main_page.clear_cache()
            main_page.start_app()

        with step('[Action] Enter Intro Video Room'):
            intro_video_page.enter_intro_video_room()
        
        with step('[Action] Search conponent "cybercoffee" in library (intro_room=True)'):
            media_room_page.search_library("cybercoffee", intro_room=True)
        
        with step('[Action] Set main page time code to 00_00_01_22 and capture preview screenshot'):
            main_page.set_timeline_timecode("00_00_01_22")
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L194.png'
            )
        
        with step('[Verify] Compare captured preview with GT (L194.png)'):
            is_preview_correct = main_page.compare(
                Ground_Truth_Folder + 'L194.png',
                preview_snapshot,
                similarity=0.94
            )
            if not is_preview_correct:
                # Similarity should be greater than 0.94
                assert False, "Preview does not match GT (L194.png)! Similarity should > 0.94"
        
        with step('[Initial] Back to Intro Room w/o search'):
            main_page.click(L.intro_video_room.btn_library)
        
        assert True

    @pytest.mark.search_media_func
    @pytest.mark.search_library
    @pytest.mark.name('[test_search_media_func_15_2] Search components with JPN/ CHT/ CHS in Intro Room')
    @exception_screenshot
    def test_search_media_func_15_2(self):
        """
        0. Ensure the dependency test is run and passed
        1. Search conponent ('てんじんまつり') in library with (intro_room=True) and screenshot (locator=L.base.Area.library_icon_view)
        2. Back to Intro Room w/o search by click (L.intro_video_room.btn_library)
        3. Search conponent ('冰島') in library with (intro_room=True) and screenshot (locator=L.base.Area.library_icon_view)
        4. Back to Intro Room w/o search by click (L.intro_video_room.btn_library)
        5. Search conponent ('证书管理办法') in library with (intro_room=True) and screenshot (locator=L.base.Area.library_icon_view)
        6. Back to Intro Room w/o search by click (L.intro_video_room.btn_library)
        7. Verify all 3 search results are different
        """
        dependency_test = "test_search_media_func_15_1"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            intro_video_page.enter_intro_video_room()
        
        # [L195] 2.2 Video Intro Room > Search > Input CHT character
        # with uuid("ef94a884-f71d-4111-bc9d-fafab5c034b7") as case:

        with step('[Action] Search "てんじんまつり" in library and capture screenshot'):
            media_room_page.search_library("てんじんまつり", intro_room=True)
            screenshot1 = main_page.snapshot(locator=L.base.Area.library_icon_view)

        with step('[Action] Back to Intro Room without search'):
            main_page.click(L.intro_video_room.btn_library)

        with step('[Action] Search "冰島" in library and capture screenshot'):
            media_room_page.search_library("冰島", intro_room=True)
            screenshot2 = main_page.snapshot(locator=L.base.Area.library_icon_view)

        with step('[Action] Back to Intro Room without search'):
            main_page.click(L.intro_video_room.btn_library)

        with step('[Action] Search "证书管理办法" in library and capture screenshot'):
            media_room_page.search_library("证书管理办法", intro_room=True)
            screenshot3 = main_page.snapshot(locator=L.base.Area.library_icon_view)

        with step('[Action] Back to Intro Room without search'):
            main_page.click(L.intro_video_room.btn_library)

        with step('[Verify] Verify all three search results are different'):
            if main_page.compare(screenshot1, screenshot2, similarity=0.95):
                assert False, "Search results for 'てんじんまつり' and '冰島' are too similar! Similarity should < 0.95"
            if main_page.compare(screenshot2, screenshot3, similarity=0.95):
                assert False, "Search results for '冰島' and '证书管理办法' are too similar! Similarity should < 0.95"
            if main_page.compare(screenshot1, screenshot3, similarity=0.95):
                assert False, "Search results for 'てんじんまつり' and '证书管理办法' are too similar! Similarity should < 0.95"

        assert True



    @pytest.mark.search_media_func
    @pytest.mark.search_library
    @pytest.mark.name('[test_search_media_func_15_3] Search (.) in library and verify no results')
    @exception_screenshot
    def test_search_media_func_15_3(self):
        """
        0. Ensure the dependency test is run and passed
        1. Search conponent ('.') in library
        2. Check (L.media_room.txt_no_results_for_dot) is shown
        3. Click (L.intro_video_room.btn_library) to back to Intro Room
        """
        dependency_test = "test_search_media_func_15_2"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            intro_video_page.enter_intro_video_room()

        # [L196] 2.2 Video Intro Room > Search > Input "." character
        # with uuid("14ba0fd1-597b-4c60-86bb-b0bb4e36d38c") as case:
        with step('[Action] Search conponent in library'):
            media_room_page.search_library('.')

        with step('[Verify] Check no results text is shown'):
            if not main_page.is_exist(L.media_room.txt_no_results_for_dot):
                assert False, "Some component shows up, should not display any result!"

        with step('[Action] Click Intro Room library button'):
            main_page.click(L.intro_video_room.btn_library)

        assert True


    @pytest.mark.search_media_func
    @pytest.mark.search_library
    @pytest.mark.name('[test_search_media_func_15_4] Search (\\) in library and verify no results')
    @exception_screenshot
    def test_search_media_func_15_4(self):
        """
        0. Ensure the dependency test is run and passed
        1. Search conponent ('\\') in library
        2. Check (L.media_room.txt_no_results_for_backslash) is shown
        """
        dependency_test = "test_search_media_func_15_3"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            intro_video_page.enter_intro_video_room()

        # # [L197] 2.2 Video Intro Room > Search IAD > Input "\" character
        # with uuid("41c21164-4368-47f5-a335-41604a0d507f") as case:

        with step('[Action] Search conponent in library'):
            media_room_page.search_library('\\')

        with step('[Verify] Check no results text is shown'):
            assert main_page.is_exist(L.media_room.txt_no_results_for_backslash), "No results text is not displayed!"

        assert True


    @pytest.mark.search_media_func
    @pytest.mark.media_room
    @pytest.mark.content_pack
    @pytest.mark.background_music
    @pytest.mark.search_library
    @pytest.mark.name('[test_search_media_func_15_5] Download [Background Music (CL)] and verify in Downloads')
    @exception_screenshot
    def test_search_media_func_15_5(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [New Project] from top menu bar to back to media room
        2. Click [Background Music (CL)] in Media Room
        3. Select category (Pop) in Meta Room
        4. Search keyword ('Feel') in library
        5. If download button shows, click it to download the media
        6. Click [Cancel] in search library
        7. Select category (Downloads) in Meta Room
        8. Verify (Feel the Music Within) is shown in library
        """
        dependency_test = "test_search_media_func_15_4"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()

        # [L146] 2.1 Media Room > BGM (CL BGM) > Check Library
        # with uuid("bd302be5-7617-4374-9a0a-80236f611f0d") as case:
        else:
            with step('[Action] Click [New Project] from top menu bar to return to media room'):
                main_page.top_menu_bar_file_new_project()

        with step('[Action] Click [Background Music (CL)] in Media Room'):
            media_room_page.enter_background_music_CL()

        with step('[Action] Select category (Pop) in Meta Room'):
            media_room_page.select_specific_category_in_meta("Pop")

        with step('[Action] Search keyword "Feel" in library'):
            media_room_page.search_library("Feel")

        with step('[Action] Download media if download button is shown'):
            if main_page.exist(L.media_room.scroll_area.table_view_text_field_download_button):
                main_page.click(L.media_room.scroll_area.table_view_text_field_download_button)
                time.sleep(DELAY_TIME * 5) # wait for download

        with step('[Action] Click [Cancel] in search library'):
            media_room_page.search_library_click_cancel()
            # # search keyword: Heaven
            # media_room_page.search_library('Heaven')
            # time.sleep(DELAY_TIME * 4)

        with step('[Action] Select category (Downloads) in Meta Room'):
            media_room_page.select_specific_category("Downloads")

        with step('[Verify] Check "Feel the Music Within" is shown in library'):
            assert media_room_page.sound_clips_select_media('Feel the Music Within'), "Media 'Feel the Music Within' is not displayed in library!"

        assert True

    @pytest.mark.search_media_func
    @pytest.mark.media_room
    @pytest.mark.background_music
    @pytest.mark.timeline
    @pytest.mark.timecode
    @pytest.mark.content_pack
    @pytest.mark.name('[test_search_media_func_15_6] Play the music and verify timecode')
    @exception_screenshot
    def test_search_media_func_15_6(self):
        """
        0. Ensure the dependency test is run and passed
        1. Select [Sound Clips] ('Feel the Music Within') in library
        2. Click [Play] in playback window, wait (DELAY_TIME*3), then press Space key
        3. Get timecode from slidebar and verify it within 00:02~00:04
        """
        dependency_test = "test_search_media_func_15_5"
        self.ensure_dependency(dependency_test)

        # [L147] 2.1 Media Room > BGM (CL BGM) > Preview
        # with uuid("bf712047-041b-447d-82a6-7326596c0300") as case:
        with step('[Action] Select sound clip "Feel the Music Within" in library'):
            media_room_page.sound_clips_select_media("Feel the Music Within")

        with step('[Action] Click [Play] in playback window, wait, and press Space key'):
            playback_window_page.Edit_Timeline_PreviewOperation('Play')
            time.sleep(DELAY_TIME * 4)
            main_page.press_space_key()

        with step('[Verify] Get timecode from slidebar and verify it is within 00:02~00:04'):
            timecode = playback_window_page.get_timecode_slidebar()
            if not (timecode.startswith("00:00:02") or timecode.startswith("00:00:03") or timecode.startswith("00:00:04")):
                assert False, f"Timecode {timecode} not within expected range (00:02~00:04)"

        assert True


    @pytest.mark.search_media_func
    @pytest.mark.media_room
    @pytest.mark.background_music
    @pytest.mark.bubble
    @pytest.mark.name('[test_search_media_func_15_7] Verify bubbles are shown after inserting Background Music')
    @exception_screenshot
    def test_search_media_func_15_7(self):
        """
        0. Ensure the dependency test is run and passed
        1. Insert media to selected track from tip area
        2. Check bubble (L.media_room.string_on_boarding_blue_bubble_media) shows
        3. Check bubble (L.media_room.string_on_boarding_blue_bubble_tooltip) shows
        """
        dependency_test = "test_search_media_func_15_6"
        self.ensure_dependency(dependency_test)

        # [L148] 2.1 Media Room > BGM (CL BGM) > Add to Timeline preview
        # with uuid("732c7d65-f879-4da5-981b-09a6951a3bbd") as case:

        with step('[Action] Insert media to selected track from tip area'):
            main_page.tips_area_insert_media_to_selected_track()

        with step('[Verify] Check blue bubble media is shown'):
            if not main_page.exist(L.media_room.string_on_boarding_blue_bubble_media):
                assert False, "Blue bubble media is not displayed!"

        with step('[Verify] Check blue bubble tooltip is shown'):
            if not main_page.exist(L.media_room.string_on_boarding_blue_bubble_tooltip):
                assert False, "Blue bubble tooltip is not displayed!"

        assert True


    @pytest.mark.search_media_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.name('[test_search_media_func_15_8] Verify audio mixing track volume meter and preview update after timecode change')
    @exception_screenshot
    def test_search_media_func_15_8(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter Audio Mixing Room (6)
        2. Verify the volume meter of audio track 1 is shown
        3. Check default volume meter preview is shown
        4. Screenshot (locator=audio_1_library_track)
        5. Set timecode to (00:00:28:20) at main page
        6. Check preview updated
        """
        dependency_test = "test_search_media_func_15_7"
        self.ensure_dependency(dependency_test)

        with step('[Action] Enter Audio Mixing Room (6)'):
            main_page.enter_room(6)

        with step('[Verify] Check volume meter of audio track 1 is shown'):
            if not audio_mixing_room_page.exist([{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0}, {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}]):
                assert False, "Volume meter for audio track 1 is not displayed!"

        with step('[Verify] Check default volume meter preview is shown'):
            if not main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0}):
                assert False, "Default volume meter preview is not displayed!"

        with step('[Action] Capture screenshot of audio 1 library track'):
            audio_1_library_track = main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0})
            time.sleep(DELAY_TIME * 0.5)
            before_preview = main_page.snapshot(locator=audio_1_library_track)

        with step('[Action] Set timeline timecode to 00:00:28:20'):
            main_page.set_timeline_timecode('00:00:28:20')

        with step('[Verify] Check preview updated after timecode change'):
            time.sleep(DELAY_TIME*4)
            self.after_audio_1 = main_page.snapshot(locator=audio_1_library_track, file_name = Auto_Ground_Truth_Folder + 'L148.png')
            if main_page.compare(before_preview, self.after_audio_1, similarity=0.94):
                assert False, "Preview did not update after setting timecode! Similarity should < 0.94"

        assert True

    @pytest.mark.search_media_func
    @pytest.mark.save_project
    @pytest.mark.launcher
    @pytest.mark.open_project
    @pytest.mark.name('[test_search_media_func_15_9] Save project and open it from launcher')
    @exception_screenshot
    def test_search_media_func_15_9(self):
        """
        0. Ensure the dependency test is run and passed
        1. Save project as from top menu bar > Handle [Save Project] Dialog (name='test_search_media_func_15_9', folder_path=Test_Material_Folder + 'BFT_21_Stage1/')
        2. Click [Close] button to back to launcher
        3. Click [Open project in launcher] (L.base.launcher_window.btn_open_project) and open project (Test_Material_Folder + 'test_search_media_func_15_9.pds')
        4. Check main_page.exist(L.base.main_caption).AXValue == 'test_search_media_func_15_9'
        """
        dependency_test = "test_search_media_func_15_8"
        self.ensure_dependency(dependency_test)

        # [L36] 1.3 New Launcher > Project  Area > Open Project > Single click
        # with uuid("834ff7aa-a69a-4695-ba62-97b6812ab90b") as case:
        with step('[Action] Save project as and handle save dialog'):
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_search_media_func_15_9', 
                                              folder_path=Test_Material_Folder + 'BFT_21_Stage1/')

        with step('[Action] Click [Close] to return to launcher'):
            main_page.click_close_then_back_to_launcher()

        with step('[Action] Click [Open project in launcher] and open project'):
            main_page.click(L.base.launcher_window.btn_open_project)
            time.sleep(DELAY_TIME * 2)
            main_page.handle_open_project_dialog(Test_Material_Folder + 'BFT_21_Stage1/test_search_media_func_15_9.pds')

        with step('[Verify] Check main caption is "test_search_media_func_15_9"'):
            caption = main_page.exist(L.base.main_caption).AXValue
            if caption != 'test_search_media_func_15_9':
                assert False, f"Main caption mismatch! Expected 'test_search_media_func_15_9', got '{caption}'"

        assert True

    @pytest.mark.search_media_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.open_project
    @pytest.mark.name("[test_search_media_func_15_10] Open project with correct audio content")
    @exception_screenshot
    def test_search_media_func_15_10(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Enter [Audio Mixing Room] (6)
        2. Verify the volume meter ({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0}) of audio track 1 is shown
        3. Screenshot (locator=audio_1_library_track) and compare with GT (L148.png) (similarity=0.98)
        '''
        dependency_test = "test_search_media_func_15_9"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Enter Audio Mixing Room with parameter 6"):
            main_page.enter_room(6)
        
        with step("[Verify] Volume meter of audio track 1 is shown"):
            audio_1_library_track = main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0})
            if not audio_1_library_track:
                assert False, "Audio track 1 volume meter is not visible"
        
        with step("[Action] Screenshot audio track 1 and compare with GT L148.png"):
            audio_snapshot = main_page.snapshot(locator=audio_1_library_track)
            check_audio = main_page.compare(
                self.after_audio_1,
                audio_snapshot,
                similarity=0.98
            )

            if not check_audio:
                # Similarity should be greater than 0.98
                assert False, "Audio track screenshot does not match GT (L148.png)! Similarity should > 0.98"
        
        assert True


    @pytest.mark.search_media_func
    @pytest.mark.media_room
    @pytest.mark.name("[test_search_media_func_15_11] Enter Media Room and verify 'Use Sample Media' is shown")
    @exception_screenshot
    def test_search_media_func_15_11(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Enter Media Room (0)
        2. Check (L.media_room.string_use_sample_media) shows up
        '''
        dependency_test = "test_search_media_func_15_10"
        self.ensure_dependency(dependency_test)

        
        # [L99] 2.1 Media Room > New On Boarding > On Boarding flowing_1 > select project in Launcher
        # with uuid("de129b84-db97-4048-96f3-7af83dd4167d") as case:
        with step("[Action] Enter Media Room with parameter 0"):
            main_page.enter_room(0)
        
        with step("[Verify] Check 'Use Sample Media' string is shown in Media Room"):
            if not main_page.exist(L.media_room.string_use_sample_media, timeout=5):
                assert False, "[Use Sample Media] not found in Media Room!"
        
        assert True


    @pytest.mark.search_media_func
    @pytest.mark.background_music
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @pytest.mark.name('[test_search_media_func_15_12] Search library for "river water" and check selected specific sound clips "River Water" in library')
    @exception_screenshot
    def test_search_media_func_15_12(self):
        """
        1. Enter background music room (meta)
        2. Select specific category in meta (Chinese)
        3. Search library (river water)
        4. Check selected specific sound clips ('River Water') in library
        """
        # [L162] 2.1 Media Room > BGM (Meta) > Input ENG character
        # with uuid("3743a6fe-b4e7-41ca-81db-e48f2be7b24f") as case:
        
        dependency_test = "test_search_media_func_15_11"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()

        with step("[Action] Enter background music room"):
            media_room_page.enter_background_music()

        with step("[Action] Select specific category in meta (Chinese)"):
            media_room_page.select_specific_category_in_meta("Chinese")

        with step("[Action] Search library for 'river water'"):
            media_room_page.search_library("river water")

        with step("[Verify] Check selected specific sound clips 'River Water' in library"):
            assert media_room_page.sound_clips_select_media("River Water"), "Sound clip 'River Water' is not displayed in library!"

        assert True


    @pytest.mark.search_media_func
    @pytest.mark.background_music
    @pytest.mark.content_pack
    @pytest.mark.name("[test_search_media_func_15_13] Download and Delete 'River Water' and verify download mark")
    @exception_screenshot
    def test_search_media_func_15_13(self):
        """
        0. Ensure the dependency test is run and passed
        1. Select specific sound clips (River Water) in library > right click > select (Download) on the right-click menu > wait for download to complete (DELAY_TIME * 8)
        2. Select specific sound clips (River Water) in library > right click > select (Delete from Disk) on the right-click menu > click [Yes] on the confirm dialog > wait for download to complete (DELAY_TIME * 3)
        3. Check download mark is default status by verifying there is no download-ok element shown
        """
        dependency_test = "test_search_media_func_15_12"
        self.ensure_dependency(dependency_test)

        # [L161] 2.1 Media Room > BGM (Meta) > Delete from Disk
        # with uuid("b7fdc0e7-7ac4-42b3-a5c5-11ebe8ae382d") as case:

        with step("[Action] Select specific sound clips 'River Water' in library and right click for Download"):
            media_room_page.sound_clips_select_media("River Water")
            main_page.right_click()
            main_page.select_right_click_menu("Download")
            time.sleep(DELAY_TIME * 8)  # wait for download to complete

        with step("[Action] Right click on 'River Water' and select Delete from Disk, then confirm deletion"):
            media_room_page.sound_clips_select_media("River Water")
            main_page.right_click()
            main_page.select_right_click_menu("Delete from Disk")
            main_page.exist_click(L.media_room.confirm_dialog.btn_yes)
            time.sleep(DELAY_TIME * 3)  # wait for deletion process

        with step("[Verify] Verify that download mark is in default status"):
            if main_page.is_exist(L.media_room.scroll_area.table_view_text_field_download_ok):
                assert False, "Download mark is not in default status: download-ok element found!"

        assert True

    @pytest.mark.search_media_func
    @pytest.mark.background_music
    @pytest.mark.content_pack
    @pytest.mark.name("[test_search_media_func_15_14] Search not existed content and check preview")
    @exception_screenshot
    def test_search_media_func_15_14(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Cancel] button in search library
        2. Search 'Rover Woter' in library and screenshot (L.base.Area.library_detail_view)
        3. Click [Cancel] button in search library
        4. Search '.' in library and screenshot (L.base.Area.library_detail_view)
        5. Check the search result is different in 2 steps
        """
        dependency_test = "test_search_media_func_15_13"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            media_room_page.enter_background_music()

        # [L164] 2.1 Media Room > BGM (Meta) > search .
        # with uuid("59dbc4dc-eaec-4df3-8dcc-8ed370c7e4b0") as case:

        # [L165] 2.1 Media Room > BGM (Meta) > search \
        # with uuid("0ea5d15c-9237-42e0-b355-e4d765385ccc") as case:
        else:
            with step("[Action] Click [Cancel] button in search library"):
                media_room_page.search_library_click_cancel()
            
        with step("[Action] Search 'Rover Woter' in library and capture screenshot of library detail view"):
            full_content_preview = main_page.snapshot(locator=L.base.Area.library_detail_view)
            media_room_page.search_library("Rover Woter")
            search_1_preview = main_page.snapshot(locator=L.base.Area.library_detail_view)

        with step("[Verify] Check preview is the same as empty search preview due to no search results"):
            if main_page.compare(full_content_preview, search_1_preview, similarity=0.99):
                assert False, "Search results for 'Rover Woter' are not empty! Similarity should be 0.99"

        with step("[Action] Click [Cancel] button in search library"):
            media_room_page.search_library_click_cancel()

        with step("[Action] Search '.' in library and capture screenshot of library detail view"):
            media_room_page.search_library(".")
            search_2_preview = main_page.snapshot(locator=L.base.Area.library_detail_view)

        with step("[Verify] Check preview is the same as empty search preview due to no search results"):
            if main_page.compare(full_content_preview, search_2_preview, similarity=0.99):
                assert False, "Search results for '.' are not empty! Similarity should be 0.99"
        
        with step("[Action] Click [Cancel] button in search library"):
            media_room_page.search_library_click_cancel()
        
        with step("[Action] Search '\\' in library and capture screenshot of library detail view"):
            media_room_page.search_library("\\")
            search_3_preview = main_page.snapshot(locator=L.base.Area.library_detail_view)

        with step("[Verify] Check preview is the same as empty search preview due to no search results"):
            if main_page.compare(full_content_preview, search_3_preview, similarity=0.99):
                assert False, "Search results for '\\' are not empty! Similarity should be 0.99"
        assert True

    @pytest.mark.search_media_func
    @pytest.mark.content_pack
    @pytest.mark.pip_room
    @pytest.mark.name("[test_search_media_func_15_15] Check Search filed in PiP Room")
    @exception_screenshot
    def test_search_media_func_15_15(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Tap [PiP Room] hotkey to enter PiP Room > Click search filed (L.media_room.input_search) to Unfold suggestion keyword
        2. Click [Close] button of (First recently searched)
        3. Verify search filed is updated
        '''

        dependency_test = "test_search_media_func_15_14"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()

        # [L212] 2.3 Pip Room > Search IAD > click "x" button of "recent searched"
        # with uuid("bf9d047b-f868-4c22-9fa3-a0fb9f79f5ed") as case:

        with step('[Action] Tap [PiP Room] hotkey to enter PiP Room'):
            # Click Hotkey F5 to enter Pip Room
            main_page.tap_PiPRoom_hotkey()
            time.sleep(DELAY_TIME)

            # click search filed to Unfold suggestion keyword
            main_page.click(L.media_room.input_search)
            time.sleep(DELAY_TIME)

        with step('[Action] Search ("love") in [Pip Designer]'):
            media_room_page.search_library("love")
            time.sleep(DELAY_TIME)
            media_room_page.search_library_click_cancel()

        with step('[Action] Click [Close] button of (First recently searched)'):
            # Click the Close button of (First recently searched)
            target = main_page.exist(L.pip_room.suggestion_keyword)
            # Click [X] in recently used keyword 'love'
            x, y = target[1].AXPosition
            w, h = target[1].AXSize
            new_x = x + w + 8
            new_y = y + (h * 0.5)
            main_page.mouse.move(new_x, new_y)
            main_page.mouse.click()

        with step('[Verify] Verify search filed is updated'):
            # Verify step:
            # get search filed size / position
            search_object = main_page.exist(L.media_room.input_search)

            w, h = search_object.AXSize
            x, y = search_object.AXPosition

            # snapshot region (Region: From import button to My Favorites)
            new_x = x
            new_y = y
            new_w = w + 5
            new_h = h * 8.5
            all_search_result = main_page.screenshot(file_name=Auto_Ground_Truth_Folder + 'L212_all_search.png', w=new_w, x=new_x, y=new_y, h=new_h)
            if not main_page.compare(Ground_Truth_Folder + 'L212_all_search.png', all_search_result):
                assert False, "Preview does not match (Ground_Truth_Folder + L212_all_search.png)! Similarity should > 0.95"
        
        assert True


    @pytest.mark.search_media_func
    @pytest.mark.search_library
    @pytest.mark.content_pach
    @pytest.mark.title_room
    @pytest.mark.title_designer
    @pytest.mark.timeline
    @pytest.mark.name('[test_search_media_func_15_16] Add Title (Default) to timeline and enter Title designer')
    @exception_screenshot
    def test_search_media_func_15_16(self):
        '''
        1. start app and enter room (Title Room)(1)
        2. Select Library Room category (Plain Text)
        3. Click timeline track3
        4. Select media ('Default') by library icon view and click (L.main.tips_area.btn_insert_to_selected_track) to insert
        5. Add media to timeline and Double click to enter Title designer
        6. Check that title designer is opened with title 'Title Designer | My Title'
        '''
        # [L217] 2.3 Title > Add each kind of template to timeline  > General Title
        # with uuid("84ed9ced-d8bc-49a9-ad78-01a5dd0083b1") as case:

        with step("[Action] Start app and enter Title Room"):
            main_page.close_and_restart_app()
            main_page.enter_room(1)

        with step("[Action] Select Library Room category (Plain Text)"):
            main_page.select_LibraryRoom_category('Plain Text')

        with step("[Action] Click timeline track3"):
            main_page.timeline_select_track(3)

        with step("[Action] Select media 'Default' and click to insert"):
            main_page.select_library_icon_view_media('Default')
            main_page.click(L.main.tips_area.btn_insert_to_selected_track)

        with step("[Action] Add media to timeline and Double click to enter Title designer"):
            timeline_operation_page.select_timeline_media(track_index=4, clip_index=0)
            main_page.double_click()

        with step("[Verify] Check that title designer is opened with title 'Title Designer | My Title'"):
            actual_title = title_designer_page.get_full_title()
            assert actual_title == 'Title Designer | My Title', f"Expected title 'Title Designer | My Title', got '{actual_title}'"


    @pytest.mark.search_media_func
    @pytest.mark.title_designer
    @pytest.mark.particle
    @pytest.mark.name('[test_search_media_func_15_17] Insert particle and verify text content')
    @exception_screenshot
    def test_search_media_func_15_17(self):
        '''
        0. Ensure the dependency test ('test_search_media_func_15_16') is run and passed
        1. Switch to Advanced mode (2) in title designer
        2. Click [Insert particle] button and insert particle (Nature > Love)(menu_index=7, particle_index=0)
        3. Check (L.title_designer.area.edittext_text_content).AXValue is 'Romance 01'
        '''

        # Ensure the dependency test is run and passed
        self.ensure_dependency("test_search_media_func_15_16")

        # [L350] 3.2 Title designer (general template) > Move, resize and rotate
        # with uuid("8b1ebdc6-8076-4b6b-849d-3e1a6f72b20b") as case:

        with step("[Action] Switch to Advanced mode (2) in title designer"):
             title_designer_page.switch_mode(2)

        with step("[Action] Click [Insert particle] button and insert particle (Nature > Love)"):
            title_designer_page.click_insert_particle_btn()
            title_designer_page.insert_particle(menu_index=7, particle_index=0)

        with step("[Verify] Check that the edit text content is 'Romance 01'"):
            elem = main_page.exist(L.title_designer.area.edittext_text_content)
            assert elem.AXValue == 'Romance 01', f"Expected text content to be 'Romance 01', got '{elem.AXValue}'"



    @pytest.mark.search_media_func
    @pytest.mark.title_designer
    @pytest.mark.particle
    @pytest.mark.canva
    @pytest.mark.name("[test_search_media_func_15_18] Set timecode, move particle, and verify preview similarity")
    @exception_screenshot
    def test_search_media_func_15_18(self):
        """
        0. Ensure the dependency test ('test_search_media_func_15_17') is run and passed
        1. Set timecode to '00_00_02_13' in title designer > switch to Advanced mode (2) > screenshot (locator=L.title_designer.area.frame_video_preview)
        2. Move [Particle] to left (x=100) > screenshot (locator=L.title_designer.area.frame_video_preview)
        3. Check preview is updated
        """
        dependency_test = "test_search_media_func_15_17"
        self.ensure_dependency(dependency_test)

        with step("[Action] Set timecode to '00_00_02_13' in title designer and switch to Advanced mode (2) then capture screenshot"):
            title_designer_page.set_timecode('00_00_02_13')
            title_designer_page.switch_mode(2)
            before_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)

        with step("[Action] Move [Particle] to left (x=100) and capture screenshot of title designer preview"):
            title_designer_page.adjust_title_on_canvas.drag_move_particle_to_left(x=100)
            after_move_particle_preview = main_page.snapshot(locator=L.title_designer.area.frame_video_preview)

        with step("[Verify] Check preview is updated"):
            if main_page.compare(before_preview, after_move_particle_preview, similarity=0.9):
                assert False, "Similarity is higher than expected! Similarity should < 0.9"

        assert True

    @pytest.mark.search_media_func
    @pytest.mark.title_designer
    @pytest.mark.particle
    @pytest.mark.canva
    @pytest.mark.name("[test_search_media_func_15_19] Verify Border depth direction element exists and is disabled")
    @exception_screenshot
    def test_search_media_func_15_19(self):
        """
        0. Ensure the dependency test is run and passed
        1. Switch to editing object by click (L.title_designer.area.view_title)
        2. Tap [Select All] via hotkey
        3. Unfold Border menu by click (L.title_designer.border.btn_border)
        4. Check [Border depth direction] is exist and disabled (L.title_designer.border.value_box_depth)
        """
        dependency_test = "test_search_media_func_15_18"
        self.ensure_dependency(dependency_test)

        # [L352] 3.2 Title designer (general template) > Advanced mode > Border depth > Default disable
        # with uuid("0136f478-abeb-429a-bf88-1719e4221862") as case:

        with step("[Action] Switch to editing object by clicking view title"):
            # title_designer_page.click_object_tab()
            main_page.click(L.title_designer.area.view_title)
            time.sleep(DELAY_TIME)

        with step("[Action] Tap [Select All] via hotkey"):
            main_page.tap_SelectAll_hotkey()

        with step("[Action] Unfold Border menu by clicking border button"):
           main_page.click(L.title_designer.border.btn_border)

        with step("[Verify] Check [Border depth direction] exists and is disabled"):
            element = main_page.exist(L.title_designer.border.value_box_depth)
            if not element:
                assert False, "Border depth direction element does not exist!"
            # Assuming the element has an is_enabled() method to verify its state.
            if main_page.exist(L.title_designer.border.value_box_depth).AXEnabled:
                assert False, "Border depth direction element is not disabled!"

        assert True

    @pytest.mark.search_media_func
    @pytest.mark.title_designer
    @pytest.mark.name("[test_search_media_func_15_20] Verify title border depth and preview match GT")
    @exception_screenshot
    def test_search_media_func_15_20(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enable Border in title designer
        2. Set Title border depth = 40
        3. Verify preview (locator=L.title_designer.area.frame_video_preview) is the same as GT (Auto_Ground_Truth_Folder + 'L351_title.png') (similarity=0.93)
        """
        dependency_test = "test_search_media_func_15_19"
        self.ensure_dependency(dependency_test)

        # [L351] 3.2 Title designer (general template) > Advanced mode > Border depth
        # with uuid("847e1d95-b03d-4180-816d-a8e538e0ffa2") as case:

        with step("[Action] Enable Border in title designer"):
            title_designer_page.apply_border(bApply=1)

        with step("[Action] Set Title border depth = 40"):
            title_designer_page.drag_border_depth_slider(40)

        with step("[Verify] Verify preview matches GT (L351_title.png)"):
            preview = main_page.snapshot(
                locator=L.title_designer.area.frame_video_preview,
                file_name=Auto_Ground_Truth_Folder + 'L351_title.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L351_title.png',
                preview,
                similarity=0.93
            )
            if not check_preview:
                # Similarity should be greater than 0.93 for matching preview
                assert False, "Preview does not match Ground Truth (L351_title.png)! Similarity should > 0.93"

        assert True

    @pytest.mark.search_media_func
    @pytest.mark.title_designer
    @pytest.mark.name("[test_search_media_func_15_21] Adjust [Border Depth Direction]")
    @exception_screenshot
    def test_search_media_func_15_21(self):
        """
        0. Ensure the dependency test is run and passed
        1. Set [Border Depth Direction] by Value = 207
        2. Check that Border Depth (L.title_designer.border.edittext_depth) is updated to 20
        """
        dependency_test = "test_search_media_func_15_20"
        self.ensure_dependency(dependency_test)

        # [L353] 3.2 Title designer (general template) > Advanced mode > Border depth > Can edit direction
        # with uuid("bd771098-43b3-4c0c-ade2-ca443681e98f") as case:

        with step("[Action] Set [Border Depth Direction] by Value to 207"):
            title_designer_page.input_border_depth_value(207)

        with step("[Verify] Check that [Border Depth Direction] is updated to 207"):
            element = main_page.exist(L.title_designer.border.edittext_depth)
            if element.AXValue != "207":
                assert False, f"[Border Depth Direction] is not updated to 207! Expected: 207, Got: {element.AXValue}"

        assert True

    @pytest.mark.search_media_func
    @pytest.mark.title_designer
    @pytest.mark.pip_room
    @pytest.mark.timeline
    @pytest.mark.timecode
    @pytest.mark.name("[test_search_media_func_15_22] Verify preview update in Pip Room after inserting saved title template")
    @exception_screenshot
    def test_search_media_func_15_22(self):
        """
        0. Ensure the dependency test is run and passed
        1. Fold Border menu and switch to Basic Mode in title designer
        2. Save template as 'Title_and_Particle_save' in title designer
        3. Click [OK] to back to timeline
        4. Enter [Pip] Room (4) and enter category (Shape)
        5. Select timeline track 2 and select media (Shape 004) by library icon view
        6. Click insert button to insert media
        7. Set timecode to '00_00_03_03' at main page
        8. Verify preview is the same as GT (Ground_Truth_Folder + 'L222_shape.png') with similarity=0.95
        """
        dependency_test = "test_search_media_func_15_21"
        self.ensure_dependency(dependency_test)

        with step("[Action] Fold Border menu and switch to Basic Mode in title designer"):
            main_page.click(L.title_designer.border.btn_border)
            title_designer_page.switch_mode(1)

        with step("[Action] Save template as 'Title_and_Particle_save' in title designer"):
            main_page.click(L.title_designer.btn_save_as)
            title_designer_page.click_custom_name_ok('Title_and_Particle_save')

        with step("[Action] Click [OK] to back to timeline"):
            title_designer_page.click_ok()

        # [L222] 2.3 Pip > Add each kind of template to timeline  > Pip / Shape
        # with uuid("cc6ddcb5-e490-4fd7-85df-cbf4571c4905") as case:
        
        with step("[Action] Enter [Pip] Room (4) and enter category (Shape)"):
            main_page.enter_room(4)
            main_page.select_LibraryRoom_category('Shape')

        with step("[Action] Select timeline track 2 and select media (Shape 004) by library icon view"):
            main_page.timeline_select_track(2)
            main_page.select_library_icon_view_media("Shape 004")

        with step("[Action] Click insert button to insert media"):
            main_page.click(L.main.tips_area.btn_insert_to_selected_track)

        with step("[Action] Set timecode to '00_00_03_03' at main page"):
            main_page.set_timeline_timecode("00_00_03_03")

        with step("[Verify] Check preview is updated"):
            preview = main_page.snapshot(
                locator=main_page.area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + "L222_shape.png"
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + "L222_shape.png",
                preview,
                similarity=0.95
            )
            if not check_preview:
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L222_shape.png)! Similarity should > 0.95"
        assert True

    @pytest.mark.search_media_func
    @pytest.mark.search_library
    @pytest.mark.import_media
    @pytest.mark.media_room
    @pytest.mark.name("[test_search_media_func_15_23] Verify preview matches GT after importing and searching media in JPN")
    @exception_screenshot
    def test_search_media_func_15_23(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter Room (Media)(0)
        2. Import [media file] (Test_Material_Folder + 'BFT_21_Stage1/デスクトップ.jpg')
        3. Import [media file] (Test_Material_Folder + 'BFT_21_Stage1/斑馬.jpg')
        4. Search library with keyword 'デスクトップ'
        5. Check that preview (L.base.Area.preview.only_mtk_view) is the same as GT (Ground_Truth_Folder + 'L134_JPN.png')
        """
        dependency_test = "test_search_media_func_15_22"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.start_app()

        # [L134] 2.1 Media Room > Media Content > Search > Input double character
        # with uuid("83f07c24-689f-4d83-bc3f-5e128f12b291") as case:
        else:
            with step("[Action] Enter Room (Media)(0)"):
                main_page.enter_room(0)

        with step("[Action] Import media file (Test_Material_Folder + 'BFT_21_Stage1/斑馬.jpg')"):
            media_room_page.import_media_file(Test_Material_Folder + "BFT_21_Stage1/斑馬.jpg")

        with step("[Action] Import media file (Test_Material_Folder + 'BFT_21_Stage1/デスクトップ.jpg')"):
            media_room_page.import_media_file(Test_Material_Folder + "BFT_21_Stage1/デスクトップ.jpg")


        with step("[Action] Search library with keyword 'デスクトップ'"):
            media_room_page.search_library("デスクトップ")

        with step("[Verify] Check that preview matches GT (L134_JPN.png)"):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + "L134_JPN.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "L134_JPN.png", preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L134_JPN.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.search_media_func
    @pytest.mark.search_library
    @pytest.mark.media_room
    @pytest.mark.name("[test_search_media_func_15_24] Verify preview after searching media in CHT")
    @exception_screenshot
    def test_search_media_func_15_24(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Cancel] button in search library
        2. Search library with keyword '斑馬'
        3. Check that preview (L.base.Area.preview.only_mtk_view) is the same as GT (Ground_Truth_Folder + 'L134_CHT.png')
        """
        dependency_test = "test_search_media_func_15_23"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click [Cancel] button in search library"):
            media_room_page.search_library_click_cancel()

        with step("[Action] Search library with keyword '斑馬'"):
            media_room_page.search_library("斑馬")

        with step("[Verify] Check that preview matches GT (L134_CHT.png)"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + "L134_CHT.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "L134_CHT.png", preview_snapshot, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L134_CHT.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.search_media_func
    @pytest.mark.search_library
    @pytest.mark.media_room
    @pytest.mark.name("[test_search_media_func_15_25] Verify no results found text for special characters search")
    @exception_screenshot
    def test_search_media_func_15_25(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Cancel] button in search library
        2. Search library with keyword '&^$%'
        3. Check that 'No results found' text (L.media_room.txt_no_results_for_special_character) is displayed
        """
        dependency_test = "test_search_media_func_15_24"
        self.ensure_dependency(dependency_test)

        # [L135] 2.1 Media Room > Media Content > Search > Input special character
        # with uuid("908d111a-cf81-47d0-a83f-73af949a3c7e") as case:

        with step("[Action] Click [Cancel] button in search library"):
            media_room_page.search_library_click_cancel()

        with step("[Action] Search library with keyword '&^$%'"):
            media_room_page.search_library("&^$%")

        with step("[Verify] Check that 'No results found' text is displayed"):
            if not main_page.is_exist(L.media_room.txt_no_results_for_special_character):
                assert False, "'No results found' text is not displayed!"

        assert True

    @pytest.mark.search_media_func
    @pytest.mark.effect_room
    @pytest.mark.search_library
    @pytest.mark.name("[test_search_media_func_15_26] Verify media selection in Popular category in Effect Room")
    @exception_screenshot
    def test_search_media_func_15_26(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter Room (Effect)(3)
        2. Select Library Room category (Popular) and check result
        3. Select media ('Lens Flare 01') by library icon view and check result
        """
        dependency_test = "test_search_media_func_15_25"
        self.ensure_dependency(dependency_test)

        # [L226] 2.3 Effect Room > Support Most popular category
        # with uuid("afa3c4f9-1134-40d3-9536-0515cd71b1c8") as case:

        with step("[Action] Enter Room (Effect)(3)"):
            main_page.enter_room(3)

        with step("[Action] Select Library Room category (Popular) and check result"):
            if not main_page.select_LibraryRoom_category("Popular"):
                assert False, "Failed to select Library Room category 'Popular'"

        with step("[Action] Select media ('Lens Flare 01') by library icon view and check result"):
            if not main_page.select_library_icon_view_media("Lens Flare 01"):
                assert False, "Failed to select media 'Lens Flare 01' by library icon view"

        assert True

    @pytest.mark.recent_project_func
    @pytest.mark.recent_project
    @pytest.mark.open_project
    @pytest.mark.launch
    @pytest.mark.name('[test_recent_project_func_16_1] Open pack project and verify recent project exists on launcher')
    @exception_screenshot
    def test_recent_project_func_16_1(self):
        '''
        1. Launch APP and open packed project (BFT_21_Stage1/test_recent_project_func_16_1_from_test_search_media_func_15_9.pdk)
        2. Click [Close] button to back to launcher
        3. Check there is recent project by (L.base.launcher_window.txt_no_recent_project) is not exsit
        4. Check preview as GT (Ground_Truth_Folder + 'L40_recent_project_first_icon.png') with similarity=0.88
        '''

        # [L40] 1.3 New Launcher > Project Area > Recent Project > Click del button
        # with uuid("d456b735-21d5-4427-a935-e445e60cc3f4") as case:

        with step("[Action] Open APP and open packed project"):
            main_page.start_app()
            project_name = 'Packed_Project/test_recent_project_func_16_1_from_test_search_media_func_15_9.pdk'
            save_name = 'Extracted_Folder/test_recent_project_func_16_1'
            self.open_packed_project(project_name, save_name)

        with step("[Action] Click [Close] button to back to launcher"):
            main_page.click_close_then_back_to_launcher()
        
        with step("[Verify] Check that recent project exists"):
            # Assert that the locator for 'No Recent Project' is not present, meaning a recent project is available.
            if main_page.is_not_exist(L.base.launcher_window.txt_no_recent_project):
                assert False, "[no recent project] is found! Expected no [no recent project] string."

        with step("[Verify] Check preview as GT"):
            recent_project_first_icon = main_page.snapshot(L.base.launcher_window.img_recently_icon, file_name=Auto_Ground_Truth_Folder + 'L40_recent_project_first_icon.png')
            check_first_icon = main_page.compare(Ground_Truth_Folder + 'L40_recent_project_first_icon.png', recent_project_first_icon, similarity=0.88)
            if not check_first_icon:
                # Similarity should be greater than 0.88
                assert False, "Recent project icon does not match GT (L40_recent_project_first_icon.png)! Similarity should > 0.88"
        
        assert True

    @pytest.mark.recent_project_func
    @pytest.mark.recent_project
    @pytest.mark.name('[test_recent_project_func_16_2] Delete 1st recent project and verify "No Recent Project" is shown')
    @exception_screenshot
    def test_recent_project_func_16_2(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Delete 1st recent project
        2. Check (L.base.launcher_window.txt_no_recent_project) is shown
        '''
        dependency_test = "test_recent_project_func_16_1"
        self.ensure_dependency(dependency_test)

        with step("[Action] Delete 1st recent project"):
            main_page.delete_first_recently_project()

        with step("[Verify] Check that 'No Recent Project' is shown"):
            if not main_page.is_exist(L.base.launcher_window.txt_no_recent_project):
                assert False, "'No Recent Project' text is not displayed!"

        assert True

    @pytest.mark.recent_project_func
    @pytest.mark.recent_project
    @pytest.mark.open_project
    @pytest.mark.name('[test_recent_project_func_16_3] Open project via launcher and verify recent project list and icon as GT')
    @exception_screenshot
    def test_recent_project_func_16_3(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Open project by launch via click (L.base.launcher_window.btn_open_project) and deal with [Open Project] dialog (Test_Material_Folder + 'BFT_21_Stage1/can_del.pds')
        2. Click [Close] button to back to launcher
        3. Screenshot main_page.exist(L.base.launcher_window.launcher_scroll_area_list)[1] as Auto_Ground_Truth_Folder + 'L38_recent_project_list.png' and check as GT
        4. Screenshot (L.base.launcher_window.img_recently_icon) as Auto_Ground_Truth_Folder + 'L38_recent_project_first_icon.png' and check as GT
        '''
        dependency_test = "test_recent_project_func_16_2"
        self.ensure_dependency(dependency_test)
        
        # [L38] 1.3 New Launcher > Recent Project > Check each project item
        # with uuid("549406d6-e519-4b02-8bbd-e9c167fdce05") as case:

        with step("[Action] Open project via launcher and handle open project dialog"):
            main_page.click(L.base.launcher_window.btn_open_project)
            # Wait for the dialog to be ready
            time.sleep(DELAY_TIME * 2)
            main_page.handle_open_project_dialog(Test_Material_Folder + "BFT_21_Stage1/can_del.pds")
        
        with step("[Action] Click [Close] button to return to launcher"):
            main_page.click_close_then_back_to_launcher()
        
        with step("[Verify] Check recent project list screenshot as GT"):
            # Capture screenshot of the second element in launcher scroll area list
            element = main_page.exist(L.base.launcher_window.launcher_scroll_area_list)[1]
            screenshot_list = main_page.snapshot(element, file_name=Auto_Ground_Truth_Folder + "L38_recent_project_list.png")
            check_list = main_page.compare(Ground_Truth_Folder + "L38_recent_project_list.png", screenshot_list, similarity=0.94)
            if not check_list:
                assert False, "Recent project list does not match GT! Similarity should > 0.94"
        
        with step("[Verify] Check recent project first icon screenshot as GT"):
            screenshot_icon = main_page.snapshot(L.base.launcher_window.img_recently_icon, file_name=Auto_Ground_Truth_Folder + "L38_recent_project_first_icon.png")
            check_icon = main_page.compare(Ground_Truth_Folder + "L38_recent_project_first_icon.png", screenshot_icon, similarity=0.94)
            if not check_icon:
                assert False, "Recent project icon does not match GT! Similarity should > 0.94"
        assert True

    @pytest.mark.recent_project_func
    @pytest.mark.preferences
    @pytest.mark.name('[test_recent_project_func_16_4] Set Recently Used Projects value to 1 and verify')
    @exception_screenshot
    def test_recent_project_func_16_4(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Click [New Project] button on Launcher
        2. Click [Set User Preferences] > Switch to [Project] tab
        3. Set [Numbers of Recently Used Projects] to value (1)
        4. Get [Numbers of Recently Used Projects] value and verify it is '1'
        5. Click [OK] button to leave [Preferences page]
        '''
        dependency_test = "test_recent_project_func_16_3"
        self.ensure_dependency(dependency_test)
        
        # [L37] 1.3 New Launcher > Recent Project > Check total project item
        # with uuid("8007768c-e38d-4a9e-a9b9-f365f0f71bbb") as case:

        with step("[Action] Click [New Project] button on Launcher"):
            main_page.click_new_project_on_launcher()
        
        with step("[Action] Open User Preferences and switch to Project tab"):
            main_page.click_set_user_preferences()
            preferences_page.switch_to_project()
        
        with step("[Action] Set Numbers of Recently Used Projects to 1"):
            preferences_page.project.numbers_of_recently_used_project_set_value(1)
            time.sleep(DELAY_TIME*0.5)
        
        with step("[Verify] Verify Numbers of Recently Used Projects is set to 1"):
            value = preferences_page.project.numbers_of_recently_used_project_get_value()
            if str(value) != '1':
                assert False, f"Numbers of Recently Used Projects value mismatch! Expected '1', got '{value}'"
        
        with step("[Action] Click [OK] button to leave Preferences page"):
            preferences_page.click_ok()
        
        assert True

    @pytest.mark.recent_project_func
    @pytest.mark.recent_project
    @pytest.mark.open_project
    @pytest.mark.name('[test_recent_project_func_16_5] Open packed project and verify recent project list and icon as GT')
    @exception_screenshot
    def test_recent_project_func_16_5(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Open packed project (BFT_21_Stage1/test_recent_project_func_16_1_from_test_search_media_func_15_9.pdk)
        2. Click [Close] button to back to launcher
        3. Screenshot main_page.exist(L.base.launcher_window.launcher_scroll_area_list)[1] and check as GT (Ground_Truth_Folder + 'L38_recent_project_list.png')(similarity=0.99)
        4. Screenshot (L.base.launcher_window.img_recently_icon) and check as GT (Ground_Truth_Folder + 'L40_recent_project_first_icon.png')(similarity=0.85)
        '''
        dependency_test = "test_recent_project_func_16_1"
        self.ensure_dependency(dependency_test)

        with step("[Action] Open packed project"):
            project_name = 'Packed_Project/test_recent_project_func_16_1_from_test_search_media_func_15_9.pdk'
            save_name = 'Extracted_Folder/test_recent_project_func_16_1'
            self.open_packed_project(project_name, save_name)

        with step("[Action] Click [Close] button to back to launcher"):
            main_page.click_close_then_back_to_launcher()

        with step("[Verify] Check recent project list screenshot as GT"):
            element = main_page.exist(L.base.launcher_window.launcher_scroll_area_list)[1]
            screenshot_list = main_page.snapshot(element)
            check_list = main_page.compare(Ground_Truth_Folder + 'L38_recent_project_list.png', screenshot_list, similarity=0.99)
            if check_list:
                assert False, "Recent project list screenshot does not match GT! Similarity should < 0.99"

        with step("[Verify] Check recent project first icon screenshot as GT"):
            screenshot_icon = main_page.snapshot(L.base.launcher_window.img_recently_icon, file_name=Auto_Ground_Truth_Folder + 'L40_recent_project_first_icon.png')
            check_icon = main_page.compare(Ground_Truth_Folder + 'L40_recent_project_first_icon.png', screenshot_icon, similarity=0.85)
            if not check_icon:
                # Similarity should be greater than 0.85
                assert False, "Recent project icon does not match GT! Similarity should > 0.85"
        assert True

    @pytest.mark.launcher_func
    @pytest.mark.launch
    @pytest.mark.media_room
    @pytest.mark.search_library
    @pytest.mark.name('[test_launcher_func_17_1] Search (\) in library')
    @exception_screenshot
    def test_launcher_func_17_1(self):
        '''
        1. Clear cache and start APP
        2. Screenshot (locator=main_page.area.library_icon_view)
        3. Search '\' in library and verify (L.media_room.txt_no_results_for_backslash) is shown
        4. Check preview is updated (similarity=0.55)
        5. Click [Cancel] button in search library
        '''

        with step("[Action] Clear cache and start APP"):
            main_page.clear_cache()
            main_page.start_app()

        # [L137] 2.1 Media Room > Search > Input "\" character
        # with uuid("724e6ae1-8e88-4304-9ae8-e327dc38ed8c") as case:

        with step("[Action] Capture screenshot of library icon view"):
            library_snapshot = main_page.snapshot(locator=main_page.area.library_icon_view, file_name=Auto_Ground_Truth_Folder + 'L137.png')

        with step("[Action] Search backslash in library"):
            media_room_page.search_library('\\')

        with step("[Verify] Verify no results text is shown"):
            if not main_page.is_exist(L.media_room.txt_no_results_for_backslash):
                assert False, "No results text for backslash search is not displayed!"

        with step("[Verify] Check preview is updated"):
            preview_snapshot = main_page.snapshot(locator=main_page.area.library_icon_view)
            if main_page.compare(library_snapshot, preview_snapshot, similarity=0.55):
                assert False, "Preview did not update as expected! Similarity should < 0.55"

        with step("[Action] Click [Cancel] button in search library"):
            media_room_page.search_library_click_cancel()

        assert True


    @pytest.mark.launcher_func
    @pytest.mark.media_room
    @pytest.mark.search_library
    @pytest.mark.name('[test_launcher_func_17_2] Search (.) in library and verify no results')
    @exception_screenshot
    def test_launcher_func_17_2(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Search '.' in library and verify no results
        2. Check preview (locator=main_page.area.library_icon_view) is as (Auto_Ground_Truth_Folder + 'L137.png') (similarity=0.99)
        '''
        dependency_test = "test_launcher_func_17_1"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()

        # [L136] 2.1 Media Room > Search > Input "." character
        # with uuid("53f02d9c-36a4-42a6-8990-1f5d996130cc") as case:

        with step("[Action] Search '.' in library"):
            # media_room_page.search_library(".")

            main_page.click(L.media_room.input_search)
            main_page.keyboard.send(".")
            time.sleep(DELAY_TIME)
            main_page.press_enter_key()
            time.sleep(DELAY_TIME * 3)
            main_page.move_mouse_to_0_0()
            time.sleep(DELAY_TIME)

        with step("[Verify] Check preview against GT (L137.png)"):
            preview_snapshot = main_page.snapshot(locator=main_page.area.library_icon_view)
            check_preview = main_page.compare(
                Auto_Ground_Truth_Folder + "L137.png",
                preview_snapshot,
                similarity=0.99
            )
            if not check_preview:
                assert False, "Preview does not match (Auto_Ground_Truth_Folder + L137.png)! Similarity should > 0.99"

        assert True


    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_launcher_func_17_3] Hover on launcher button  [Video Stabilizer] and verify showcase title and description')
    @exception_screenshot
    def test_launcher_func_17_3(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Close] button to back to launcher
        2. Hover on btn (Video Stabilizer)(L.base.launcher_window.btn_video_stabilizer) on launcher
        3. Verify title is 'Video Stabilizer'
        4. Verify description is 'Eliminate unwanted camera shakiness and jitters.'
        """
        dependency_test = "test_launcher_func_17_2"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()

        # [L17] 1.3 New Launcher > Showcase > Video Stabilizer > Caption & Text
        # with uuid("83fce6dc-f677-4686-bb9b-52d3c90e35c6") as case:

        with step("[Action] Click [Close] button to back to launcher"):
            main_page.click_close_then_back_to_launcher()

        with step("[Action] Hover on btn (Video Stabilizer) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_video_stabilizer)

        with step("[Verify] Check that show case title is 'Video Stabilizer'"):
            # Verify that the title value equals the expected string
            target = main_page.exist(L.base.launcher_window.show_case_title)
            if target.AXValue != 'Video Stabilizer':
                assert False, f"Show case title does not match expected value! Expected 'Video Stabilizer', got '{target.AXValue}'"

        with step("[Verify] Check that show case description is 'Eliminate unwanted camera shakiness and jitters.'"):
            # Verify that the description value equals the expected string
            target = main_page.exist(L.base.launcher_window.show_case_description)
            if target.AXValue != 'Eliminate unwanted camera shakiness and jitters.':
                assert False, f"Show case description does not match expected value! Expected 'Eliminate unwanted camera shakiness and jitters.', got '{target.AXValue}'"
        assert True

    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_launcher_func_17_4] Hover on launcher button [AI Audio Denoise] and verify showcase title and description')
    @exception_screenshot
    def test_launcher_func_17_4(self):
        """
        0. Ensure the dependency test is run and passed
        1. Hover on btn (AI Audio Denoise)(L.base.launcher_window.btn_audio_denoise) on launcher
        2. Verify title is 'AI Audio Denoise'
        3. Verify description is 'Auto-remove unwanted noises and restore dialogue or music tracks for crystal clear sound.'
        """
        dependency_test = "test_launcher_func_17_3"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        # [L32] 1.3 New Launcher > Showcase > AI Audio Denoise > Caption & Text
        # with uuid("b8135996-1a91-48ef-9502-57f59dad32c0") as case:
        with step("[Action] Hover on btn (AI Audio Denoise) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_audio_denoise)

        with step("[Verify] Check that show case title is 'AI Audio Denoise'"):
            target = main_page.exist(L.base.launcher_window.show_case_title)
            if target.AXValue != 'AI Audio Denoise':
                assert False, f"Show case title does not match expected value! Expected 'AI Audio Denoise', got '{target.AXValue}'"

        with step("[Verify] Check that show case description is 'Auto-remove unwanted noises and restore dialogue or music tracks for crystal clear sound.'"):
            target = main_page.exist(L.base.launcher_window.show_case_description)
            if target.AXValue != 'Auto-remove unwanted noises and restore dialogue or music tracks for crystal clear sound.':
                assert False, f"Show case description does not match expected value! Expected 'Auto-remove unwanted noises and restore dialogue or music tracks for crystal clear sound.', got '{target.AXValue}'"

        assert True


    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_launcher_func_17_5] Hover on launcher button [AI Body Effect] and verify showcase title and description')
    @exception_screenshot
    def test_launcher_func_17_5(self):
        """
        0. Ensure the dependency test is run and passed
        1. Hover on btn (AI Body Effect)(L.base.launcher_window.btn_ai_body_effect) on launcher
        2. Verify title is 'AI Body Effects'
        3. Verify description is 'Instantly apply visual effects to moving people and objects.'
        """
        dependency_test = "test_launcher_func_17_4"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        
        # [L14] 1.3 New Launcher > Showcase > Body Effect > Caption & Text
        # with uuid("a316905c-e8b5-4271-9dc1-1f4485c684a8") as case:

        with step("[Action] Hover on btn (AI Body Effect) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_ai_body_effect)

        with step("[Verify] Check that show case title is 'AI Body Effects'"):
            target = main_page.exist(L.base.launcher_window.show_case_title)
            if target.AXValue != 'AI Body Effects':
                assert False, f"Show case title does not match expected value! Expected 'AI Body Effects', got '{target.AXValue}'"

        with step("[Verify] Check that show case description is 'Instantly apply visual effects to moving people and objects.'"):
            target = main_page.exist(L.base.launcher_window.show_case_description)
            if target.AXValue != 'Instantly apply visual effects to moving people and objects.':
                assert False, f"Show case description does not match expected value! Expected 'Instantly apply visual effects to moving people and objects.', got '{target.AXValue}'"

        assert True

    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_launcher_func_17_6] Hover on launcher button [AI Wind Removal] and verify showcase title and description')
    @exception_screenshot
    def test_launcher_func_17_6(self):
        """
        0. Ensure the dependency test is run and passed
        1. Hover on launcher button (AI Wind Removal)(L.base.launcher_window.btn_wind_removal)
        2. Verify title is 'AI Wind Removal'
        3. Verify description is 'Detect and reduce wind noises for crisp, clean audio.'
        """
        dependency_test = "test_launcher_func_17_5"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        # [L23] 1.3 New Launcher > Showcase > AI Wind Removal > Caption & Text
        # with uuid("4735b0f6-2ee7-4ded-a083-6e7abb84fb40") as case:

        with step("[Action] Hover on launcher button [AI Wind Removal] on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_wind_removal)

        with step("[Verify] Check that show case title is 'AI Wind Removal'"):
            target = main_page.exist(L.base.launcher_window.show_case_title)
            if target.AXValue != 'AI Wind Removal':
                assert False, f"Show case title does not match expected value! Expected 'AI Wind Removal', got '{target.AXValue}'"

        with step("[Verify] Check that show case description is 'Detect and reduce wind noises for crisp, clean audio.'"):
            target = main_page.exist(L.base.launcher_window.show_case_description)
            if target.AXValue != 'Detect and reduce wind noises for crisp, clean audio.':
                assert False, f"Show case description does not match expected value! Expected 'Detect and reduce wind noises for crisp, clean audio.', got '{target.AXValue}'"

        assert True

    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_launcher_func_17_7] Hover on launcher btn [AI Audio Denoise] and verify intro video is playing')
    @exception_screenshot
    def test_launcher_func_17_7(self):
        """
        0. Ensure the dependency test is run and passed
        1. Hover on launcher btn (AI Audio Denoise)(L.base.launcher_window.btn_audio_denoise)
        2. Verify intro video is playing
        """
        dependency_test = "test_launcher_func_17_6"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        # [L33] 1.3 New Launcher > Showcase > AI Audio Denoise > Video
        # with uuid("c7390426-3098-479c-b2bb-dd158f77b08a") as case:

        with step("[Action] Hover on launcher btn (AI Audio Denoise) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_audio_denoise)

        with step("[Verify] Check intro video is playing"):
            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):
                assert False, "Intro video is not playing!"
            
        assert True

    # @pytest.mark.launcher_func
    # @pytest.mark.launcher
    # @pytest.mark.name('[test_launcher_func_17_8] Hover on launcher btn [Greener Grass] and verify intro video is playing')
    # @exception_screenshot
    # def test_launcher_func_17_8(self):
    #     """
    #     0. Ensure the dependency test is run and passed
    #     1. Hover on launcher btn (Greener Grass)(L.base.launcher_window.btn_greener_grass)
    #     2. Verify intro video is playin
    #     """
    #     dependency_test = "test_launcher_func_17_7"
    #     if not self.ensure_dependency(dependency_test, run_dependency=False):
    #         main_page.clear_cache()
    #         main_page.start_app()
    #         main_page.click_close_then_back_to_launcher()

    #     # [L27] 1.3 New Launcher > Showcase > Greener Grass > Video
    #     # with uuid("0e0facdb-bc69-4595-94dc-cc05fe2521f7") as case:

    #     with step("[Action] Hover on launcher btn (Greener Grass) on launcher"):
    #         main_page.hover_launcher_btn(L.base.launcher_window.btn_greener_grass)

    #     with step("[Verify] Check intro video is playing"):
    #         if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):
    #             assert False, "Intro video is not playing!"

    #     assert True


    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_launcher_func_17_9] Hover on launcher btn [Video Denoise] and verify intro video is playing')
    @exception_screenshot
    def test_launcher_func_17_9(self):
        """
        0. Ensure the dependency test is run and passed
        1. Hover on launcher btn (Video Denoise)(L.base.launcher_window.btn_video_denoise)
        2. Verify intro video is playing
        """
        dependency_test = "test_launcher_func_17_7"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        # [L21] 1.3 New Launcher > Showcase > Video Denoise > Video
        # with uuid("33f8faac-3ae8-4556-a195-5b1e6486e856") as case:

        with step("[Action] Hover on launcher btn (Video Denoise) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_video_denoise)

        with step("[Verify] Check intro video is playing"):
            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):
                assert False, "Intro video is not playing!"

        assert True

    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_launcher_func_17_10] Hover on launcher btn [AI Body Effect] and verify intro video is playing')
    @exception_screenshot
    def test_launcher_func_17_10(self):
        """
        0. Ensure the dependency test is run and passed
        1. Hover on launcher btn (AI Body Effect)(L.base.launcher_window.btn_ai_body_effect)
        2. Verify intro video is playing
        """
        dependency_test = "test_launcher_func_17_9"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        # [L15] 1.3 New Launcher > Showcase > Body Effect > Video
        # with uuid("5b1b5a5f-4fb7-42c7-b2b1-9e20b9731c84") as case:

        with step("[Action] Hover on launcher btn (AI Body Effect) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_ai_body_effect)

        with step("[Verify] Check intro video is playing"):
            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):
                assert False, "Intro video is not playing!"

        assert True

    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_launcher_func_17_11] Hover on launcher btn [Wind Removal] and verify intro video is playing')
    @exception_screenshot
    def test_launcher_func_17_11(self):
        """
        0. Ensure the dependency test is run and passed
        1. Hover on launcher btn (Wind Removal)(L.base.launcher_window.btn_wind_removal)
        2. Verify intro video is playing
        """
        dependency_test = "test_launcher_func_17_10"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        # [L24] 1.3 New Launcher > Showcase > Wind Removal > Video
        # with uuid("4c5e99ad-46bd-413f-be95-c56c45f80fb7") as case:

        with step("[Action] Hover on launcher btn (Wind Removal) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_ai_body_effect)

        with step("[Verify] Check intro video is playing"):
            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):
                assert False, "Intro video is not playing!"

        assert True

    # @pytest.mark.launcher_func
    # @pytest.mark.launcher
    # @pytest.mark.name('[test_launcher_func_17_12] Hover on launcher btn [Greener Grass], click intro video area, check import dialog, and press ESC to close')
    # @exception_screenshot
    # def test_launcher_func_17_12(self):
    #     """
    #     0. Ensure the dependency test is run and passed
    #     1. Hover on launcher btn (Greener Grass)(L.base.launcher_window.btn_greener_grass)
    #     2. Click intro video area
    #     3. Check that import dialog is shown with title 'Greener Grass'
    #     4. Press [ESC] key to close import dialog
    #     """
    #     dependency_test = "test_launcher_func_17_11"
    #     if not self.ensure_dependency(dependency_test, run_dependency=False):
    #         main_page.clear_cache()
    #         main_page.start_app()
    #         main_page.click_close_then_back_to_launcher()

    #     # [L28] 1.3 New Launcher > Showcase > Greener Grass > Single click on banner area
    #     # with uuid("72234195-e74c-4ad4-a61c-572ed387a661") as case:

    #     with step("[Action] Hover on launcher btn (Greener Grass) on launcher"):
    #         main_page.hover_launcher_btn(L.base.launcher_window.btn_greener_grass)

    #     with step("[Action] Click intro video area"):
    #         main_page.click(L.base.launcher_window.show_case_video_area)

    #     with step("[Verify] Check that import dialog is shown with title 'Greener Grass'"):
    #         dialog = main_page.exist(L.base.launcher_window.import_dialog)
    #         if dialog.AXTitle != 'Greener Grass':
    #             assert False, f"Import dialog title does not match expected value! Expected 'Greener Grass', got '{dialog.AXTitle}'"

    #     with step("[Action] Press [ESC] key to close import dialog"):
    #         main_page.press_esc_key()

    #     assert True

    @pytest.mark.launcher_func
    @pytest.mark.pip_room
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.name('[test_launcher_func_17_13] Click [New Project] > Search object in pip room')
    @exception_screenshot
    def test_launcher_func_17_13(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [New Project] button on Launcher
        2. Enter room (pip room)(4)
        3. Click search field (L.media_room.input_search) > Click [Arrow Down] by input keyboard > Click [Enter]
        4. Verify that search field is updated with 'love'
        5. Verify able to select media ('Love 06') by library icon view
        """
        dependency_test = "test_search_media_func_17_11"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        # [L207] 2.3 Pip Room > Search IAD > by suggestion keyword
        # with uuid("a095de47-8e47-44b3-8030-5f1a08c621ee") as case:

        with step("[Action] Click [New Project] button on Launcher"):
            main_page.click_new_project_on_launcher()

        with step("[Action] Enter pip room with parameter 4"):
            main_page.enter_room(4)

        with step("[Action] Click search field (L.media_room.input_search) > Click [Arrow Down] by input keyboard > Click [Enter]"):
            # click search filed
            main_page.click(L.media_room.input_search)
            time.sleep(DELAY_TIME)
            # click arrow down > click [Enter]
            main_page.input_keyboard(main_page.keyboard.key.down)
            time.sleep(DELAY_TIME)
            main_page.press_enter_key()
            time.sleep(DELAY_TIME)

        with step("[Verify] Check that search field is updated with 'love'"):
            search_field = main_page.exist(L.media_room.input_search)
            if search_field.AXValue.lower() != 'love':
                assert False, f"Search field value is not 'love'! Expected: 'love', Got '{search_field.AXValue}'"

        with step("[Verify] Select media 'Love 06' by library icon view"):
            if not main_page.select_library_icon_view_media('Love 06'):
                assert False, "Unable to select media 'Love 06' by library icon view"

        assert True


    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_launcher_func_17_14] Hover on launcher button [Video Denoise] and verify title and description')
    @exception_screenshot
    def test_launcher_func_17_14(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Close] Button to back to launcher
        2. Hover on launcher button (Video Denoise)(L.base.launcher_window.btn_video_denoise)
        3. Verify title is 'Video Denoise'
        4. Verify description is 'Remove unwanted grain, artifacts, and pixelation caused by low light, high ISO, and low quality recordings.'
        """
        dependency_test = "test_launcher_func_17_13"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()

        # [L20] 1.3 New Launcher > Showcase > Video Denoise > Caption & Text
        # with uuid("aa3f348a-5d1d-4fbd-984f-82386e38edb6") as case:

        with step("[Action] Click [Close] Button to back to launcher"):
            main_page.click_close_then_back_to_launcher()

        with step("[Action] Hover on launcher button (Video Denoise) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_video_denoise)

        with step("[Verify] Check that show case title is 'Video Denoise'"):
            target = main_page.exist(L.base.launcher_window.show_case_title)
            if target.AXValue != 'Video Denoise':
                assert False, f"Show case title does not match expected value! Expected 'Video Denoise', got '{target.AXValue}'"

        with step("[Verify] Check that show case description is 'Remove unwanted grain, artifacts, and pixelation caused by low light, high ISO, and low quality recordings.'"):
            target = main_page.exist(L.base.launcher_window.show_case_description)
            if target.AXValue != 'Remove unwanted grain, artifacts, and pixelation caused by low light, high ISO, and low quality recordings.':
                assert False, f"Show case description does not match expected value! Expected 'Remove unwanted grain, artifacts, and pixelation caused by low light, high ISO, and low quality recordings.', got '{target.AXValue}'"

        assert True

    # @pytest.mark.launcher_func
    # @pytest.mark.launcher
    # @pytest.mark.name('[test_launcher_func_17_15] Hover on launcher btn [Greener Grass] and verify title and description')
    # @exception_screenshot
    # def test_launcher_func_17_15(self):
    #     """
    #     0. Ensure the dependency test is run and passed
    #     1. Hover on launcher button (Greener Grass)(L.base.launcher_window.btn_greener_grass)
    #     2. Verify title is 'Greener Grass'
    #     3. Verify description is 'Automatically make grass greener and skies bluer by improving the color and contrast of your videos.'
    #     """
    #     dependency_test = "test_launcher_func_17_14"
    #     if not self.ensure_dependency(dependency_test, run_dependency=False):
    #         main_page.clear_cache()
    #         main_page.start_app()
    #         main_page.click_close_then_back_to_launcher()

    #     # [L26] 1.3 New Launcher > Showcase > Greener Grass > Caption & Text
    #     # with uuid("44398a76-c9e5-469b-ba2a-3df16d5b6e55") as case:

    #     with step("[Action] Hover on launcher btn (Greener Grass) on launcher"):
    #         main_page.hover_launcher_btn(L.base.launcher_window.btn_greener_grass)

    #     with step("[Verify] Check that show case title is 'Greener Grass'"):
    #         target = main_page.exist(L.base.launcher_window.show_case_title)
    #         if target.AXValue != 'Greener Grass':
    #             assert False, f"Show case title does not match expected value! Expected 'Greener Grass', got '{target.AXValue}'"

    #     with step("[Verify] Check that show case description is 'Automatically make grass greener and skies bluer by improving the color and contrast of your videos.'"):
    #         target = main_page.exist(L.base.launcher_window.show_case_description)
    #         if target.AXValue != 'Automatically make grass greener and skies bluer by improving the color and contrast of your videos.':
    #             assert False, f"Show case description does not match expected value! Expected 'Automatically make grass greener and skies bluer by improving the color and contrast of your videos.', got '{target.AXValue}'"

    #     assert True


    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_launcher_func_17_16] Hover on launcher btn [AI Background Remover] and verify intro video is playing')
    @exception_screenshot
    def test_launcher_func_17_16(self):
        """
        0. Ensure the dependency test is run and passed
        1. Hover on launcher btn (AI Background Remover)(L.base.launcher_window.btn_ai_bg_remover)
        2. Verify intro video is playing
        """
        dependency_test = "test_launcher_func_17_14"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        # [L30] 1.3 New Launcher > Showcase > AI Background Remover > Video
        # with uuid("0b931129-a8f2-410d-b753-04af2d95997b") as case:

        with step("[Action] Hover on launcher btn (AI Background Remover) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_ai_bg_remover)

        with step("[Verify] Check intro video is playing"):
            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):
                assert False, "Intro video is not playing!"

        assert True

    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.aspect_ratio
    @pytest.mark.name('[test_launcher_func_17_17] Verify aspect ratio update on launcher and main page')
    @exception_screenshot
    def test_launcher_func_17_17(self):
        """
        0. Ensure the dependency test is run and passed
        1. Set [Aspect Ratio] to (16:9) on launcher
        2. Choose [Aspect Ratio] to (9:16) on launcher
        3. Click [New Project] button on Launcher
        4. Click [Aspect Ratio] button on main page
        5. Verify [Aspect Ratio] is set to (9:16) by (L.main.option_project_aspect_ratio_9_16).AXMenuItemMarkChar == '✓'
        6. Click [Aspect Ratio] button on main page > Move mouse to 0_0 > Set [Aspect Ratio] to (16:9) at main page
        """
        dependency_test = "test_launcher_func_17_16"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()


        # [L35] 1.3 New Launcher > Project Area > Aspect ratio + New Project
        # with uuid("9a9308ae-4b0f-41b4-8931-bd0bff3e12c3") as case:

        with step("[Action] Set [Aspect Ratio] to (16:9) on launcher"):
            main_page.click(L.base.launcher_window.btn_aspect_ratio_16_9)
            time.sleep(DELAY_TIME * 2)

        with step("[Action] Choose [Aspect Ratio] to (9:16) on launcher"):
            items = main_page.exist(L.base.launcher_window.aspect_ratio_list)
            for item in items:
                if item.AXValue.strip() == '9:16':
                    main_page.mouse.click(*item.center)

        with step("[Action] Click [New Project] button on Launcher"):
            main_page.click_new_project_on_launcher()

        with step("[Action] Click [Aspect Ratio] button on main page"):
            main_page.click(L.main.btn_project_aspect_ratio)

        with step("[Verify] Check that [Aspect Ratio] is set to (9:16)"):
            target = main_page.exist(L.main.option_project_aspect_ratio_9_16)
            if target.AXMenuItemMarkChar != '✓':
                assert False, "Aspect ratio is not set to (9:16) as expected"

        with step("[Action] Change [Aspect Ratio] to (16:9) on main page"):
            main_page.click(L.main.btn_project_aspect_ratio)
            main_page.move_mouse_to_0_0()
            main_page.set_project_aspect_ratio_16_9()

        assert True

    @pytest.mark.launcher_func
    @pytest.mark.launch
    @pytest.mark.launcher
    @pytest.mark.video_denoise
    @pytest.mark.name('[test_launcher_func_17_18] Verify the import dialog after clicking [Video Denoise] on launcher')
    @exception_screenshot
    def test_launcher_func_17_18(self):
        '''
        1. Clear Cache > Launch APP
        2. Hover on [Video Denoise] button (L.base.launcher_window.btn_video_denoise) on launcher
        3. Click [Show Case Area] (L.base.launcher_window.show_case_video_area)
        4. Check if title of [Import Dialog] (L.base.launcher_window.import_dialog) is ("Video Denoise")
        5. Press [ESC] key to close [Import Dialog]
        '''

        dependency_test = "test_launcher_func_17_17"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        # [L22] 1.3 New Launcher > Showcase > Video Denoise > Single click on banner area
        # with uuid("c22ae48a-63ec-451e-9b27-25200ad164c3") as case:

        with step('[Action] Hover on [Video Denoise] button on launcher'):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_video_denoise)

        with step('[Action] Click [Show Case Area] on launcher'):
            main_page.click(L.base.launcher_window.show_case_video_area)

        with step('[Verify] Check if title of [Import Dialog] is "Video Denoise"'):
            dialog = main_page.exist(L.base.launcher_window.import_dialog)
            if dialog.AXTitle != "Video Denoise":
                assert False, f"Import dialog title does not match expected value! Expected 'Video Denoise', got '{dialog.AXTitle}'"

        with step('[Action] Press [ESC] key to close [Import Dialog]'):
            main_page.press_esc_key()

        assert True

    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.body_effect
    @pytest.mark.import_media
    @pytest.mark.name('[test_launcher_func_17_19] Verify [AI Body Effects] import dialog after clicking [Body Effect] button')
    @exception_screenshot
    def test_launcher_func_17_19(self):
        '''
        0. Ensure the dependency test ('test_launcher_func_17_18') is run and passed
        1. Check [Body Effect] button (L.base.launcher_window.btn_ai_body_effect) is in Tool area
        2. Click [Body Effect] button
        3. Check if title of [Import Dialog] (L.base.launcher_window.import_dialog) is ("AI Body Effects")
        '''
        dependency_test = "test_launcher_func_17_18"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        with step('[Verify] Check [Body Effect] button is in Tool area'):
            if not  main_page.exist(L.base.launcher_window.btn_ai_body_effect):
                assert False, "[Body Effect] button not found in Tool area"

        with step('[Action] Click [Body Effect] button'):
            main_page.click(L.base.launcher_window.btn_ai_body_effect)

        with step('[Verify] Check if title of [Import Dialog] is "AI Body Effects"'):
            dialog = main_page.exist(L.base.launcher_window.import_dialog)
            if dialog.AXTitle != "AI Body Effects":
                assert False, f"Import dialog title does not match expected value! Expected 'AI Body Effects', got '{dialog.AXTitle}'"

        assert True


    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.import_media
    @pytest.mark.sample_clip
    @pytest.mark.body_effect
    @pytest.mark.bubble
    @pytest.mark.timeline
    @pytest.mark.play_video
    @pytest.mark.name('[test_launcher_func_17_20] Verify [Body Effect Bubble] and preview after applying sample clip')
    @exception_screenshot
    def test_launcher_func_17_20(self):
        '''
        0. Ensure the dependency test ('test_launcher_func_17_19') is run and passed
        1. Apply [Sample Clip] on [AI Module Import dialog] on Launcher
        2. Check [Body Effect Bubble] (L.effect_room.bb_body_effect) is shown in 50 seconds
        3. Click [Stop] in playback window
        4. Set timecode to ('00_00_04_16') at main page
        5. Check preview (L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L42_sample_video.png') matches Ground Truth (Ground_Truth_Folder + 'L42_sample_video.png') with similarity=0.95
        '''
        dependency_test = "test_launcher_func_17_19"
        self.ensure_dependency(dependency_test)

        # [L42] 1.3 Tool Area > Body Effect > Select "Sample video" in import dialog
        # with uuid("16020955-04cc-4730-bf88-60736421369a") as case:

        with step('[Action] Apply [Sample Clip] on [AI Module Import dialog] on Launcher'):
            main_page.apply_sample_clip_when_open_AI_import_dialog()

        # [L43] 1.3 Tool Area > Body Effect > Bubble when 1st enter
        # with uuid("13fd74b4-9070-4564-87df-af31698cb457") as case:

        with step('[Verify] Check if [Body Effect Bubble] is shown in 50 seconds'):
            if not main_page.is_exist(L.effect_room.bb_body_effect, timeout=50):
                assert False, "[Body Effect Bubble] did not show within 50 seconds!"

        with step('[Action] Click [Stop] in playback window'):
            playback_window_page.Edit_Timeline_PreviewOperation('stop')

        with step('[Action] Set timecode to (00_00_04_16) at main page'):
            main_page.set_timeline_timecode('00_00_04_16', is_verify=True)

        with step('[Verify] Check preview matches GT (L42_sample_video.png) with similarity 0.95'):
            time.sleep(DELAY_TIME*0.5)
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L42_sample_video.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L42_sample_video.png', preview_snapshot, similarity=0.95):
                assert False, "Preview does not match Ground Truth (L42_sample_video.png)! Similarity should > 0.95"

        assert True



    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.audio_denoise
    @pytest.mark.name('[test_launcher_func_17_21] Verify [Audio Denoise] button and import dialog after clicking')
    @exception_screenshot
    def test_launcher_func_17_21(self):
        '''
        0. Check dependency test ('test_launcher_func_17_20') is run and passed
        1. Click [Close] button to back to launcher > Handle [Save Project] dialog with option [No]
        2. Check [Audio Denoise] button (L.base.launcher_window.btn_audio_denoise) is in Tool area
        3. Click [Audio Denoise] button
        4. Check if title of [Import Dialog] (L.base.launcher_window.import_dialog) is ("AI Audio Denoise")
        '''
        dependency_test = "test_launcher_func_17_20"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        # [L62] 1.3 Tool Area > AI Audio Denoise > Single click module
        # with uuid("f727e96c-2665-43ec-942d-016b9da8520a") as case:

        else:
            with step('[Action] Click [Close] button to back to launcher and handle [Save Project] dialog with option [No]'):
                main_page.click_close_then_back_to_launcher()
                main_page.handle_no_save_project_dialog()

        with step('[Verify] Check if [Audio Denoise] button is in Tool area'):
            if not main_page.exist(L.base.launcher_window.btn_audio_denoise):
                assert False, "[Audio Denoise] button is not found in Tool area!"

        with step('[Action] Click [Audio Denoise] button'):
            main_page.click(L.base.launcher_window.btn_audio_denoise)

        with step('[Verify] Check if title of [Import Dialog] is "AI Audio Denoise"'):
            dialog = main_page.exist(L.base.launcher_window.import_dialog)
            if dialog.AXTitle != "AI Audio Denoise":
                assert False, f"Import dialog title does not match expected value! Expected 'AI Audio Denoise', got '{dialog.AXTitle}'"

        assert True


    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.audio_denoise
    @pytest.mark.import_media
    @pytest.mark.bubble
    @pytest.mark.name('[test_launcher_func_17_22] Verify [Audio Denoise] Bubble and preview after applying Sample Clip')
    @exception_screenshot
    def test_launcher_func_17_22(self):
        '''
        0. Ensure the dependency test ('test_launcher_func_17_21') is run and passed
        1. Apply [Sample Clip] on [AI Module Import dialog] on Launcher
        2. Check [Audio Denoise Bubble] (L.fix_enhance.fix.audio_denoise.bb_text) is shown in 50 seconds
        3. Get [Audio Denoise] Checkbox Status and check the result is True
        4. Check preview (L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L63_sample_video.png') matches GT (Ground_Truth_Folder + 'L63_sample_video.png', current_preview) with similarity=0.95
        '''
        dependency_test = "test_launcher_func_17_21"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()

        # [L63] 1.3 Tool Area > AI Audio Denoise > Select "Sample video" in import dialog
        # with uuid("a1d48655-7372-49c8-9d2c-50eb9482eabc") as case:
        
        with step("[Action] Apply [Sample Clip] on [AI Module Import dialog] on Launcher"):
            main_page.apply_sample_clip_when_open_AI_import_dialog()

        # [L64] 1.3 Tool Area > AI Audio Denoise > Bubble when 1st enter
        # with uuid("5c9968a5-0446-4087-a9a1-dc7be8e19cd2") as case:

        with step("[Verify] Check [Audio Denoise Bubble] is shown in 50 seconds"):
            # Wait for the bubble to appear and verify its presence
            if not main_page.is_exist(L.fix_enhance.fix.audio_denoise.bb_text, timeout=50):
                assert False, "[Audio Denoise Bubble] is not shown!"

        with step("[Verify] Get [Audio Denoise] Checkbox Status and check the result is True"):
            checkbox_status = fix_enhance_page.fix.get_audio_denoise()
            if not checkbox_status:
                assert False, "[Audio Denoise] Checkbox is not checked!"

        with step("[Verify] Check preview matches GT (L63_sample_video.png) with similarity=0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + "L63_sample_video.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "L63_sample_video.png", preview_snapshot, similarity=0.95):
                assert False, "Preview does not match GT (L63_sample_video.png)! Similarity should > 0.95"

        assert True


    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.video_speed
    @pytest.mark.name('[test_launcher_func_17_23] Hover on launcher btn [Video Speed] and verify import dialog title')
    @exception_screenshot
    def test_launcher_func_17_23(self):
        '''
        0. Check dependency test ('test_launcher_func_17_22') is run and passed
        1. Click [Close] button to back to launcher > Handle [Save Project] dialog with option [No]
        2. Check [Video Speed] button (L.base.launcher_window.btn_video_speed) is in Tool area
        3. Click [Video Speed] button
        4. Check if title of [Import Dialog] (L.base.launcher_window.import_dialog) is ("Video Speed")
        '''
        dependency_test = "test_launcher_func_17_22"
        if not self.ensure_dependency(dependency_test, run_dependency=False):
            main_page.clear_cache()
            main_page.start_app()
            main_page.click_close_then_back_to_launcher()
        else:
            pass

        # [L71] 1.3 Tool Area > Video Speed > Single click module
        # with uuid("cfa51f03-9f74-4161-bf9e-bae9ebc06cdf") as case:

            with step("[Action] Click [Close] button to back to launcher > Handle [Save Project] dialog with option [No]"):
                main_page.click_close_then_back_to_launcher()
                main_page.handle_no_save_project_dialog()

        with step("[Verify] Check [Video Speed] button is in Tool area"):
            if not main_page.exist(L.base.launcher_window.btn_video_speed):
                assert False, "[Video Speed] button is not in the Tool area!"

        with step("[Action] Click [Video Speed] button"):
            main_page.click(L.base.launcher_window.btn_video_speed)

        with step("[Verify] Check if title of [Import Dialog] is 'Video Speed'"):
            dialog = main_page.exist(L.base.launcher_window.import_dialog)
            if dialog.AXTitle != "Video Speed":
                assert False, f"Import dialog title mismatch! Expected 'Video Speed', got '{dialog.AXTitle}'"

        assert True

    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.video_speed
    @pytest.mark.import_media
    @pytest.mark.name('[test_launcher_func_17_24] Import media, enter Video Speed Designer and verify new video length')
    @exception_screenshot
    def test_launcher_func_17_24(self):
        '''
        0. Ensure the dependency test ('test_launcher_func_17_23') is run and passed
        1. Click [Import] button on [AI Module Import dialog] on Launcher and import media (Test_Material_Folder + 'fix_enhance_20/shopping_mall.m2ts')
        2. Check entered [Video Speed Designer] (L.video_speed.main) in 30 secs
        3. Set [Sppeed Multiplier] value to (4)
        4. Get [New Video Length] value and check value is ('00:00:04:14')
        '''
        dependency_test = "test_launcher_func_17_23"
        self.ensure_dependency(dependency_test)

        # [L72] 1.3 New Launcher > Tool area > Video Speed > Select custom video in import dialog
        # with uuid("07f48048-9f6a-4e47-bd62-496a80e5e9a7") as case:

        with step("[Action] Click [Import] button on [AI Module Import dialog] on Launcher and import media"):
            main_page.click_to_import_media_when_open_AI_import_dialog(Test_Material_Folder + 'fix_enhance_20/shopping_mall.m2ts')

        with step("[Verify] Check entered [Video Speed Designer] in 30 secs"):
            if not main_page.is_exist(L.video_speed.main, timeout=30):
                assert False, 'Cannot enter [Video Speed Designer]!'

        with step("[Action] Set [Speed Multiplier] value to (4)"):
            video_speed_page.Edit_VideoSpeedDesigner_EntireClip_SpeedMultiplier_SetValue(4)

        with step("[Verify] Get [New Video Length] value and check value is ('00:00:04:14')"):
            new_video_length = video_speed_page.Edit_VideoSpeedDesigner_EntireClip_NewVideoLength_GetValue()
            if new_video_length != '00:00:04:14':
                assert False, f"New Video Length mismatch! Expected: '00:00:04:14', Actual: {new_video_length}"

        assert True


    @pytest.mark.launcher_func
    @pytest.mark.launcher
    @pytest.mark.video_speed
    @pytest.mark.bubble
    @pytest.mark.name('[test_launcher_func_17_25] Apply effect in Video Speed Designer and verify bubble')
    @exception_screenshot
    def test_launcher_func_17_25(self):
        '''
        0. Ensure the dependency test ('test_launcher_func_17_24') is run and passed
        1. Click [OK] button on [Video Speed Designer] to apply effect
        2. Check [Video Designer bubble] (L.video_speed.bb_video_speed) is shown
        '''
        dependency_test = "test_launcher_func_17_24"
        self.ensure_dependency(dependency_test)

        # [L73] 1.3 New Launcher > Tool area > Video Speed > BB
        # with uuid("3c8c8af0-9453-49e6-800f-4f56d0c2a280") as case:

        with step("[Action] Click [OK] button on [Video Speed Designer] to apply effect"):
            video_speed_page.Edit_VideoSpeedDesigner_ClickOK()

        with step("[Verify] Check [Video Designer bubble] is shown"):
            if not main_page.is_exist(L.tips_area.button.tools.bb_video_speed, timeout=6):
                assert False, "Video Speed Designer bubble is not shown!"

        assert True


    @pytest.mark.title_particle_effect_launcher_cross_func
    @pytest.mark.preferences
    @pytest.mark.title_designer
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.timecode
    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_1] Title Particle Cross Function Test')
    @exception_screenshot
    def test_title_particle_effect_launcher_cross_func_18_1(self):
        """
        1. Start App
        2. Set User Preferences: Switch to Editing tab, set default Title duration to 10.0, and click OK to leave Preferences page
        3. Open packed project ('Packed_Project/test_title_particle_effect_launcher_cross_func_18_1.pdk', 'Extracted_Folder/test_title_particle_effect_launcher_cross_func_18_1')
        4. Set timeline timecode to '00_00_27_07'
        5. Enter room (Title Room) with index 1
        6. Search for component 'Windshield' in library, select media by library icon view, and insert media to selected track
        7. Open designer window via tips area and switch to express mode (Mode=1)
        8. Mouse click on the title designer frame preview, double click to enable modify, and edit Title to '恭ぱ囧＠'
        9. Get Title Text Content and verify it equals '恭ぱ囧＠'
        """
        with step("[Action] Start App"):
            main_page.start_app()

        with step("[Action] Set User Preferences to Editing and set default Title duration to 10.0"):
            # Open Preference > Editing > Set default Title duration to 10 (For v21.6.5303 PM request)
            main_page.click_set_user_preferences()
            preferences_page.switch_to_editing()
            preferences_page.editing.durations_title_set_value('10.0')
            preferences_page.click_ok()

        with step("[Action] Open packed project"):
            self.open_packed_project('Packed_Project/test_title_particle_effect_launcher_cross_func_18_1_from_test_intro_room_func_3_22.pdk',
                                    'Extracted_Folder/test_title_particle_effect_launcher_cross_func_18_1')

        with step("[Action] Set timeline timecode to '00_00_27_07'"):
            main_page.set_timeline_timecode('00_00_27_07')

        # [L73] 2.3 Title Room > Designer Entry > Modify Title template
        # with uuid("2e04cf5c-c013-4165-97b5-30463bf82f88") as case:

        with step("[Action] Enter Title Room"):
            main_page.enter_room(1)

        with step("[Action] Search for 'Windshield' and insert media"):
            media_room_page.search_library('Windshield')
            # Input search Windshield
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Windshield')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)

            main_page.select_library_icon_view_media('Windshield')
            main_page.tips_area_insert_media_to_selected_track()

        with step("[Action] Open designer window and switch to express mode (Mode=1)"):
            main_page.tips_area_click_designer(check_designer=1)
            title_designer_page.switch_mode()

        with step("[Action] Modify title in designer window"):
            canvas_elem = main_page.exist(L.title_designer.area.frame_video_preview)
            main_page.mouse.click(*canvas_elem.center)
            main_page.double_click()
            title_designer_page.edit_object_title('恭ぱ囧＠')

        with step("[Verify] Check title text content is '恭ぱ囧＠'"):
            actual_title = title_designer_page.get_title_text_content()
            assert actual_title == '恭ぱ囧＠', f"Expected title '恭ぱ囧＠', got '{actual_title}'"

        assert True

    @pytest.mark.title_particle_effect_launcher_cross_func
    @pytest.mark.title_designer
    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_2] Verify title text to 2 lines and preview match GT')
    @exception_screenshot
    def test_title_particle_effect_launcher_cross_func_18_2(self):
        """
        0. Ensure the dependency test is run and passed
        1. Set text string to Two line by clicking on the text content area, pressing Enter, and inputting 'ｶﾞヂョたりポｶﾞ'
        2. Check preview (locator=L.title_designer.area.frame_video_preview) matches GT (Ground_Truth_Folder + 'L73.png') with similarity=0.95
        3. Click OK to leave title designer
        """
        dependency_test = "test_title_particle_effect_launcher_cross_func_18_1"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Set text string to Two line"):
            title_text_elem = main_page.exist(L.title_designer.area.edittext_text_content)
            main_page.mouse.click(*title_text_elem.center)
            main_page.press_enter_key()
            main_page.input_text('ｶﾞヂョたりポｶﾞ')
        
        with step("[Verify] Check preview matches GT (L73.png)"):
            preview = main_page.snapshot(
                locator=L.title_designer.area.frame_video_preview,
                file_name=Auto_Ground_Truth_Folder + 'L73.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L73.png',
                preview,
                similarity=0.95
            )
            if not check_preview:
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match Ground Truth (L73.png)! Similarity should > 0.95"
        
        with step("[Action] Click OK to leave title designer"):
            title_designer_page.click_ok()
        
        assert True

    @pytest.mark.title_particle_effect_launcher_cross_func
    @pytest.mark.play_video
    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_3] Verify preview update and stop in playback window')
    @exception_screenshot
    def test_title_particle_effect_launcher_cross_func_18_3(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click preview operation (Play) in playback window
        2. Check preview window is different from the previous state (main_page.area.preview.main, sec=2.5)
        3. Click preview operation (STOP) in playback window
        """
        dependency_test = "test_title_particle_effect_launcher_cross_func_18_2"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click preview operation (Play) in playback window"):
            playback_window_page.Edit_Timeline_PreviewOperation("Play")

        with step("[Verify] Check preview window is different after 2.5 secs"):
            preview_changed = main_page.Check_PreviewWindow_is_different(area=L.base.Area.preview.main, sec=2.5)
            if not preview_changed:
                # Similarity should be greater than expected threshold when preview updates
                assert False, "Preview is not updated when playing video in 2.5 secs!"

        with step("[Action] Click preview operation (STOP) in playback window"):
            playback_window_page.Edit_Timeline_PreviewOperation("Stop")

        assert True


    @pytest.mark.title_particle_effect_launcher_cross_func
    @pytest.mark.timecode
    @pytest.mark.timeline
    @pytest.mark.content_pack
    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_4] Insert media and verify preview update with Motion Graphics')
    @exception_screenshot
    def test_title_particle_effect_launcher_cross_func_18_4(self):
        """
        0. Ensure the dependency test is run and passed
        1. Set Timecode to ('00_00_37_07') at main page
        2. Select timeline track 3
        3. Select category 'Motion Graphics' in Library Room
        4. Select media 'Motion Graphics 007' in Library Room by icon view
        5. Insert media to selected track from tip area
        6. Set Timecode to ('00_00_06_16') at main page
        7. Check preview is as GT (Ground_Truth_Folder + 'L65.png') (similarity=0.95)
        8. Click [STOP] in playback window to return (00:00:00:00)
        """
        dependency_test = "test_title_particle_effect_launcher_cross_func_18_3"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Set Timecode to '00_00_37_07' at main page"):
            main_page.set_timeline_timecode('00_00_37_07')
        
        # [L65] 2.3 Title Room > Add Built-In templates to timeline & Preview >  Motion Graphic 007, Clover_04, Windshield
        # with uuid("e99fa28d-f1cd-4d28-8a93-acb64c81441b") as case:

        with step("[Action] Select timeline track 3"):
            main_page.timeline_select_track(3)
        
        with step("[Action] Select category 'Motion Graphics' in Library Room"):
            main_page.select_LibraryRoom_category('Motion Graphics')
        
        with step("[Action] Select media 'Motion Graphics 007' by library icon view"):
            main_page.select_library_icon_view_media('Motion Graphics 007')
        
        with step("[Action] Insert media to selected track"):
            main_page.tips_area_insert_media_to_selected_track()
        
        with step("[Action] Set Timecode to '00_00_06_16' at main page"):
            main_page.set_timeline_timecode('00_00_06_16')
        
        with step("[Verify] Check preview matches GT (L65.png)"):
            preview = main_page.snapshot(locator=main_page.area.preview.main,
                                            file_name=Auto_Ground_Truth_Folder + 'L65.png')
            if not main_page.compare(Ground_Truth_Folder + 'L65.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match Ground Truth (L65.png)! Similarity should > 0.95"
        
        with step("[Action] Click [STOP] in playback window"):
            playback_window_page.Edit_Timeline_PreviewOperation('Stop')
        
        assert True

    @pytest.mark.title_particle_effect_launcher_cross_func
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_5] Search Maple in Particle Room and verify preview')
    @exception_screenshot
    def test_title_particle_effect_launcher_cross_func_18_5(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter Room (Particle Room) (index 5)
        2. Search conponent 'Maple' in library
        3. Select track 2, select media 'Maple' by library icon view, and insert media to selected track from tip area
        4. Set timecode to ('00_00_02_28') and Check preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'L69.png') with similarity=0.95
        """
        dependency_test = "test_title_particle_effect_launcher_cross_func_18_4"
        self.ensure_dependency(dependency_test)
        
        
        # [L69] 2.3 Title Room > Add Built-In templates to timeline & Preview >  Maple
        # with uuid("b8589cce-cb99-4c02-8edd-bb81daf86604") as case:

        with step("[Action] Enter Particle Room (Room index 5)"):
            main_page.enter_room(5)
        
        with step("[Action] Search 'Maple' in library"):
            # # Input search Maple
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Maple')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)
            media_room_page.search_library('Maple')
        
        with step("[Action] Select track 2, select media 'Maple' and insert media"):
            main_page.timeline_select_track(2)
            main_page.select_library_icon_view_media('Maple')
            main_page.tips_area_insert_media_to_selected_track()
        
        with step("[Verify] Check preview matches GT (L69.png)"):
            main_page.set_timeline_timecode('00_00_02_28')
            preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L69.png')
            if not main_page.compare(Ground_Truth_Folder + 'L69.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match Ground Truth (L69.png)! Similarity should > 0.95"
        
        assert True

    @pytest.mark.title_particle_effect_launcher_cross_func
    @pytest.mark.particle_designer
    @pytest.mark.properties
    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_6] Verify particle designer adjustments and preview match GT')
    @exception_screenshot
    def test_title_particle_effect_launcher_cross_func_18_6(self):
        """
        0. Ensure the dependency test is run and passed
        1. Do 3 times:
            - Click [Designer] from the tips area with check_designer=2
            - Drag the [Size] slider to 186283 in express mode
            - Click [OK] to leave particle designer
        2. Check Preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'L76.png') with similarity=0.95
        """
        dependency_test = "test_title_particle_effect_launcher_cross_func_18_5"
        self.ensure_dependency(dependency_test)
        
        # [L76] 2.3 Particle Room > Designer Entry > Modify Particle template
        # with uuid("54220852-77ba-4003-87cb-b106f9afcb51") as case:

        with step('[Action] Re-enter [Particle Designer] for 3 times and Drag [Size] slider to (186283) in express mode'):
            for _ in range(3):
                with step("[Action] Click [Designer] from tips area with check_designer=2"):
                    main_page.tips_area_click_designer(check_designer=2)
                with step("[Action] Drag [Size] slider to (186283) in express mode"):
                    particle_designer_page.express_mode.drag_Size_slider(186283)
                with step("[Action] Click [OK] to leave particle designer"):
                    particle_designer_page.click_OK()
        
        with step("[Verify] Check preview matches GT (L76.png)"):
            preview = main_page.snapshot(locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L76.png')
            if not main_page.compare(Ground_Truth_Folder + 'L76.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L76.png)! Similarity should > 0.95"
        
        assert True
        
    @pytest.mark.title_particle_effect_launcher_cross_func
    @pytest.mark.search_library
    @pytest.mark.effect_room
    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_7] Verify timeline insertion and preview for Analog Film')
    @exception_screenshot
    def test_title_particle_effect_launcher_cross_func_18_7(self):
        """
        0. Ensure the dependency test is run and passed
        1. Select timeline track 1
        2. Click [STOP] in playback window
        3. Enter Room (Effect Room) (index 3)
        4. Search for 'Analog' in library
        5. Drag media ('Analog Film') to timeline playhead position
        6. Set timecode to '00_00_04_10' at main page and check preview (locator=main_page.area.preview.main,
        file_name=Auto_Ground_Truth_Folder + 'L67_analog.png') matches GT (Ground_Truth_Folder + 'L67_analog.png') with similarity=0.95
        """
        dependency_test = "test_title_particle_effect_launcher_cross_func_18_6"
        self.ensure_dependency(dependency_test)
        
        # [L67] 2.3 Add build-in template to timeline > Effect : back light, Analog film
        # with uuid("97b588be-0e89-402e-9bda-259f71152dd7") as case:
            
        with step("[Action] Select timeline track 1"):
            main_page.timeline_select_track(1)
        
        with step("[Action] Click [STOP] in playback window"):
            playback_window_page.Edit_Timeline_PreviewOperation('Stop')
        
        with step("[Action] Enter Room (Effect Room) with index 3"):
            main_page.enter_room(3)
        
        with step("[Action] Search for 'Analog' in library"):
            # # Input search Analog
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Analog')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)
            media_room_page.search_library("Analog")
        
        with step("[Action] Drag media 'Analog Film' to timeline playhead position"):
            main_page.drag_media_to_timeline_playhead_position("Analog Film")
        
        with step("[Action] Set timecode to '00_00_04_10' at main page"):
            main_page.set_timeline_timecode('00_00_04_10')
        
        with step("[Verify] Check preview matches GT (L67_analog.png)"):
            preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + 'L67_analog.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L67_analog.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L67_analog.png)! Similarity should > 0.95"
        
        assert True



    @pytest.mark.title_particle_effect_launcher_cross_func
    @pytest.mark.timecode
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.effect_room
    @pytest.mark.name('[test_title_particle_effect_launcher_cross_18_8] Verify Undo action and preview update for Back Light media')
    @exception_screenshot
    def test_title_particle_effect_launcher_cross_func_18_8(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter 'All Content' Category in Library Room and click [Undo] button
        2. Search for 'Back' in library and drag media 'Back Light' to timeline playhead position
        3. Set timecode to '00_00_04_10' at main page and check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L67_back.png')
        matches GT (Ground_Truth_Folder + 'L67_back.png') with similarity=0.95
        4. Set timecode to ('00_00_00_00') and save as project ('test_title_particle_effect_launcher_cross_18_8')
        """
        dependency_test = "test_title_particle_effect_launcher_cross_func_18_7"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Enter 'All Content' Category in Library Room"):
            main_page.select_LibraryRoom_category('All Content')
        
        with step("[Action] Click [Undo] button"):
            main_page.click_undo()
        
        with step("[Action] Search for 'Back' in library"):
            # # Input search Back
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Back')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)

            media_room_page.search_library("Back")
        
        with step("[Action] Drag media 'Back Light' to timeline playhead position"):
            main_page.drag_media_to_timeline_playhead_position("Back Light", track_no=1)
        
        with step("[Action] Set timecode to '00_00_04_10' at main page"):
            main_page.set_timeline_timecode('00_00_04_10')
        
        with step("[Verify] Check preview matches GT (L67_back.png)"):
            preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + 'L67_back.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L67_back.png',
                preview,
                similarity=0.95
            )
            if not check_preview:
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L67_back.png)! Similarity should > 0.95"

        with step("[Action] Set timecode to ('00_00_00_00') and save as project ('test_title_particle_effect_launcher_cross_18_8')"):
            main_page.set_timeline_timecode('00_00_00_00')
            # Save project:
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_title_particle_effect_launcher_cross_18_8',
                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')
        
        assert True


    @pytest.mark.title_particle_effect_launcher_cross_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_9] Hover on launcher btn [AI Background Remover] and verify title and description')
    @exception_screenshot
    def test_title_particle_effect_launcher_cross_func_18_9(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Close] button to go back to launcher
        2. Hover on launcher btn (AI Background Remover)(L.base.launcher_window.btn_ai_bg_remover)
        3. Verify title is 'AI Background Remover'
        4. Verify description is 'Instantly remove the background of your footage and replace it with a video clip or image.'
        """
        dependency_test = "test_title_particle_effect_launcher_cross_func_18_9"
        self.ensure_dependency(dependency_test)
        
        # [L29] 1.3 New Launcher > Showcase > AI Background Remover > Caption & Text
        # with uuid("41f702aa-87ea-481c-b6b6-02c23b5639e1") as case:

        with step("[Action] Click [Close] button to go back to launcher"):
            main_page.click_close_then_back_to_launcher()
        
        with step("[Action] Hover on launcher btn (AI Background Remover)"):
            # Assuming the locator for AI Background Remover button is defined as below
            main_page.hover_launcher_btn(L.base.launcher_window.btn_ai_bg_remover)

        with step("[Verify] Check that show case title is 'AI Background Remover'"):
            target = main_page.exist(L.base.launcher_window.show_case_title)
            if target.AXValue != "AI Background Remover":
                assert False, f"Show case title does not match expected value! Expected 'AI Wind Removal', got '{target.AXValue}'"

        with step("[Verify] Check that show case description is 'Instantly remove the background of your footage and replace it with a video clip or image.'"):
            target = main_page.exist(L.base.launcher_window.show_case_description)
            if target.AXValue != 'Instantly remove the background of your footage and replace it with a video clip or image.':
                assert False, f"Show case description does not match expected value! Expected 'Instantly remove the background of your footage and replace it with a video clip or image.', got '{target.AXValue}'"

        assert True


    @pytest.mark.title_particle_effect_launcher_cross_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_title_particle_effect_launcher_cross_func_18_10] Hover on launcher btn [Video Stabilizer] and verify intro video is playing')
    @exception_screenshot
    def test_title_particle_effect_launcher_cross_func_18_10(self):
        """
        0. Ensure the dependency test is run and passed
        1. Hover on launcher btn (Video Stabilizer)
        2. Verify intro video is playing
        """
        dependency_test = "test_title_particle_effect_launcher_cross_func_18_9"
        self.ensure_dependency(dependency_test)
        
        # [L18] 1.3 New Launcher > Showcase > Video Stabilizer > Video
        # with uuid("b672e064-b17a-4e17-82a1-34ea04dc35fb") as case:

        with step("[Action] Hover on launcher btn (Video Stabilizer) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_video_stabilizer)
        
        with step("[Verify] Check intro video is playing"):
            if not main_page.Check_PreviewWindow_is_different(L.base.launcher_window.show_case_video_area):
                assert False, "Intro video is not playing!"
        
        assert True


    @pytest.mark.bg_music_func
    @pytest.mark.background_music
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.name('[test_bg_music_func_19_1] Download [Background Music] and verify timecode')
    @exception_screenshot
    def test_bg_music_func_19_1(self):
        """
        1. Start App
        2. Open packed project ('Packed_Project/test_bg_music_func_19_1.pdk', 'Extracted_Folder/test_bg_music_func_19_1')
        3. Enter [Background Music] Room
        4. Search for 'Hey Baby' in library
        5. Check download mark is shown for 'Hey Baby (Your Lullaby Song)'
        6. Click [Play] in playback window and verify timecode is '00:00:00:00'
        """
        with step("[Action] Start App"):
            main_page.start_app()
        
        with step("[Action] Open packed project"):
            self.open_packed_project('Packed_Project/test_bg_music_func_19_1.pdk', 
                                     'Extracted_Folder/test_bg_music_func_19_1')
        
        # [L41] 2.1 Media Room > Background Music / Sound Clips > Sample preview
        # with uuid("e071a716-a769-4153-9d27-98d183a98f31") as case:

        with step("[Action] Enter [Background Music] Room"):
            media_room_page.enter_background_music()
        
        with step("[Action] Search for 'Hey Baby' in library"):
            media_room_page.search_library("Hey Baby")
        
        with step("[Verify] Check download mark for 'Hey Baby (Your Lullaby Song)'"):
            if not media_room_page.background_music_check_download_mark("Hey Baby (Your Lullaby Song)"):
                assert False, "Download mark for 'Hey Baby (Your Lullaby Song)' is not displayed!"
        
        with step("[Action] Click [Play] in playback window and verify timecode"):
            playback_window_page.Edit_Timeline_PreviewOperation('Play')
            timecode = playback_window_page.get_timecode_slidebar()
            if timecode != "00:00:00:00":
                assert False, f"Timecode is {timecode} but expected '00:00:00:00'!"
        
        assert True

    @pytest.mark.bg_music_func
    @pytest.mark.media_room
    @pytest.mark.background_music
    @pytest.mark.content_pack
    @pytest.mark.name('[test_bg_music_func_19_2] Download and verify download mark for "Hey Baby (Your Lullaby Song)"')
    @exception_screenshot
    def test_bg_music_func_19_2(self):
        """
        0. Ensure the dependency test is run and passed
        1. Select sound clip media "Hey Baby (Your Lullaby Song)" > right click > click "Download" on the right-click menu > wait for (DELAY_TIME * 8)
        2. Check [Download OK] mark is shown for "Hey Baby (Your Lullaby Song)"
        """
        dependency_test = "test_bg_music_func_19_1"
        self.ensure_dependency(dependency_test)
        
        
        # [L42] 2.1 Media Room > Background Music / Sound Clips > Download
        # with uuid("bf802ba9-50a6-4def-90a3-026036090f5a") as case:

        with step("[Action] Select sound clip 'Hey Baby (Your Lullaby Song)' and trigger Download"):
            media_room_page.sound_clips_select_media("Hey Baby (Your Lullaby Song)")
            main_page.right_click()
            main_page.select_right_click_menu("Download")
            time.sleep(DELAY_TIME * 8)  # wait for download to complete
        
        with step("[Verify] Check [Download OK] mark for 'Hey Baby (Your Lullaby Song)'"):
            if not media_room_page.background_music_check_download_ok_mark("Hey Baby (Your Lullaby Song)"):
                assert False, "Download OK mark is not displayed for 'Hey Baby (Your Lullaby Song)'!"
        
        assert True

    @pytest.mark.bg_music_func
    @pytest.mark.background_music
    @pytest.mark.name('[test_bg_music_func_19_3] Verify preview update after media insertion')
    @exception_screenshot
    def test_bg_music_func_19_3(self):
        """
        0. Ensure the dependency test is run and passed
        1. Screenshot current preview (locator=main_page.area.preview.main)
        2. Insert media to selected track from tip area
        3. Check preview is updated after insertion (similarity=0.95)
        """
        dependency_test = "test_bg_music_func_19_2"
        self.ensure_dependency(dependency_test)
        
        # [L43] 2.1 Media Room > Background Music / Sound Clips > Timeline preview
        # with uuid("a29435e4-7b6a-4942-abfd-1a57ec862f6a") as case:

        with step("[Action] Screenshot current preview"):
            before_preview = main_page.snapshot(locator=main_page.area.preview.main)
        
        with step("[Action] Insert media to selected track from tip area"):
            main_page.tips_area_insert_media_to_selected_track(option=-1)
        
        with step("[Verify] Check preview is updated after insertion"):
            after_preview = main_page.snapshot(locator=main_page.area.preview.main)
            if main_page.compare(before_preview, after_preview, similarity=0.95):
                # Similarity should be less than 0.95 for an updated preview
                assert False, "Preview did not update after inserting media! Similarity should < 0.95"
        
        assert True

    @pytest.mark.bg_music_func
    @pytest.mark.background_music
    @pytest.mark.name('[test_bg_music_func_19_4] Delete "Hey Baby (Your Lullaby Song)" and verify download ok mark is removed')
    @exception_screenshot
    def test_bg_music_func_19_4(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Undo] button on main page
        2. Select sound clip media "Hey Baby (Your Lullaby Song)", right click, select "Delete from Disk", and confirm deletion
        3. Verify that the download OK icon does not exist
        """
        dependency_test = "test_bg_music_func_19_3"
        self.ensure_dependency(dependency_test)
        
        # [L44] 2.1 Media Room > Background Music / Sound Clips > Delete from Disk
        # with uuid("8312130f-2873-4609-8cb7-4b4ed2dd3cc9") as case:

        with step("[Action] Click [Undo] button on main page"):
            main_page.click_undo()
        
        with step("[Action] Delete 'Hey Baby (Your Lullaby Song)' from disk"):
            media_room_page.sound_clips_select_media("Hey Baby (Your Lullaby Song)")
            main_page.right_click()
            main_page.select_right_click_menu("Delete from Disk")
            main_page.exist_click(L.media_room.confirm_dialog.btn_yes)
        
        with step("[Verify] Check that download OK icon does not exist"):
            if main_page.is_exist(L.media_room.scroll_area.table_view_text_field_download_ok):
                assert False, "Download OK icon exists; deletion did not reset download mark to default status!"
        
        assert True


    @pytest.mark.bg_music_func
    @pytest.mark.background_music
    @pytest.mark.media_room
    @pytest.mark.content_pack
    @pytest.mark.name('[test_bg_music_func_19_5] Download and Delete "2400Hz Noise" and verify download mark')
    def test_bg_music_func_19_5(self):
        '''
        0. Ensure the dependency test is run and passed
        1. Enter [Sound Clip] Category and wait for (DELAY_TIME * 8)
        2. Search conponent ('2400Hz') in Media Room (Sound Effects) category
        3. Select specific sound clips ('2400Hz Noise') in library by name > right click > click "Download" on the right-click menu > wait for (DELAY_TIME * 5)
        4. Check [Download OK] mark if shown on BG music for specific music ('2400Hz Noise')
        5. Select specific sound clips ('2400Hz Noise') in library by name > right click > click "Delete from Disk" on the right-click menu > click "Yes" (L.media_room.confirm_dialog.btn_yes) on the confirmation dialog
        6. Check [Download OK] mark (L.media_room.scroll_area.table_view_text_field_download_ok) if not exist
        '''
        dependency_test = "test_bg_music_func_19_4"
        self.ensure_dependency(dependency_test)

        with step("[Action] Enter [Sound Clip] Category and wait for delay"):
            media_room_page.enter_sound_clips()
            time.sleep(DELAY_TIME * 8)

        with step("[Action] Search component '2400Hz' in Media Room (Sound Effects) category"):
            media_room_page.search_SFX_library('2400Hz')

        with step("[Action] Select specific sound clips '2400Hz Noise' in library by name and download"):
            media_room_page.sound_clips_select_media('2400Hz Noise')
            main_page.right_click()
            main_page.select_right_click_menu("Download")
            time.sleep(DELAY_TIME * 5)

        with step("[Verify] Check [Download OK] mark if shown on BG music for specific music"):
            if not media_room_page.background_music_check_download_ok_mark('2400Hz Noise'):
                assert False, "Download OK mark not shown for '2400Hz Noise'"

        with step("[Action] Select specific sound clips '2400Hz Noise' in library by name and delete from disk"):
            media_room_page.sound_clips_select_media('2400Hz Noise')
            main_page.right_click()
            main_page.select_right_click_menu("Delete from Disk")
            main_page.exist_click(L.media_room.confirm_dialog.btn_yes)

        with step("[Verify] Check [Download OK] mark does not exist"):
            if main_page.is_exist(L.media_room.scroll_area.table_view_text_field_download_ok):
                assert False, "Download OK mark still exists for '2400Hz Noise'"

        assert True

    @pytest.mark.bg_music_func
    @pytest.mark.media_room
    @pytest.mark.background_music
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @pytest.mark.name("[test_bg_music_func_19_6] Verify 'Condition Green' download and delete workflow")
    def test_bg_music_func_19_6(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter [Background Music (CL)] Category > Select specific category ('Atmosphere')
        2. Search conponent ('Condition Green') in library > wait for (DELAY_TIME * 4)
        3. Check if Download button exist (L.media_room.scroll_area.table_view_text_field_download_button)
        4. Select specific sound clips ('Condition Green') in library by name > right click > click "Download" on the right-click menu > wait for (DELAY_TIME * 5)
        5. Check [Download OK] mark if shown on BG music for specific music ('Condition Green')
        6. Select specific sound clips ('Condition Green') in library by name > right click > click "Delete from Disk" on the right-click menu > click "Yes" (L.media_room.confirm_dialog.btn_yes) on the confirmation dialog
        7. Check if Download button exist (L.media_room.scroll_area.table_view_text_field_download_button)
        """
        dependency_test = "test_bg_music_func_19_5"
        self.ensure_dependency(dependency_test)

        with step("[Action] Enter [Background Music (CL)] Category and select category 'Atmosphere'"):
            media_room_page.enter_background_music_CL()
            media_room_page.select_specific_category("Atmosphere")

        # [L150] 2.1 Media Room > BGM (CL BGM) > Input ENU character
        # with uuid("c3b5fd96-dc57-4455-aa9e-7b653de12a74") as case:
        # [L149] 2.1 Media Room > BGM (CL BGM) > Delete from Disk
        # with uuid("24261e38-7166-40b7-99fb-6560f38c273d") as case:
        with step("[Action] Search component 'Condition Green' in library and wait for delay"):
            media_room_page.search_library('Condition Green')
            time.sleep(DELAY_TIME * 4)

        with step("[Verify] Check if Download button exists"):
            if not main_page.exist(L.media_room.scroll_area.table_view_text_field_download_button):
                assert False, "Download button does not exist!"

        with step("[Action] Right click 'Condition Green' and click 'Download' in the menu"):
            media_room_page.sound_clips_select_media('Condition Green')
            main_page.right_click()
            main_page.select_right_click_menu("Download")
            time.sleep(DELAY_TIME * 5)

        with step("[Verify] Check [Download OK] mark is shown for 'Condition Green'"):
            if not media_room_page.background_music_check_download_ok_mark('Condition Green'):
                assert False, "[Download OK] mark is not shown for 'Condition Green'"  

        with step("[Action] Right click 'Condition Green' and click 'Delete from Disk', then confirm"):
            media_room_page.sound_clips_select_media('Condition Green')
            main_page.right_click()
            main_page.select_right_click_menu("Delete from Disk")
            main_page.exist_click(L.media_room.confirm_dialog.btn_yes)

        with step("[Verify] Check if Download button exists again"):
            if not main_page.exist(L.media_room.scroll_area.table_view_text_field_download_button):
                assert False, "Download button should exist after deletion!"      

        assert True

    @pytest.mark.bg_music_func
    @pytest.mark.media_room
    @pytest.mark.background_music
    @pytest.mark.search_library
    @pytest.mark.name('[test_bg_music_func_19_7] Verify empty search result preview matches GT for "." search')
    @exception_screenshot
    def test_bg_music_func_19_7(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Cancel] button in search library
        2. Search '.' in library and wait for (DELAY_TIME * 2)
        3. Check if preview (locator=L.base.Area.library_detail_view, file_name=Auto_Ground_Truth_Folder + 'L152_empty_search_result.png')
        matches GT (Ground_Truth_Folder + 'L152_empty_search_result.png') with similarity=0.97
        """
        dependency_test = "test_bg_music_func_19_6"
        self.ensure_dependency(dependency_test)
        
        # [L152] 2.1 Media Room > BGM (CL BGM) > Input '.'
        # with uuid("27de6e31-2601-4ac1-8323-8b1bd8c6a1ae") as case:

        with step("[Action] Click [Cancel] button in search library"):
            media_room_page.search_library_click_cancel()
        
        with step("[Action] Search '.' in library and wait"):
            media_room_page.search_library(".")
            time.sleep(DELAY_TIME * 2)
        
        with step("[Verify] Check preview matches GT (L152_empty_search_result.png)"):
            preview = main_page.snapshot(
                locator=L.base.Area.library_detail_view,
                file_name=Auto_Ground_Truth_Folder + 'L152_empty_search_result.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L152_empty_search_result.png', preview, similarity=0.97):
                # Similarity should be greater than 0.97 for a matching preview
                assert False, "Preview does not match GT (L152_empty_search_result.png)! Similarity should > 0.97"
        
        assert True

    @pytest.mark.shape_pip_transition_cross_func
    @pytest.mark.timeline
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_1] Verify preview updates with media insertions and frame navigation')
    @exception_screenshot
    def test_shape_pip_transition_cross_func_20_1(self):
        """
        1. Start APP
        2. Open packed project ('Packed_Project/test_shape_pip_transition_cross_func_20_1.pdk', 'Extracted_Folder/test_shape_pip_transition_cross_func_20_1')
        3. Set timecode '00_00_47_07' at main page
        4. Enter Room (Pip) (index 4) and capture preview
        5. Search 'Shape 017' in library, insert media to selected track, and click [Cancel] in search library
        6. Check preview is updated after insertion (similarity=0.95)
        7. Select timeline track 2 and capture preview
        8. Search 'Wedding' in library, insert media to selected track, and click [Cancel] in search library
        9. Check preview is updated after insertion (similarity=0.95)
        10. Select timeline track 2, set timecode '00_00_50_07' at main page, and capture preview
        11. Search 'Mood' in library, select media 'Mood Stickers 07', right click and click "Add to Timeline", wait for (DELAY_TIME * 6)
        12. Select timeline track 1, click [Previous Frame] button 3 times
        13. Verify preview matches GT (Ground_Truth_Folder + 'L68_shape_wedding.png') with similarity=0.95
        14. Click [Next Frame] button 5 times and capture preview
        15. Verify preview matches GT (Ground_Truth_Folder + 'L68_shape_dialog.png') with similarity=0.95
        """
        with step("[Action] Start APP"):
            main_page.start_app()

        with step("[Action] Open packed project ('Packed_Project/test_shape_pip_transition_cross_func_20_1.pdk', 'Extracted_Folder/test_shape_pip_transition_cross_func_20_1')"):
            self.open_packed_project('Packed_Project/test_shape_pip_transition_cross_func_20_1.pdk', 'Extracted_Folder/test_shape_pip_transition_cross_func_20_1')

        # [L68] 2.3 Pip Room > Shape 017, Dialog_07, Wedding_2
        # with uuid("c805bedd-ee5f-4a40-9476-be67a8c75ccb") as case:

        with step("[Action] Set timecode to '00_00_47_07' at main page"):
            main_page.set_timeline_timecode('00_00_47_07')

        with step("[Action] Enter Room (Pip) with index 4 and capture preview"):
            main_page.enter_room(4)
            initial_preview = main_page.snapshot(locator=main_page.area.preview.main)

        with step("[Action] Search 'Shape 017' in library, insert media, and click [Cancel]"):
            # # Input search Shape 017
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Shape 017')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)

            media_room_page.search_library("Shape 017")
            main_page.tips_area_insert_media_to_selected_track(option=-1)
            media_room_page.search_library_click_cancel()

        with step("[Verify] Check preview updated after inserting 'Shape 017' (similarity=0.95)"):
            preview_after_shape = main_page.snapshot(locator=main_page.area.preview.main)
            if main_page.compare(initial_preview, preview_after_shape, similarity=0.95):
                # Similarity should be less than 0.95 if preview is updated
                assert False, "Preview did not update after inserting 'Shape 017'! Similarity should < 0.95"

        with step("[Action] Select timeline track 2 and capture preview"):
            main_page.timeline_select_track(2)
            timeline2_preview = main_page.snapshot(locator=main_page.area.preview.main)

        with step("[Action] Search 'Wedding' in library, insert media, and click [Cancel]"):
            # # Input search Wedding 2
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Wedding')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)

            media_room_page.search_library("Wedding")
            main_page.tips_area_insert_media_to_selected_track(option=-1)
            media_room_page.search_library_click_cancel()

        with step("[Verify] Check preview updated after inserting 'Wedding' (similarity=0.95)"):
            preview_after_wedding = main_page.snapshot(locator=main_page.area.preview.main)
            if main_page.compare(timeline2_preview, preview_after_wedding, similarity=0.95):
                # Similarity should be less than 0.95 if preview is updated
                assert False, "Preview did not update after inserting 'Wedding'! Similarity should < 0.95"

        with step("[Action] Select timeline track 2, set timecode to '00_00_50_07'"):
            main_page.timeline_select_track(2)
            main_page.set_timeline_timecode('00_00_50_07')

        with step("[Action] Search 'Mood' in library, select 'Mood Stickers 07', right click and click 'Add to Timeline', wait for download"):
            # # Input search Dialog_07
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Mood')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)
            
            media_room_page.search_library("Mood")
            main_page.select_library_icon_view_media("Mood Stickers 07")
            time.sleep(DELAY_TIME * 2)
            main_page.right_click()
            main_page.select_right_click_menu("Add to Timeline")
            

        with step("[Action] Select timeline track 1, click [Previous Frame] 3 times, and capture preview"):
            main_page.timeline_select_track(1)
            for _ in range(3):
                title_designer_page.Edit_Timeline_PreviewOperation('previous_frame')
                time.sleep(DELAY_TIME * 0.5)
            preview_prev = main_page.snapshot(locator=main_page.area.preview.main,
                                            file_name=Auto_Ground_Truth_Folder + 'L68_shape_wedding.png')

        with step("[Verify] Compare preview with GT 'L68_shape_wedding.png' (similarity=0.95)"):
            if not main_page.compare(Ground_Truth_Folder + 'L68_shape_wedding.png', preview_prev, similarity=0.95):
                assert False, "Preview does not match GT (L68_shape_wedding.png)! Similarity should > 0.95"

        with step("[Action] Click [Next Frame] 5 times and capture preview"):
            for _ in range(5):
                title_designer_page.Edit_Timeline_PreviewOperation('next_frame')
                time.sleep(DELAY_TIME * 0.5)
            preview_next = main_page.snapshot(locator=main_page.area.preview.main,
                                            file_name=Auto_Ground_Truth_Folder + 'L68_shape_dialog.png')

        with step("[Verify] Compare preview with GT 'L68_shape_dialog.png' (similarity=0.95)"):
            if not main_page.compare(Ground_Truth_Folder + 'L68_shape_dialog.png', preview_next, similarity=0.95):
                assert False, "Preview does not match GT (L68_shape_dialog.png)! Similarity should > 0.95"

        assert True

    
    @pytest.mark.shape_pip_transition_cross_func
    @pytest.mark.shape_designer
    @pytest.mark.properties
    @pytest.mark.shape_preset
    @pytest.mark.shape_fill
    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_2] Apply Shape Preset, set Shape Fill, and verify preview after frame navigation')
    @exception_screenshot
    def test_shape_pip_transition_cross_func_20_2(self):
        """
        0. Ensure the dependency test is run and passed
        1. Select a clip ("Shape 017") on timeline and tap [Tool Menu] on [Tips Area]
        2. Verify Shape Designer is opened
        3. Unfold [Shape Preset], apply preset 3, then fold [Shape Preset]
        4. Unfold [Shape Fill], set [Uniform Color] to hexcolor "7E1208", then fold [Shape Fill]
        5. Click [OK] to leave Shape Designer
        6. Select timeline track 2 and click [Previous Frame] button 4 times
        7. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L75.png') matches GT (Ground_Truth_Folder + 'L75.png') with similarity=0.9
        """
        dependency_test = "test_shape_pip_transition_cross_func_20_1"
        self.ensure_dependency(dependency_test)
        
        # [L75] 2.3 Pip Room > Designer entry > Shape template can modify (Shape 017)
        # with uuid("b9ad4619-839d-438a-8293-eaeaf66f5479") as case:

        with step("[Action] Select clip 'Shape 017' on timeline and tap [Tool Menu] on [Tips Area]"):
            main_page.select_timeline_media('Shape 017')
            main_page.tap_TipsArea_Tools_menu(0)
        
        with step("[Verify] Check if Shape Designer is opened"):
            if not shape_designer_page.check_in_shape_designer():
                assert False, "Shape Designer did not open!"
        
        with step("[Action] Unfold [Shape Preset], apply preset 3, and fold [Shape Preset]"):
            shape_designer_page.properties.unfold_shape_preset(set_unfold=1)
            shape_designer_page.properties.shape_preset.apply_preset(index=3)
            shape_designer_page.properties.unfold_shape_preset(set_unfold=0)
        
        with step("[Action] Unfold [Shape Fill], set uniform color to '7E1208', and fold [Shape Fill]"):
            shape_designer_page.properties.unfold_shape_fill(set_unfold=1)
            shape_designer_page.properties.shape_fill.set_uniform_color("7E1208")
            shape_designer_page.properties.unfold_shape_fill(set_unfold=0)
        
        with step("[Action] Click [OK] to leave Shape Designer"):
            shape_designer_page.click_ok()
        
        with step("[Action] Select timeline track 2 and click [Previous Frame] 4 times"):
            main_page.timeline_select_track(2)
            for _ in range(4):
                playback_window_page.Edit_Timeline_PreviewOperation('previous_frame')
                time.sleep(DELAY_TIME * 0.5)
        
        with step("[Verify] Screenshot preview and compare with GT (L75.png)"):
            preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + 'L75.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L75.png', preview, similarity=0.9):
                # Similarity should be greater than 0.9 for a matching preview
                assert False, "Preview does not match GT (L75.png)! Similarity should > 0.9"
        
        assert True

    @pytest.mark.shape_pip_transition_cross_func
    @pytest.mark.pip_designer
    @pytest.mark.properties
    @pytest.mark.shadow
    @pytest.mark.border
    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_3] Apply Border and Shadow settings in Pip Designer and verify preview')
    @exception_screenshot
    def test_shape_pip_transition_cross_func_20_3(self):
        """
        0. Ensure the dependency test is run and passed
        1. Select clip "Wedding 2" on timeline and tap [Tool Menu] on [Tips Area] to enter Pip Designer
        2. Switch to Express mode and capture Pip Designer preview (locator=L.pip_designer.preview)
        3. Enable Border and set Border Size to 4 by slider; verify preview is updated (similarity should be < 0.99)
        4. Apply Border Uniform Color using RGB ('71','198','45'); verify preview is updated (similarity should be < 0.99), then fold Border tab by clicking L.pip_designer.border.border
        5. Enable Shadow and set Shadow Distance to 83 by slider; verify preview is updated (similarity should be < 0.99)
        6. Apply Shadow Color using RGB ('194','245','124'); verify preview is updated (similarity should be < 0.99), then fold Shadow tab by clicking L.pip_designer.shadow.shadow
        7. Click [OK] button to leave Pip Designer
        8. Check main program preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L74.png') matches GT (Ground_Truth_Folder + 'L74.png') with similarity > 0.99
        """
        dependency_test = "test_shape_pip_transition_cross_func_20_2"
        self.ensure_dependency(dependency_test)
        
        # [L74] 2.3 Pip Room > Designer entry > Pip template can modify (Wedding 2)
        # with uuid("8b400e01-576b-4297-a1e2-af05377bf860") as case:

        with step("[Action] Select clip 'Wedding 2' on timeline and tap [Tool Menu] on [Tips Area] to enter Pip Designer"):
            main_page.select_timeline_media('Wedding 2')
            main_page.tap_TipsArea_Tools_menu(0)
            
        with step("[Action] Switch to Express mode and capture Pip Designer preview"):
            pip_designer_page.switch_mode(1)  # Switch to Express mode
        
        with step("[Action] Enable Border and set Border Size to 4 by slider"):
            border_before = main_page.snapshot(locator=L.pip_designer.preview)
            pip_designer_page.apply_border(bApply=1)
            pip_designer_page.drag_border_size_slider(4)
            border_after = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(border_before, border_after, similarity=0.99):
                # Similarity should be less than 0.99 if the preview has updated
                assert False, "Border size change did not update preview! Similarity should < 0.99"
        
        with step("[Action] Apply Border Uniform Color using RGB ('71','198','45') and fold Border tab"):
            pip_designer_page.apply_border_uniform_color('71', '198', '45')
            color_after = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(border_after, color_after, similarity=0.99):
                # Similarity should be less than 0.99 if the color is applied correctly
                assert False, "Border uniform color did not update preview! Similarity should < 0.99"
            main_page.click(L.pip_designer.border.border)
        
        with step("[Action] Enable Shadow and set Shadow Distance to 83 by slider"):
            pip_designer_page.apply_shadow()
            pip_designer_page.drag_shadow_distance_slider(83)
            shadow_after = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(color_after, shadow_after, similarity=0.99):
                # Similarity should be less than 0.99 if shadow distance is updated
                assert False, "Shadow distance change did not update preview! Similarity should < 0.99"
        
        with step("[Action] Apply Shadow Color using RGB ('194','245','124') and fold Shadow tab"):
            pip_designer_page.select_shadow_color('194', '245', '124')
            shadow_color_after = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(shadow_after, shadow_color_after, similarity=0.99):
                # Similarity should be less than 0.99 if the shadow color is applied correctly
                assert False, "Shadow color did not update preview! Similarity should < 0.99"
            main_page.click(L.pip_designer.shadow.shadow)
        
        with step("[Action] Click [OK] to leave Pip Designer"):
            pip_designer_page.click_ok()
        
        with step("[Verify] Check main program preview matches GT (L74.png) with similarity > 0.99"):
            final_preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + 'L74.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L74.png', final_preview, similarity=0.95):
                assert False, "Final preview does not match GT (L74.png)! Similarity should > 0.95"
        
        assert True


    @pytest.mark.shape_pip_transition_cross_func
    @pytest.mark.timeline
    @pytest.mark.search_library
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_4] Verify transition preview matches GT for Binary 1')
    @exception_screenshot
    def test_shape_pip_transition_cross_func_20_4(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter Room (Transition) (2)
        2. Search component 'Binary 1' in library
        3. Drag Transition ('Binary 1') to timeline clip ('Mood Stickers 07')
        4. Set timecode to '00_00_00_28' on main page
        5. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_binary.png') 
        matches GT (Ground_Truth_Folder + 'L66_binary.png') with similarity 0.9
        """
        dependency_test = "test_shape_pip_transition_cross_func_20_3"
        self.ensure_dependency(dependency_test)
        
        # [L66] 2.3 Transition Room > Binary 1
        # with uuid("8d6fe590-d4af-4ac4-8e7d-e7e4295d4a17") as case:

        with step("[Action] Enter Room (Transition) with index 2"):
            main_page.enter_room(2)
        
        with step("[Action] Search component 'Binary 1' in library"):
            # # Input search Binary 1  ---------
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Binary 1')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)
            media_room_page.search_library("Binary 1")
        
        with step("[Action] Drag Transition 'Binary 1' to timeline clip 'Mood Stickers 07'"):
            main_page.drag_transition_to_timeline_clip('Binary 1', 'Mood Stickers 07')
        
        with step("[Action] Set timecode to '00_00_00_28' on main page"):
            main_page.set_timeline_timecode("00_00_00_28")
        
        with step("[Verify] Capture preview and compare with GT (L66_binary.png)"):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + "L66_binary.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "L66_binary.png", preview, similarity=0.9):
                # Similarity should be greater than 0.9 for a matching preview
                assert False, "Preview does not match GT (L66_binary.png)! Similarity should > 0.9"
        
        assert True


    @pytest.mark.shape_pip_transition_cross_func
    @pytest.mark.timeline
    @pytest.mark.search_library
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_5] Click Undo, Cancel, search "Blur", drag transition, set timecode and verify preview')
    @exception_screenshot
    def test_shape_pip_transition_cross_func_20_5(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Undo] button on main page > Click [Cancel] button on search library
        2. Search conponent ('Blur') in library > Drag Transition ('Blur') to timeline clip ('Mood Stickers 07')
        3. Set timecode ('00_00_00_17')
        4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_blur.png')
        matches GT (Ground_Truth_Folder + 'L66_blur.png') with similarity 0.95
        """
        dependency_test = "test_shape_pip_transition_cross_func_20_5"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click [Undo] button on main page and click [Cancel] button on search library"):
            main_page.click_undo()
            media_room_page.search_library_click_cancel()

        with step("[Action] Search 'Blur' in library and drag transition to timeline clip 'Mood Stickers 07'"):
            # # Input search Blur  ---------
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Blur')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)

            media_room_page.search_library("Blur")
            main_page.drag_transition_to_timeline_clip('Blur', 'Mood Stickers 07')

        with step("[Action] Set timecode to (00_00_00_17)"):
            main_page.set_timeline_timecode("00_00_00_17")

        with step("[Verify] Check preview matches GT (L66_blur.png) with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L66_blur.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L66_blur.png',
                preview_snapshot,
                similarity=0.95
            )
            if not check_preview:
                # Similarity should be greater than 0.95
                assert False, "Preview does not match GT (L66_blur.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.shape_pip_transition_cross_func
    @pytest.mark.timeline
    @pytest.mark.search_library
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_6] Verify preview after performing undo, cancel, search, drag transition and set timecode')
    @exception_screenshot
    def test_shape_pip_transition_cross_func_20_6(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Undo] button on main page > Click [Cancel] button on search library
        2. Search conponent ('brush strokes 01') in library > Drag Transition ('brush strokes 01') to timeline clip ('Mood Stickers 07')
        3. Set timecode ('00_00_00_28')
        4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_brush_01.png')
        matches GT (Ground_Truth_Folder + 'L66_brush_01.png') with similarity 0.95
        """
        dependency_test = "test_shape_pip_transition_cross_func_20_5"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click [Undo] button on main page and click [Cancel] button on search library"):
            main_page.click_undo()
            media_room_page.search_library_click_cancel()

        with step("[Action] Search library with keyword 'brush strokes 01' and drag Transition to timeline clip 'Mood Stickers 07'"):
            # # Input search Brush Transition 01  ---------
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('brush strokes 01')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)

            media_room_page.search_library("brush strokes 01")
            main_page.drag_transition_to_timeline_clip("brush strokes 01", "Mood Stickers 07", clip_index=0)

        with step("[Action] Set timecode to (00_00_00_28)"):
            main_page.set_timeline_timecode("00_00_00_28")

        with step("[Verify] Check preview matches GT (L66_brush_01.png) with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L66_brush_01.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L66_brush_01.png', preview_snapshot, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L66_brush_01.png)! Similarity should > 0.95"

        assert True


    @pytest.mark.shape_pip_transition_cross_func
    @pytest.mark.timeline
    @pytest.mark.search_library
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_7] Verify preview after performing undo, cancel, search, drag transition and set timecode')
    @exception_screenshot
    def test_shape_pip_transition_cross_func_20_7(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Undo] button on main page > Click [Cancel] button on search library
        2. Search component ('Cross 2') in library > Drag Transition ('Cross 2') to timeline clip ('Mood Stickers 07')
        3. Set timecode ('00_00_00_13')
        4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_cross.png')
        matches GT (Ground_Truth_Folder + 'L66_cross.png') with similarity 0.95
        """
        dependency_test = "test_shape_pip_transition_cross_func_20_6"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click [Undo] button on main page and click [Cancel] button on search library"):
            main_page.click_undo()
            media_room_page.search_library_click_cancel()

        with step("[Action] Search library with keyword 'Cross 2' and drag Transition to timeline clip 'Mood Stickers 07'"):
            # # Input search Cross 2 ---------
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Cross 2')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)

            media_room_page.search_library("Cross 2")
            main_page.drag_transition_to_timeline_clip("Cross 2", "Mood Stickers 07", clip_index=0)

        with step("[Action] Set timecode to (00_00_00_13)"):
            main_page.set_timeline_timecode("00_00_00_13")

        with step("[Verify] Check preview matches GT (L66_cross.png) with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L66_cross.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L66_cross.png', preview_snapshot, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L66_cross.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.shape_pip_transition_cross_func
    @pytest.mark.timeline
    @pytest.mark.search_library
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @pytest.mark.timecode
    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_8] Verify preview after performing undo, cancel, search, drag transition and set timecode')
    @exception_screenshot
    def test_shape_pip_transition_cross_func_20_8(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Undo] button on main page > Click [Cancel] button on search library
        2. Search component ('magnify') in library > Drag Transition ('Magnify') to timeline clip ('Mood Stickers 07')
        3. Set timecode ('00_00_01_00')
        4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_magnify.png')
        matches GT (Ground_Truth_Folder + 'L66_magnify.png') with similarity 0.95
        """
        dependency_test = "test_shape_pip_transition_cross_func_20_7"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click [Undo] button on main page and click [Cancel] button on search library"):
            main_page.click_undo()
            media_room_page.search_library_click_cancel()

        with step("[Action] Search component 'magnify' in library and drag Transition to timeline clip 'Mood Stickers 07'"):
            # # Input search Magnify ---------
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('magnify')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)

            media_room_page.search_library("magnify")
            main_page.drag_transition_to_timeline_clip("Magnify", "Mood Stickers 07", clip_index=0)

        with step("[Action] Set timecode to (00_00_01_00)"):
            main_page.set_timeline_timecode("00_00_01_00")

        with step("[Verify] Check preview matches GT (L66_magnify.png) with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L66_magnify.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L66_magnify.png', preview_snapshot, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L66_magnify.png)! Similarity should > 0.95"

        assert True


    @pytest.mark.shape_pip_transition_cross_func
    @pytest.mark.timeline
    @pytest.mark.search_library
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @pytest.mark.timecode
    @pytest.mark.save_project
    @pytest.mark.name('[test_shape_pip_transition_cross_func_20_9] Verify preview after performing undo, cancel, search, drag transition and set timecode')
    @exception_screenshot
    def test_shape_pip_transition_cross_func_20_9(self):
        """
        0. Ensure the dependency test is run and passed
        1. Click [Undo] button on main page > Click [Cancel] button on search library
        2. Search component ('Disturbance') in library > Drag Transition ('Disturbance') to timeline clip ('Mood Stickers 07')
        3. Set timecode ('00_00_00_27')
        4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L66_disturbance.png')
        matches GT (Ground_Truth_Folder + 'L66_disturbance.png') with similarity 0.95
        5. Save the project as 'test_shape_pip_transition_cross_func_20_9'
        """
        dependency_test = "test_shape_pip_transition_cross_func_20_8"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click [Undo] button on main page and click [Cancel] button on search library"):
            main_page.click_undo()
            media_room_page.search_library_click_cancel()

        with step("[Action] Search component 'Disturbance' in library and drag Transition to timeline clip 'Mood Stickers 07'"):
            # # Input search Disturbance ---------
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Disturbance')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)
            
            media_room_page.search_library("Disturbance")
            main_page.drag_transition_to_timeline_clip("Disturbance", "Mood Stickers 07", clip_index=0)

        with step("[Action] Set timecode to (00_00_00_27)"):
            main_page.set_timeline_timecode("00_00_00_27")

        with step("[Verify] Check preview matches GT (L66_disturbance.png) with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L66_disturbance.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L66_disturbance.png', preview_snapshot, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L66_disturbance.png)! Similarity should > 0.95"
        
        with step("[Action] Save the project as 'test_shape_pip_transition_cross_func_20_9'"):
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_shape_pip_transition_cross_func_20_9',
                                                folder_path=Test_Material_Folder + 'BFT_21_Stage1/')

        assert True

    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.particle_room
    @pytest.mark.timeline
    @pytest.mark.timecode
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_1] Search component, drag media, set timecode, enter room, and verify preview")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_1(self):
        """
        1. Start the app
        2. Open packed project ('Packed_Project/test_transition_effect_audiomix_cross_func_21_1.pdk', 'Extracted_Folder/test_transition_effect_audiomix_cross_func_21_1')
        3. Set timecode to ('00_00_57_07')
        4. Enter Room (Particle) (5) and capture preview screenshot (locator=L.base.Area.preview.only_mtk_view)
        5. Search component ('Comic Style 06') in library
        6. Select component ('Comic Style 06') in library icon view and drag media ('Comic Style 06') to timeline track 1
        7. Check Preview is updated (Similarity=0.98)
        """
        with step("[Action] Start the app"):
            main_page.start_app()

        with step("[Action] Open packed project and extract"):
            self.open_packed_project('Packed_Project/test_transition_effect_audiomix_cross_func_21_1.pdk', 'Extracted_Folder/test_transition_effect_audiomix_cross_func_21_1')

        with step("[Action] Set timecode to '00_00_57_07'"):
            main_page.set_timeline_timecode("00_00_57_07")

        # [L71] 2.3 Transition / Effect / Particle Room > IAD: Transition, Effect, Particle
        # with uuid("0941636d-0f13-4fbf-baa8-e2725af12a32") as case:
        with step("[Action] Enter Room (Particle) (5) and capture preview screenshot"):
            main_page.enter_room(5)
            before_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        with step("[Action] Search component 'Comic Style 06' in library"):
            # # Input search Instant Memories ---------
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Comic Style 06')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)
            media_room_page.search_library("Comic Style 06")
            
        with step("[Action] Select component 'Comic Style 06' in library icon view and drag to timeline track 1"):
            main_page.select_library_icon_view_media("Comic Style 06")
            time.sleep(DELAY_TIME*2) # wait for download conponent
            main_page.drag_media_to_timeline_playhead_position("Comic Style 06", track_no=1)

        with step("[Verify] Check preview is updated with expected similarity (Similarity=0.98)"):
            updated_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            is_preview_correct = main_page.compare(before_preview, updated_preview, similarity=0.98)
            if is_preview_correct:
                # Similarity should be greater than 0.98
                assert False, "Preview does not updated after add Particle! Similarity should < 0.98"

        assert True


    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.trainsition_room
    @pytest.mark.timeline
    @pytest.mark.timecode
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_2] Enter room, search component, drag transition and verify preview")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_2(self):
        """
        0. Ensure the dependency test is run and passed
        1. Enter Room (Transition) (2)
        2. Search component ('Snow 03') in library
        3. Select component ('Snow 03') in library icon view and drag transition ('Snow 03') to timeline clip ('Comic Style 06')
        4. Set timecode to ('00_00_00_27') in main page
        5. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L71_transition_IAD.png') matches GT (Ground_Truth_Folder + 'L71_transition_IAD.png') with similarity 0.9
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_1"
        self.ensure_dependency(dependency_test)

        with step("[Action] Enter Room (Transition) (2)"):
            main_page.enter_room(2)

        with step("[Action] Search component 'Snow 03' in library"):
            # # Input search Snow 03 ---------
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('Snow 03')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)
            media_room_page.search_library("Snow 03")

        with step("[Action] Select component 'Snow 03' in library icon view and drag transition 'Snow 03' to timeline clip 'Comic Style 06'"):
            main_page.select_library_icon_view_media("Snow 03")
            main_page.drag_transition_to_timeline_clip('Snow 03', 'Comic Style 06')

        with step("[Action] Set timecode to '00_00_00_27' in main page"):
            main_page.set_timeline_timecode("00_00_00_27")

        with step("[Verify] Check preview matches GT (L71_transition_IAD.png) with similarity 0.9"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L71_transition_IAD.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L71_transition_IAD.png',
                preview_snapshot,
                similarity=0.9
            )
            if not check_preview:
                # Similarity should be greater than 0.9
                assert False, "Preview does not match GT (L71_transition_IAD.png)! Similarity should > 0.9"

        assert True


    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.effect_room
    @pytest.mark.timeline
    @pytest.mark.timecode
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_3(self):
        """
        0. Ensure the dependency test is run and passed
        1. Select timeline track (1) and set timecode to ('00_00_00_00') at main page
        2. Select timeline media ('4978895')
        3. Check if effect button (L.tips_area.button.btn_effect_modify) exists
        4. Click [Effect] button on [Tips Area] and remove from [Effect Settings]
        5. Enter Room (Effect) (3)
        6. Search component ('lens flare 40') in library
        7. Select component ('Lens Flare 40') in library icon view and drag media ('Lens Flare 40') to timeline playhead position
        8. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L71_flare_40.png') matches GT (Ground_Truth_Folder + 'L71_flare_40.png') with similarity 0.9
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_2"
        self.ensure_dependency(dependency_test)

        with step("[Action] Select timeline track (1) and set timecode to '00_00_00_00' at main page"):
            main_page.timeline_select_track(1)
            main_page.set_timeline_timecode("00_00_00_00")

        with step("[Action] Select timeline media '4978895'"):
            timeline_operation_page.select_timeline_media("4978895")

        with step("[Verify] Check if effect button exists"):
            if not main_page.exist(L.tips_area.button.btn_effect_modify):
                assert False, "Effect button (L.tips_area.button.btn_effect_modify) does not exist"

        with step("[Action] Click [Effect] button on [Tips Area] and remove from [Effect Settings]"):
            tips_area_page.click_TipsArea_btn_effect()
            effect_room_page.remove_from_effectsettings()

        with step("[Action] Enter Room (Effect) (3)"):
            main_page.enter_room(3)

        with step("[Action] Search for 'lens flare 40' in library"):
            # # Input search lens flare 40 ---------
            # main_page.exist_click(L.media_room.input_search)
            # main_page.keyboard.send('lens flare 40')
            # main_page.press_enter_key()
            # time.sleep(DELAY_TIME * 3)
            media_room_page.search_library("lens flare 40")

        with step("[Action] Select component 'Lens Flare 40' in library icon view and drag media to timeline playhead position"):
            main_page.select_library_icon_view_media("Lens Flare 40")
            time.sleep(DELAY_TIME*2) # wait for download conponent
            main_page.drag_media_to_timeline_playhead_position("Lens Flare 40", track_no=1)

        with step("[Verify] Check preview matches GT (L71_flare_40.png) with similarity 0.9"):
            preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + 'L71_flare_40.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L71_flare_40.png', preview, similarity=0.9):
                # Similarity should be greater than 0.9 for matching preview
                assert False, "Preview does not match GT (L71_flare_40.png)! Similarity should > 0.9"

        assert True


    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.effect_room
    @pytest.mark.timeline
    @pytest.mark.LUT
    @pytest.mark.import_media
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_4] Import CLUTs, drag media and verify preview")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_4(self):
        """
        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_3') is run and passed
        1. Import [CLUTs] with file path (Test_Material_Folder + 'BFT_21_Stage1/3dl_1.3dl')
        2. Drag media ('3dl_1') to timeline playhead position
        3. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L72_3dl.png') matches GT (Ground_Truth_Folder + 'L72_3dl.png') with similarity 0.95
        1. Delete the imported CLUTs file
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_3"
        self.ensure_dependency(dependency_test)

        # [L72] 2.3 Effect Room > Import LUT Effect
        # with uuid("5e5419f2-bdb1-4664-933c-753b9c640682") as case:

        with step("[Action] Import [CLUTs] with file path"):
            effect_room_page.import_CLUTs(Test_Material_Folder + 'BFT_21_Stage1/3dl_1.3dl')

        with step("[Action] Drag media '3dl_1' to timeline playhead position"):
            main_page.drag_media_to_timeline_playhead_position("3dl_1")

        with step("[Verify] Check preview matches GT (L72_3dl.png) with similarity 0.95"):
            preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + 'L72_3dl.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L72_3dl.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L72_3dl.png)! Similarity should > 0.95"

        with step('[Action] Delete the imported CLUTs file'):
            # Select 3dl_1 > Right click menu > Delete
            main_page.select_library_icon_view_media('3dl_1')
            main_page.right_click()
            main_page.select_right_click_menu('Delete')

            # handle warning message (The CLUT  will be delete ... Do you want to continue?)
            main_page.click(L.base.confirm_dialog.btn_yes)
        assert True

    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_5] Add audio track and click Undo")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_5(self):
        """
        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_4') is run and passed
        1. Add audio to track (1) with option ('Above track 4') and check result
        2. Click [Undo] button on main page
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_4"
        self.ensure_dependency(dependency_test)

        # [L78] 2.4 Audio Mixing Room > Audio Track
        # with uuid("dc590d38-160a-45f3-9b96-43d43a6986e7") as case:

        with step("[Action] Add audio to track (1) with option 'Above track 4' and check result"):
            result = timeline_operation_page.set_add_tracks_audio(number=1, position='Above track 4')
            if not result:
                assert False, "Failed to add audio to track (1) with option 'Above track 4'"

        with step("[Action] Click [Undo] button on main page"):
            main_page.click_undo()

        assert True

    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.timeline
    @pytest.mark.video_volumn
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_6] Verify media track drag and audio mixing volume element exist")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_6(self):
        """
        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_5') is run and passed
        1. Enter Room (Media) (1)
        2. Select Track (3) and drag media ('Skateboard 02') to timeline track 3
        3. Enter Room (Audio Mixing) (6)
        4. Check that the volume element exists for audio track 3:
        [{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2}, {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}]
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_5"
        self.ensure_dependency(dependency_test)

        with step("[Action] Enter Room (Media) with parameter 1"):
            # main_page.click(L.main.room_entry.btn_media_room)
            main_page.enter_room(1)

        with step("[Action] Select Track (3) and drag media 'Skateboard 02' to timeline track 3"):
            main_page.timeline_select_track(3)
            main_page.drag_media_to_timeline_playhead_position("Skateboard 02", track_no=3)

        # [L79] 2.4 Audio Mixing Room > Video volume slider
        # with uuid("5dc76d24-9097-4bfb-84bf-33b2e2df86f9") as case:
        with step("[Action] Enter Room (Audio Mixing) with parameter 6"):
            main_page.enter_room(6)

        with step("[Verify] Check that volume element exists for audio track 3"):
            volume_element = main_page.exist([
                {'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2},
                {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}
            ])
            if not volume_element:
                assert False, "Volume element for audio track 3 is not displayed"

        assert True


    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.timeline
    @pytest.mark.video_volumn
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_7] Verify volume meter update and preview match after modifying volume")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_7(self):
        """
        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_6') is run and passed
        1. Get the default volume value for audio track 3 ([{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2}, {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}])
        2. Check default volume meter is existed and capture its screenshot
        3. Mouse drag volume object (Volume preview will update)
        4. Check modified volume value is greater than default volume value
        5. Capture updated preview after modifying volume meter
        6. Check preview matches GT (Ground_Truth_Folder + 'L83.png') with similarity 0.9
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_6"
        self.ensure_dependency(dependency_test)

        with step("[Action] Get the default volume value for audio track 3"):
            audio_3_volume_elem = main_page.exist([
                {'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2},
                {'AXRole': 'AXValueIndicator', 'AXRoleDescription': 'value indicator'}
            ])
            default_volume = audio_3_volume_elem.AXValue

        with step("[Verify] Check default volume meter exists and capture its screenshot"):
            default_volume_element = main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2})
            if not default_volume_element:
                assert False, "Default volume meter is not displayed"
            default_volume_snapshot = main_page.snapshot(locator=default_volume_element)

        with step("[Action] Mouse drag volume object to modify volume (Volume preview will update)"):
            ori_pos = audio_3_volume_elem.AXPosition
            size_w, size_h = audio_3_volume_elem.AXSize
            initial_pos = (ori_pos[0] + size_w * 0.5, ori_pos[1])
            target_pos = (ori_pos[0] + size_w * 0.5, ori_pos[1] - 150)
            main_page.drag_mouse(initial_pos, target_pos)

        with step("[Action] Get modified volume value for audio track 3"):
            modified_volume = audio_3_volume_elem.AXValue
            if modified_volume <= default_volume:
                assert False, f"Modified volume is not greater than default volume! Modified volume: {modified_volume}, Default volume: {default_volume}"

        # [L80] 2.4 Audio Mixing Room > Volume meter (meter should change during preview)
        # with uuid("ca19991d-00ba-40a9-b678-06b0b0958b76") as case:

        with step("[Action] Capture updated preview after volume modification"):
            updated_preview = main_page.snapshot(
                locator=default_volume_element,
                file_name=Auto_Ground_Truth_Folder + 'L83.png'
            )
            if main_page.compare(default_volume_snapshot, updated_preview, similarity=0.95):
                assert False, "Preview does not updated after modifying volume! Similarity should < 0.95"

        # [L83] 2.4 Audio Mixing Room > Volume meter > Stereo
        # with uuid("af992c16-22d9-4e4e-a784-202d9c43865a") as case:
        with step("[Verify] Check preview matches GT (L83.png) with similarity 0.9"):
            if not main_page.compare(Ground_Truth_Folder + 'L83.png', updated_preview, similarity=0.9):
                # Similarity should be greater than 0.9 for matching preview
                assert False, "Preview does not match GT (L83.png)! Similarity should > 0.9"

        assert True


    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.audio_gain
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_8] Verify default audio gain is 50 on track 3")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_8(self):
        """
        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_7') is run and passed
        1. Get [Audio Gain] on audio track (3)
        2. Check default gain is 50
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_7"
        self.ensure_dependency(dependency_test)

        # [L81] 2.4 Audio Mixing Room > Audio gain slider
        # with uuid("c5e2a175-7f66-449a-b69f-1e3732b79e07") as case:

        with step("[Action] Get [Audio Gain] on audio track (3)"):
            gain = audio_mixing_room_page.get_audio_gain(3)

        with step("[Verify] Check default gain is 50"):
            if gain != 50:
                assert False, f"Default audio gain is not 50! Expected: 50; Actual: {gain}"

        assert True


    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.audio_gain
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_9] Set and verify Audio Gain on track 3")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_9(self):
        """
        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_8') is run and passed
        1. Set [Audio Gain] on audio track (3) to (80)
        2. Check [Audio Gain] is 80
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_8"
        self.ensure_dependency(dependency_test)

        with step("[Action] Set [Audio Gain] on audio track (3) to 80"):
            audio_mixing_room_page.set_audio_gain(3, 80)

        with step("[Verify] Check [Audio Gain] on audio track (3) is 80"):
            gain = audio_mixing_room_page.get_audio_gain(3)
            if gain != 80:
                assert False, f"Audio Gain on track 3 is not 80! Expected: 80, Actual: {gain}"

        assert True

    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.fade_in_out
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_10] Verify fade in/out updates and reversion of audio track preview")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_10(self):
        """
        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_9') is run and passed
        1. Set timecode to ('00_00_03_23') at main page
        2. Screenshot audio track 3 ({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2}) as (file_name=Auto_Ground_Truth_Folder + 'L82_before.png')
        3. Click [Fade In] on Audio Track (3)
        4. Screenshot audio track 3 after fade in as (file_name=Auto_Ground_Truth_Folder + 'L82_fade_in.png') and check preview is changed
        5. Click [Fade Out] on Audio Track (3)
        6. Screenshot audio track 3 after fade out as (file_name=Auto_Ground_Truth_Folder + 'L82_after.png') and check preview is changed
        7. Check preview after fade in/out reverts to the initial preview
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_9"
        self.ensure_dependency(dependency_test)

        # [L82] 2.4 Audio Mixing Room > Fade in / Fade out
        # with uuid("c7dd410d-3535-49c3-886b-adeec61f0859") as case:

        with step("[Action] Set timeline timecode to '00_00_03_23' at main page"):
            main_page.set_timeline_timecode("00_00_03_23")

        with step("[Action] Capture initial screenshot of audio track 3"):
            audio_track_locator = main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 2})
            before_preview = main_page.snapshot(locator=audio_track_locator, file_name=Auto_Ground_Truth_Folder + 'L82_before.png')

        with step("[Action] Click [Fade In] on Audio Track (3)"):
            audio_mixing_room_page.click_fade_in(3)

        with step("[Verify] Capture screenshot after Fade In and verify preview has changed"):
            fade_in_preview = main_page.snapshot(locator=audio_track_locator, file_name=Auto_Ground_Truth_Folder + 'L82_fade_in.png')
            if main_page.compare(before_preview, fade_in_preview, similarity=0.95):
                # Similarity should be less than 0.95 when preview is updated after fade in
                assert False, "Preview did not change after Fade In! Similarity should < 0.95"

        with step("[Action] Click [Fade Out] on Audio Track (3)"):
            audio_mixing_room_page.click_fade_out(3)

        with step("[Verify] Capture screenshot after Fade Out and verify preview has changed"):
            fade_out_preview = main_page.snapshot(locator=audio_track_locator, file_name=Auto_Ground_Truth_Folder + 'L82_after.png')
            if main_page.compare(fade_in_preview, fade_out_preview, similarity=0.95):
                # Similarity should be less than 0.95 when preview is updated after fade out
                assert False, "Preview did not change after Fade Out! Similarity should < 0.95"

        with step("[Verify] Check that the final preview reverts to the initial state"):
            if not main_page.compare(before_preview, fade_out_preview, similarity=0.95):
                # Similarity should be greater than 0.95 if the preview reverted to the initial state
                assert False, "Final preview did not revert to the initial state! Similarity should > 0.95"

        assert True




    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_11] Verify next keyframe and timecode update in playback window")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_11(self):
        """
        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_10') is run and passed
        1. Click [Next Keyframe] on track (3) in audio mixing room
        2. Get timecode in playback window and check timecode is (00:00:10:00)
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_10"
        self.ensure_dependency(dependency_test)

        # [L85] 2.4 Audio Mixing Room > Add / Remove/ Switch keyframe
        # with uuid("ef413972-48da-4380-8c0f-e9530174271a") as case:

        with step("[Action] Click [Next Keyframe] on track (3) in audio mixing room"):
            audio_mixing_room_page.click_next_keyframe(3)

        with step("[Verify] Get timecode from playback window and check it equals '00:00:10:00'"):
            current_timecode = playback_window_page.get_timecode_slidebar()
            if current_timecode != "00:00:10:00":
                assert False, f"Timecode is not as expected! Expected '00:00:10:00', got '{current_timecode}'"

        assert True

    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_12] Verify previous keyframe and timecode update in playback window")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_12(self):
        """
        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_11') is run and passed
        1. Click [Previous Keyframe] on track (3) in audio mixing room
        2. Get timecode in playback window and check timecode is (00:00:05:23)
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_11"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click [Previous Keyframe] on track (3) in audio mixing room"):
            audio_mixing_room_page.click_previous_keyframe(3)

        with step("[Verify] Get timecode from playback window and verify it equals '00:00:05:23'"):
            current_timecode = playback_window_page.get_timecode_slidebar()
            if current_timecode != "00:00:05:23":
                assert False, f"Timecode is not as expected! Expected '00:00:05:23', got '{current_timecode}'"

        assert True


    @pytest.mark.transition_effect_audiomix_cross_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.keyframe
    @pytest.mark.timecode
    @pytest.mark.save_project
    @pytest.mark.name("[test_transition_effect_audiomix_cross_func_21_13] Verify keyframe control and frame navigation update timecode")
    @exception_screenshot
    def test_transition_effect_audiomix_cross_func_21_13(self):
        """
        0. Ensure the dependency test ('test_transition_effect_audiomix_cross_func_21_12') is run and passed
        1. Click [Keyframe Control] on track (3) in audio mixing room
        2. Click [Next Frame] on track (3) in audio mixing room
        3. Click [Previous Frame] on track (3) in audio mixing room
        4. Get timecode in playback window and check timecode is (00:00:03:23)
        """
        dependency_test = "test_transition_effect_audiomix_cross_func_21_12"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click [Keyframe Control] on track (3) in audio mixing room"):
            audio_mixing_room_page.click_keyframe_control(3)

        with step("[Action] Click [Next Frame] on track (3) in audio mixing room"):
            audio_mixing_room_page.click_next_keyframe(3)

        with step("[Action] Click [Previous Frame] on track (3) in audio mixing room"):
            audio_mixing_room_page.click_previous_keyframe(3)

        with step("[Verify] Get timecode from playback window and check it equals '00:00:03:23'"):
            current_timecode = playback_window_page.get_timecode_slidebar()
            if current_timecode != "00:00:03:23":
                assert False, f"Timecode is not as expected! Expected '00:00:03:23', got '{current_timecode}'"

        with step("[Action] Remove media ('Skateboard 02') from timeline track 3"):
            main_page.select_timeline_media('Skateboard 02')
            tips_area_page.more_features.remove(index=1)

        with step("[Action] Click [Stop] button and save project"):
            playback_window_page.Edit_Timeline_PreviewOperation('STOP')
            time.sleep(DELAY_TIME)

            # Save project:
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_transition_effect_audiomix_cross_func_21_13',
                                            folder_path=Test_Material_Folder + 'BFT_21_Stage1/')

        assert True



        
    @pytest.mark.audio_mixing_n_voice_over_recording_func
    @pytest.mark.launch
    @pytest.mark.preference
    @pytest.mark.media_room
    @pytest.mark.import_media
    @pytest.mark.audio_mixing_room
    @pytest.mark.name("[test_audio_mixing_n_voice_over_recording_func_22_1] Import media, set preferences and verify audio track preview")
    @exception_screenshot
    def test_audio_mixing_n_voice_over_recording_func_22_1(self):
        """
        1. Start APP and clear capture file
        2. Import media from (Test_Material_Folder + 'Crop_Zoom_Pan/AVC(16_9, 1920x1056, 23.976)_AAC(6ch).mov') and handle high definition dialog
        3. Click [Preferences] and set [Audio Channels] to (5.1 Surround), then click [OK]
        4. Insert media to selected track
        5. Enter Room (Audio Mixing) (6) and set timecode to ('00_01_11_04')
        6. Verify preview of audio track 1 (file_name=Auto_Ground_Truth_Folder + 'L84_6ch_track.png') matches GT (Ground_Truth_Folder + 'L84_6ch_track.png') with similarity 0.95
        """
        with step("[Action] Start APP and clear capture file"):
            main_page.clear_capture_file()
            main_page.start_app()

        # [L84] 2.4 Audio Mixing Room > Volume meter > 5.1 Surround
        # with uuid("0777102c-fc09-474d-b4bf-07a85ca9cfb2") as case:

        with step("[Action] Import media from specified path and handle high definition dialog"):
            media_room_page.import_media_file(Test_Material_Folder + "Crop_Zoom_Pan/AVC(16_9, 1920x1056, 23.976)_AAC(6ch).mov", option=0, timeout=30)
            media_room_page.handle_high_definition_dialog(option="no")
            main_page.snapshot(locator=L.base.Area.library_icon_view, 
                               file_name=Auto_Ground_Truth_Folder + "preview_befroe_recording.png") # for test_audio_mixing_n_voice_over_recording_func_22_6

        with step("[Action] Open Preferences, set Audio Channels to 5.1 Surround and confirm settings"):
            main_page.click_set_user_preferences()
            preferences_page.general.audio_channels_set_51_surround()
            preferences_page.click_ok()

        with step("[Action] Insert media to selected track"):
            main_page.tips_area_insert_media_to_selected_track(option=-1)

        with step("[Action] Enter Audio Mixing Room (6) and set timeline timecode to '00_01_11_04'"):
            main_page.enter_room(6)
            main_page.set_timeline_timecode("00_01_11_04")

        with step("[Verify] Capture screenshot of audio track 1 preview and compare with GT (L84_6ch_track.png)"):
            audio_1_library_track = main_page.exist({'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0})
            preview = main_page.snapshot(locator=audio_1_library_track, file_name=Auto_Ground_Truth_Folder + "L84_6ch_track.png")
            if not main_page.compare(Ground_Truth_Folder + "L84_6ch_track.png", preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L84_6ch_track.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.audio_mixing_n_voice_over_recording_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.nomalize
    @pytest.mark.name("[test_audio_mixing_n_voice_over_recording_func_22_2] Check Normalize button disabled")
    @exception_screenshot
    def test_audio_mixing_n_voice_over_recording_func_22_2(self):
        """
        0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_1') is run and passed
        1. Check [Normalize] button status ([{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0}, {'AXIdentifier': 'IDC_AUDIOMIXER_BUTTONNORMALIZE'}]).AXEnabled is Disabled
        """
        dependency_test = "test_audio_mixing_n_voice_over_recording_func_22_1"
        self.ensure_dependency(dependency_test)
        
        # [L86] 2.4 Audio Mixing Room > Normalize
        # with uuid("7d77dd1e-37c5-4e05-a8aa-c350f3d945b3") as case:

        with step("[Verify] [Normalize] button status is Disabled"):
            normalize_btn = main_page.exist([{'AXIdentifier': 'AudioMixingCollectionViewItem', 'index': 0},
                                            {'AXIdentifier': 'IDC_AUDIOMIXER_BUTTONNORMALIZE'}])
            if not normalize_btn or normalize_btn.AXEnabled:
                # The [Normalize] button should be disabled (AXEnabled should be False)
                assert False, "[Normalize] button is not disabled"
        
        assert True

    @pytest.mark.audio_mixing_n_voice_over_recording_func
    @pytest.mark.audio_mixing_room
    @pytest.mark.nomalize
    @pytest.mark.name("[test_audio_mixing_n_voice_over_recording_func_22_3] Tips split, media insertion, and audio mixing normalize check")
    @exception_screenshot
    def test_audio_mixing_n_voice_over_recording_func_22_3(self):
        """
        0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_2') is run and passed
        1. Click [Split] button on [Tips Area]
        2. Enter Room (Media) (0) and select media ('Skateboard 01.mp4') from library icon view
        3. Insert media to timeline
        4. Enter Room (Audio Mixing) (6) and click [Normalize] on track (1) and check the result
        """
        dependency_test = "test_audio_mixing_n_voice_over_recording_func_22_2"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Click [Split] button on [Tips Area]"):
            main_page.tips_area_click_split(compare_similarity=0.99)
            
        with step("[Action] Enter Room (Media) (0) and select media 'Skateboard 01.mp4' from library icon view"):
            main_page.enter_room(0)
            main_page.select_library_icon_view_media("Skateboard 01.mp4")
            
        with step("[Action] Insert media to timeline"):
            # main_page.tips_area_insert_media_to_selected_track()
            self.temp_for_os_14_insert_function(0)
            
        with step("[Action] Enter Room (Audio Mixing) (6) and click [Normalize] on track (1)"):
            main_page.enter_room(6)
            if not audio_mixing_room_page.click_normalize(1):
                assert False, "Failed to click [Normalize] button on track 1"
            
        assert True


    @pytest.mark.audio_mixing_n_voice_over_recording_func
    @pytest.mark.preference
    @pytest.mark.voice_over_recording_room
    @pytest.mark.time_limit
    @pytest.mark.record
    @pytest.mark.name("[test_audio_mixing_n_voice_over_recording_func_22_4] Set Timelimit, record, and check preview update in Voice Over Recording Room")
    @exception_screenshot
    def test_audio_mixing_n_voice_over_recording_func_22_4(self):
        """
        0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_3') is run and passed
        1. Click [Set User Preferences] > Set [Audio Channels] to (Stereo) > Click [OK] to leave [Preferences]
        2. Enter Room (Voice-Over Recording) (7) > Screenshot (locator=L.base.Area.timeline)
        3. Click [Preferences] button in [Voice Over Recording Room]
        4. Enable [Time Limit] checkbox in [Voice Over Recording Room - Preferences]
        5. Set [Time Limit] to (3)
        6. Click [OK] button to leave [Voice Over Recording Room - Preferences]
        7. Click [Record] button to record 5 secs (recording_time=5, skip_press_stop=1)
        8. Check preview (locator=L.base.Area.timeline) is updated with similarity 0.95
        9. Click [Preferences] button in [Voice Over Recording Room] > Disable [Time Limit] checkbox > Click [OK] button
        """
        dependency_test = "test_audio_mixing_n_voice_over_recording_func_22_3"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Set User Preferences: Set Audio Channels to (Stereo) and leave Preferences"):
            main_page.click_set_user_preferences()
            preferences_page.general.audio_channels_set_stereo()
            preferences_page.click_ok()
        
        with step("[Action] Enter Room (Voice-Over Recording) (7) and take initial timeline screenshot"):
            main_page.enter_room(7)
            before_preview = main_page.snapshot(locator=L.base.Area.timeline)
        
        # [L94] 2.5 Voice Over Recording Room > Recording
        # with uuid("caaa3432-59bc-464d-a1c6-011da6381159") as case:

        with step("[Action] Click [Preferences] button in Voice-Over Recording Room"):
            voice_over_recording_page.click_preferences_btn()
        
        with step("[Action] Enable Time Limit checkbox in Voice-Over Recording Room - Preferences"):
            voice_over_recording_page.set_check_recording_preferences_timelimit(bCheck=1)
        
        with step("[Action] Set Time Limit to (3)"):
            voice_over_recording_page.set_timelimit_sec(3)
        
        with step("[Action] Click [OK] to leave Voice-Over Recording Room - Preferences"):
            voice_over_recording_page.click_recording_preferences_ok()
        
        with step("[Action] Click [Record] button to record 5 seconds"):
            voice_over_recording_page.click_record_btn(5, skip_press_stop=1)
        
        with step("[Verify] Check timeline preview is updated after recording"):
            after_preview = main_page.snapshot(locator=L.base.Area.timeline)
            if main_page.compare(before_preview, after_preview, similarity=0.95):
                # Similarity should be less than 0.95 when preview is updated
                assert False, "Preview did not update after recording! Similarity should < 0.95"
        
        with step("[Action] Click [Preferences] button, disable Time Limit, and leave Preferences"):
            voice_over_recording_page.click_preferences_btn()
            voice_over_recording_page.set_check_recording_preferences_timelimit(bCheck=0)
            voice_over_recording_page.click_recording_preferences_ok()
        
        assert True


    @pytest.mark.audio_mixing_n_voice_over_recording_func
    @pytest.mark.voice_over_recording_room
    @pytest.mark.record
    @pytest.mark.name("[test_audio_mixing_n_voice_over_recording_func_22_5] Verify timecode after recording")
    @exception_screenshot
    def test_audio_mixing_n_voice_over_recording_func_22_5(self):
        """
        0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_4') is run and passed
        1. Get timecode from slidebar
        2. Check timecode is ('00:01:14:04') after recording
        """
        dependency_test = "test_audio_mixing_n_voice_over_recording_func_22_4"
        self.ensure_dependency(dependency_test)
        
        # [L88] 2.5 Voice Over Recording Room > Recording preference > Time limit
        # with uuid("78e31461-7279-4e66-b18a-4d2ea49b5574") as case:

        with step("[Action] Get timecode from slidebar"):
            timecode = playback_window_page.get_timecode_slidebar()
        
        with step("[Verify] Check timecode is ('00:01:14:04') after recording"):
            if timecode != "00:01:14:04":
                assert False, f"Timecode after recording is not correct! Expected: 00:01:14:04, Actual: {timecode}"
        
        assert True

    @pytest.mark.audio_mixing_n_voice_over_recording_func
    @pytest.mark.media_room
    @pytest.mark.record
    @pytest.mark.name("[test_audio_mixing_n_voice_over_recording_func_22_6] Verify preview in Media Room updated after recording")
    @exception_screenshot
    def test_audio_mixing_n_voice_over_recording_func_22_6(self):
        """
        0. Ensure the dependency test ('test_audio_mixing_n_voice_over_recording_func_22_4') is run and passed
        1. Enter Room (Media) (0)
        2. Check preview (L.base.Area.library_icon_view) is updated from snapshot (file_name=Auto_Ground_Truth_Folder + "preview_befroe_recording.png") with similarity 0.95
        """
        dependency_test = "test_audio_mixing_n_voice_over_recording_func_22_4"
        self.ensure_dependency(dependency_test)

        # [L95] 2.5 Voice-Over recording Room > Stop record
        # with uuid("cb943066-9ecc-4410-807e-912fa44ad580") as case:

        with step("[Action] Enter Room (Media) (0)"):
            main_page.enter_room(0)
        
        with step("[Verify] Check preview matches GT (preview_befroe_recording.png)"):
            preview_snapshot = main_page.snapshot(
                locator=main_page.area.library_icon_view,
                file_name=Auto_Ground_Truth_Folder + "preview_after_recording.png"
            )
            if main_page.compare(
                Auto_Ground_Truth_Folder + "preview_befroe_recording.png",
                preview_snapshot,
                similarity=0.95
            ):
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match GT (preview_befroe_recording.png)! Similarity should < 0.95"
        
        assert True

    @pytest.mark.voice_over_recording_room_n_subtitle_room_func
    @pytest.mark.launch
    @pytest.mark.timeline
    @pytest.mark.voice_over_recording_room
    @pytest.mark.fade_in_out
    @pytest.mark.name("[test_voice_over_recording_room_n_subtitle_room_func_24_1] Verify default fade-in is disabled in Voice-Over Recording Room")
    @exception_screenshot
    def test_voice_over_recording_room_n_subtitle_room_func_24_1(self):
        """
        1. Clear capture file and start APP
        2. Select content ('Skateboard 01.mp4') from library icon view and insert to timeline
        3. Screenshot default timeline preview (locator=L.base.Area.timeline) for further comparison
        4. Enter Room (Voice-Over Recording) (7)
        5. Click [Preferences] in [Voice Over Recording Room]
        6. Check default fade-in is disable (L.voice_over_recording.chx_auto_fade_in)
        """
        with step("[Action] Clear capture file and start APP"):
            main_page.clear_capture_file()
            main_page.start_app()

        with step("[Action] Select 'Skateboard 01.mp4' from library and insert to timeline"):
            main_page.select_library_icon_view_media("Skateboard 01.mp4")
            main_page.tips_area_insert_media_to_selected_track()

        # [L90] 2.5 Voice-Over recording Room > Recording Preference > auto fade-in
        # with uuid("10336dd8-bc56-4b3d-ae09-140d52f607c2") as case:

        with step("[Action] Screenshot default timeline preview"):
            main_page.snapshot(locator=L.base.Area.timeline,
                                file_name=Auto_Ground_Truth_Folder + "L90_default_timeline.png")

        with step("[Action] Enter Room (Voice-Over Recording) (7)"):
            main_page.enter_room(7)

        with step("[Action] Click [Preferences] in Voice-Over Recording Room"):
            voice_over_recording_page.click_preferences_btn()

        with step("[Verify] Check default fade-in is disabled"):
            fade_in_checkbox = main_page.exist(L.voice_over_recording.chx_auto_fade_in)
            if not fade_in_checkbox or fade_in_checkbox.AXEnabled==1:
                assert False, "Default fade-in is not disabled"

        assert True




    @pytest.mark.voice_over_recording_room_n_subtitle_room_func
    @pytest.mark.voice_over_recording_room
    @pytest.mark.fade_in_out
    @pytest.mark.name("[test_voice_over_recording_room_n_subtitle_room_func_24_2] Verify [Auto Fade In] checkbox is enabled after enable and re-enter in [Voice Over Recording Room]")
    @exception_screenshot
    def test_voice_over_recording_room_n_subtitle_room_func_24_2(self):
        """
        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_1') is run and passed
        1. Enable [Auto Fade In] checkbox in [Voice Over Recording Room - Preferences]
        2. Click [OK] button to leave [Voice Over Recording Room - Preferences]
        3. Click [Preferences] in [Voice Over Recording Room]
        4. Verify [Auto Fade In] checkbox (L.voice_over_recording.chx_auto_fade_in) is enabled
        5. Disable [Auto Fade In] checkbox in [Voice Over Recording Room - Preferences]
        """
        dependency_test = "test_voice_over_recording_room_n_subtitle_room_func_24_1"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Enable Auto Fade In checkbox in Voice Over Recording Room - Preferences"):
            voice_over_recording_page.set_check_recording_preferences_auto_fade_in(bCheck=1)
        
        with step("[Action] Click OK to leave Voice Over Recording Room - Preferences"):
            voice_over_recording_page.click_recording_preferences_ok()
        
        with step("[Action] Click Preferences in Voice Over Recording Room"):
            voice_over_recording_page.click_preferences_btn()
        
        with step("[Verify] Check that Auto Fade In checkbox is enabled"):
            auto_fade_in_checkbox = main_page.exist(L.voice_over_recording.chx_auto_fade_in)
            if not auto_fade_in_checkbox or auto_fade_in_checkbox.AXEnabled !=1:
                assert False, "Auto Fade In checkbox is not enabled"

        with step("[Action] Disable [Auto Fade In] checkbox in [Voice Over Recording Room - Preferences]"):
            voice_over_recording_page.set_check_recording_preferences_auto_fade_in(bCheck=0)
            voice_over_recording_page.click_recording_preferences_ok()

        assert True

    @pytest.mark.voice_over_recording_room_n_subtitle_room_func
    @pytest.mark.voice_over_recording_room
    @pytest.mark.fade_in_out
    @pytest.mark.name("[test_voice_over_recording_room_n_subtitle_room_func_24_3] Verify default Fade Out is disabled in Voice Over Recording Room")
    @exception_screenshot
    def test_voice_over_recording_room_n_subtitle_room_func_24_3(self):
        """
        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_2') is run and passed
        1. Click [Preferences] in [Voice Over Recording Room]
        2. Check default [Fade Out] is disabled (0) (L.voice_over_recording.chx_auto_fade_out)
        """
        dependency_test = "test_voice_over_recording_room_n_subtitle_room_func_24_2"
        self.ensure_dependency(dependency_test)
        
        # [L91] 2.5 Voice-Over recording Room > Recording Preference > auto fade-out
        # with uuid("977b1f1d-fda3-4b41-b2dd-e4a6f5de1551") as case:

        with step("[Action] Click Preferences in Voice Over Recording Room"):
            voice_over_recording_page.click_preferences_btn()
        
        with step("[Verify] Check default Fade Out checkbox is disabled"):
            fade_out_checkbox = main_page.exist(L.voice_over_recording.chx_auto_fade_out)
            if not fade_out_checkbox or fade_out_checkbox.AXEnabled!=0:
                assert False, "Default Fade Out is enabled, but it should be disabled (0)"
        
        assert True


    @pytest.mark.voice_over_recording_room_n_subtitle_room_func
    @pytest.mark.voice_over_recording_room
    @pytest.mark.fade_in_out
    @pytest.mark.name("[test_voice_over_recording_room_n_subtitle_room_func_24_4] Verify [Auto Fade Out] checkbox is enabled after enable and re-enter in [Voice Over Recording Room]")
    @exception_screenshot
    def test_voice_over_recording_room_n_subtitle_room_func_24_4(self):
        """
        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_3') is run and passed
        1. Enable [Auto Fade Out] checkbox in [Voice Over Recording Room - Preferences]
        2. Click [OK] button to leave [Voice Over Recording Room - Preferences]
        3. Click [Preferences] in [Voice Over Recording Room]
        4. Verify [Auto Fade Out] checkbox (L.voice_over_recording.chx_auto_fade_out) is enabled
        5. Disable [Auto Fade Out] checkbox in [Voice Over Recording Room - Preferences] > Click [OK] button
        """
        dependency_test = "test_voice_over_recording_room_n_subtitle_room_func_24_3"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Enable Auto Fade Out checkbox in Voice Over Recording Room - Preferences"):
            voice_over_recording_page.set_check_recording_preferences_auto_fade_out(bCheck=1)
        
        with step("[Action] Click OK to leave Voice Over Recording Room - Preferences"):
            voice_over_recording_page.click_recording_preferences_ok()
        
        with step("[Action] Click Preferences in Voice Over Recording Room"):
            voice_over_recording_page.click_preferences_btn()
        
        with step("[Verify] Check that Auto Fade Out checkbox is enabled"):
            auto_fade_out_checkbox = main_page.exist(L.voice_over_recording.chx_auto_fade_out)
            if not auto_fade_out_checkbox or auto_fade_out_checkbox.AXEnabled !=1:
                assert False, "Auto Fade Out checkbox is not enabled"
        
        with step("[Action] Disable Auto Fade Out checkbox and leave Preferences"):
            voice_over_recording_page.set_check_recording_preferences_auto_fade_out(bCheck=0)
            voice_over_recording_page.click_recording_preferences_ok()
        
        assert True

    @pytest.mark.voice_over_recording_room_n_subtitle_room_func
    @pytest.mark.voice_over_recording_room
    @pytest.mark.name("[test_voice_over_recording_room_n_subtitle_room_func_24_5] Verify [Mute All Tracking when Recording] checkbox default is disabled")
    @exception_screenshot
    def test_voice_over_recording_room_n_subtitle_room_func_24_5(self):
        """
        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_4') is run and passed
        1. Check [Mute All Tracking when Recording] checkbox status (L.voice_over_recording.chx_mute_all_tracks_when_recording) is 0
        """
        dependency_test = "test_voice_over_recording_room_n_subtitle_room_func_24_4"
        self.ensure_dependency(dependency_test)
        
        # [L92] 2.5 Voice-Over recording Room > Mute all tracks when recording
        # with uuid("ac9db627-975e-447b-ade6-307cffcce17c") as case:

        with step("[Verify] Check [Mute All Tracking when Recording] checkbox is disabled"):
            mute_all_checkbox = main_page.exist(L.voice_over_recording.chx_mute_all_tracks_when_recording)
            if not mute_all_checkbox or mute_all_checkbox.AXValue != 0:
                assert False, "Mute All Tracking when Recording checkbox is not disabled (expected value 0)"
        
        assert True

    @pytest.mark.voice_over_recording_room_n_subtitle_room_func
    @pytest.mark.voice_over_recording_room
    @pytest.mark.name("[test_voice_over_recording_room_n_subtitle_room_func_24_6] Verify [Mute All Tracks When Recording] checkbox status is enabled after enable it")
    @exception_screenshot
    def test_voice_over_recording_room_n_subtitle_room_func_24_6(self):
        """
        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_5') is run and passed
        1. Enable [Mute All Tracks When Recording] checkbox
        2. Check [Mute All Tracking when Recording] checkbox status (L.voice_over_recording.chx_mute_all_tracks_when_recording) is 1
        """
        dependency_test = "test_voice_over_recording_room_n_subtitle_room_func_24_5"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Enable 'Mute All Tracks When Recording' checkbox"):
            voice_over_recording_page.set_check_mute_all_track(bCheck=1)
        
        with step("[Verify] Check that 'Mute All Tracks When Recording' checkbox status is 1"):
            mute_all_checkbox = main_page.exist(L.voice_over_recording.chx_mute_all_tracks_when_recording)
            if not mute_all_checkbox or mute_all_checkbox.AXValue != 1:
                assert False, "Mute All Tracks When Recording checkbox is not enabled (expected value 1)"

        with step("[Action] Disable [Mute All Tracks When Recording] checkbox"):
            voice_over_recording_page.set_check_mute_all_track(bCheck=0)

        assert True

    @pytest.mark.voice_over_recording_room_n_subtitle_room_func
    @pytest.mark.voice_over_recording_room
    @pytest.mark.delay_3_secs
    @pytest.mark.name("[test_voice_over_recording_room_n_subtitle_room_func_24_7] Verify [']Auto 3 sec delay before recording] checkbox default is disabled")
    @exception_screenshot
    def test_voice_over_recording_room_n_subtitle_room_func_24_7(self):
        """
        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_6') is run and passed
        1. Click [Preferences] in [Voice Over Recording Room]
        2. Check default [Auto 3 sec delay before recording] is disabled (0) (L.voice_over_recording.chx_delay_3s)
        """
        dependency_test = "test_voice_over_recording_room_n_subtitle_room_func_24_6"
        self.ensure_dependency(dependency_test)
        
        # [L89] 2.5 Voice-Over recording Room > Auto 3 sec delay before recording
        # with uuid("fc515ef1-aa48-4c66-9dea-811ca2fb70b8") as case:

        with step("[Action] Click Preferences in Voice Over Recording Room"):
            voice_over_recording_page.click_preferences_btn()
        
        with step("[Verify] Check that [Auto 3 sec delay before recording] checkbox is disabled"):
            delay_checkbox = main_page.exist(L.voice_over_recording.chx_delay_3s)
            if not delay_checkbox or delay_checkbox.AXValue != 0:
                assert False, "Auto 3 sec delay before recording checkbox is not disabled (expected value 0)"
        
        assert True


    @pytest.mark.voice_over_recording_room_n_subtitle_room_func
    @pytest.mark.voice_over_recording_room
    @pytest.mark.delay_3_secs
    @pytest.mark.name("[test_voice_over_recording_room_n_subtitle_room_func_24_8] Verify timeline preview update after recording with 3s delay")
    @exception_screenshot
    def test_voice_over_recording_room_n_subtitle_room_func_24_8(self):
        """
        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_7') is run and passed
        1. Enable [Delay 3s] checkbox in [Voice Over Recording Room - Preferences]
        2. Click [OK] button to leave [Voice Over Recording Room - Preferences]
        3. Click [Record] Button to start record and wait (DELAY_TIME)
        4. Click [Record] Button to stop record
        5. Verify preview (L.base.Area.timeline) is updated with (file_name=Auto_Ground_Truth_Folder + "L90_default_timeline.png") with similarity 0.95
        6. Disable [Delay 3s] checkbox in [Voice Over Recording Room - Preferences]
        """
        dependency_test = "test_voice_over_recording_room_n_subtitle_room_func_24_7"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Enable Delay 3s checkbox in Voice Over Recording Room - Preferences"):
            voice_over_recording_page.set_check_recording_preferences_delay_3s(bCheck=1)
        
        with step("[Action] Click OK to leave Voice Over Recording Room - Preferences"):
            voice_over_recording_page.click_recording_preferences_ok()
        
        with step("[Action] Start recording by clicking the Record button"):
            voice_over_recording_page.click_record_btn(1, skip_press_stop=1)
            # main_page.click(L.voice_over_recording.btn_record)
            # time.sleep(DELAY_TIME)
        
        # with step("[Action] Stop recording by clicking the Record button"):
        #     # Stop record btn
        #     main_page.click(L.voice_over_recording.btn_record)
        
        with step("[Verify] Check timeline preview is updated"):
            preview = main_page.snapshot(
                locator=L.base.Area.timeline,
                file_name=Auto_Ground_Truth_Folder + "L90_recorded_timeline.png"
            )
            if main_page.compare(Auto_Ground_Truth_Folder + "L90_default_timeline.png", preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match snapshot (L90_default_timeline.png)! Similarity should < 0.95"

            with step('[Action] Disable [Delay 3s] checkbox in [Voice Over Recording Room - Preferences]'):
                voice_over_recording_page.click_preferences_btn()
                voice_over_recording_page.set_check_recording_preferences_delay_3s(bCheck=0)
                voice_over_recording_page.click_recording_preferences_ok()

        assert True

    @pytest.mark.voice_over_recording_room_n_subtitle_room_func
    @pytest.mark.media_room
    @pytest.mark.import_media
    @pytest.mark.subtitle_room
    @pytest.mark.timeline
    @pytest.mark.auto_transcribe
    @pytest.mark.name("[test_voice_over_recording_room_n_subtitle_room_func_24_9] Import media, set timeline, transcribe and verify language status")
    @exception_screenshot
    def test_voice_over_recording_room_n_subtitle_room_func_24_9(self):
        """
        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_8') is run and passed
        1. Enter Room (Media) (0)
        2. Import media from local (Test_Material_Folder + 'Subtitle_Room/JPN.mp4')
        3. Select Track (1) > Set timeline timecode to ('00_00_10_00') at main page
        4. Drag media ('JPN.mp4') to timeline at playhead position
        5. Enter Room (Subtitle) (8)
        6. Click [Auto Transcribe] button
        7. Select Language (JPN)
        8. Get [Language] status > Check if it is 'Japanese'
        """
        dependency_test = "test_voice_over_recording_room_n_subtitle_room_func_24_8"
        self.ensure_dependency(dependency_test)
        
        # [L98] 2.6 Subtitle Room > Speech to text (Auto Transcribe subtitle)
        # with uuid("831589ab-052e-4e13-a8e6-f7d22cca3c5f") as case:

        with step("[Action] Enter Room (Media) (0)"):
            main_page.enter_room(0)
        
        with step("[Action] Import media 'JPN.mp4' from local"):
            media_path = Test_Material_Folder + "Subtitle_Room/JPN.mp4"
            media_room_page.import_media_file(media_path)
        
        with step("[Action] Select Track (1) and set timeline timecode to '00_00_10_00'"):
            main_page.timeline_select_track(1)
            main_page.set_timeline_timecode("00_00_10_00")
        
        with step("[Action] Drag media 'JPN.mp4' to timeline playhead position"):
            main_page.drag_media_to_timeline_playhead_position("JPN.mp4")
        
        with step("[Action] Enter Room (Subtitle) (8)"):
            main_page.enter_room(8)
        
        with step("[Action] Click [Auto Transcribe] button"):
            subtitle_room_page.library_menu.click_auto_transcribe()
        
        with step("[Action] Select Language 'JPN'"):
            subtitle_room_page.auto_function.select_LANG("JPN")
        
        with step("[Verify] Check that Language status is 'Japanese'"):
            lang_status = subtitle_room_page.auto_function.get_LANG_status()
            if lang_status != "Japanese":
                assert False, f"Language status is not 'Japanese'! Got '{lang_status}' instead."
        
        assert True

    @pytest.mark.voice_over_recording_room_n_subtitle_room_func
    @pytest.mark.subtitle_room
    @pytest.mark.auto_transcribe
    @pytest.mark.name("[test_voice_over_recording_room_n_subtitle_room_func_24_10] Verify subtitle creation and total subtitle rows over 6")
    @exception_screenshot
    def test_voice_over_recording_room_n_subtitle_room_func_24_10(self):
        """
        0. Ensure the dependency test ('test_voice_over_recording_room_n_subtitle_room_func_24_9') is run and passed
        1. Click [Create] button and wait until [Cancel] button disappears
        2. Check [Total Subtitle Rows] is over 6 rows
        """
        dependency_test = "test_voice_over_recording_room_n_subtitle_room_func_24_9"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Click [Create] button and wait until [Cancel] button disappears"):
            subtitle_room_page.auto_function.click_create()
            # Wait until the cancel button disappears, checking up to 200 times
            for _ in range(200):
                if not main_page.is_exist(L.subtitle_room.handle_progress_dialog.btn_cancel):
                    break
                time.sleep(1)
        
        with step("[Verify] Check that total subtitle rows is over 6"):
            total_rows = self.get_total_subtitle_rows()
            if total_rows <= 6:
                assert False, f"Total subtitle rows incorrect! Expected > 6, got {total_rows}"
        
        assert True

    @pytest.mark.subtitle_room_func
    @pytest.mark.launch
    @pytest.mark.subtitle_room
    @pytest.mark.name("[test_subtitle_room_func_25_1] Verify Subtitle Room button is disabled due to no clip imported")
    @exception_screenshot
    def test_subtitle_room_func_25_1(self):
        """
        1. Start APP
        2. Check [Subtitle Room] button (L.main.room_entry.btn_subtitle_room) status is disabled (False) due to no clip imported
        """
        with step("[Action] Start APP"):
            main_page.start_app()
        
        
        # [L97] 2.6 Subtitle Room > Subtitle room should be gray out when not clips on timeline
        # with uuid("a561424a-b292-474c-adef-3d5e8b4377b9") as case:

        with step("[Verify] Check Subtitle Room button is disabled"):
            subtitle_btn = main_page.exist(L.main.room_entry.btn_subtitle_room)
            if subtitle_btn is None or subtitle_btn.AXEnabled:
                assert False, "Subtitle Room button is not disabled as expected due to no clip imported"
        
        assert True
            
    @pytest.mark.subtitle_room_func
    @pytest.mark.open_project
    @pytest.mark.preference
    @pytest.mark.media_room
    @pytest.mark.timecode
    @pytest.mark.subtitle_room
    @pytest.mark.add_subtitle_manual
    @pytest.mark.name("[test_subtitle_room_func_25_2] Verify subtitle creation and preview update with default duration change")
    @exception_screenshot
    def test_subtitle_room_func_25_2(self):
        """
        0. Ensure the dependency test ('test_subtitle_room_func_25_1') is run and passed
        1. Open packed project ('Packed_Project/test_subtitle_room_func_25_2.pdk', 'Extracted_Folder/test_subtitle_room_func_25_2')
        2. Enter [Preference] > Switch to [Editing] tab > Set [Subtitle] default Duration to (10.0) > Click [OK] to leave [Preference]
        3. Set timeline timecode to ('00_00_03_23') at main page
        4. Enter Room (Subtitle) (8) > Click [Manually Create] button > Click [Add] button > Modify the (1) subtitle text to (string1='Welcome 1001 Shopping Mall.', string2=' Big sale')
        5. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'I99.png') matches Ground Truth (Ground_Truth_Folder + 'I99.png') with similarity 0.95
        """
        dependency_test = "test_subtitle_room_func_25_1"
        self.ensure_dependency(dependency_test)
        
        with step("[Action] Open packed project for test_subtitle_room_func_25_2"):
            self.open_packed_project("Packed_Project/test_subtitle_room_func_25_2.pdk", "Extracted_Folder/test_subtitle_room_func_25_2")
        
        with step("[Action] Enter Preference > Switch to Editing tab and set Subtitle default Duration to 10.0, then click OK"):
            # Open Preference > Editing > Set default Subtitle duration to 10 (For v21.6 PM request VDE235316-0061)
            main_page.click_set_user_preferences()
            preferences_page.switch_to_editing()
            preferences_page.editing.durations_subtitle_set_value('10.0')
            time.sleep(DELAY_TIME)
            preferences_page.click_ok()

        with step("[Action] Set timeline timecode to '00_00_03_23' at main page"):
            main_page.set_timeline_timecode("00_00_03_23", is_verify=True)

        # [L99] 2.6 Subtitle Room > Create Subtitle manually
        # with uuid("43f96c3a-118c-4c3e-955c-1c8f8fcc2bb8") as case:

        with step("[Action] Enter Room (Subtitle) (8) and create subtitle manually"):
            main_page.enter_room(8)
            subtitle_room_page.library_menu.click_manually_create()
            subtitle_room_page.click_add_btn()
            subtitle_room_page.modify_subtitle_text(1, string1="Welcome 1001 Shopping Mall.", string2=" Big sale")
        
        with step("[Verify] Screenshot preview and compare with GT (I99.png)"):
            preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + "I99.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "I99.png", preview, similarity=0.95):
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match GT (I99.png)! Similarity should > 0.95"
        
        assert True

    @pytest.mark.subtitle_room_func
    @pytest.mark.media_room
    @pytest.mark.timecode
    @pytest.mark.subtitle_room
    @pytest.mark.add_subtitle_manual
    @pytest.mark.name("[test_subtitle_room_func_25_3] Modify subtitle text and verify preview update")
    @exception_screenshot
    def test_subtitle_room_func_25_3(self):
        """
        0. Ensure the dependency test ('test_subtitle_room_func_25_2') is run and passed
        1. Enter Room (Media) (0) > Select Track (1) and set timeline timecode to ('00_00_13_23') at main page
        2. Enter Room (Subtitle) (8)
        3. Click [Add] button
        4. Modify the (2) subtitle text to (string1='Only one day')
        5. Check preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'I100.png') matches Ground Truth (Ground_Truth_Folder + 'I100.png') with similarity 0.95
        """
        dependency_test = "test_subtitle_room_func_25_2"
        self.ensure_dependency(dependency_test)
        
        # [L100] 2.6 Subtitle Room > Input text
        # with uuid("7f4c7718-d0a0-427c-abaf-809b8555a48a") as case:

        with step("[Action] Enter Room (Media) (0), select Track (1) and set timeline timecode to '00_00_13_23'"):
            main_page.enter_room(0)
            main_page.timeline_select_track(1)
            main_page.set_timeline_timecode("00_00_13_23", is_verify=True)
        
        with step("[Action] Enter Room (Subtitle) (8)"):
            main_page.enter_room(8)
        
        with step("[Action] Click [Add] button"):
            subtitle_room_page.click_add_btn(is_click=1)
        
        with step("[Action] Modify subtitle text (2) to 'Only one day'"):
            subtitle_room_page.modify_subtitle_text(2, string1="Only one day")
        
        with step("[Verify] Capture preview and compare with GT (I100.png)"):
            preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + "I100.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "I100.png", preview, similarity=0.95):
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match GT (I100.png)! Similarity should > 0.95"
        
        assert True

    @pytest.mark.subtitle_room_func
    @pytest.mark.subtitle_room
    @pytest.mark.position
    @pytest.mark.name("[test_subtitle_room_func_25_4] Change subtitle position and preview match GT")
    @exception_screenshot
    def test_subtitle_room_func_25_4(self):
        '''
        0. Ensure the dependency test ('test_subtitle_room_func_25_3') is run and passed
        1. Click the (1) subtitle text > Click [Adjust Position] button
        2. Set [X] position to (0.58) by textbox and [Y] position to (0.29) by textbox
        3. Click [Close] button to close position window > Click [Adjust Position] button again
        4. Get [X] position value and check is ('0.58')
        5. Get [Y] position value and check is ('0.29')
        6. Click [Close] button to close position window
        7. Check preview (locator=main_page.area.preview.main) matches Ground Truth (Ground_Truth_Folder + 'I99.png') with similarity 0.999
        8. Reset [Subtitle] position
        '''
        dependency_test = "test_subtitle_room_func_25_3"
        self.ensure_dependency(dependency_test)

        # [L103] 2.6 Subtitle Room > Adjust subtitle position
        # with uuid("3c4d814a-b38f-426e-a04b-3bdb406cef94") as case:

        with step("[Action] Click subtitle text and adjust position"):
            subtitle_room_page.select_subtitle_row(1)
            subtitle_room_page.click_adjust_pos_btn()

        with step("[Action] Set X position to 0.58 and Y position to 0.29"):
            subtitle_room_page.position.set_x_value(0.58)
            subtitle_room_page.position.set_y_value(0.29)

        with step("[Action] Close position window and re-open adjust position"):
            subtitle_room_page.position.close_window()
            subtitle_room_page.click_adjust_pos_btn()

        with step("[Verify] Check X position value is '0.58'"):
            x_value = subtitle_room_page.position.get_x_value()
            if x_value != '0.58':
                assert False, f"X position value incorrect! Expected: 0.58, Got: {x_value}"

        with step("[Verify] Check Y position value is '0.29'"):
            y_value = subtitle_room_page.position.get_y_value()
            if y_value != '0.29':
                assert False, f"Y position value incorrect! Expected: 0.29, Got: {y_value}"

        with step("[Action] Close position window"):
            subtitle_room_page.position.close_window()

        with step("[Verify] Check preview matches GT (I99.png)"):
            preview = main_page.snapshot(locator=main_page.area.preview.main,
                                         file_name=Auto_Ground_Truth_Folder + 'I99.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'I99.png', preview, similarity=0.999)
            if not check_preview:
                # Similarity should be greater than 0.999 for matching preview
                assert False, "Preview does not match Ground Truth (I99.png)! Similarity should > 0.999"

        with step("[Action] Reset [Subtitle] position"):
            subtitle_room_page.click_adjust_pos_btn()
            subtitle_room_page.position.click_reset_btn()
            subtitle_room_page.position.close_window()

        assert True

    @pytest.mark.subtitle_room_func
    @pytest.mark.subtitle_room
    @pytest.mark.name("[test_subtitle_room_func_25_5] Verify subtitle row count increases after split")
    @exception_screenshot
    def test_subtitle_room_func_25_5(self):
        '''
        0. Ensure the dependency test ('test_subtitle_room_func_25_4') is run and passed
        1. Select subtitle row (2) and get total subtitle rows
        2. Set timeline timecode to ('00_00_10_08') at main page
        3. Click [Split] button
        4. Get total subtitle rows and check if it increased by 1
        '''
        dependency_test = "test_subtitle_room_func_25_4"
        self.ensure_dependency(dependency_test)

        # [L101] 2.6 Subtitle Room > Merge / Split subtitle
        # with uuid("f8692306-bb74-44dc-abf4-f5374b0fca0c") as case:

        with step("[Action] Select subtitle row 2 and get total subtitle rows"):
            subtitle_room_page.select_subtitle_row(2)
            initial_count = self.get_total_subtitle_rows()

        with step("[Action] Set timeline timecode to 00_00_10_08"):
            main_page.set_timeline_timecode('00_00_10_08')

        with step("[Action] Click Split button"):
            subtitle_room_page.click_split_btn()

        with step("[Verify] Check total subtitle rows increased by 1"):
            final_count = self.get_total_subtitle_rows()
            if final_count != initial_count + 1:
                assert False, f"Expected subtitle row count to increase by 1, but got initial {initial_count} and final {final_count}"

        assert True

    @pytest.mark.subtitle_room_func
    @pytest.mark.subtitle_room
    @pytest.mark.name("[test_subtitle_room_func_25_6] Verify subtitle merge reduces total subtitle rows to 2")
    @exception_screenshot
    def test_subtitle_room_func_25_6(self):
        '''
        0. Ensure the dependency test ('test_subtitle_room_func_25_5') is run and passed
        1. Select subtitle row (1, 2) and click [Merge] button
        2. Select subtitle row (2) and get total subtitle rows
        3. Check if total subtitle rows is 2
        4. Undo merge operation
        '''
        dependency_test = "test_subtitle_room_func_25_5"
        self.ensure_dependency(dependency_test)

        with step("[Action] Select subtitle rows 1 and 2 and merge"):
            subtitle_room_page.multiple_select_subtitle_row(1,2)
            subtitle_room_page.click_merge_btn()

        with step("[Verify] Check total subtitle rows equals 2"):
            total_rows = self.get_total_subtitle_rows()
            if total_rows != 2:
                assert False, f"Expected total subtitle rows to be 2, but got {total_rows}"
        
        with step("[Action] Undo merge operation"):
            main_page.click_undo()

        assert True


    @pytest.mark.subtitle_room_func
    @pytest.mark.subtitle_room
    @pytest.mark.character
    @pytest.mark.name("[test_subtitle_room_func_25_7] Change [Font Type], [Size], [Text Color] in subtitle room and verify preview update")
    @exception_screenshot
    def test_subtitle_room_func_25_7(self):
        '''
        0. Ensure the dependency test ('test_subtitle_room_func_25_6') is run and passed
        1. Click [Change Subtitle Text Format] button and capture screenshot (L.subtitle_room.character.main_window)
        2. Set [Font Type] to ('Mom Outline') and check preview is updated with similarity 0.99
        3. Set [Size] to ('22') and check preview is updated with similarity 0.99
        4. Set [Text Color] to ('797AFF') and check preview is updated with similarity 0.99
        5. Click [OK] button to close [Character] window
        6. Select subtitle row (2)
        7. Check preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'I104.png') with similarity 0.95
        '''
        dependency_test = "test_subtitle_room_func_25_6"
        self.ensure_dependency(dependency_test)

        # [L104] 2.6 Subtitle Room > Change subtitle text format
        # with uuid("8fa81655-5d49-4bcf-9d54-8eef4865e33e") as case:

        with step("[Action] Click Change Subtitle Text Format and capture screenshot"):
            subtitle_room_page.click_change_subtitle_format()
            before_preview = main_page.snapshot(locator=L.subtitle_room.character.main_window)

        with step("[Action] Set Font Type to 'Mom Outline' and verify preview update"):
            subtitle_room_page.character.apply_font_type('Mom Outline')
            preview_font = main_page.snapshot(locator=L.subtitle_room.character.main_window)
            check_font = main_page.compare(before_preview, preview_font, similarity=0.99)
            if check_font:
                assert False, "Preview after setting Font Type does not match GT! Similarity should< 0.99"

        with step("[Action] Set Size to '22' and verify preview update"):
            subtitle_room_page.character.apply_size('22')
            preview_size = main_page.snapshot(locator=L.subtitle_room.character.main_window)
            check_size = main_page.compare(check_font, preview_size, similarity=0.99)
            if check_size:
                assert False, "Preview after setting Size does not match GT! Similarity should < 0.99"

        with step("[Action] Set Text Color to '797AFF' and verify preview update"):
            subtitle_room_page.character.set_text_color('797AFF')
            preview_color = main_page.snapshot(locator=L.subtitle_room.character.main_window)
            check_color = main_page.compare(preview_size, preview_color, similarity=0.99)
            if check_color:
                assert False, "Preview after setting Text Color does not match GT! Similarity should < 0.99"

        with step("[Action] Click OK to close Character window"):
            subtitle_room_page.character.click_ok()

        with step("[Action] Select subtitle row 2"):
            subtitle_room_page.select_subtitle_row(2)

        with step("[Verify] Check final preview matches GT (I104.png)"):
            final_preview = main_page.snapshot(locator=main_page.area.preview.main,
                                            file_name=Auto_Ground_Truth_Folder + 'I104.png')
            check_final = main_page.compare(Ground_Truth_Folder + 'I104.png', final_preview, similarity=0.95)
            if not check_final:
                # Similarity should be greater than 0.95 for final preview match
                assert False, "Final preview does not match GT (I104.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.subtitle_room_func
    @pytest.mark.media_room
    @pytest.mark.timecode
    @pytest.mark.subtitle_room
    @pytest.mark.play_video
    @pytest.mark.name("[test_subtitle_room_func_25_8] Verify preview change during playback and GT match after setting timecode")
    @exception_screenshot
    def test_subtitle_room_func_25_8(self):
        '''
        0. Ensure the dependency test ('test_subtitle_room_func_25_7') is run and passed
        1. Click preview is changed when playing video in 3 secs
        2. Enter Room (Media) (0) > Select Track (1) and set timecode to ('00_00_11_04') at main page
        3. Enter Room (Subtitle) (8)
        4. Check Preview (locator=main_page.area.preview.main, file_name=Auto_Ground_Truth_Folder + 'I106.png') matches GT (Ground_Truth_Folder + 'I106.png') with similarity 0.95
        '''
        dependency_test = "test_subtitle_room_func_25_7"
        self.ensure_dependency(dependency_test)

        # [L106] 2.6 Subtitle Room > Preview movie
        # with uuid("ab3bcb63-36a3-44bb-8622-c12d44e0068d") as case:

        with step("[Action] Play video for 3 seconds and check preview change"):
            # playback_window_page.Edit_Timeline_PreviewOperation('Play')
            # time.sleep(DELAY_TIME * 3)
            # playback_window_page.Edit_Timeline_PreviewOperation('STOP')
            # time.sleep(DELAY_TIME * 2)

            main_page.Check_PreviewWindow_is_different(sec=3)

        with step("[Action] Enter Media Room (0), select Track (1) and set timecode to '00_00_11_04'"):
            main_page.enter_room(0)
            main_page.timeline_select_track(1)
            main_page.set_timeline_timecode("00_00_11_04", is_verify=True)

        with step("[Action] Enter Subtitle Room (8)"):
            main_page.enter_room(8)

        with step("[Verify] Check preview matches GT (I106.png)"):
            preview = main_page.snapshot(
                locator=main_page.area.preview.main,
                file_name=Auto_Ground_Truth_Folder + "I106.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "I106.png", preview, similarity=0.95):
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match GT (I106.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.subtitle_room_func
    @pytest.mark.subtitle_room
    @pytest.mark.export_srt
    @pytest.mark.name("[test_subtitle_room_func_25_9] Export SRT with 'Export With Additional SubRip Style Information'")
    @exception_screenshot
    def test_subtitle_room_func_25_9(self):
        '''
        0. Ensure the dependency test ('test_subtitle_room_func_25_8') is run and passed
        1. If exist_file (srt_export_folder + 'test_1_20_extra_font.srt'), delete the folder
        2. Click [Export SRT] button with "Export With Additional SubRip Style Information" option
        3. Handle save file dialog with file name 'ttest_subtitle_room_func_25_9_font.srt' and save to (srt_export_folder + 'test_1_20_extra_font.srt')
        4. Check if saved file existed
        '''
        dependency_test = "test_subtitle_room_func_25_8"
        self.ensure_dependency(dependency_test)

        srt_export_folder = Test_Material_Folder + 'BFT_21_Stage1/Export/additional_font/'

        # [L105] 2.6 Subtitle Room > EXport & Import subtitle
        # with uuid("381ba551-3de8-4d4f-b5f0-2c00938a7f29") as case:

        with step("[Action] Delete existing SRT export folder if file exists"):
            if main_page.exist_file(srt_export_folder):
                main_page.delete_folder(srt_export_folder)

        with step("[Action] Click [Export SRT] button with 'Export With Additional SubRip Style Information' option (0)"):
            subtitle_room_page.more.click_export_str(0)

        with step("[Action] Handle save file dialog with file name 'test_subtitle_room_func_25_9_font.srt'"):
            main_page.handle_save_file_dialog(name="test_subtitle_room_func_25_9_font.srt", folder_path=srt_export_folder)

        with step("[Verify] Check if the exported SRT file exists"):
            file_path = srt_export_folder + "test_subtitle_room_func_25_9_font.srt"
            if not main_page.exist_file(file_path):
                assert False, "Exported SRT file does not exist!"

        assert True

    @pytest.mark.subtitle_room_func
    @pytest.mark.subtitle_room
    @pytest.mark.timecode
    @pytest.mark.name("[test_subtitle_room_func_25_10] Verify subtitle start time after deletion")
    @exception_screenshot
    def test_subtitle_room_func_25_10(self):
        '''
        0. Ensure the dependency test ('test_subtitle_room_func_25_9') is run and passed
        1. Select subtitle row (1) and click [Delete] button in subtitle room
        2. Get [start time] of the (1) subtitle text
        3. Check [Start Time] is ('00:00:08:23')
        '''
        dependency_test = "test_subtitle_room_func_25_9"
        self.ensure_dependency(dependency_test)

        # [L102] 2.6 Subtitle Room > Remove Subtitle
        # with uuid("3c0551ff-9dc6-40cb-b37e-72c21f6fe3ab") as case:

        with step("[Action] Select subtitle row 1 and click Delete button"):
            subtitle_room_page.select_subtitle_row(1)
            subtitle_room_page.click_del_btn(is_click=1)

        with step("[Action] Get start time of subtitle row 1"):
            start_time = subtitle_room_page.get_start_time(1)

        with step("[Verify] Check start time is '00:00:08:23'"):
            if start_time != '00:00:08:23':
                assert False, f"Expected start time '00:00:08:23', but got '{start_time}'"

        assert True

    @pytest.mark.subtitle_room_func
    @pytest.mark.subtitle_room
    @pytest.mark.import_media
    @pytest.mark.media_room
    @pytest.mark.name("[test_subtitle_room_func_25_10] Verify subtitle import and preview update after clearing subtitles")
    @exception_screenshot
    def test_subtitle_room_func_25_10(self):
        '''
        0. Ensure the dependency test ('test_subtitle_room_func_25_10') is run and passed
        1. Select subtitle row (2) and click [Change Subtitle Format] button
        2. Click [Apply To All] button
        3. Click [Clear All Subtitles] from [More] button to initialize
        4. Click [Import subtitles from SRT/TXT file] from [More] button
        5. Handle open project dialog with file (Test_Material_Folder + 'BFT_21_Stage1/Export/additional_font/' + 'test_subtitle_room_func_25_10_font.srt') to import subtitle
        6. Enter Room (0) and set timeline timecode to '00_00_11_04' at main page
        7. Check preview (locator=main_page.area.preview.main) matches GT (Ground_Truth_Folder + 'I106.png') with similarity 0.95
        '''
        dependency_test = "test_subtitle_room_func_25_10"
        self.ensure_dependency(dependency_test)

        with step("[Action] Select subtitle row 2 and click Change Subtitle Format button"):
            subtitle_room_page.select_subtitle_row(2)
            subtitle_room_page.click_change_subtitle_format()

        with step("[Action] Click Apply To All button"):
            subtitle_room_page.character.apply_to_all()

        with step("[Action] Click Clear All Subtitles from More button"):
            subtitle_room_page.more.click_clear_all_subtitles()

        with step("[Action] Click Import subtitles from SRT/TXT file from More button"):
            subtitle_room_page.more.click_import_subtitle_file()

        with step("[Action] Handle open project dialog to import subtitle file"):
            import_file = Test_Material_Folder + "BFT_21_Stage1/Export/additional_font/"
            main_page.handle_open_project_dialog(import_file + 'test_subtitle_room_func_25_10_font.srt')

        with step("[Action] Enter Room (0) and set timeline timecode to '00_00_11_04'"):
            main_page.enter_room(0)
            main_page.timeline_select_track(1)
            main_page.set_timeline_timecode("00_00_11_04", is_verify=True)

        with step("[Verify] Capture preview and compare with GT (I106.png)"):
            preview = main_page.snapshot(locator=main_page.area.preview.main,
                                        file_name=Auto_Ground_Truth_Folder + "I106.png")
            if not main_page.compare(Ground_Truth_Folder + "I106.png", preview, similarity=0.95):
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match GT (I106.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.subtitle_room_func
    @pytest.mark.subtitle_room
    @pytest.mark.pack_project
    @pytest.mark.name("[test_subtitle_room_func_25_11] Pack project materials and wait for processing")
    @exception_screenshot
    def test_subtitle_room_func_25_11(self):
        '''
        0. Ensure the dependency test ('test_subtitle_room_func_25_10') is run and passed
        1. Open [Pack Project Materials] from top menu bar with (project_path=Test_Material_Folder + 'BFT_21_Stage1/test_subtitle_room_func_25_11/')
        2. Check if project is packed successfully and wait for processing (DELAY_TIME*15)
        '''
        dependency_test = "test_subtitle_room_func_25_10"
        self.ensure_dependency(dependency_test)


        # [L107] 2.6 Subtitle Room > Save Project & Pack project material
        # with uuid("4c2bfca6-2351-4925-ba94-9af00253b738") as case:

        with step("[Action] Open Pack Project Materials from top menu bar"):
            project_path = Test_Material_Folder + "BFT_21_Stage1/test_subtitle_room_func_25_11/"
            pack_result = main_page.top_menu_bar_file_pack_project_materials(project_path)
            if not pack_result:
                assert False, "Pack project material failed!"

        with step("[Action] Wait for project processing to complete"):
            time.sleep(DELAY_TIME * 15)

        assert True


    @pytest.mark.subtitle_room_func
    @pytest.mark.launch
    @pytest.mark.name("[test_subtitle_room_func_25_12] Relaunch APP in subtitle room and check able to select component after relaunch")
    @exception_screenshot
    def test_subtitle_room_func_25_12(self):
        '''
        0. Ensure the dependency test ('test_subtitle_room_func_25_11') is run and passed
        1. Close and restart app
        2. Check if able to select component ('Landscape 02.jpg') from library icon view
        '''
        dependency_test = "test_subtitle_room_func_25_11"
        self.ensure_dependency(dependency_test)

        # [L108] 2.6 Subtitle Room > Re-launch PDR
        # with uuid("e8516fc6-791e-433e-b83c-768fff49c3be") as case:

        with step("[Action] Close and restart the app"):
            main_page.close_and_restart_app()

        with step("[Verify] Select component 'Landscape 02.jpg' from library icon view"):
            if not main_page.select_library_icon_view_media("Landscape 02.jpg"):
                assert False, 'Failed to select component "Landscape 02.jpg" from library icon view after relaunch AP in subtitle room'

        assert True


    @pytest.mark.effect_n_bg_music_cross_func
    @pytest.mark.launch
    @pytest.mark.effect_settings_room
    @pytest.mark.search_library
    @pytest.mark.timeline
    @pytest.mark.name('[test_effect_n_bg_music_cross_func_26_1] Verify effect adjustment and preview update')
    @exception_screenshot
    def test_effect_n_bg_music_cross_func_26_1(self):
        """
        1. Clear cache and start app
        2. Import [Media File] from local (Test_Material_Folder + 'Subtitle_Room/JPN.mp4')
        3. Select timeline track (2)
        4. Click [Insert to Selected Track] button
        5. Enter Room (Effect) (3) and take a screenshot (locator=L.base.Area.preview.only_mtk_view)
        6. Select [Style Effect] category
        7. Search keyword ('TV Wall') and drag the template to timeline playhead position
        8. Click [Effect] button and adjust Vertical Slider in TV Wall
        9. Check preview is updated after adjusting parameter (similarity should be between 0.8 and 0.9)
        10. Click [Close] button to close effect setting and return to effect room
        """
        with step('[Action] Clear cache and start app'):
            main_page.clear_cache()
            main_page.start_app()

        with step('[Action] Import media file from local'):
            media_path = Test_Material_Folder + 'Subtitle_Room/JPN.mp4'
            media_room_page.import_media_file(media_path)

        with step('[Action] Select timeline track 2'):
            main_page.timeline_select_track(2)

        with step('[Action] Click [Insert to Selected Track] button'):
            tips_area_page.tips_area_insert_media_to_selected_track()

        with step('[Action] Enter Room (Effect) (3) and capture initial preview'):
            main_page.enter_room(3)
            preview_initial = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        # [L220] 2.3 Effect Room > Add each kind of template to timeline / preview > apply CL Effect & enter modify page
        # with uuid("16fd758d-f1b1-4d46-b504-c23142c983ae") as case:

        with step('[Action] Select [Style Effect] category'):
            main_page.select_LibraryRoom_category('Style Effect')

        with step('[Action] Search for "TV Wall" and drag template to timeline playhead'):
            media_room_page.search_library('TV Wall')
            time.sleep(DELAY_TIME * 2)
            main_page.drag_media_to_timeline_playhead_position("TV Wall")

        with step('[Action] Click [Effect] button and adjust Vertical Slider in TV Wall'):
            tips_area_page.click_TipsArea_btn_effect()
            effect_settings_page.tv_wall.adjust_vertical_slider()

        with step('[Verify] Check preview is updated after adjusting parameter'):
            preview_updated = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            # Similarity should be between 0.8 and 0.9 for updated preview
            if not main_page.compare(preview_initial, preview_updated, similarity=0.80):
                assert False, "Preview did not update as expected! Similarity should be in 0.8~0.9. The similarity is too low "

            if main_page.compare(preview_initial, preview_updated, similarity=0.90):
                assert False, "Preview did not update as expected! Similarity should be in 0.8~0.9. The similarity is too high"

        with step('[Action] Click [Close] button to close effect setting and return to effect room'):
            main_page.click(L.tips_area.button.btn_effect_close)

        assert True

    @pytest.mark.effect_n_bg_music_cross_func
    @pytest.mark.effect_settings_room
    @pytest.mark.search_library
    @pytest.mark.timeline
    @pytest.mark.name('[test_effect_n_bg_music_cross_func_26_2] Verify preview update after searching and dragging template')
    @exception_screenshot
    def test_effect_n_bg_music_cross_func_26_2(self):
        """
        0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_1') is run and passed
        1. Select Library Room category ('Color LUT') and capture initial preview (locator=L.base.Area.preview.only_mtk_view)
        2. Search keyword ('White Tones Cold 06') and drag template to timeline playhead position
        3. Compare preview with step 1 and check if updated (similarity should be > 0.96 and < 0.998)
        """
        dependency_test = "test_effect_n_bg_music_cross_func_26_1"
        self.ensure_dependency(dependency_test)


        # [L221] 2.3 Effect Room > Add each kind of template to timeline / preview > LUT
        # with uuid("462afe20-b5a2-491c-9506-8053bd48ab9a") as case:

        with step("[Action] Select Library Room category 'Color LUT' and capture initial preview"):
            main_page.select_LibraryRoom_category('Color LUT')
            preview_before = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        with step("[Action] Search for 'White Tones Cold 06' and drag template to timeline playhead position"):
            media_room_page.search_library("White Tones Cold 06")
            main_page.drag_media_to_timeline_playhead_position("White Tones Cold 06")

        with step("[Verify] Check preview is updated with similarity > 0.96"):
            preview_after = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            # Verify that the updated preview similarity is greater than 0.96
            if not main_page.compare(preview_before, preview_after, similarity=0.96):
                assert False, "Preview similarity is not greater than 0.96"

        with step("[Verify] Check preview is updated with similarity < 0.998"):
            preview_after = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            # Verify that the updated preview similarity is less than 0.998, indicating a noticeable change
            if main_page.compare(preview_before, preview_after, similarity=0.998):
                assert False, "Preview similarity is not less than 0.998"

        assert True

    @pytest.mark.effect_n_bg_music_cross_func
    @pytest.mark.name('[test_effect_n_bg_music_cross_func_26_3] Search background music for "島" and verify specific sound clip selection')
    @exception_screenshot
    def test_effect_n_bg_music_cross_func_26_3(self):
        """
        0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_2') is run and passed
        1. Enter Room (Media) (0)
        2. Enter [Background Music (meta)] Category
        3. Search keyword ('島')
        4. Select specific sound clips in library by name ('The Island (島) (feat. Atsu) ') and check result
        """
        dependency_test = "test_effect_n_bg_music_cross_func_26_2"
        self.ensure_dependency(dependency_test)

        # [L163] 2.1 Media Room > BGM (Meta) > Input  double bytes character (ex: CHT/ JPN/...)
        # with uuid("be74d15c-f03e-4f36-b29c-0bdf9cbecc77") as case:

        with step('[Action] Enter Room (Media) (0)'):
            main_page.enter_room(0)

        with step('[Action] Enter [Background Music (meta)] Category'):
            media_room_page.enter_background_music()

        with step('[Action] Search keyword "島" in library'):
            media_room_page.search_library("島")
            time.sleep(DELAY_TIME * 2)

        with step('[Verify] Check specific sound clip "The Island (島) (feat. Atsu) " is displayed'):
            if not media_room_page.sound_clips_select_media("The Island (島) (feat. Atsu) "):
                assert False, 'Sound clip "The Island (島) (feat. Atsu) " is not displayed in library!'
            
            time.sleep(DELAY_TIME * 4) # wait for download

        assert True

    @pytest.mark.effect_n_bg_music_cross_func
    @pytest.mark.background_music
    @pytest.mark.name('[test_effect_n_bg_music_cross_func_26_4] Click [Meta] icon and verify webpage is opened')
    @exception_screenshot
    def test_effect_n_bg_music_cross_func_26_4(self):
        """
        0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_3') is run and passed
        1. Click [Meta] icon
        2. Check [Meta] webpage is opened after clicked [Meta] icon
        """
        dependency_test = "test_effect_n_bg_music_cross_func_26_3"
        self.ensure_dependency(dependency_test)

        # [L155] 2.1 Media Room > BGM (Meta) > Click Meta logo
        # with uuid("207c53da-0335-4a7a-bbc3-cd62f9dbfda1") as case:

        with step("[Action] Click [Meta] icon"):
            media_room_page.click_meta_icon()

        with step("[Verify] Check [Meta] webpage is opened after clicked [Meta] icon"):
            if not media_room_page.verify_after_click_meta_icon():
                assert False, "Meta webpage is not opened after clicked [Meta] icon!"

        assert True

    @pytest.mark.effect_n_bg_music_cross_func
    @pytest.mark.effect_room
    @pytest.mark.effect_settings
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.save_project
    @pytest.mark.name('[test_effect_n_bg_music_cross_func_26_5] Process [Broken Glass] effect in [Effect Settings] and verify timeline preview')
    @exception_screenshot
    def test_effect_n_bg_music_cross_func_26_5(self):
        """
        0. Ensure the dependency test ('test_effect_n_bg_music_cross_func_26_4') is run and passed
        1. Enter Room (Effect) (3)
        2. Unfold [CLUT] category
        3. Select Library Room category ('Style Effect')
        4. Search conponent ('Broken Glass')
        5. Select media ('Broken Glass') by icon view > right click > click ('Add to Timeline') on right click menu
        6. Click [Effect] button on [Tips Area]
        7. Adjust Degree slider in Broken Glass effect
        8. Click [Close] to close effect setting and return to effect room
        9. Set timecode to ('00_00_02_15') on main page
        10. Screen preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L219.png') and compare with GT (Ground_Truth_Folder + 'L219.png') with similarity 0.97
        11. Save the project as (name='test_effect_n_bg_music_cross_func_26_5', folder_path=Test_Material_Folder + 'BFT_21_Stage1/')
        """
        dependency_test = "test_effect_n_bg_music_cross_func_26_4"
        self.ensure_dependency(dependency_test)
        
        # [L219] 2.3 Effect Room > Add effect item into timeline independently & enter "Modify" page
        # with uuid("f5b68762-124e-4f37-8d9c-dbc82177297b") as case:
        with step("[Action] Enter Room (Effect) (3)"):
            main_page.enter_room(3)
        
        with step("[Action] Unfold [CLUT] category"):
            main_page.unfold_clut_category()
        
        with step("[Action] Select Library Room category 'Style Effect'"):
            main_page.select_LibraryRoom_category("Style Effect")
        
        with step("[Action] Search conponent 'Broken Glass' in library"):
            media_room_page.search_library("Broken Glass")
        
        with step("[Action] Select media 'Broken Glass' by icon view and add to timeline via right click menu"):
            main_page.select_library_icon_view_media("Broken Glass")
            main_page.right_click()
            main_page.select_right_click_menu("Add to Timeline")
        
        with step("[Action] Click [Effect] button on [Tips Area]"):
            tips_area_page.click_TipsArea_btn_effect()
        
        with step("[Action] Adjust Degree slider in Broken Glass effect"):
            effect_settings_page.broken_glass.adjust_degree_slider()
            time.sleep(DELAY_TIME)
        
        with step("[Action] Click [Close] to close effect setting and return to effect room"):
            effect_settings_page.close_window()
        
        with step("[Action] Set timecode to '00_00_02_15' on main page"):
            main_page.set_timeline_timecode("00_00_02_15")
        
        with step("[Verify] Check preview matches GT (L219.png) with similarity 0.97"):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + "L219.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "L219.png", preview, similarity=0.97):
                # Similarity should be greater than 0.97 for matching preview
                assert False, "Preview does not match GT (L219.png)! Similarity should > 0.97"
        
        with step("[Action] Save the project as 'test_effect_n_bg_music_cross_func_26_5'"):
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name="test_effect_n_bg_music_cross_func_26_5", folder_path=Test_Material_Folder + "BFT_21_Stage1/")
        
        assert True


    @pytest.mark.title_n_particle_content_pack_func_func
    @pytest.mark.title_room
    @pytest.mark.name('[test_title_n_particle_content_pack_func_func_27_1] Verify empty categories and compare screenshots in Title Room')
    @exception_screenshot
    def test_title_n_particle_content_pack_func_func_27_1(self):
        """
        1. Start APP
        2. Open packed project ('Packed_Project/test_title_n_particle_content_pack_func_func_27_1.pdk', 'Extracted_Folder/test_title_n_particle_content_pack_func_func_27_1')
        3. Enter Room (Title) (1)
        4. Select Library Room category ('My Favorites') > Screenshot(L.base.Area.library_icon_view)
        5. Check there is no items in ('My Favorites') category by checking if [Details view] button (L.main.btn_library_details_view) shows (Shouldn't show)
        6. Select Library Room category ('Custom') > Screenshot(L.base.Area.library_icon_view)
        7. Check there is no items in ('Custom') category by checking if [Details view] button (L.main.btn_library_details_view) shows (Shouldn't show)
        8. Select Library Room category ('Downloads') > Screenshot(L.base.Area.library_icon_view)
        9. Check there is no items in ('Downloads') category by checking if [Details view] button (L.main.btn_library_details_view) shows (Shouldn't show)
        10. Check if the count of items in ('Downloads') category is 0 by checking if the AXValue of the category is 'Downloads (0)'
        11. Compare the screenshots of ('My Favorites') and ('Custom') categories to check if they are the same with similarity 0.99
        """
        with step("[Action] Start APP"):
            main_page.start_app()
        
        with step("[Action] Open packed project"):
            self.open_packed_project("Packed_Project/test_title_n_particle_content_pack_func_func_27_1.pdk", "Extracted_Folder/test_title_n_particle_content_pack_func_func_27_1")
        
        # [L235] 2.3 Title Room > IAD template sorting by server > Title Room > Check Custom, Downloaded, My Favorites
        # with uuid("471d7aa8-f134-41c2-83f0-b9c3ccbfb986") as case:
        with step("[Action] Enter Room (Title) (1)"):
            main_page.enter_room(1)
        
        with step("[Action] Select Library Room category 'My Favorites' and capture screenshot"):
            main_page.select_LibraryRoom_category("My Favorites")
            favorites_screenshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
        
        with step("[Verify] Check that [Details view] button is not shown in 'My Favorites' category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Details view button should not be displayed in 'My Favorites' category"
        
        with step("[Action] Select Library Room category 'Custom' and capture screenshot"):
            main_page.select_LibraryRoom_category("Custom")
            custom_screenshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
        
        with step("[Verify] Check that [Details view] button is not shown in 'Custom' category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Details view button should not be displayed in 'Custom' category"
        
        with step("[Action] Select Library Room category 'Downloads'"):
            main_page.select_LibraryRoom_category("Downloads")
            
        with step("[Verify] Check that [Details view] button is not shown in 'Downloads' category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Details view button should not be displayed in 'Downloads' category"
        
        with step("[Verify] Check that the count of items in 'Downloads' category is 0"):
            downloads_category = main_page.exist(L.title_room.explore_view_region.Downloads_category)
            if downloads_category.AXValue != "Downloads (0)":
                assert False, f"Downloads category count is not 0! Found: {downloads_category.AXValue}"
        
        with step("[Verify] Compare screenshots of 'My Favorites' and 'Custom' categories with similarity 0.99"):
            if not main_page.compare(favorites_screenshot, custom_screenshot, similarity=0.99):
                assert False, "Screenshots of 'My Favorites' and 'Custom' categories do not match! Similarity should > 0.99"
        
        assert True

    @pytest.mark.title_n_particle_content_pack_func_func
    @pytest.mark.title_room
    @pytest.mark.content_pack
    @pytest.mark.name('[test_title_n_particle_content_pack_func_func_27_2] Verify empty categories in YouTube, Love, and Holidays and compare screenshots of Love and Holidays')
    @exception_screenshot
    def test_title_n_particle_content_pack_func_func_27_2(self):
        """
        0. Ensure the dependency test ('test_title_n_particle_content_pack_func_func_27_1') is run and passed
        1. Select Library Room category ('YouTube')
        2. Check there is no items in ('YouTube') category by verifying [Details view] button is not shown
        3. Select Library Room category ('Love') and capture screenshot (locator=L.media_room.library_frame)
        4. Check there is no items in ('Love') category by verifying [Details view] button is not shown
        5. Select Library Room category ('Holidays') and capture screenshot (locator=L.media_room.library_frame)
        6. Check there is no items in ('Holidays') category by verifying [Details view] button is not shown
        7. Compare the screenshots of ('Love') and ('Holidays') categories to check if they are not the same with similarity 0.95
        """
        dependency_test = "test_title_n_particle_content_pack_func_func_27_1"
        self.ensure_dependency(dependency_test)

        # [L237] 2.3 Title Room > IAD template sorting by server > Title Room > Check other IAD category > remove detail view icon
        # with uuid("6568d499-f332-4575-b602-a29639cdbe56") as case:

        with step("[Action] Select Library Room category 'YouTube'"):
            main_page.select_LibraryRoom_category("YouTube")

        with step("[Verify] Check that [Details view] button is not shown in 'YouTube' category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Details view button should not be displayed in 'YouTube' category"

        with step("[Action] Select Library Room category 'Love' and capture screenshot"):
            main_page.select_LibraryRoom_category("Love")
            love_screenshot = main_page.snapshot(locator=L.media_room.library_frame)

        with step("[Verify] Check that [Details view] button is not shown in 'Love' category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Details view button should not be displayed in 'Love' category"

        with step("[Action] Select Library Room category 'Holidays' and capture screenshot"):
            main_page.select_LibraryRoom_category("Holidays")
            holidays_screenshot = main_page.snapshot(locator=L.media_room.library_frame)

        with step("[Verify] Check that [Details view] button is not shown in 'Holidays' category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Details view button should not be displayed in 'Holidays' category"

        with step("[Verify] Compare screenshots of 'Love' and 'Holidays' categories"):
            if main_page.compare(love_screenshot, holidays_screenshot, similarity=0.95):
                # Similarity should be less than 0.95 since the screenshots should be different
                assert False, "Screenshots of 'Love' and 'Holidays' categories are too similar! Similarity should < 0.95"

        # [L238] 2.3 Title Room > IAD template sorting by server > Title Room > Check sorting rule
        # with uuid("7738acc8-1ff7-4666-a94c-8327d693c97e") as case:

        with step("[Action] Select Library Room category 'Stylize' and Screenshot"):
            main_page.select_LibraryRoom_category("Stylize")
            img_Stylize = main_page.snapshot(L.media_room.library_frame)

        with step("[Verify] Check that [Details view] button is not shown in 'Stylize' category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Details view button should not be displayed in 'Stylize' category"

        with step("[Verify] Compare screenshots of 'Holidays' and 'Stylize' categories"):
            if main_page.compare(holidays_screenshot, img_Stylize, similarity=0.95):
                # Similarity should be less than 0.95 since the screenshots should be different
                assert False, "Screenshots of 'Holidays' and 'Stylize' categories are too similar! Similarity should < 0.95"

        assert True


    @pytest.mark.title_n_particle_content_pack_func_func
    @pytest.mark.title_room
    @pytest.mark.search_library
    @pytest.mark.name('[test_title_n_particle_content_pack_func_func_27_3] Close (Library Menu) and verify no results in Library Room')
    @exception_screenshot
    def test_title_n_particle_content_pack_func_func_27_3(self):
        """
        0. Ensure the dependency test ('test_title_n_particle_content_pack_func_func_27_2') is run and passed
        1. Close (Library Menu) by click (L.media_room.library_menu.btn_menu) button
        2. Search for ('.') in Library Room
        3. Check if there is no results for ('.') by verifying (L.media_room.txt_no_results_for_dot) is shown
        """
        dependency_test = "test_title_n_particle_content_pack_func_func_27_2"
        self.ensure_dependency(dependency_test)

        # [L240] 2.3 Title Room > IAD template sorting by server > Title Room > Input '.' character
        # with uuid("86314fc3-9dcc-4696-8921-27370fae4ca0") as case:

        with step("[Action] Close (Library Menu) by click ([main_page.click]) button"):
            main_page.click(L.media_room.library_menu.btn_menu)

        with step("[Action] Search for ('.') in Library Room"):
            media_room_page.search_library('.')

        with step("[Verify] Check if no results for ('.') is shown"):
            if not main_page.is_exist(L.media_room.txt_no_results_for_dot):
                assert False, "[No results text] is not displayed for ('.')!"

        assert True

    @pytest.mark.title_n_particle_content_pack_func_func
    @pytest.mark.particle_room
    @pytest.mark.search_library
    @pytest.mark.name('[test_title_n_particle_content_pack_func_func_27_4] Verify empty categories and compare screenshots in Particle Room')
    @exception_screenshot
    def test_title_n_particle_content_pack_func_func_27_4(self):
        """
        0. Ensure the dependency test ('test_title_n_particle_content_pack_func_func_27_3') is run and passed
        1. Enter Room (Particle) (5)
        2. Select Library Room category ('My Favorites') > Screenshot(L.base.Area.library_icon_view)
        3. Check there is no items in ('My Favorites') category by checking if [Details view] button (L.main.btn_library_details_view) shows (Shouldn't show)
        4. Select Library Room category ('Custom') > Screenshot(L.base.Area.library_icon_view)
        5. Check there is no items in ('Custom') category by checking if [Details view] button (L.main.btn_library_details_view) shows (Shouldn't show)
        6. Select Library Room category ('Downloads') > Screenshot(L.base.Area.library_icon_view)
        7. Check there is no items in ('Downloads') category by checking if [Details view] button (L.main.btn_library_details_view) shows (Shouldn't show)
        8. Check if the count of items in ('Downloads') category is 0 by checking if the AXValue of the category is 'Downloads (0)'
        9. Compare the screenshots of ('My Favorites') and ('Custom') categories to check if they are the same with similarity 0.99
        """
        dependency_test = "test_title_n_particle_content_pack_func_func_27_3"
        self.ensure_dependency(dependency_test)

        # [L259] 2.3 Particle Room > IAD template sorting by server > Particle Room > Check Custom, Downloaded, My Favorites
        # with uuid("63d3de48-4d42-451c-b041-685c7ddcf0df") as case:

        with step("[Action] Enter Room (Particle) (5) using [main_page.enter_room]"):
            main_page.enter_room(5)

        with step("[Action] Select Library Room category ('My Favorites') and take screenshot using [main_page.select_LibraryRoom_category] and [main_page.snapshot]"):
            if not main_page.select_LibraryRoom_category("My Favorites"):
                assert False, "Failed to select Library Room category ('My Favorites')"
            screenshot_my_favorites = main_page.snapshot(locator=L.base.Area.library_icon_view)

        with step("[Verify] Check no items in ('My Favorites') category by verifying (L.main.btn_library_details_view) does not show"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Details view button should not be displayed for ('My Favorites') category"

        with step("[Action] Select Library Room category ('Custom') and take screenshot using [main_page.select_LibraryRoom_category] and [main_page.snapshot]"):
            if not main_page.select_LibraryRoom_category("Custom"):
                assert False, "Failed to select Library Room category ('Custom')"
            screenshot_custom = main_page.snapshot(locator=L.base.Area.library_icon_view)

        with step("[Verify] Check no items in ('Custom') category by verifying (L.main.btn_library_details_view) does not show"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Details view button should not be displayed for ('Custom') category"

        with step("[Action] Select Library Room category ('Downloads')"):
            if not main_page.select_LibraryRoom_category("Downloads"):
                assert False, "Failed to select Library Room category ('Downloads')"


        with step("[Verify] Check no items in ('Downloads') category by verifying (L.main.btn_library_details_view) does not show"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "Details view button should not be displayed for ('Downloads') category"

        with step("[Verify] Check count of items in ('Downloads') category is 0 by verifying AXValue equals ('Downloads (0)')"):
            category_name = main_page.exist(L.title_room.explore_view_region.Downloads_category)
            if category_name.AXValue != "Downloads (0)":
                assert False, f"The AXValue of ('Downloads') category is not 'Downloads (0)'! Got: {category_name.AXValue}"

        with step("[Verify] Compare screenshots of ('My Favorites') and ('Custom') categories with similarity (0.99) using [main_page.compare]"):
            # Similarity should be greater than 0.99 since the screenshots are expected to be the same
            if not main_page.compare(screenshot_my_favorites, screenshot_custom, similarity=0.99):
                assert False, "Screenshots of ('My Favorites') and ('Custom') categories are not similar enough! Similarity should > 0.99"

        assert True

    @pytest.mark.title_n_particle_content_pack_func_func
    @pytest.mark.particle_room
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.name("[test_title_n_particle_content_pack_func_func_27_5] Verify Library Icon view update after download ('Lanterns') ")
    @exception_screenshot
    def test_title_n_particle_content_pack_func_func_27_5(self):
        '''
        0. Ensure the dependency test ('test_title_n_particle_content_pack_func_func_27_4') is run and passed
        1. Select Library Room category ('Downloads') > Screenshot (L.base.Area.library_icon_view)
        2. Select Library Room category ('All Content')
        3. Search for ('Lanterns') in Library Room
        4. Select media ('Lanterns') by icon view
        5. Click [Cancel] button in search library
        6. Select Library Room category ('Downloads')
        7. Check Library Icon view is updated after download (Similarity should < 0.99)
        '''

        dependency_test = "test_title_n_particle_content_pack_func_func_27_4"
        self.ensure_dependency(dependency_test)
        
        # [L260] 2.3 Particle Room > IAD template sorting by server > Particle Room > Check Sorting rule
        # with uuid("af863ad4-4864-404b-9596-ceb97fb11085") as case:

        with step("[Action] Select Library Room category (Downloads) > Screenshot (L.base.Area.library_icon_view)"):
            main_page.select_LibraryRoom_category("Downloads")
            screenshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
        
        with step("[Action] Select Library Room category (All Content)"):
            main_page.select_LibraryRoom_category("All Content")
        
        with step("[Action] Search for (Lanterns) in Library Room"):
            media_room_page.search_library("Lanterns")
        
        with step("[Action] Select media (Lanterns) by icon view"):
            main_page.select_library_icon_view_media("Lanterns")
        
        with step("[Action] Click [Cancel] button in search library"):
            main_page.search_library_click_cancel()
        
        with step("[Action] Select Library Room category (Downloads)"):
            main_page.select_LibraryRoom_category("Downloads")
        
        with step("[Verify] Check Library Icon view is updated after download with similarity 0.99"):
            updated_snapshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
            check_view = main_page.compare(screenshot, updated_snapshot, similarity=0.99)
            if check_view:
                # Similarity should < 0.99
                assert False, "Library Icon view did not update correctly after download! Similarity should < 0.99"
        
        assert True

    @pytest.mark.title_n_particle_content_pack_func_func
    @pytest.mark.particle_room
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.name("[test_title_n_particle_content_pack_func_func_27_6] Verify Library Icon view update after download ('Balloons')")
    @exception_screenshot
    def test_title_n_particle_content_pack_func_func_27_6(self):
        '''
        0. Ensure the dependency test ('test_title_n_particle_content_pack_func_func_27_5') is run and passed
        1. Screenshot (L.base.Area.library_icon_view) in ('Downloads') Category
        2. Select Library Room category ('All Content')
        3. Search for ('Balloons') in Library Room
        4. Select media ('Balloons') by icon view
        5. Click [Cancel] button in search library
        6. Select Library Room category ('Downloads')
        7. Check Library Icon view is updated after download (Similarity should < 0.99)
        '''
        self.ensure_dependency("test_title_n_particle_content_pack_func_func_27_5")
        
        with step("[Action] Screenshot ([main_page.snapshot]) of (L.base.Area.library_icon_view) in (Downloads) Category"):
            main_page.select_LibraryRoom_category("Downloads")
            screenshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
        
        with step("[Action] Select Library Room category (All Content)"):
            main_page.select_LibraryRoom_category("All Content")
        
        with step("[Action] Search for (Balloons) in Library Room"):
            media_room_page.search_library("Balloons")
        
        with step("[Action] Select media (Balloons) by icon view using ([main_page.select_library_icon_view_media])"):
            main_page.select_library_icon_view_media("Balloons")
        
        with step("[Action] Click [Cancel] button in search library using ([media_room_page.search_library_click_cancel])"):
            media_room_page.search_library_click_cancel()
        
        with step("[Action] Select Library Room category (Downloads)"):
            main_page.select_LibraryRoom_category("Downloads")
        
        with step("[Verify] Check Library Icon view is updated after download (Similarity should < 0.99) using ([main_page.compare])"):
            updated_snapshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
            if main_page.compare(screenshot, updated_snapshot, similarity=0.99):
                # Similarity should < 0.99
                assert False, "Library Icon view did not update correctly after download! Similarity should < 0.99"
        
        assert True



    @pytest.mark.title_n_particle_content_pack_func_func
    @pytest.mark.particle_room
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.name("[test_title_n_particle_content_pack_func_func_27_7] Verify Library Icon view update after download ('NEWS')")
    @exception_screenshot
    def test_title_n_particle_content_pack_func_func_27_7(self):
        '''
        0. Ensure the dependency test ('test_title_n_particle_content_pack_func_func_27_6') is run and passed
        1. Screenshot (L.base.Area.library_icon_view) in ('Downloads') Category
        2. Select Library Room category ('All Content')
        3. Search for ('NEWS') in Library Room
        4. Select media ('NEWS') by icon view
        5. Click [Cancel] button in search library
        6. Select Library Room category ('Downloads')
        7. Check Library Icon view is updated after download (Similarity should < 0.99)
        '''
        self.ensure_dependency("test_title_n_particle_content_pack_func_func_27_6")
        
        with step("[Action] Screenshot ([main_page.snapshot]) of (L.base.Area.library_icon_view) in (Downloads) Category"):
            main_page.select_LibraryRoom_category("Downloads")
            screenshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
        
        with step("[Action] Select Library Room category (All Content)"):
            main_page.select_LibraryRoom_category("All Content")
        
        with step("[Action] Search for (NEWS) in Library Room"):
            media_room_page.search_library("NEWS")
        
        with step("[Action] Select media (NEWS) by icon view using ([main_page.select_library_icon_view_media])"):
            main_page.select_library_icon_view_media("NEWS")
        
        with step("[Action] Click [Cancel] button in search library using ([media_room_page.search_library_click_cancel])"):
            media_room_page.search_library_click_cancel()
        
        with step("[Action] Select Library Room category (Downloads)"):
            main_page.select_LibraryRoom_category("Downloads")
        
        with step("[Verify] Check Library Icon view is updated after download (Similarity should < 0.99) using ([main_page.compare])"):
            updated_snapshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
            if main_page.compare(screenshot, updated_snapshot, similarity=0.99):
                # Similarity should < 0.99
                assert False, "Library Icon view did not update correctly after download! Similarity should < 0.99"
        
        assert True

    @pytest.mark.title_n_particle_content_pack_func_func
    @pytest.mark.particle_room
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.name("[test_title_n_particle_content_pack_func_func_27_8] Verify Library Icon view update after sorting by date")
    @exception_screenshot
    def test_title_n_particle_content_pack_func_func_27_8(self):
        '''
        0. Ensure the dependency test ('test_title_n_particle_content_pack_func_func_27_7') is run and passed
        1. Screenshot (L.base.Area.library_icon_view)
        2. Sort by [Created Date] in [Library Menu]
        3. Check preivew is updated after sorting with similarity 0.931
        '''
        self.ensure_dependency("test_title_n_particle_content_pack_func_func_27_7")
        
        with step("[Action] Screenshot ([main_page.snapshot]) of (L.base.Area.library_icon_view)"):
            screenshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
        
        with step("[Action] Sort by [Created Date] in [Library Menu]"):
            media_room_page.library_menu_sort_by_created_date()
        
        with step("[Verify] Check preview is updated after sorting with similarity 0.931"):
            updated_snapshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
            if main_page.compare(screenshot, updated_snapshot, similarity=0.931):
                # Similarity should < 0.931
                assert False, "Preview did not update correctly after sorting! Similarity should < 0.931"
        
        assert True

    @pytest.mark.title_n_particle_content_pack_func_func
    @pytest.mark.particle_room
    @pytest.mark.content_pack
    @pytest.mark.timecode
    @pytest.mark.timeline
    @pytest.mark.name('[test_title_n_particle_content_pack_func_func_27_9] Verify timeline insertion and preview for Particle')
    @exception_screenshot
    def test_title_n_particle_content_pack_func_func_27_9(self):
        '''
        0. Ensure the dependency test ('test_title_n_particle_content_pack_func_func_27_8') is run and passed
        1. Select timeline track (3) > Set timecode to ('00_00_00_00') at main page
        2. Drag media ('NEWS') to timeline playhead at track (3)
        3. Set timecode to ('00_00_04_17') at main page
        4. Screenshot (L.base.Area.preview.only_mtk_view) and compare with GT (Ground_Truth_Folder + 'L223_particle.png') with similarity 0.97
        '''

        dependency_test = 'test_title_n_particle_content_pack_func_func_27_8'
        self.ensure_dependency(dependency_test)
        
        # [L223] 2.3 Add each kind template to timeline > particle
        # with uuid("859c485a-8468-45fd-85c8-6949176c17fb") as case:

        with step("[Action] Select timeline track (3) > Set timecode to ('00_00_00_00') at main page"):
            main_page.timeline_select_track(3)
            main_page.set_timeline_timecode('00_00_00_00')
        
        with step("[Action] Drag media ('NEWS') to timeline playhead at track (3)"):
            main_page.drag_media_to_timeline_playhead_position('NEWS', track_no=3)
        
        with step("[Action] Set timecode to ('00_00_04_17') at main page"):
            main_page.set_timeline_timecode('00_00_04_17')
        
        with step("[Verify] Screenshot (L.base.Area.preview.only_mtk_view) and compare with GT (Ground_Truth_Folder + 'L223_particle.png') with similarity 0.97"):
            preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Ground_Truth_Folder + 'L223_particle.png')
            if not main_page.compare(Ground_Truth_Folder + 'L223_particle.png', preview, similarity=0.97):
                # Similarity should be greater than 0.97 for matching preview
                assert False, "Preview does not match GT (L223_particle.png)! Similarity should > 0.97"
        
        assert True

    @pytest.mark.particle_n_bg_music_n_launcher_content_pack_func
    @pytest.mark.particle_room
    @pytest.mark.content_pack
    @pytest.mark.name('[test_particle_n_bg_music_n_launcher_content_pack_func_28_1] Verify Library Room category switching in [Particle Room]')
    @exception_screenshot
    def test_particle_n_bg_music_n_launcher_content_pack_func_28_1(self):
        '''
        1. Start App
        2. Enter Room (Particle) (5)
        3. Select Library Room category ('Light & Bling')
        4. Check if [Details view] button (L.main.btn_library_details_view) is not shown (Should not exist)
        5. Select Library Room category ('Nature') > Screenshot(L.media_room.library_frame)
        6. Check if [Details view] button (L.main.btn_library_details_view) is not shown (Should not exist)
        7. Select Library Room category ('Frame') > Screenshot(L.media_room.library_frame)
        8. Check if [Details view] button (L.main.btn_library_details_view) is not shown (Should not exist)
        9. Check if ('Nature') and ('Frame') screenshots are different with similarity 0.95
        '''
        with step("[Action] Start App"):
            main_page.start_app()
        
        with step("[Action] Enter Room (Particle) (5)"):
            main_page.enter_room(5)
        
        # [L261] 2.3 Particle Room > IAD template sorting server > Check other IAD category > remove Detail view icon
        # with uuid("dc641b01-40e5-4972-9e71-d047a378c167") as case:

        with step("[Action] Select Library Room category ('Light & Bling')"):
            main_page.select_LibraryRoom_category("Light & Bling")
        
        with step("[Verify] Check if [Details view] button (L.main.btn_library_details_view) is not shown (Should not exist)"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "[Details view] button is shown, but should not exist in case of ('Light & Bling')"
        
        with step("[Action] Select Library Room category ('Nature') > Screenshot(L.media_room.library_frame)"):
            main_page.select_LibraryRoom_category("Nature")
            screenshot_nature = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Verify] Check if [Details view] button (L.main.btn_library_details_view) is not shown (Should not exist)"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "[Details view] button is shown, but should not exist in case of ('Nature')"
        
        with step("[Action] Select Library Room category ('Frame') > Screenshot(L.media_room.library_frame)"):
            main_page.select_LibraryRoom_category("Frame")
            screenshot_frame = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Verify] Check if [Details view] button (L.main.btn_library_details_view) is not shown (Should not exist)"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "[Details view] button is shown, but should not exist in case of ('Frame')"
        
        with step("[Verify] Check if ('Nature') and ('Frame') screenshots are different with similarity 0.95"):
            if main_page.compare(screenshot_nature, screenshot_frame, similarity=0.95):
                # Similarity should be less than 0.95 since the screenshots should be different
                assert False, "Screenshots of ('Nature') and ('Frame') are too similar! Similarity should < 0.95"
        
        assert True

    @pytest.mark.particle_n_bg_music_n_launcher_content_pack_func
    @pytest.mark.particle_room
    @pytest.mark.content_pack
    @pytest.mark.name('[test_particle_n_bg_music_n_launcher_content_pack_func_28_2] Verify library preview update after switching category')
    @exception_screenshot
    def test_particle_n_bg_music_n_launcher_content_pack_func_28_2(self):
        '''
        0. Ensure the dependency test ('test_particle_n_bg_music_n_launcher_content_pack_func_28_1') is run and passed
        1. Screenshot (L.media_room.library_frame)
        1. Select Library Room category ('Recreation') > Screenshot(L.media_room.library_frame)
        2. Check if preview is updated after switching category (similarity < 0.95)
        '''
        self.ensure_dependency('test_particle_n_bg_music_n_launcher_content_pack_func_28_1')
        
        # [L262] 2.3 Particle Room > IAD template sorting server > Check other IAD category > remove Detail view icon
        # with uuid("2d27aa22-1ce3-48b1-a3b2-934854863832") as case:

        with step("[Action] Screenshot (L.media_room.library_frame)"):
            initial_preview = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Action] Select Library Room category ('Recreation') > Screenshot(L.media_room.library_frame)"):
            main_page.select_LibraryRoom_category("Recreation")
            new_preview = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Verify] Check if preview is updated after switching category (similarity < 0.95)"):
            if main_page.compare(initial_preview, new_preview, similarity=0.95):
                # Similarity should be less than 0.95 to confirm preview update
                assert False, "Preview did not update after switching category! Similarity should < 0.95"
        
        assert True

    @pytest.mark.particle_n_bg_music_n_launcher_content_pack_func
    @pytest.mark.particle_room
    @pytest.mark.search_library
    @pytest.mark.name('[test_particle_n_bg_music_n_launcher_content_pack_func_28_3] Verify no results for special characters search in [Particle Room]')
    @exception_screenshot
    def test_particle_n_bg_music_n_launcher_content_pack_func_28_3(self):
        '''
        0. Ensure the dependency test ('test_particle_n_bg_music_n_launcher_content_pack_func_28_2') is run and passed
        1. Search library for ('%^$@')
        2. Check if there are no results for ('%^$@') by verifying (L.media_room.txt_no_search_result) AXvalue == 'No results for "%^$@"'
        '''
        self.ensure_dependency('test_particle_n_bg_music_n_launcher_content_pack_func_28_2')
        
        # [L264] 2.3 Particle Room > IAD template sorting server > Input specific character
        # with uuid("ce853da5-31bd-45ee-af52-a5a6941f7d21") as case:

        with step("[Action] Search library for ('%^$@')"):
            media_room_page.search_library('%^$@')
        
        with step("[Verify] Check if there are no results for ('%^$@') by verifying (L.media_room.txt_no_search_result) AXvalue == 'No results for \"%^$@\"'"):
            result_text = main_page.exist(L.media_room.txt_no_search_result)
            if result_text.AXValue != 'No results for "%^$@"':
                # AXvalue should be equal to 'No results for "%^$@"'
                assert False, "(L.media_room.txt_no_search_result) AXvalue does not equal 'No results for \"%^$@\"'"
        
        assert True


    @pytest.mark.particle_n_bg_music_n_launcher_content_pack_func
    @pytest.mark.pip_room
    @pytest.mark.search_library
    @pytest.mark.name('[test_particle_n_bg_music_n_launcher_content_pack_func_28_4] Verify no results for special search in [Pip Room]')
    @exception_screenshot
    def test_particle_n_bg_music_n_launcher_content_pack_func_28_4(self):
        '''
        0. Ensure the dependency test ('test_particle_n_bg_music_n_launcher_content_pack_func_28_3') is run and passed
        1. Enter Room (Pip) (4)
        2. Select Library Room category ('Japanese Text')
        3. Search for ('*(!#;')
        4. Check if there are no results for ('*(!#;') by verifying main_page.exist(L.media_room.txt_no_search_result).AXvalue == 'No results for "*(!#;"'
        '''
        self.ensure_dependency('test_particle_n_bg_music_n_launcher_content_pack_func_28_3')
        
        # [L258] 2.3 Pip Room > IAD template sorting server > Input specific character
        # with uuid("742df028-c7ef-4515-83df-54d53757974f") as case:

        with step("[Action] Enter Room (Pip) (4)"):
            main_page.enter_room(4)
        
        with step("[Action] Select Library Room category ('Japanese Text')"):
            main_page.select_LibraryRoom_category("Japanese Text")
        
        with step("[Action] Search for ('*(!#;')"):
            media_room_page.search_library("*(!#;")
        
        with step("[Verify] Check if there are no results for ('*(!#;') by verifying main_page.exist(L.media_room.txt_no_search_result).AXvalue == 'No results for \"*(!#;\"'"):
            result = main_page.exist(L.media_room.txt_no_search_result).AXvalue
            if result != 'No results for "*(!#;"':
                # AXvalue should equal 'No results for "*(!#;"'
                assert False, "AXvalue does not match expected 'No results for \"*(!#;\"'"
        
        assert True


    @pytest.mark.particle_n_bg_music_n_launcher_content_pack_func
    @pytest.mark.pip_room
    @pytest.mark.content_pack
    @pytest.mark.name('[test_particle_n_bg_music_n_launcher_content_pack_func_28_5] Verify swiiching category in [Pip Room]')
    @exception_screenshot
    def test_particle_n_bg_music_n_launcher_content_pack_func_28_5(self):
        '''
        0. Ensure the dependency test ('test_particle_n_bg_music_n_launcher_content_pack_func_28_4') is run and passed
        1. Check if [Details view] button (L.main.btn_library_details_view) is not shown (Should not exist) for case ('Japanese Text')
        2. Select Library Room category ('Social Media')
        3. Check if [Category Title] is correct by checking main_page.exist(L.base.category).AXTitle == 'Social Media'
        4. Check if [Details view] button (L.main.btn_library_details_view) is not shown (Should not exist) for case ('Social Media')
        '''
        self.ensure_dependency('test_particle_n_bg_music_n_launcher_content_pack_func_28_4')
        
        # [L255] 2.3 Pip Room > IAD template sorting server > Check other IAD category > remove Detail view icon
        # with uuid("420f5103-7778-427c-beba-c33aef49be95") as case:

        with step("[Verify] Check if [Details view] button (L.main.btn_library_details_view) is not shown (Should not exist) for case ('Japanese Text')"):
            if main_page.exist(L.main.btn_library_details_view):
                assert False, "[Details view] button is shown for case ('Japanese Text'), but should not exist"
        
        with step("[Action] Select Library Room category ('Social Media')"):
            main_page.select_LibraryRoom_category("Social Media")
        
        with step("[Verify] Check if [Category Title] is correct by checking main_page.exist(L.base.category).AXTitle == 'Social Media'"):
            if main_page.exist(L.base.category).AXTitle != "Social Media":
                assert False, "[Category Title] is not 'Social Media'"
        
        with step("[Verify] Check if [Details view] button (L.main.btn_library_details_view) is not shown (Should not exist) for case ('Social Media')"):
            if main_page.exist(L.main.btn_library_details_view):
                assert False, "[Details view] button is shown for case ('Social Media'), but should not exist"
        
        assert True

    @pytest.mark.particle_n_bg_music_n_launcher_content_pack_func
    @pytest.mark.pip_room
    @pytest.mark.content_pack
    @pytest.mark.name('[test_particle_n_bg_music_n_launcher_content_pack_func_28_6] Verify Library content update in Pip Room after switching category to Mood')
    @exception_screenshot
    def test_particle_n_bg_music_n_launcher_content_pack_func_28_6(self):
        '''
        0. Ensure the dependency test ('test_particle_n_bg_music_n_launcher_content_pack_func_28_5') is run and passed
        1. Screenshot Library View in Pip Room (L.media_room.library_frame)
        2. Select Library Room category ('Mood') > Screenshot(L.media_room.library_frame)
        3. Check if Library content is updated after switching category (similarity < 0.8)
        '''
        self.ensure_dependency('test_particle_n_bg_music_n_launcher_content_pack_func_28_5')
        
        # [L256] 2.3 Pip Room > IAD template sorting server > Check other IAD category > Check sorting rule
        # with uuid("7487d48d-ed67-435c-b1a2-c04ce5655e5c") as case:
        with step("[Action] Screenshot Library View in Pip Room (L.media_room.library_frame)"):
            initial_view = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Action] Select Library Room category ('Mood') > Screenshot(L.media_room.library_frame)"):
            main_page.select_LibraryRoom_category("Mood")
            new_view = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Verify] Check if Library content is updated after switching category (similarity < 0.8)"):
            if main_page.compare(initial_view, new_view, similarity=0.8):
                # Similarity should be less than 0.8 to confirm content update
                assert False, "Library content did not update after switching category! Similarity should < 0.8"
        
        assert True

    @pytest.mark.particle_n_bg_music_n_launcher_content_pack_func
    @pytest.mark.background_music
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @pytest.mark.name('[test_particle_n_bg_music_n_launcher_content_pack_func_28_7] Verify preview matches GT for search in Background Music (CL) Category')
    @exception_screenshot
    def test_particle_n_bg_music_n_launcher_content_pack_func_28_7(self):
        '''
        0. Ensure the dependency test ('test_particle_n_bg_music_n_launcher_content_pack_func_28_5') is run and passed
        1. Enter Room (Media)(0)
        2. Enter [Background Music (CL)] Category
        3. Select ('Comedy') Category
        4. Search library for ('小奏鳴曲')
        5. Check if preview (L.media_room.library_listview.table_view, file_name=Auto_Ground_Truth_Folder + 'L151_search_result.png') matches GT (Ground_Truth_Folder + 'L151_search_result.png') with similarity 0.96
        '''
        self.ensure_dependency('test_particle_n_bg_music_n_launcher_content_pack_func_28_5')
        
        # [L151] 2.1 Media Room > BGM (CL) > input double bytes characters
        # with uuid("b91ad9ce-d6ce-4eec-b215-a5f3e330a3a4") as case:

        with step("[Action] Enter Room (Media)(0)"):
            main_page.enter_room(0)
        
        with step("[Action] Enter [Background Music (CL)] Category"):
            media_room_page.enter_background_music_CL()
        
        with step("[Action] Select ('Comedy') Category"):
            media_room_page.select_specific_category("Comedy")
        
        with step("[Action] Search library for ('小奏鳴曲')"):
            media_room_page.search_library("小奏鳴曲")
        
        with step("[Verify] Check if preview (L.media_room.library_listview.table_view, file_name=Auto_Ground_Truth_Folder + 'L151_search_result.png') matches GT (Ground_Truth_Folder + 'L151_search_result.png') with similarity 0.96"):
            preview = main_page.snapshot(
                locator=L.media_room.library_listview.table_view,
                file_name=Auto_Ground_Truth_Folder + "L151_search_result.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "L151_search_result.png", preview, similarity=0.96):
                # Similarity should be greater than 0.96 for a matching preview
                assert False, "Preview does not match GT (L151_search_result.png)! Similarity should > 0.96"
        
        assert True

    @pytest.mark.particle_n_bg_music_n_launcher_content_pack_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_particle_n_bg_music_n_launcher_content_pack_func_28_8] Hover on launcher btn [AI Body Effect], click intro video area, check import dialog, and press [ESC] to close')
    @exception_screenshot
    def test_particle_n_bg_music_n_launcher_content_pack_func_28_8(self):
        '''
        0. Ensure the dependency test ('test_particle_n_bg_music_n_launcher_content_pack_func_28_7') is run and passed
        1. Click [Close] to back to launcher
        2. Hover on launcher btn (AI Body Effect)(L.base.launcher_window.btn_ai_body_effect)
        3. Click intro video area
        4. Check that import dialog is shown with title ('AI Body Effects')
        5. Press [ESC] to close import dialog
        '''
        self.ensure_dependency('test_particle_n_bg_music_n_launcher_content_pack_func_28_7')
        
        # [L16] 1.3 New Launcher > Showcase > AI Body Effects > Single click on banner area
        # with uuid("00fc212c-a0ed-4858-87f6-22d70402e128") as case:

        with step("[Action] Click [Close] to back to launcher"):
            main_page.click_close_then_back_to_launcher()
        
        with step("[Action] Hover on launcher btn (AI Body Effect)(L.base.launcher_window.btn_ai_body_effect)"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_ai_body_effect)
        
        with step("[Action] Click intro video area"):
            main_page.click(L.base.launcher_window.show_case_video_area)
        
        with step("[Verify] Check that import dialog is shown with title ('AI Body Effects')"):
            dialog = main_page.exist(L.base.launcher_window.import_dialog)
            if dialog.AXTitle != 'AI Body Effects':
                assert False, f"Import dialog title does not match expected value! Expected 'AI Body Effects', got '{dialog.AXTitle}'"
        
        with step("[Action] Press [ESC] to close import dialog"):
            main_page.press_esc_key()
        
        assert True



    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.content_pack
    @pytest.mark.background_music
    @pytest.mark.search_library
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_1] Search (\\) in library and verify no search results')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_1(self):
        '''
        1. Clear Cache > Clear [AI Module] files > Start APP
        2. Enter [Background Music (CL)] Category
        3. Select Category ('Acoustic')
        4. Search library for ('\')
        5. Check if there are no search results by verifying (L.media_room.library_listview.table_view) matches GT (Ground_Truth_Folder + 'L151_search_result.png') with similarity 0.96
        '''
        with step("[Action] Clear Cache > Clear [AI Module] files > Start APP"):
            main_page.clear_cache()
            main_page.clear_AI_module()
            main_page.start_app()
        
        with step("[Action] Enter [Background Music (CL)] Category"):
            media_room_page.enter_background_music_CL()
        
        # [L153] 2.1 Media Room > BGM (CL BGM) > Input '\'
        # with uuid("63a62735-1558-423a-9cd5-489d36dc21de") as case:

        with step("[Action] Select Category ('Acoustic')"):
            media_room_page.select_specific_category("Acoustic")
        
        with step("[Action] Search library for ('\\')"):
            media_room_page.search_library("\\")
        
        with step("[Verify] Check if there are no search results by verifying (L.media_room.library_listview.table_view) matches GT (Ground_Truth_Folder + 'L151_search_result.png') with similarity 0.96"):
            preview = main_page.snapshot(
                locator=L.media_room.library_listview.table_view,
                file_name=Ground_Truth_Folder + "L151_search_result.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "L151_search_result.png", preview, similarity=0.96):
                # Similarity should be greater than 0.96 for a matching preview
                assert False, "Preview does not match GT (L151_search_result.png)! Similarity should > 0.96"
        
        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_2] Click [AI Background Remover] button on launcher and verify title')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_2(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_1') is run and passed
        1. Click [Close] button to back to launcher
        2. Click [AI Background Remover] button
        3. Verify title is ('AI Background Remover')
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_1')
        
        # [L58] 1.3 New Launcher > Tool area > AI Background Remover > Single click Module on button
        # with uuid("d5aefb64-ad64-4fc8-b514-4aa23314e4b7") as case:

        with step("[Action] Click [Close] button to back to launcher"):
            main_page.click_close_then_back_to_launcher()
        
        
        with step("[Action] Click [AI Background Remover] button"):
            if main_page.is_not_exist(L.base.launcher_window.btn_ai_bg_remover, timeout=6):
                assert False, '[AI Background Remover] button is not existed on launcher'

            main_page.click(L.base.launcher_window.btn_ai_bg_remover)
        
        with step("[Verify] Check that show case title is ('AI Background Remover')"):
            target = main_page.exist(L.base.launcher_window.show_case_title)
            if target.AXValue != "AI Background Remover":
                assert False, f"Show case title does not match expected value! Expected 'AI Background Remover', got '{target.AXValue}'"
        
        assert True


    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.ai_module
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_3] Apply Sample Clip on Import dialog on Launcher and download [AI Module]')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_3(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_2') is run and passed
        1. Apply Sample Clip on Import dialog on Launcher and check result
        2. Download [AI Module] and check result
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_2')
        
        # [L59] 1.3 New Launcher > Tool area > AI Background Remover > Select sample video in import dialog
        # with uuid("50c47834-4511-4d17-a08c-34b09031ce04") as case:

        with step("[Action] Apply Sample Clip on Import dialog on Launcher and check result"):
            select_sample = main_page.apply_sample_clip_when_open_AI_import_dialog()
            if not select_sample:
                assert False, "Failed to apply sample clip on Import dialog"
        
        with step("[Action] Download [AI Module] and check result"):
            check_download_AI_module = self.download_AI_module_complete()
            if not check_download_AI_module:
                assert False, "Failed to download [AI Module]"
        
        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.bubble
    @pytest.mark.launcher
    @pytest.mark.pip_designer
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_4] Verify leaving Pip Designer shows [Auto Cutout] bubble and handle no-save dialog')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_4(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_3') is run and passed
        1. Click [OK] to leave [Pip Designer]
        2. Check [Auto Cutout] bubble (L.tips_area.button.tools.bb_auto_cutout) is shown after leave [Pip Designer]
        3. Click [Close] button to back to launcher
        4. Handle [Do you want to save changes] dialog with option [No]
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_3')
        
        # [L61] 1.3 New Launcher > Tool area > AI Background Remover > Bubble after close pip designer
        # with uuid("4fba4cf9-df4b-4c64-8cef-b02d9b874b24") as case:

        with step("[Action] Click [OK] to leave [Pip Designer]"):
            pip_designer_page.click_ok()
        
        with step("[Verify] Check [Auto Cutout] bubble (L.tips_area.button.tools.bb_auto_cutout) is shown after leave [Pip Designer]"):
            if not main_page.is_exist(L.tips_area.button.tools.bb_auto_cutout):
                assert False, "[Auto Cutout] bubble not found after leaving Pip Designer!"
        
        with step("[Action] Click [Close] button to back to launcher"):
            main_page.click_close_then_back_to_launcher()
        
        with step("[Action] Handle [Do you want to save changes] dialog with option [No]"):
            main_page.handle_no_save_project_dialog(option='no')
        
        assert True

    @exception_screenshot
    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_5] Verify [Video Denoise] button title')
    def test_bg_music_n_launcher_ai_module_func_29_5(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_4') is run and passed
        1. Click [Video Denoise] button (L.base.launcher_window.btn_video_denoise)
        2. Verify title is ('Video Denoise')
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_4')

        # [L47] 1.3 New Launcher > Tool area > Video Denoise > Single click Module on button
        # with uuid("0269a420-3964-44e1-b325-bf2462840517") as case:

        with step("[Action] Click [Video Denoise] button (L.base.launcher_window.btn_video_denoise)"):
            # verify step: Find the button (Video Denoise) in Tool area
            if main_page.is_not_exist(L.base.launcher_window.btn_video_denoise, timeout=6):
                assert False, 'Unable to find [Video Denoise] button'
            else:
                main_page.click(L.base.launcher_window.btn_video_denoise)

        with step("[Verify] Verify title is ('Video Denoise')"):
            target = main_page.exist(L.base.launcher_window.show_case_title)
            if target.AXValue != 'Video Denoise':
                assert False, f"Title does not match! Expected ('Video Denoise'), got ({target.AXValue})"

        assert True


    @exception_screenshot
    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.ai_module
    @pytest.mark.launcher
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_6] Verify Sample Clip, AI Module Download, and Preview Match')
    def test_bg_music_n_launcher_ai_module_func_29_6(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_5') is run and passed
        1. Apply Sample Clip on Import dialog on Launcher and check result
        2. Download [AI Module] and check result
        3. Check preview (L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L48_sample_video.png') matches GT (Ground_Truth_Folder + 'L48_sample_video.png') with similarity 0.95
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_5')

        # [L48] 1.3 New Launcher > Tool area > Video Denoise > Select sample video in import dialog
        # with uuid("3abc8491-8fde-425c-875b-d82efb9dccf0") as case:

        with step("[Action] Apply Sample Clip on Import dialog on Launcher and check result"):
            result =  main_page.apply_sample_clip_when_open_AI_import_dialog()
            if not result:
                assert False, "Applying Sample Clip on Import dialog on Launcher failed!"

        with step("[Action] Download [AI Module] and check result"):
            result = self.download_AI_module_complete()
            if not result:
                assert False, "Downloading [AI Module] failed!"

        with step("[Verify] Check preview (L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L48_sample_video.png') matches GT (Ground_Truth_Folder + 'L48_sample_video.png') with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L48_sample_video.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L48_sample_video.png', preview_snapshot, similarity=0.95):
                # Similarity should > 0.95 for a matching preview
                assert False, "Preview does not match GT (L48_sample_video.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.bubble
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_7] Check [Video Denoise Bubble] is shown')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_7(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_6') is run and passed
        1. Check [Video Denoise Bubble] (L.fix_enhance.fix.video_denoise.bb_text) is shown
        '''
        dependency_test = "test_bg_music_n_launcher_ai_module_func_29_6"
        self.ensure_dependency(dependency_test)

        # [L49] 1.3 New Launcher > Tool area > Video Denoise > Bubble
        # with uuid("e9b5be2b-675a-40a2-bc59-90d499412bfc") as case:

        with step("[Verify] Check [Video Denoise Bubble] (L.fix_enhance.fix.video_denoise.bb_text) is shown"):
            target = main_page.is_exist(L.fix_enhance.fix.video_denoise.bb_text)
            if not target:
                assert False, "[Video Denoise Bubble] is not shown!"
                
        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_8] Clear [AI Module] files > Clear Cache > Launch APP > Click [CEIP] dialog, Click [Trim Video] button, and Verify title is (\'Trim Video\')')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_8(self):
        '''
        1. Clear [AI Module] files > Clear Cache > Launch APP > Click [CEIP] dialog
        2. Click [Trim Video] button (L.base.launcher_window.btn_trim_video)
        3. Verify title is ('Trim Video')
        '''
        with step("[Action] Clear [AI Module] files > Clear Cache > Launch APP > Click [CEIP] dialog"):
            main_page.clear_AI_module()
            main_page.clear_cache()
            main_page.launch_app()
            main_page.click_CEIP_dialog()

        # [L65] 1.3 New Launcher > Tool area > Trim Video > Single click Module on button
        # with uuid("4412d0b5-a543-4257-b4fa-588159647d18") as case:

        with step("[Action] Click [Trim Video] button (L.base.launcher_window.btn_trim_video)"):
            if main_page.is_not_exist(L.base.launcher_window.btn_trim_video, timeout=6):
                assert False, 'Unable to find [Trim Video] button'
            else:
                main_page.click(L.base.launcher_window.btn_trim_video)

        with step("[Verify] Verify title is ('Trim Video')"):
            target = main_page.exist(L.base.launcher_window.import_dialog, timeout=9)
            if target.AXTitle != "Trim Video":
                assert False, f"Title does not match expected value! Expected 'Trim Video', got '{target.AXTitle}'"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.ai_module
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_9] Click [Import] button on [Import dialog] on Launcher with video (Test_Material_Folder + \'Subtitle_Room/JPN.mp4\') and Get [Trim] Window Title and check is (\'JPN.mp4\')')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_9(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_8') is run and passed
        1. Click [Import] button on [Import dialog] on Launcher with video (Test_Material_Folder + 'Subtitle_Room/JPN.mp4')
        2. Get [Trim] Window Title and check is ('JPN.mp4')
        '''
        dependency_test = "test_bg_music_n_launcher_ai_module_func_29_8"
        self.ensure_dependency(dependency_test)
    
        # [L66] 1.3 New Launcher > Tool area > Trim Video > Select custom video in import dialog
        # with uuid("629abe9c-00a0-4d05-b168-a5de6e9ff01e") as case:

        with step("[Action] Click [Import] button on [Import dialog] on Launcher with video (Test_Material_Folder + 'Subtitle_Room/JPN.mp4')"):
            main_page.click_to_import_media_when_open_AI_import_dialog(Test_Material_Folder + "Subtitle_Room/JPN.mp4")
        
        with step("[Verify] Get [Trim] Window Title and check is ('JPN.mp4')"):
            target = trim_page.get_trim_title()
            if target != "JPN.mp4":
                assert False, f"Trim window title does not match expected value! Expected ('JPN.mp4'), got ({target})"
        
        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.bubble
    @pytest.mark.launcher
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_10] Click [Cancel] to leave [Trim] window, Check [Tips Area Bubble] (L.tips_area.button.bb_trim) is shown, Click [Close] button to back to launcher, Handle [Do you want to save changes] dialog with option [No]')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_10(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_9') is run and passed
        1. Click [Cancel] to leave [Trim] window
        2. Check [Tips Area Bubble] (L.tips_area.button.bb_trim) is shown
        3. Click [Close] button to back to launcher
        4. Handle [Do you want to save changes] dialog with option [No]
        '''
        dependency_test = "test_bg_music_n_launcher_ai_module_func_29_9"
        self.ensure_dependency(dependency_test)

        # [L67] 1.3 New Launcher > Tool area > Trim Video > Bubble
        # with uuid("4077c5fa-b194-4152-bf44-797185cda791") as case:

        with step("[Action] Click [Cancel] to leave [Trim] window"):
            precut_page.click_cancel()

        with step("[Verify] Check [Tips Area Bubble] (L.tips_area.button.bb_trim) is shown"):
            target = main_page.is_exist(L.tips_area.button.bb_trim)
            if not target:
                assert False, "[Tips Area Bubble] is not shown!"

        with step("[Action] Click [Close] button to back to launcher"):
            main_page.click_close_then_back_to_launcher()

        with step("[Action] Handle [Do you want to save changes] dialog with option [No]"):
            main_page.handle_no_save_project_dialog(option='no')

        assert True


    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_11] Click [Crop & Rotate] button (L.base.launcher_window.btn_crop_rotate) and Verify title of [Import Dialog] is (\'Crop & Rotate\')')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_11(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_10') is run and passed
        1. Click [Crop & Rotate] button (L.base.launcher_window.btn_crop_rotate)
        2. Verify title of [Import Dialog] is ('Crop & Rotate')
        '''
        dependency_test = "test_bg_music_n_launcher_ai_module_func_29_10"
        self.ensure_dependency(dependency_test)

        # [L68] 1.3 New Launcher > Tool area > Crop & Rotate > Single click Module on button
        # with uuid("2bd542c8-22be-40cb-8403-93a52c65b145") as case:

        with step("[Action] Click [Crop & Rotate] button (L.base.launcher_window.btn_crop_rotate)"):
            if main_page.is_not_exist(L.base.launcher_window.btn_crop_rotate, timeout=6):
                assert False, 'Unable to find [Crop & Rotate] button'
            else:
                main_page.click(L.base.launcher_window.btn_crop_rotate)

        with step("[Verify] Check title of [Import Dialog] is ('Crop & Rotate')"):
            dialog = main_page.exist(L.base.launcher_window.import_dialog)
            if dialog.AXTitle != "Crop & Rotate":
                assert False, f"Import Dialog title does not match expected value! Expected ('Crop & Rotate'), got ({dialog.AXTitle})"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.import_media
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_12] Click [Import] button on [AI Module Import dialog] on Launcher and import media (Test_Material_Folder + \'fix_enhance_20/shopping_mall.m2ts\') and check result, Set timecode (\'00_00_20_29\') at crop_zoom_pan_page, Get timecode at crop_zoom_pan_page and check is (\'00:00:17:27\')')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_12(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_11') is run and passed
        1. Click [Import] button on [AI Module Import dialog] on Launcher and import media (Test_Material_Folder + 'fix_enhance_20/shopping_mall.m2ts') and check result
        2. Set timecode ('00_00_20_29') at crop_zoom_pan_page
        3. Get timecode at crop_zoom_pan_page and check is ('00:00:17:27')
        '''
        dependency_test = "test_bg_music_n_launcher_ai_module_func_29_11"
        self.ensure_dependency(dependency_test)

        # [L69] 1.3 New Launcher > Tool area > Crop & Rotate > Select custom video in import dialog
        # with uuid("4ccc010c-a5dc-4020-8299-b5eca823a2c9") as case:

        with step("[Action] Click [Import] button on [AI Module Import dialog] on Launcher and import media (Test_Material_Folder + 'fix_enhance_20/shopping_mall.m2ts') and check result"):
            import_custom_result = main_page.click_to_import_media_when_open_AI_import_dialog(Test_Material_Folder + "fix_enhance_20/shopping_mall.m2ts")
            if not import_custom_result:
                assert False, "Failed to import media (shopping_mall.m2ts) from [AI Module Import dialog] on Launcher"

        with step("[Action] Set timecode ('00_00_20_29') at crop_zoom_pan_page"):
            crop_zoom_pan_page.set_timecode("00_00_20_29")
        
        with step("[Verify] Get timecode at crop_zoom_pan_page and check is ('00:00:17:27')"):
            current_timecode = crop_zoom_pan_page.get_timecode()
            if current_timecode != "00:00:17:27":
                assert False, f"Expected timecode ('00:00:17:27'), but got ({current_timecode})"

        assert True


    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.bubble
    @pytest.mark.crop_zoom_pan_window
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_13] Close [Crop Zoom Pan] Window and Check [Crop Bubble] (L.tips_area.button.bb_crop) is shown')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_13(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_12') is run and passed
        1. Close [Crop Zoom Pan] Window
        2. Check [Crop Bubble] (L.tips_area.button.bb_crop) is shown
        '''
        dependency_test = "test_bg_music_n_launcher_ai_module_func_29_12"
        self.ensure_dependency(dependency_test)

        # [L70] 1.3 New Launcher > Tool area > Crop & Rotate > Bubble
        # with uuid("7126fc5c-e9f3-45c9-aeb3-801f75e6474e") as case:

        with step("[Action] Close [Crop Zoom Pan] Window"):
            crop_zoom_pan_page.close_window()

        with step("[Verify] Check [Crop Bubble] (L.tips_area.button.bb_crop) is shown"):
            target = main_page.is_exist(L.tips_area.button.bb_crop, timeout=6)
            if not target:
                assert False, "Crop Bubble is not shown!"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.background_music
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.timecode
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_14] Enter [Background Music (meta)] Category, Select specific category in meta by name (\'Atmospheric\'), Search library for (\'Brainwaves\'), Select timeline track (1) > Screenshot (L.base.Area.preview.only_mtk_view), Select specific sound clips in library by name (\'Brainwaves\'), Check preview is updated with similarity < 0.55, Press [Space] key > wait (DELAY_TIME*10) > Press [Space] key, Get Timeline Timecode at main page and check is not (\'00:00:00:00\')')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_14(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_13') is run and passed
        1. Enter [Background Music (meta)] Category
        2. Select specific category in meta by name ('Atmospheric')
        3. Search library for ('Brainwaves')
        4. Select timeline track (1) > Screenshot (L.base.Area.preview.only_mtk_view)
        5. Select specific sound clips in library by name ('Brainwaves')
        6. Check preview is updated with similarity < 0.55
        7. Press [Space] key > wait (DELAY_TIME*10) > Press [Space] key
        8. Get Timeline Timecode at main page and check is not ('00:00:00:00')
        '''
        dependency_test = "test_bg_music_n_launcher_ai_module_func_29_13"
        self.ensure_dependency(dependency_test)

        # [L156] Media Room > BGM (Meta) > Preview
        # with uuid("4e1764d8-c217-481c-8870-e125213db670") as case:

        with step("[Action] Enter [Background Music (meta)] Category"):
            media_room_page.enter_background_music()

        with step("[Action] Select specific category in meta by name ('Atmospheric')"):
            media_room_page.select_specific_category_in_meta('Atmospheric')

        with step("[Action] Search library for ('Brainwaves')"):
            media_room_page.search_library("Brainwaves")

        with step("[Action] Select timeline track (1) > Screenshot (L.base.Area.preview.only_mtk_view)"):
            main_page.timeline_select_track(1)
            preview_before = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        with step("[Action] Select specific sound clips in library by name ('Brainwaves')"):
            media_room_page.sound_clips_select_media("Brainwaves")

        with step("[Verify] Check preview is updated with similarity < 0.55"):
            preview_after = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            # Similarity should be less than 0.55 indicating a noticeable update
            if main_page.compare(preview_before, preview_after, similarity=0.55):
                assert False, "Preview similarity is not less than 0.55"

        with step("[Action] Press [Space] key > wait (DELAY_TIME*10) > Press [Space] key"):
            main_page.press_space_key()
            time.sleep(DELAY_TIME * 10)
            main_page.press_space_key()

        with step("[Verify] Get Timeline Timecode at main page and check is not ('00:00:00:00')"):
            timeline_timecode = main_page.get_timeline_timecode()
            if timeline_timecode == "00:00:00:00":
                assert False, f"Timeline Timecode should not be ('00:00:00:00'), but got ({timeline_timecode})"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.background_music
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.timecode
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_15] Check [Download] icon is not shown for specific BGM (\'Brainwaves\'), select timeline track (2), select specific sound clips in library by name (\'Brainwaves\'), drag current position media to timeline playhead position, and check [Download OK] mark if shown for BG music for specific music (\'Brainwaves\')')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_15(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_14') is run and passed
        1. Check [Download] icon is not shown for specific BGM ('Brainwaves')
        2. Select timeline track (2)
        3. Select specific sound clips in library by name ('Brainwaves')
        4. Drag current position media to timeline playhead position
        5. Check [Download OK] mark if shown on BG music for specific music ('Brainwaves')
        '''
        dependency_test = "test_bg_music_n_launcher_ai_module_func_29_14"
        self.ensure_dependency(dependency_test)

        # [L158] Media Room > BGM (Meta) > Download by drag to timeline
        # with uuid("1acff0eb-86ff-44a8-a388-03375cc6a65e") as case:

        with step("[Verify] Check [Download] icon is not shown for specific BGM ('Brainwaves')"):
            if main_page.exist(L.media_room.scroll_area.table_view_text_field_download_ok):
                assert False, "Download icon is shown for 'Brainwaves'"

        with step("[Action] Select timeline track (2)"):
            main_page.timeline_select_track(2)

        with step("[Action] Select specific sound clips in library by name ('Brainwaves')"):
            media_room_page.sound_clips_select_media("Brainwaves")

        with step("[Action] Drag current position media to timeline playhead position"):
            main_page.drag_current_pos_media_to_timeline_playhead_position(track_no=2)

        with step("[Verify] Check [Download OK] mark if shown on BG music for specific music ('Brainwaves')"):
            if not media_room_page.background_music_check_download_ok_mark("Brainwaves"):
                assert False, "[Download OK] mark is not shown for 'Brainwaves'"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.color_adjustment
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_16] Clear [AI Module] file > Clear Cache > Launch APP > Click [CEIP] dialog, Click [Color Adjustment] button, and Verify title of [Import Dialog] is (\'Color Adjustment\')')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_16(self):
        '''
        1. Clear [AI Module] file > Clear Cache > Launch APP > Click [CEIP] dialog
        2. Check ['Color Adjustment'] button is existed on launcher by is_not_exist(L.base.launcher_window.btn_color_adjustment, timeout=6)
        3. Click ['Color Adjustment'] button
        4. Verify the title of [Import Dialog] is ('Color Adjustment')
        '''

        with step("[Action] Clear [AI Module] file > Clear Cache > Launch APP > Click [CEIP] dialog"):
            main_page.clear_AI_module()
            main_page.clear_cache()
            main_page.launch_app()
            main_page.click_CEIP_dialog()

        # [L74] 1.3 New Launcher > Tool area > Color Adjustment > Single click Module on button
        # with uuid("e4af79e3-e9ea-481b-9ee7-765fa5132482") as case:

        with step("[Action] Check ['Color Adjustment'] button is existed on launcher by is_not_exist(L.base.launcher_window.btn_color_adjustment, timeout=6)"):
            if main_page.is_not_exist(L.base.launcher_window.btn_color_adjustment, timeout=6):
                assert False, 'Unable to find [Color Adjustment] button'

        with step("[Action] Click ['Color Adjustment'] button"):
            main_page.click(L.base.launcher_window.btn_color_adjustment)

        with step("[Verify] Verify the title of [Import Dialog] is ('Color Adjustment')"):
            dialog = main_page.exist(L.base.launcher_window.import_dialog, timeout=9)
            if dialog.AXTitle != "Color Adjustment":
                assert False, f"Import Dialog title does not match expected value! Expected ('Color Adjustment'), got ({dialog.AXTitle})"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.ai_module
    @pytest.mark.color_adjustment
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_17] Click [Import] button on [AI Module Import dialog] on Launcher with ("Color Adjustment") and import media, and Get [Color Adjustment] Checkbox Status and check is True')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_17(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_16') is run and passed
        1. Click [Import] button on [AI Module Import dialog] on Launcher and import media (Test_Material_Folder + 'Mark_Clips/2.mp4') and check result is true
        2. Get [Color Adjustment] Checkbox Status and check is True
        '''

        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_16')

        # [L75] 1.3 New Launcher > Tool area > Color Adjustment > Select custom video in import dialog
        # with uuid("6366118c-e907-4407-bc2e-1df31c0304fd") as case:

        with step("[Action] Click [Import] button on [AI Module Import dialog] on Launcher and import media (Test_Material_Folder + 'Mark_Clips/2.mp4') and check result is true"):
            import_result = main_page.click_to_import_media_when_open_AI_import_dialog(Test_Material_Folder + "Mark_Clips/2.mp4")
            if not import_result:
                assert False, "Failed to import media (2.mp4) from [AI Module Import dialog] on Launcher"

        with step("[Verify] Get [Color Adjustment] Checkbox Status and check is True"):
            checkbox_status = fix_enhance_page.enhance.get_color_adjustment()
            if checkbox_status != True:
                assert False, f"Expected [Color Adjustment] checkbox status to be True, but got {checkbox_status}"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.bubble
    @pytest.mark.color_adjustment
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_18] Check [Color Adjustment Bubble] and handle [Do you want to save changes] dialog with option [No]')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_18(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_17') is run and passed
        1. Check [Color Adjustment Bubble] (L.fix_enhance.enhance.bb_color_adjustment) is shown after enter [Color Adjustment] window from Launcher
        2. Click [Close] button to back to launcher
        3. Handle [Do you want to save changes] dialog with option [No]
        '''

        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_17')

        # [L76] 1.3 New Launcher > Tool area > Color Adjustment > Bubble
        # with uuid("b941c906-cc2e-4679-960e-57c3a353266e") as case:

        with step("[Verify] Check [Color Adjustment Bubble] (L.fix_enhance.enhance.bb_color_adjustment) is shown after enter [Color Adjustment] window from Launcher"):
            if not main_page.is_exist(L.fix_enhance.enhance.bb_color_adjustment):
                assert False, "[Color Adjustment Bubble] is not shown after entering [Color Adjustment] window"

        with step("[Action] Click [Close] button to back to launcher"):
            main_page.click_close_then_back_to_launcher()

        with step("[Action] Handle [Do you want to save changes] dialog with option [No]"):
            main_page.handle_no_save_project_dialog(option='no')

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.wind_removal
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_19] Check [AI Wind removal] button, click, and verify title')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_19(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_18') is run and passed
        1. Check ['AI Wind removal'] button is existed on launcher by is_not_exist(L.base.launcher_window.btn_wind_removal, timeout=10)
        2. Click ['AI Wind removal'] button
        3. Verify the title of [Import Dialog] is ('AI Wind removal')
        '''

        # [L51] 1.3 New Launcher > Tool area > AI Wind removal > Single click Module on button
        # with uuid("2949120e-0d6a-4a63-be39-563f87760866") as case:

        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_18')

        with step("[Verify] Check ['AI Wind removal'] button is existed on launcher by is_not_exist(L.base.launcher_window.btn_wind_removal, timeout=10)"):
            if main_page.is_not_exist(L.base.launcher_window.btn_wind_removal, timeout=10):
                assert False, "[AI Wind removal] button is not existed on launcher"

        with step("[Action] Click ['AI Wind removal'] button"):
            main_page.click(L.base.launcher_window.btn_wind_removal)

        with step("[Verify] Verify the title of [Import Dialog] is ('AI Wind removal')"):
            dialog = main_page.exist(L.base.launcher_window.import_dialog)
            if dialog.AXTitle != "AI Wind removal":
                assert False, f"Import Dialog title does not match expected value! Expected ('AI Wind removal'), got ({dialog.AXTitle})"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.ai_module
    @pytest.mark.wind_removal
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_20] Click [Import] button on [AI Module Import dialog] and import media, and check if [AI Wind removal] window is opened')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_20(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_19') is run and passed
        1. Click [Import] button on [AI Module Import dialog] on Launcher with function [AI Wind removal] and import media (Test_Material_Folder + 'Mark_Clips/1.mp4') and check result is true
        2. Check [AI Wind removal] window is opened by is_exist(L.fix_enhance.fix.wind_removal.main_window, timeout=60)
        '''

        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_19')

        # [L52] 1.3 New Launcher > Tool area > AI Wind removal > Select custom video in import dialog
        # with uuid("e1c07bae-1b96-4434-911e-4123f2ad003c") as case:

        with step("[Action] Click [Import] button on [AI Module Import dialog] on Launcher with function [AI Wind removal] and import media (Test_Material_Folder + 'Mark_Clips/1.mp4') and check result is true"):
            import_result = main_page.click_to_import_media_when_open_AI_import_dialog(Test_Material_Folder + "Mark_Clips/1.mp4")
            if not import_result:
                assert False, "Failed to import media (1.mp4) from [AI Module Import dialog] on Launcher"

        with step("[Verify] Check [AI Wind removal] window is opened by is_exist(L.fix_enhance.fix.wind_removal.main_window, timeout=60)"):
            if not main_page.is_exist(L.fix_enhance.fix.wind_removal.main_window, timeout=60):
                assert False, "[AI Wind removal] window did not open as expected"

        assert True


    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.ai_module
    @pytest.mark.wind_removal
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_21] Check [AI Wind removal Bubble] is shown after entering [AI Wind removal] window')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_21(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_20') is run and passed
        1. Check [AI Wind removal Bubble] (L.fix_enhance.fix.wind_removal.bb_text_1, timeout=6) is shown after enter [AI Wind removal] window from Launcher
        '''

        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_20')

        # [L53] 1.3 New Launcher > Tool area > AI Wind removal > Bubble
        # with uuid("e6cdfd15-ca08-46e5-9129-93e2abefbc08") as case:

        with step("[Verify] Check [AI Wind removal Bubble] (L.fix_enhance.fix.wind_removal.bb_text_1, timeout=6) is shown after entering [AI Wind removal] window from Launcher"):
            if not main_page.is_exist(L.fix_enhance.fix.wind_removal.bb_text_1, timeout=6):
                assert False, "[AI Wind removal Bubble] is not shown after entering [AI Wind removal] window"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.ai_module
    @pytest.mark.bubble
    @pytest.mark.wind_removal
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_22] Click [Apply] button in [Wind Removal] window and check result')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_22(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_21') is run and passed
        1. Click [Apply] Button in [Wind Removal] Window with value (20) and check result is true
        2. Check [AI Wind Removal] button (L.fix_enhance.fix.wind_removal.bb_text_2) is shown after apply effect
        3. Click [Close] button to back to launcher
        4. Handle [Do you want to save changes] dialog with option [No]
        '''

        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_21')

        # [L54] 1.3 New Launcher > Tool area > AI Wind removal > Bubble
        # with uuid("3e575226-ce72-4c4f-a750-7d13d4da57e3") as case:

        with step("[Action] Click [Apply] Button in [Wind Removal] Window with value (20) and check result is true"):
            apply_result = fix_enhance_page.fix.click_wind_removal_apply(20)
            if not apply_result:
                assert False, "Failed to apply effect in [Wind Removal] window"

        with step("[Verify] Check [AI Wind Removal] button (L.fix_enhance.fix.wind_removal.bb_text_2) is shown after apply effect"):
            if not main_page.is_exist(L.fix_enhance.fix.wind_removal.bb_text_2):
                assert False, "[AI Wind Removal] button is not shown after applying effect"

        with step("[Action] Click [Close] button to back to launcher"):
            main_page.click_close_then_back_to_launcher()

        with step("[Action] Handle [Do you want to save changes] dialog with option [No]"):
            main_page.handle_no_save_project_dialog(option='no')

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.greener_grass
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_23] Check [Greener Grass] button, click it, and verify title of [Import Dialog] is (\'Greener Grass\')')
    def test_bg_music_n_launcher_ai_module_func_29_23(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_22') is run and passed
        1. Check ['Greener Grass'] button is existed on launcher by is_not_exist(L.base.launcher_window.btn_greener_grass, timeout=10)
        2. Click ['Greener Grass'] button
        3. Verify the title of [Import Dialog] is ('Greener Grass')
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_22')

        # [L55] 1.3 New Launcher > Tool area > Greener Grass > Single click Module on button
        # with uuid("871e08a2-2e31-42ec-bca4-5f55e3b5866d") as case:

        with step("[Verify] Check ['Greener Grass'] button is existed on launcher by is_not_exist(L.base.launcher_window.btn_greener_grass, timeout=10)"):
            if main_page.is_not_exist(L.base.launcher_window.btn_greener_grass, timeout=10):
                assert False, "['Greener Grass'] button is not found on launcher"

        with step("[Action] Click ['Greener Grass'] button"):
            main_page.click(L.base.launcher_window.btn_greener_grass)

        with step("[Verify] Verify the title of [Import Dialog] is ('Greener Grass')"):
            dialog = main_page.exist(L.base.launcher_window.import_dialog)
            if dialog.AXTitle != "Greener Grass":
                assert False, f"Import Dialog title does not match expected value! Expected ('Greener Grass'), got ({dialog.AXTitle})"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.import_media
    @pytest.mark.greener_grass
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_24] Click [Import] button on [AI Module Import dialog] on Launcher with function [Greener Grass] and import media (Test_Material_Folder + \'Mark_Clips/2.mp4\') and check result is true, Check enter [Greener Grass] by Get [Color Enhancement] Checkbox Status in fix enhance page and check is True')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_24(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_23') is run and passed
        1. Click [Import] button on [AI Module Import dialog] on Launcher with function [Greener Grass] and import media (Test_Material_Folder + 'Mark_Clips/2.mp4') and check result is true
        2. Check enter [Greener Grass] by Get [Color Enhancement] Checkbox Status in fix enhance page and check is True
        '''

        # [L56] 1.3 New Launcher > Tool area > Greener Grass > Select custom video in import dialog
        # with uuid("833e5669-d6d1-4157-91b0-2349eacbe77e") as case:

        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_23')

        with step("[Action] Click [Import] button on [AI Module Import dialog] on Launcher with function [Greener Grass] and import media (Test_Material_Folder + 'Mark_Clips/2.mp4') and check result is true"):
            import_result = main_page.click_to_import_media_when_open_AI_import_dialog(Test_Material_Folder + 'Mark_Clips/2.mp4')
            if not import_result:
                assert False, "Failed to import media (2.mp4) from [AI Module Import dialog] on Launcher"

        with step("[Verify] Check enter [Greener Grass] by Get [Color Enhancement] Checkbox Status in fix enhance page and check is True"):
            checkbox_status = fix_enhance_page.enhance.get_color_enhancement()
            if not checkbox_status:
                assert False, "Color Enhancement checkbox status is not True as expected"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.bubble
    @pytest.mark.greener_grass
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_25] Check [Greener Grass Bubble] is shown after entering function')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_25(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_23') is run and passed
        1. Check [Greener Grass Bubble] (L.fix_enhance.enhance.bb_color_enhancement) is shown after enter function
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_23')

        # [L57] 1.3 New Launcher > Tool area > Greener Grass > Bubble
        # with uuid("b46d4058-8be5-45be-bbcf-9cb73c3a3312") as case:

        with step("[Verify] Check [Greener Grass Bubble] (L.fix_enhance.enhance.bb_color_enhancement) is shown after enter function"):
            if main_page.is_not_exist(L.fix_enhance.enhance.bb_color_enhancement, timeout=10):
                assert False, "[Greener Grass Bubble] is not shown after entering the function"

        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.video_stabilizer
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_25] Check [\'Video Stabilizer\'] button, Click [\'Video Stabilizer\'] button, and Verify the title of [Import Dialog] is (\'Video Stabilizer\')')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_25(self):
        '''
        1. Clear [AI Module] Files > Clear Cache > Launch APP > Click [CEIP] dialog
        2. Check ['Video Stabilizer'] button is existed on launcher by is_not_exist(L.base.launcher_window.btn_video_stabilizer, timeout=10)
        3. Click ['Video Stabilizer'] button
        4. Verify the title of [Import Dialog] is ('Video Stabilizer')
        '''

        with step("[Action] Clear [AI Module] Files > Clear Cache > Launch APP > Click [CEIP] dialog"):
            main_page.clear_AI_module()
            main_page.clear_cache()
            main_page.launch_app()
            main_page.click_CEIP_dialog()

        # [L44] 1.3 New Launcher > Tool area > Video Stabilizer > Single click Module on button
        # with uuid("f3866d19-b72d-414b-ba67-084d459c7fa8") as case:

        with step("[Verify] Check ['Video Stabilizer'] button is existed on launcher by is_not_exist(L.base.launcher_window.btn_video_stabilizer, timeout=10)"):
            if main_page.is_not_exist(L.base.launcher_window.btn_video_stabilizer, timeout=10):
                assert False, "['Video Stabilizer'] button does not exist on launcher"

        with step("[Action] Click ['Video Stabilizer'] button"):
            main_page.click(L.base.launcher_window.btn_video_stabilizer)

        with step("[Verify] Verify the title of [Import Dialog] is ('Video Stabilizer')"):
            target = main_page.exist(L.base.launcher_window.import_dialog, timeout=9)
            if target.AXTitle != "Video Stabilizer":
                assert False, f"Import dialog title does not match expected value! Expected 'Video Stabilizer', got '{target.AXTitle}'"
        
        assert True


    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.ai_module
    @pytest.mark.video_stabilizer
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_26] Ensure dependency, click [Import] button on [AI Module Import dialog] with function [Video Stabilizer], download [AI Module], and verify preview match')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_26(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_25') is run and passed
        1. Click [Import] button on [AI Module Import dialog] on Launcher with function [Video Stabilizer] and check result is true
        2. Download [AI Module] and check the result is true
        3. Check preview (L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L45_sample_video.png') matches the ground truth (Ground_Truth_Folder + 'L45_sample_video.png') with similarity 0.95
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_25')
        
        # [L45] 1.3 New Launcher > Tool area > Video Stabilizer > Select sample video in import dialog
        # with uuid("de1fd53a-b429-4493-b02e-09c6417ab252") as case:

        with step("[Action] Click [Import] button on [AI Module Import dialog] on Launcher with function [Video Stabilizer] and check result is true"):
            result = main_page.apply_sample_clip_when_open_AI_import_dialog()
            if not result:
                assert False, "Click [Import] button on [AI Module Import dialog] with function [Video Stabilizer] failed!"
        
        with step("[Action] Download [AI Module] and check result is true"):
            result = self.download_AI_module_complete()
            if not result:
                assert False, "Downloading [AI Module] failed!"
        
        with step("[Verify] Check preview (L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L45_sample_video.png') matches the ground truth (Ground_Truth_Folder + 'L45_sample_video.png') with similarity 0.95"):
            preview_snapshot = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L45_sample_video.png')
            if not main_page.compare(Ground_Truth_Folder + 'L45_sample_video.png', preview_snapshot, similarity=0.95):
                # Similarity should > 0.95 for a matching preview
                assert False, "Preview does not match ground truth (L45_sample_video.png)! Similarity should > 0.95"
        
        assert True


    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.video_stabilizer
    @pytest.mark.bubble
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_27] Check [Video Stabilizer Bubble] is shown, click [Close] and handle dialog')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_27(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_26') is run and passed
        1. Check [Video Stabilizer Bubble] (L.fix_enhance.fix.video_stabilizer.bb_text) is shown after entering function
        2. Click [Close] button to back to Launcher
        3. Handle [Do you want to save changes] dialog with option [No]
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_26')
        
        # [L46] 1.3 New Launcher > Tool area > Greener Grass > Bubble
        # with uuid("866267f2-cc8c-44ab-8350-b303beb24068") as case:

        with step("[Verify] Check [Video Stabilizer Bubble] (L.fix_enhance.fix.video_stabilizer.bb_text) is shown after entering function"):
            target = main_page.exist(L.fix_enhance.fix.video_stabilizer.bb_text)
            if not target:
                assert False, "[Video Stabilizer Bubble] is not shown!"
        
        with step("[Action] Click [Close] button to back to Launcher"):
            main_page.click_close_then_back_to_launcher()
        
        with step("[Action] Handle [Do you want to save changes] dialog with option [No]"):
            main_page.handle_no_save_project_dialog(option='no')
        
        assert True


    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.speech_enhancement
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_28] Check [Speech Enhancement] button and verify title of [Import Dialog]')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_28(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_27') is run and passed
        1. Check ['Speech Enhancement'] button is existed on launcher by is_not_exist(L.base.launcher_window.btn_speech_enhancement, timeout=10)
        2. Click ['Speech Enhancement'] button
        3. Verify the title of [Import Dialog] is ('Speech Enhancement')
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_27')
        
        # [L77] 1.3 New Launcher > Tool area > Speech Enhancement > Single click Module on button
        # with uuid("18465f67-b605-4650-8236-3c28fabef180") as case:

        with step("[Verify] Check ['Speech Enhancement'] button is existed on launcher by is_not_exist(L.base.launcher_window.btn_speech_enhancement, timeout=10)"):
            if main_page.is_not_exist(L.base.launcher_window.btn_speech_enhancement, timeout=10):
                assert False, "['Speech Enhancement'] button does not exist on launcher"
        
        with step("[Action] Click ['Speech Enhancement'] button"):
            main_page.click(L.base.launcher_window.btn_speech_enhancement)
        
        with step("[Verify] Verify the title of [Import Dialog] is ('Speech Enhancement')"):
            target = main_page.exist(L.base.launcher_window.import_dialog)
            if target.AXTitle != "Speech Enhancement":
                assert False, f"Import Dialog title does not match expected value! Expected ('Speech Enhancement'), got ({target.AXTitle})"
        
        assert True



    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.speech_enhancement
    @pytest.mark.ai_module
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_29] Click [Import] button on [AI Module Import dialog] on Launcher with function [Speech Enhancement] and import media, download [AI Module], and check [Speech Enhancement] dialog')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_29(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_28') is run and passed
        1. Click [Import] button on [AI Module Import dialog] on Launcher with function [Speech Enhancement] and import media (Test_Material_Folder + 'BFT_21_Stage1/Marriage Advice.mp4') and check result is true
        2. Download [AI Module] and check the result is true
        3. Check [Speech Enhancement] dialog is shown by is_exist(L.fix_enhance.enhance.speech_enhancement.main_window)
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_28')
        
        # [L78] 1.3 New Launcher > Tool area > Speech Enhancement > Select custom video in import dialog
        # with uuid("990e3f3e-0016-4a86-8aad-f31e6045d201") as case:

        with step("[Action] Click [Import] button on [AI Module Import dialog] on Launcher with function [Speech Enhancement] and import media (Test_Material_Folder + 'BFT_21_Stage1/Marriage Advice.mp4') and check result is true"):
            import_result = main_page.click_to_import_media_when_open_AI_import_dialog(Test_Material_Folder + "BFT_21_Stage1/Marriage Advice.mp4")
            if not import_result:
                assert False, "Failed to import media (Marriage Advice.mp4) from [AI Module Import dialog] with function [Speech Enhancement]"
        
        with step("[Action] Download [AI Module] and check result is true"):
            download_result = self.download_AI_module_complete()
            if not download_result:
                assert False, "Failed to download [AI Module]"
        
        with step("[Verify] Check [Speech Enhancement] dialog is shown by is_exist(L.fix_enhance.enhance.speech_enhancement.main_window)"):
            dialog = main_page.is_exist(L.fix_enhance.enhance.speech_enhancement.main_window)
            if not dialog:
                assert False, "[Speech Enhancement] dialog is not shown!"
        
        assert True

    @pytest.mark.bg_music_n_launcher_ai_module_func
    @pytest.mark.launcher
    @pytest.mark.speech_enhancement
    @pytest.mark.ai_module
    @pytest.mark.bubble
    @pytest.mark.name('[test_bg_music_n_launcher_ai_module_func_29_30] Check bubbles are shown after entering via launcher and applying effect')
    @exception_screenshot
    def test_bg_music_n_launcher_ai_module_func_29_30(self):
        '''
        0. Ensure the dependency test ('test_bg_music_n_launcher_ai_module_func_29_29') is run and passed
        1. Check [Speech Enhancement Bubble 1] is shown after enter [Speech Enhancement] window by is_exist(L.fix_enhance.enhance.speech_enhancement.bb_text_1)
        2. Apply Effect in [Speech Enhancement] Window with (delay_time=4)
        3. Wait for downloading AI module
        4. Check [Speech Enhancement Bubble 2] is shown after applied effect by is_exist(L.fix_enhance.enhance.speech_enhancement.bb_text_2)
        '''
        self.ensure_dependency('test_bg_music_n_launcher_ai_module_func_29_29')

        # [L79] 1.3 New Launcher > Tool area > Speech Enhancement > Bubble
        # with uuid("ef129f1d-d1ef-4f24-b95f-d36397617ec0") as case:

        with step("[Verify] Check [Speech Enhancement Bubble 1] is shown after enter [Speech Enhancement] window by is_exist(L.fix_enhance.enhance.speech_enhancement.bb_text_1)"):
            bubble1 = main_page.exist(L.fix_enhance.enhance.speech_enhancement.bb_text_1)
            if not bubble1:
                assert False, "[Speech Enhancement Bubble 1] is not shown after entering [Speech Enhancement] window!"
        
        with step("[Action] Apply Effect in [Speech Enhancement] Window with (delay_time=4)"):
            fix_enhance_page.enhance.speech_enhancement.click_apply(4)
        
        with step("[Action] Wait for downloading AI module"):
            self.check_downloading_AI_module()
        
        with step("[Verify] Check [Speech Enhancement Bubble 2] is shown after applied effect by is_exist(L.fix_enhance.enhance.speech_enhancement.bb_text_2)"):
            bubble2 = main_page.is_exist(L.fix_enhance.enhance.speech_enhancement.bb_text_2)
            if not bubble2:
                assert False, "[Speech Enhancement Bubble 2] is not shown after applying effect!"
        
        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.import_media
    @pytest.mark.launch
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_1] Clear Cache > Start APP, Import media, Insert media, Enter [Effect Room], Select Library Room category (Body Effect), Drag [Scroll Bar] in Title Room with (0.5) and (1), and verify preview update')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_1(self):
        '''
        1. Clear Cache > Start APP
        2. Import media for local file (Test_Material_Folder + 'Mark_Clips/2.mp4') > Handle high definition dialog
        3. Insert media to selected track
        4. Enter [Effect Room] via hotkey
        5. Select Library Room category ('Body Effect') > Screenshot (locator=L.media_room.library_frame)
        6. Drag [Scroll Bar] in Title Room with (0.5)
        7. Check preview is updated after drag scroll bar to different thumbnails (similarity should < 0.82)
        8. Drag [Scroll Bar] in Title Room with (1)
        9. Check preview is updated after drag scroll bar to different thumbnails (similarity should < 0.82)
        '''
        with step("[Action] Clear Cache > Start APP"):
            main_page.clear_cache()
            main_page.start_app()
        
        with step("[Action] Import media for local file (Test_Material_Folder + 'Mark_Clips/2.mp4') > Handle high definition dialog"):
            media_path = Test_Material_Folder + "Mark_Clips/2.mp4"
            media_room_page.import_media_file(media_path)
            media_room_page.handle_high_definition_dialog(option='no')
        
        with step("[Action] Insert media to selected track"):
            main_page.tips_area_insert_media_to_selected_track(option=-1)
        
        with step("[Action] Enter [Effect Room] via hotkey"):
            main_page.tap_EffectRoom_hotkey()
        
        # [L227] 2.3 Effect Room > Body Effect > Check each effect thumbnail
        # with uuid("2ee041e7-4f26-4701-ae87-6b5b2baf8b9a") as case:

        with step("[Action] Select Library Room category ('Body Effect') > Screenshot (locator=L.media_room.library_frame)"):
            main_page.select_LibraryRoom_category('Body Effect')
            initial_screenshot = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Action] Drag [Scroll Bar] in Title Room with (0.5)"):
           title_room_page.drag_TitleRoom_Scroll_Bar(0.50)
        
        with step("[Verify] Check preview is updated after drag scroll bar to different thumbnails (similarity should < 0.82)"):
            preview_after_drag1 = main_page.snapshot(locator=L.media_room.library_frame)
            if main_page.compare(initial_screenshot, preview_after_drag1, similarity=0.82):
                # Similarity should be less than 0.82
                assert False, "Preview did not update as expected after dragging scroll bar with (0.5)! Similarity should < 0.82"
        
        with step("[Action] Drag [Scroll Bar] in Title Room with (1)"):
            title_room_page.drag_TitleRoom_Scroll_Bar(1)
        
        with step("[Verify] Check preview is updated after drag scroll bar to different thumbnails (similarity should < 0.82)"):
            preview_after_drag2 = main_page.snapshot(locator=L.media_room.library_frame)
            if main_page.compare(initial_screenshot, preview_after_drag2, similarity=0.82):
                # Similarity should be less than 0.82
                assert False, "Preview did not update as expected after dragging scroll bar with (1)! Similarity should < 0.82"
        
        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.content_pack
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_2] Drag [Scroll Bar], Hover on 2nd Template, Check preview difference, and Move mouse to (0, 0)')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_2(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_1') is run and passed
        1. Drag [Scroll Bar] in [Title Room] with (0)
        2. Hover on 2nd Template
        3. Check if the preview window is different when playing (area=L.media_room.library_listview.unit_collection_view_item_second, sec=2)
        4. Move mouse to position (0, 0)
        '''
        self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_1')
        
        # [L228] 2.3 Effect Room > Body Effect > Hover on each effect thumbnail
        # with uuid("939f02b7-69b5-4be4-b70e-e89603af3592") as case:

        with step("[Action] Drag [Scroll Bar] in [Title Room] with (0)"):
            title_room_page.drag_TitleRoom_Scroll_Bar(0)
        
        with step("[Action] Hover on 2nd Template"):
            target = main_page.exist(L.media_room.library_listview.unit_collection_view_item_second)
            main_page.mouse.move(*target.center)
            time.sleep(DELAY_TIME * 3)

        with step("[Verify] Check if the preview window is different when playing (area=L.media_room.library_listview.unit_collection_view_item_second, sec=2)"):
            preview_changed = main_page.Check_PreviewWindow_is_different(area=L.media_room.library_listview.unit_collection_view_item_second, sec=2)
            if not preview_changed:
                assert False, "Preview window did not change as expected when playing for (sec=2)!"
        
        with step("[Action] Move mouse to position (0, 0)"):
            main_page.move_mouse_to_0_0()
        
        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.content_pack
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_3] Get 2nd Template name, Click 2nd Template, Move mouse, and verify Heart Icon update')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_3(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_2') is run and passed
        1. Get 2nd Template name > Snapshot [Heart Icon] on thumbnail (2nd template name)
        3. Click 2nd Template (L.media_room.library_listview.unit_collection_view_item_second) > Wait Download for (DELAY_TIME*3)
        4. Move mouse to (0,0)
        5. Snapshot [Heart Icon] on thumbnail (2nd template name)
        6. Check 2 screenshots are updated (Similarity should <0.8)
        '''
        self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_2')
        
        # [L229] 2.3 Effect Room > Body Effect > Download each effect
        # with uuid("1dd660d2-56fa-49f7-80e9-91dc6f0e9558") as case:

        with step("[Action] Get 2nd Template name > Snapshot [Heart Icon] on thumbnail (2nd template name)"):
            target = main_page.exist(locator= L.media_room.library_listview.unit_collection_view_item_second)
            obj = main_page.exist(locator= L.media_room.library_listview.unit_collection_view_item_text, parent=target )
            second_template_name = obj.AXValue
            screenshot1 = main_page.snapshot_library_heart_icon(second_template_name)
        
        with step("[Action] Click 2nd Template (L.media_room.library_listview.unit_collection_view_item_second) > Wait Download for (DELAY_TIME*3)"):
            main_page.click(L.media_room.library_listview.unit_collection_view_item_second)
            time.sleep(DELAY_TIME * 3)
        
        with step("[Action] Move mouse to (0,0)"):
            main_page.move_mouse_to_0_0()
        
        with step("[Action] Snapshot [Heart Icon] on thumbnail (2nd template name)"):
            screenshot2 = main_page.snapshot_library_heart_icon(second_template_name)
        
        with step("[Verify] Check 2 screenshots are updated (Similarity should <0.8)"):
            if main_page.compare(screenshot1, screenshot2, similarity=0.8):
                # Similarity should be less than 0.8
                assert False, "Screenshots did not update correctly! Similarity should < 0.8"
        
        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.content_pack
    @pytest.mark.search_libaray
    @pytest.mark.timecode
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_4] Search library, drag media, wait download, set timecode, and verify preview for timeline')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_4(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_3') is run and passed
        1. Search library for ('Geometric Light Shadow')
        2. Drag media ('Geometric Light Shadow') to timeline playhead position
        3. Wait until download [Body Effect] complete and check result is true
        4. Set Timecode to ('00_00_20_19') at main page
        5. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L230_timelinepreview.png') matches GT (Ground_Truth_Folder + 'L230_timelinepreview.png') with similarity 0.97
        '''
        self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_3')
        
        # [L230] 2.3 Effect Room > Body Effect > Apply each effect: Free content
        # with uuid("18db8069-f36c-4cd5-98ab-626c6faed905") as case:

        with step("[Action] Search library for ('Geometric Light Shadow')"):
            media_room_page.search_library("Geometric Light Shadow")
        
        with step("[Action] Drag media ('Geometric Light Shadow') to timeline playhead position"):
            main_page.drag_media_to_timeline_playhead_position("Geometric Light Shadow")
        
        with step("[Action] Wait until download [Body Effect] complete and check result is true"):
            result = self.body_effect_download_complete(timeout=60)
            if not result:
                assert False, "Download [Body Effect] did not complete successfully!"
        
        with step("[Action] Set Timecode to ('00_00_20_19') at main page"):
            main_page.set_timeline_timecode('00_00_20_19')
        
        # [L233] 2.3 Effect Room > Body Effect > Playbak preview after apply
        # with uuid("0bb25de1-409e-4d34-9b57-cc50ec1e8d14") as case:

        with step("[Verify] Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L230_timelinepreview.png') matches GT (Ground_Truth_Folder + 'L230_timelinepreview.png') with similarity 0.97"):
            preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L230_timelinepreview.png')
            if not main_page.compare(Ground_Truth_Folder + 'L230_timelinepreview.png', preview, similarity=0.97):
                # Similarity should be greater than 0.97 for matching preview
                assert False, "Preview does not match GT (L230_timelinepreview.png)! Similarity should > 0.97"
        
        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.content_pack
    @pytest.mark.search_libaray
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_5] Relaunch AP, Search library, drag media, wait download, set timecode, and verify preview for timeline')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_5(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_4') is run and passed
        1. Close and Restart App
        2. Import media for local file (Test_Material_Folder + 'Mark_Clips/2.mp4') > Handle high definition dialog
        3. Insert media to selected track
        4. Enter [Effect Room] via hotkey
        5. Search library for ('Geometric Light Shadow')
        6. Drag media ('Geometric Light Shadow') to timeline playhead position
        7. Set Timecode to ('00_00_20_19') at main page
        8. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L230_timelinepreview.png') matches GT (Ground_Truth_Folder + 'L230_timelinepreview.png') with similarity 0.97
        '''
        with step("[Action] Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_4') is run and passed"):
            self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_4')
        
        # [L234] 2.3 Effect Room > Body Effect > Close AP -> re-launch AP and apply effect again
        # with uuid("5bd28737-eec8-410c-81c9-b5578a31344a") as case:

        with step("[Action] Close and Restart App"):
            main_page.close_and_restart_app()
        
        with step("[Action] Import media for local file (Test_Material_Folder + 'Mark_Clips/2.mp4') > Handle high definition dialog"):
            media_path = Test_Material_Folder + "Mark_Clips/2.mp4"
            media_room_page.import_media_file(media_path)
            media_room_page.handle_high_definition_dialog()
        
        with step("[Action] Insert media to selected track"):
            main_page.tips_area_insert_media_to_selected_track()
            # main_page.click(L.main.tips_area.btn_insert_to_selected_track)
            # time.sleep(DELAY_TIME * 2)

        with step("[Action] Enter [Effect Room] via hotkey"):
            main_page.tap_EffectRoom_hotkey()
        
        with step("[Action] Search library for ('Geometric Light Shadow')"):
            media_room_page.search_library("Geometric Light Shadow")
        
        with step("[Action] Drag media ('Geometric Light Shadow') to timeline playhead position"):
            main_page.drag_media_to_timeline_playhead_position("Geometric Light Shadow")
        
        with step("[Action] Set Timecode to ('00_00_20_19') at main page"):
            main_page.set_timeline_timecode("00_00_20_19")
        
        with step("[Verify] Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L230_timelinepreview.png') matches GT (Ground_Truth_Folder + 'L230_timelinepreview.png') with similarity 0.97"):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + "L230_timelinepreview.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "L230_timelinepreview.png", preview, similarity=0.97):
                # Similarity should be greater than 0.97 for matching preview
                assert False, "Preview does not match GT (L230_timelinepreview.png)! Similarity should > 0.97"
        
        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.content_pack
    @pytest.mark.search_libaray
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_6] Verify preview update after downloading a template')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_6(self):
        '''
        1. Clear Cache > Start APP
        2. Enter [Title Room] via hotkey
        3. Select ('Downloads') tag > Screenshot (locator=L.media_room.library_frame)
        4. Select ('Love') tag
        5. Download 2nd IAD template by click (L.media_room.library_listview.unit_collection_view_item_second) > Wait DELAY_TIME*3 for download
        6. Select ('Downloads') tag
        7. Check if the preview is updated after download an template (similarity<0.99)
        '''
        with step("[Action] Clear Cache > Start APP"):
            main_page.clear_cache()
            main_page.start_app()
        
        with step("[Action] Enter [Title Room] via hotkey"):
            main_page.tap_TitleRoom_hotkey()
        
        # [L236] 2.3 Title Room > Continue above case > Check sorting case
        # with uuid("6259470e-4fbf-4cb5-9748-2d2bb4b945c7") as case:

        with step("[Action] Select ('Downloads') tag > Screenshot (locator=L.media_room.library_frame)"):
            main_page.select_specific_tag('Downloads')
            downloads_snapshot = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Action] Select ('Love') tag"):
            main_page.select_specific_tag("Love")
        
        with step("[Action] Download 2nd IAD template by click (L.media_room.library_listview.unit_collection_view_item_second) > Wait DELAY_TIME*3 for download"):
            main_page.click(L.media_room.library_listview.unit_collection_view_item_second)
            time.sleep(DELAY_TIME * 3)
        
        with step("[Action] Select ('Downloads') tag"):
            main_page.select_specific_tag("Downloads")
        
        with step("[Verify] Check if the preview is updated after download an template (similarity<0.99)"):
            new_preview = main_page.snapshot(locator=L.media_room.library_frame)
            # Similarity should be less than 0.99 indicating the preview has changed
            if main_page.compare(downloads_snapshot, new_preview, similarity=0.99):
                assert False, "Preview did not update after download! Similarity should < 0.99"
        
        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.content_pack
    @pytest.mark.search_libaray
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_7] Verify preview update after downloading a template from YouTube')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_7(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_6') is run and passed
        1. Screenshot (locator=L.media_room.library_frame) in ('Downloads') tag
        2. Select ('YouTube') tag
        3. Download 2nd IAD template by click (L.media_room.library_listview.unit_collection_view_item_second) > Wait DELAY_TIME*3 for download
        4. Select ('Downloads') tag
        5. Check if the preview is updated after download an template (similarity<0.99)
        '''
        with step("[Action] Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_6') is run and passed"):
            self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_6')
        
        with step("[Action] Screenshot (locator=L.media_room.library_frame) in ('Downloads') tag"):
            downloads_snapshot = main_page.snapshot(locator=L.media_room.library_frame)

        with step("[Action] Select ('YouTube') tag"):
            main_page.select_specific_tag("YouTube")
        
        with step("[Action] Download 2nd IAD template by click (L.media_room.library_listview.unit_collection_view_item_second) > Wait DELAY_TIME*3 for download"):
            main_page.click(L.media_room.library_listview.unit_collection_view_item_second)
            time.sleep(DELAY_TIME * 3)
        
        with step("[Action] Select ('Downloads') tag"):
            main_page.select_specific_tag("Downloads")
        
        with step("[Verify] Check if the preview is updated after download an template (similarity<0.99)"):
            new_preview = main_page.snapshot(locator=L.media_room.library_frame)
            # Similarity should be less than 0.99 indicating the preview has changed
            if main_page.compare(downloads_snapshot, new_preview, similarity=0.99):
                assert False, "Preview did not update after download! Similarity should < 0.99"
        
        assert True



    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.content_pack
    @pytest.mark.search_libaray
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_8] Verify preview update after downloading an IAD template')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_8(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_7') is run and passed
        1. Screenshot (locator=L.media_room.library_frame) in ('Downloads') tag
        2. Select specific tag ('Holidays')
        3. Download 2nd IAD template by click (L.media_room.library_listview.unit_collection_view_item_second) > Wait DELAY_TIME*3 for download
        4. Select specific tag ('Downloads')
        5. Check if the preview is updated after download an template (similarity<0.99)
        '''
        with step("[Action] Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_7') is run and passed"):
            self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_7')
        
        with step("[Action] Screenshot (locator=L.media_room.library_frame) in ('Downloads') tag"):
            downloads_snapshot = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Action] Select specific tag ('Holidays')"):
            main_page.select_specific_tag("Holidays")
        
        with step("[Action] Download 2nd IAD template by click (L.media_room.library_listview.unit_collection_view_item_second) > Wait DELAY_TIME*3 for download"):
            main_page.click(L.media_room.library_listview.unit_collection_view_item_second)
            time.sleep(DELAY_TIME * 3)
        
        with step("[Action] Select specific tag ('Downloads')"):
            main_page.select_specific_tag("Downloads")
        
        with step("[Verify] Check if the preview is updated after download an template (similarity<0.99)"):
            new_preview = main_page.snapshot(locator=L.media_room.library_frame)
            # Similarity should be less than 0.99 indicating the preview has changed
            if main_page.compare(downloads_snapshot, new_preview, similarity=0.99):
                assert False, "Preview did not update after download! Similarity should < 0.99"
        
        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.content_pack
    @pytest.mark.search_libaray
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_9] Verify preview update after downloading an IAD template for (Lower Third)')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_9(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_8') is run and passed
        1. Screenshot (locator=L.media_room.library_frame) in ('Downloads') tag
        2. Select specific tag ('Lower Third')
        3. Download 2nd IAD template by click (L.media_room.library_listview.unit_collection_view_item_second) > Wait DELAY_TIME*3 for download
        4. Select specific tag ('Downloads')
        5. Check if the preview is updated after download an template (similarity<0.99)
        '''
        with step("[Action] Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_8') is run and passed"):
            self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_8')
        
        with step("[Action] Screenshot (locator=L.media_room.library_frame) in ('Downloads') tag"):
            downloads_snapshot = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Action] Select specific tag ('Lower Third')"):
            main_page.select_specific_tag("Lower Third")
        
        with step("[Action] Download 2nd IAD template by click (L.media_room.library_listview.unit_collection_view_item_second) > Wait DELAY_TIME*3 for download"):
            main_page.click(L.media_room.library_listview.unit_collection_view_item_second)
            time.sleep(DELAY_TIME * 3)
        
        with step("[Action] Select specific tag ('Downloads')"):
            main_page.select_specific_tag("Downloads")
        
        with step("[Verify] Check if the preview is updated after download an template (similarity<0.99)"):
            new_preview = main_page.snapshot(locator=L.media_room.library_frame)
            # Similarity should be less than 0.99 indicating the preview has changed
            if main_page.compare(downloads_snapshot, new_preview, similarity=0.99):
                assert False, "Preview did not update after download! Similarity should < 0.99"
        
        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.content_pack
    @pytest.mark.search_libaray
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_10] Verify preview update after sort by [Created Date]')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_10(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_9') is run and passed
        1. Screenshot (locator=L.media_room.library_frame)
        2. Sort [library menu] by [Created Date]
        3. Check preview is updated after sort by [Created Date] (Similarity should <0.94)
        '''
        with step("[Action] Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_9') is run and passed"):
            self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_9')
        
        with step("[Action] Screenshot (locator=L.media_room.library_frame)"):
            initial_snapshot = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Action] Sort [library menu] by [Created Date]"):
            pip_room_page.sort_by_created_date()
        
        with step("[Verify] Check preview is updated after sort by [Created Date] (Similarity should <0.94)"):
            updated_snapshot = main_page.snapshot(locator=L.media_room.library_frame)
            # Similarity should be less than 0.94 indicating the preview has changed
            if main_page.compare(initial_snapshot, updated_snapshot, similarity=0.94):
                assert False, "Preview did not update after sort! Similarity should <0.94"
        
        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.transition_room
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_11] Verify preview difference between [Effect Room] and [Transition Room] for (My Favorites)')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_11(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_10') is run and passed
        1. Select Library Room category ('My Favorites') in [Effect Room]
        2. Screenshot (locator=L.base.Area.library_icon_view)
        3. Enter [Transition Room] via hotkey
        4. Select Library Room category ('My Favorites') in [Transition Room]
        5. Check [Details View] button (L.main.btn_library_details_view) is not shown in ('My Favorites') category
        6. Check ('My Favorites') preview is different in [Effect Room] and [Transition Room] (similarity should < 0.99)
        '''

        self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_10')
        
        # [L241] 2.3 Transition Room > Check Downloaded, My Favorites category
        # with uuid("fd0c7598-ac0c-403a-8c4a-4f0ad5da5d03") as case:

        with step("[Action] Select Library Room category ('My Favorites') in [Effect Room]"):
            if not main_page.select_LibraryRoom_category("My Favorites"):
                assert False, "Failed to select Library Room category ('My Favorites') in [Effect Room]"
        
        with step("[Action] Screenshot (locator=L.base.Area.library_icon_view)"):
            effect_room_snapshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
        
        with step("[Action] Enter [Transition Room] via hotkey"):
            main_page.tap_TransitionRoom_hotkey()
        
        with step("[Action] Select Library Room category ('My Favorites') in [Transition Room]"):
            if not main_page.select_LibraryRoom_category("My Favorites"):
                assert False, "Failed to select Library Room category ('My Favorites') in [Transition Room]"

        with step("[Verify] Check [Details View] button (L.main.btn_library_details_view) is not shown in ('My Favorites') category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "[Detail view] icon is shown in [Transition Room] for category ('My Favorites')!"
        
        with step("[Verify] Check ('My Favorites') preview is different in [Effect Room] and [Transition Room] (similarity should < 0.99)"):
            transition_room_snapshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
            # Similarity should be less than 0.99 indicating a different preview between the two rooms
            if main_page.compare(effect_room_snapshot, transition_room_snapshot, similarity=0.99):
                assert False, "Preview did not update between [Effect Room] and [Transition Room]! Similarity should < 0.99"
        
        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.transition_room
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_12] Verify Downloads category count=0 in Transition Room')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_12(self):
        """
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_11') is run and passed
        1. Select Library Room category ('Downloads')
        2. Check [Details View] button (L.main.btn_library_details_view) is shown in ("Downloads") category
        3. Check Downloads count is (0) by checking main_page.exist(L.transition_room.explore_view_region.Downloads_category).AXValue
        """
        dependency_test = "test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_11"
        self.ensure_dependency(dependency_test)

        with step("[Action] Select Library Room category ('Downloads')"):
            main_page.select_LibraryRoom_category('Downloads')

        with step("[Verify] Check [Details View] button (L.main.btn_library_details_view) is shown in ('Downloads') category"):
            if not main_page.exist(L.main.btn_library_details_view):
                assert False, "The [Details View] button does not exist in Downloads category!"

        with step("[Verify] Check Downloads count is (0) by checking main_page.exist(L.transition_room.explore_view_region.Downloads_category).AXValue"):
            downloads_count = main_page.exist(L.transition_room.explore_view_region.Downloads_category).AXValue
            if downloads_count != 0:
                assert False, f"Expected Downloads count to be (0), but got ({downloads_count})."

        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @pytest.mark.search_libaray
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_13] Verify preview update after downloading an IAD template from (Glitch) tag')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_13(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_12') is run and passed
        1. Screenshot (L.base.Area.library_icon_view) for empty ("Downloads") category
        2. Select specific tag with name ('Glitch')
        3. Drag [Scroll Bar] in [Transition Room] with (0)
        4. Click to download 2nd IAD template (L.media_room.library_listview.unit_collection_view_item_second) > Wait DELAY_TIME*3 for download
        5. Select specific tag with name ('Downloads')
        6. Check if the preview is updated after download an template (similarity<0.7)
        '''

        self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_12')
        
        with step("[Action] Screenshot (L.base.Area.library_icon_view) for empty (\"Downloads\") category"):
            downloads_snapshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
        
        # [L242] 2.3 Transition Room > Continue above case > Check sorting case
        # with uuid("8e104e18-b0d0-46bb-b53d-9600050b24c9") as case:

        with step("[Action] Select specific tag with name ('Glitch')"):
            main_page.select_specific_tag("Glitch")
        
        with step("[Action] Drag [Scroll Bar] in [Transition Room] with (0)"):
            transition_room_page.drag_TransitionRoom_Scroll_Bar(0)
        
        with step("[Action] Click to download 2nd IAD template (L.media_room.library_listview.unit_collection_view_item_second) > Wait DELAY_TIME*3 for download"):
            main_page.click(L.media_room.library_listview.unit_collection_view_item_second)
            time.sleep(DELAY_TIME * 3)
        
        with step("[Action] Select specific tag with name ('Downloads')"):
            main_page.select_specific_tag("Downloads")
        
        with step("[Verify] Check if the preview is updated after download an template (similarity<0.7)"):
            new_snapshot = main_page.snapshot(locator=L.base.Area.library_icon_view)
            # Similarity should be less than 0.7 indicating the preview has updated noticeably
            if main_page.compare(downloads_snapshot, new_snapshot, similarity=0.7):
                assert False, "Preview did not update after download! Similarity should < 0.7"
        
        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @pytest.mark.search_libaray
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_14] Verify preview update after sorting [Library View] by [Name]')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_14(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_13') is run and passed
        1. Screenshot (locator=L.media_room.library_frame) for original sort
        2. Sort [Library View] by [Name]
        3. Check preview is updated after Sort [Library View] by [Name] with similarity < 0.7
        '''

        self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_13')
        
        with step("[Action] Screenshot (locator=L.media_room.library_frame) for original sort"):
            original_snapshot = main_page.snapshot(locator=L.media_room.library_frame)
        
        with step("[Action] Sort [Library View] by [Name]"):
            pip_room_page.sort_by_name()
        
        with step("[Verify] Check preview is updated after Sort [Library View] by [Name] with similarity < 0.7"):
            updated_snapshot = main_page.snapshot(locator=L.media_room.library_frame)
            # Similarity should be less than 0.7 indicating the preview has updated
            if main_page.compare(original_snapshot, updated_snapshot, similarity=0.7):
                assert False, "Preview did not update after sorting by [Name]! Similarity should < 0.7"
        
        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_15] Verify no [Detail View] icon for IAD category in Popular, Brush, and Slideshow')
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_15(self):
        '''
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_13') is run and passed
        1. Select Library Room category ('Popular')
        2. Check there is no [Detail View] icon (L.main.btn_library_details_view) for IAD category
        3. Select Library Room category ('Brush')
        4. Check there is no [Detail View] icon (L.main.btn_library_details_view) for IAD category
        5. Select Library Room category ('Slideshow')
        6. Check there is no [Detail View] icon (L.main.btn_library_details_view) for IAD category
        '''

        self.ensure_dependency('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_14')

        # [L243] 2.3 Transition Room > Check other IAD category > remove "Detail view" icon
        # with uuid("f2373b47-3df6-4a24-b2ce-9f48cf13b534") as case:

        with step("[Action] Select Library Room category ('Popular')"):
            if not main_page.select_LibraryRoom_category("Popular"):
                assert False, "Failed to select Library Room category ('Popular')"
        
        with step("[Verify] Check there is no [Detail View] icon (L.main.btn_library_details_view) for IAD category"):
            if main_page.exist(L.main.btn_library_details_view):
                assert False, "Detail View icon exists for IAD category in 'Popular'"
        
        with step("[Action] Select Library Room category ('Brush')"):
            if not main_page.select_LibraryRoom_category("Brush"):
                assert False, "Failed to select Library Room category ('Brush')"
        
        with step("[Verify] Check there is no [Detail View] icon (L.main.btn_library_details_view) for IAD category"):
            if main_page.exist(L.main.btn_library_details_view):
                assert False, "Detail View icon exists for IAD category in 'Brush'"
        
        with step("[Action] Select Library Room category ('Slideshow')"):
            if not main_page.select_LibraryRoom_category("Slideshow"):
                assert False, "Failed to select Library Room category ('Slideshow')"
        
        with step("[Verify] Check there is no [Detail View] icon (L.main.btn_library_details_view) for IAD category"):
            if main_page.exist(L.main.btn_library_details_view):
                assert False, "Detail View icon exists for IAD category in 'Slideshow'"
        
        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @exception_screenshot
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_16] Switch category, and check preview is updated')
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_16(self):
        ''' 
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_15') is run and passed
        1. Screenshot (locator=L.media_room.library_frame) for category ('Slideshow')
        2. Select Library Room category ('Speed Blur')
        3. Check update is true after switching to ('Speed Blur') category with similarity <0.94 and >0.7
        '''
        dependency_test = "test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_15"
        self.ensure_dependency(dependency_test)

        # [L244] 2.3 Transition Room > IAD category > Check sorting rule
        # with uuid("bf9fb6de-faa0-4c71-ac66-289e9dd0ed13") as case:

        with step("[Action] Screenshot (locator=L.media_room.library_frame) for category ('Slideshow')"):
            screenshot_slideshow = main_page.snapshot(locator=L.media_room.library_frame)

        with step("[Action] Select Library Room category ('Speed Blur')"):
            if not main_page.select_LibraryRoom_category("Speed Blur"):
                assert False, "Failed to select Library Room category 'Speed Blur'"

        with step("[Verify] Check update is true after switching to ('Speed Blur') category with similarity <0.94 and >0.7"):
            screenshot_speed_blur = main_page.snapshot(locator=L.media_room.library_frame)
            if not main_page.compare(screenshot_slideshow, screenshot_speed_blur, similarity=0.94):
                # Similarity should be greater than 0.7 but less than 0.94
                assert False, "Similarity is not in the expected range! Similarity should be < 0.94"

            if main_page.compare(screenshot_slideshow, screenshot_speed_blur, similarity=0.7):
                # Similarity should be greater than 0.7 but less than 0.94
                assert False, "Similarity is not in the expected range! Similarity should be >0.7"
        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @pytest.mark.import_media
    @exception_screenshot
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_17] Import media and apply Transition template to timeline')
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_17(self):
        ''' 
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_16') is run and passed
        1. Enter Room (Media)(0)
        2. Import media file (Test_Material_Folder + 'Mark_Clips/2.mp4')
        3. Insert media to selected track
        4. Enter [Transition Room] via hotkey
        5. Set timeline timecode ('00_00_09_24') at main page
        6. Enter [Split] via hotkey
        7. Select Library Room category ('Graphic')
        8. Search library ('Sparkle Transitions 03')
        9. Drag media ('Sparkle Transitions 03') to timeline playhead position
        10. Click timeline track (2)
        11. Set timeline timecode ('00_00_09_20') at main page
        12. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L218_transition.png') matches GT (Ground_Truth_Folder + 'L218_transition.png') with similarity 0.95
        '''
        dependency_test = "test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_16"
        self.ensure_dependency(dependency_test)

        # [L218] 2.3 Transition Room > Add each kind of template to timeline & Preview
        # with uuid("9153adb7-af17-4dd7-a2f2-c11f780b5793") as case:

        with step("[Action] Enter Room (Media)(0)"):
            main_page.enter_room(0)

        with step("[Action] Import media file (Test_Material_Folder + 'Mark_Clips/2.mp4')"):
            media_room_page.import_media_file(Test_Material_Folder + 'Mark_Clips/2.mp4')

        with step("[Action] Insert media to selected track"):
            main_page.tips_area_insert_media_to_selected_track()

        with step("[Action] Enter [Transition Room] via hotkey"):
            main_page.tap_TransitionRoom_hotkey()

        with step("[Action] Set timeline timecode ('00_00_09_24') at main page"):
            main_page.set_timeline_timecode('00_00_09_24')

        with step("[Action] Enter [Split] via hotkey"):
            main_page.tap_Split_hotkey()

        with step("[Action] Select Library Room category ('Graphic')"):
            main_page.select_LibraryRoom_category('Graphic')

        with step("[Action] Search library ('Sparkle Transitions 03')"):
            media_room_page.search_library('Sparkle Transitions 03')

        with step("[Action] Drag media ('Sparkle Transitions 03') to timeline playhead position"):
            main_page.drag_media_to_timeline_playhead_position('Sparkle Transitions 03', track_no=2)

        with step("[Action] Click timeline track (2)"):
            main_page.timeline_select_track(2)

        with step("[Action] Set timeline timecode ('00_00_09_20') at main page"):
            main_page.set_timeline_timecode('00_00_09_20')

        with step("[Verify] Check preview matches GT (L218_transition.png) with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L218_transition.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L218_transition.png', preview_snapshot, similarity=0.95):
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match GT (L218_transition.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.transition_room
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @exception_screenshot
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_18] Search (.) in library in [Transition] Room')
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_18(self):
        ''' 
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_17') is run and passed
        1. Select Library Room category ('All Content')
        2. Search library ('.')
        3. Check no results (L.media_room.txt_no_results_for_dot) for '.' in library
        4. Click [Close] to back to Launcher
        5. Handle [Do you want to save changes] dialog with option [No]
        '''
        dependency_test = "test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_17"
        self.ensure_dependency(dependency_test)

        # [L246] 2.3 Transition Room > Input "." character
        # with uuid("84a0952f-506c-4b6a-b8e3-de72f85add62") as case:

        with step("[Action] Select Library Room category ('All Content')"):
            main_page.select_LibraryRoom_category('All Content')

        with step("[Action] Search library ('.')"):
            media_room_page.search_library('.')

        with step("[Verify] Check no results (L.media_room.txt_no_results_for_dot) for '.' in library"):
            if not main_page.is_exist(L.media_room.txt_no_results_for_dot):
                assert False, "No results text for '.' not found!"

        with step("[Action] Click [Close] to back to Launcher"):
            main_page.click_close_then_back_to_launcher()

        with step("[Action] Handle [Do you want to save changes] dialog with option [No]"):
            main_page.handle_aspect_ratio_conflict(option='no')

        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.launcher
    @pytest.mark.ai_background_remover
    @exception_screenshot
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_19] Close import dialog and verify title')
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_19(self):
        ''' 
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_18') is run and passed
        1. Click on btn (AI Background Remover)(L.base.launcher_window.btn_ai_bg_remover) on launcher
        2. Verify title is 'AI Background Remover'
        3. Press [ESC] to close import dialog
        '''
        dependency_test = "test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_18"
        self.ensure_dependency(dependency_test)

        # [L31] 1.3 New Launcher > Showcase > AI Background Remover > Single click on banner area
        # with uuid("e4e8c649-b90e-455b-9cf2-53ef9de9402f") as case:

        with step("[Action] Click [Close] button to back to launcher"):
            main_page.click_close_then_back_to_launcher()

        with step("[Action] Click on btn (AI Background Remover) on launcher"):
            main_page.click(L.base.launcher_window.btn_ai_bg_remover)

        with step("[Verify] Check that show case title is 'AI Background Remover'"):
            target = main_page.exist(L.base.launcher_window.show_case_title)
            if target.AXTitle != "AI Background Remover":
                assert False, f"Show case title does not match expected value! Expected 'AI Background Remover', got '{target.AXTitle}'"

        with step("[Action] Press [ESC] to close import dialog"):
            main_page.press_esc_key()

        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.launch
    @pytest.mark.effect_room
    @exception_screenshot
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_20] Check [Hot] icon shows on ("Popular") tag in [Effect Room]')
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_20(self):
        ''' 
        1. Clear cache > Start App
        2. Enter [Effect Room] via hotkey
        3. Find the specific tag ('Popular') and return tag name
        4. Check preview (file_name=Auto_Ground_Truth_Folder + 'L224_hot_icon.png', w=new_w, x=new_x, y=new_y, h=new_h) matches (Ground_Truth_Folder + 'L224_hot_icon.png', img_hot_icon, similarity=0.9)
        '''

        with step("[Action] Start App"):
            main_page.clear_cache()
            main_page.start_app()

        with step("[Action] Enter [Effect Room] via hotkey"):
            main_page.tap_EffectRoom_hotkey()

        # [L224] 2.3 Effect Room > Check hot icon
        # with uuid("c48e2e7c-2bea-48ba-8d6c-c83d02f537b9") as case:

        with step("[Action] Find the specific tag ('Popular') and return tag object"):
            target_object = effect_room_page.find_specific_tag_return_tag('Popular')
            x, y = target_object.AXPosition
            w, h = target_object.AXSize

            new_x = x
            new_y = y
            new_w = h + 10
            new_h = h

        with step("[Verify] Check preview matches GT (L224_hot_icon.png) with similarity 0.9"):
            preview_snapshot = main_page.snapshot(
                file_name=Auto_Ground_Truth_Folder + 'L224_hot_icon.png',
                w=new_w, x=new_x, y=new_y, h=new_h
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L224_hot_icon.png', preview_snapshot, similarity=0.9
            )
            if not check_preview:
                assert False, "Preview does not match Ground Truth (L224_hot_icon.png)! Similarity should > 0.9"

        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.background_music
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @exception_screenshot
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_21] Check [Download OK] Icon before/ after downloading background music')
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_21(self):
        ''' 
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_20') is run and passed
        1. Enter zoom (media)(0)
        2. Enter [Background Music (meta)] Category
        3. Select specific category in meta by name ('Asian')
        4. Search library ('Rindu')
        5. Check [Download OK] icon is not shown by is_not_exist(L.media_room.scroll_area.table_view_text_field_download_ok)
        6. Click [Download] icon (L.media_room.scroll_area.table_view_text_field_download_button) and wait DELAY_TIME*5 for downloading
        7. Check [Download OK] icon is not shown after downloading by is_not_exist(L.media_room.scroll_area.table_view_text_field_download_ok)
        '''
        # [L157] 2.1 Media Room > BGM (Meta) > Download by click [Download] icon
        # with uuid("7b599fbd-6ae8-460b-a41d-0513af82027c") as case:

        dependency_test = "test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_20"
        self.ensure_dependency(dependency_test)

        with step("[Action] Enter zoom (media)(0)"):
            main_page.enter_room(0)

        with step("[Action] Enter [Background Music (meta)] Category"):
            media_room_page.enter_background_music()

        with step("[Action] Select specific category in meta by name ('Asian')"):
            media_room_page.select_specific_category_in_meta('Asian')

        with step("[Action] Search library ('Rindu')"):
            media_room_page.search_library('Rindu')

        with step("[Verify] Check [Download OK] icon is not shown"):
            if not main_page.is_not_exist(L.media_room.scroll_area.table_view_text_field_download_ok):
                assert False, "[Download OK] icon should not be shown before downloading!"

        with step("[Action] Click [Download] icon and wait for downloading"):
            main_page.click(L.media_room.scroll_area.table_view_text_field_download_button, times=1)
            time.sleep(DELAY_TIME * 5)

        with step("[Verify] Check [Download OK] icon is not shown after downloading"):
            if main_page.is_exist(L.media_room.scroll_area.table_view_text_field_download_ok):
                assert False, "[Download OK] icon should not be shown after downloading!"

        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @exception_screenshot
    @pytest.mark.name('[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_22] Verify Detail View icon visibility in My Favorites')
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_22(self):
        ''' 
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_21') is run and passed
        1. Enter [Effect Room] via hotkey
        2. Select Library Room category ('My Favorites')
        3. Check [Detail View] icon is not shown (L.main.btn_library_details_view) in ('My Favorites') category
        '''
        dependency_test = "test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_21"
        self.ensure_dependency(dependency_test)

        # [L247] 2.3 Effect Room > Check My Favorites category > Remove detail view
        # with uuid("4a20ca5c-a67a-42a6-8add-d5ba9c15aefb") as case:

        with step("[Action] Enter [Effect Room] via hotkey"):
            main_page.tap_EffectRoom_hotkey()

        with step("[Action] Select Library Room category ('My Favorites')"):
            main_page.select_LibraryRoom_category("My Favorites")

        with step("[Verify] Check [Detail View] icon is not shown in 'My Favorites' category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                assert False, "[Detail View] icon should not be shown in 'My Favorites' category!"

        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.effect_room
    @pytest.mark.name("[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_23] Verify detail view icon absence in Library Room categories and close to launcher")
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_23(self):
        """
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_22') is run and passed
        1. Select Library Room category ('Blending Effect')
        2. Check [Detail View] icon is not shown (L.main.btn_library_details_view) in ('Blending Effect') category
        3. Select Library Room category ('Body Effect')
        4. Check [Detail View] icon is not shown (L.main.btn_library_details_view) in ('Body Effect') category
        5. Select Library Room category ('Color LUT')
        6. Check [Detail View] icon is not shown (L.main.btn_library_details_view) in ('Color LUT') category
        7. Click [Close] button to back to launcher
        """
        dependency_test = "test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_22"
        self.ensure_dependency(dependency_test)

        # [L249] 2.3 Effect Room > Check IAD category > Remove detail view
        # with uuid("ff0733c7-eccf-4188-8c55-7f15164f6a0d") as case:

        with step("Select Library Room category ('Blending Effect')"):
            main_page.select_LibraryRoom_category('Blending Effect')

        with step("Check [Detail View] icon is not shown (L.main.btn_library_details_view) in ('Blending Effect') category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                # [Detail View] icon should not exist in ('Blending Effect') category
                assert False, "[Detail View] icon is shown in ('Blending Effect') category"

        with step("Select Library Room category ('Body Effect')"):
            main_page.select_LibraryRoom_category('Body Effect')

        with step("Check [Detail View] icon is not shown (L.main.btn_library_details_view) in ('Body Effect') category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                # [Detail View] icon should not exist in ('Body Effect') category
                assert False, "[Detail View] icon is shown in ('Body Effect') category"

        with step("Select Library Room category ('Color LUT')"):
            main_page.select_LibraryRoom_category('Color LUT')

        with step("Check [Detail View] icon is not shown (L.main.btn_library_details_view) in ('Color LUT') category"):
            if main_page.is_exist(L.main.btn_library_details_view):
                # [Detail View] icon should not exist in ('Color LUT') category
                assert False, "[Detail View] icon is shown in ('Color LUT') category"

        with step("Click [Close] button to back to launcher"):
            main_page.click_close_then_back_to_launcher()

        assert True

    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.launcher
    @pytest.mark.video_stabilizer
    @pytest.mark.name("[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_24] Hover on (Video Stabilizer) button, click [Show Case Area], verify import dialog title and press [ESC]")
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_24(self):
        """
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_23') is run and passed
        1. Hover on (Video Stabilizer) button (L.base.launcher_window.btn_video_stabilizer) on launcher
        2. Click [Show Case Area] (L.base.launcher_window.show_case_video_area)
        3. Verify the title of the import dialog is ('Video Stabilizer')
        4. Press [ESC] key to close the import dialog
        """
        dependency_test = "test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_23"
        self.ensure_dependency(dependency_test)

        # [L19] 1.3 New Launcher > Showcase > Video Stabilizer > Single click on banner area
        # with uuid("3650a1e8-965e-4079-b366-653374490c93") as case:

        with step("[Action] Hover on (Video Stabilizer) button (L.base.launcher_window.btn_video_stabilizer) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_video_stabilizer)

        with step("[Action] Click [Show Case Area] (L.base.launcher_window.show_case_video_area)"):
            main_page.click(L.base.launcher_window.show_case_video_area)

        with step("[Verify] Verify the title of the import dialog is ('Video Stabilizer')"):
            dialog = main_page.exist(L.base.launcher_window.import_dialog)
            if dialog.AXTitle != 'Video Stabilizer':
                assert False, f"Import dialog title does not match expected value! Expected ('Video Stabilizer'), got ({dialog.AXTitle})"

        with step("[Action] Press [ESC] key to close the import dialog"):
            main_page.press_esc_key()

        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.launcher
    @pytest.mark.audio_denoise
    @pytest.mark.name("[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_25] Hover on (AI Audio Denoise) button, click [Show Case Area], verify import dialog title and press [ESC]")
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_25(self):
        """
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_24') is run and passed
        1. Hover on (AI Audio Denoise) button (L.base.launcher_window.btn_audio_denoise) on launcher
        2. Click [Show Case Area] (L.base.launcher_window.show_case_video_area)
        3. Verify the title of the import dialog is ('AI Audio Denoise')
        4. Press [ESC] key to close the import dialog
        """
        dependency_test = "test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_24"
        self.ensure_dependency(dependency_test)

        # [L34] 1.3 New Launcher > Showcase > AI Audio Denoise > Single click on banner area
        # with uuid("d96086ba-e995-428d-96d2-e9ca83d86a8a") as case:

        with step("[Action] Hover on (AI Audio Denoise) button (L.base.launcher_window.btn_audio_denoise) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_audio_denoise)

        with step("[Action] Click [Show Case Area] (L.base.launcher_window.show_case_video_area)"):
            main_page.click(L.base.launcher_window.show_case_video_area)

        with step("[Verify] Verify the title of the import dialog is ('AI Audio Denoise')"):
            dialog = main_page.exist(L.base.launcher_window.import_dialog)
            if dialog.AXTitle != 'AI Audio Denoise':
                # Title similarity should exactly match ('AI Audio Denoise')
                assert False, f"Import dialog title does not match expected value! Expected ('AI Audio Denoise'), got ({dialog.AXTitle})"

        with step("[Action] Press [ESC] key to close the import dialog"):
            main_page.press_esc_key()

        assert True


    @pytest.mark.effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func
    @pytest.mark.launcher
    @pytest.mark.ai_wind_remover
    @pytest.mark.name("[test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_26] Hover on (AI Wind Removal) button, click [Show Case Area], verify import dialog title and press [ESC]")
    @exception_screenshot
    def test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_26(self):
        """
        0. Ensure the dependency test ('test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_25') is run and passed
        1. Hover on (AI Wind Removal) button (L.base.launcher_window.btn_wind_removal) on launcher
        2. Click [Show Case Area] (L.base.launcher_window.show_case_video_area)
        3. Verify the title of the import dialog is ('AI Wind Removal')
        4. Press [ESC] key to close the import dialog
        """
        dependency_test = "test_effect_n_transition_n_bg_music_n_launcher_category_searching_n_import_dlg_func_30_25"
        self.ensure_dependency(dependency_test)

        # [L25] 1.3 New Launcher > Showcase > AI Wind Removal > Single click on banner area
        # with uuid("b8a06d0a-f9b4-48c8-b390-8a6f15ef5032") as case:

        with step("[Action] Hover on (AI Wind Removal) button (L.base.launcher_window.btn_wind_removal) on launcher"):
            main_page.hover_launcher_btn(L.base.launcher_window.btn_wind_removal)

        with step("[Action] Click [Show Case Area] (L.base.launcher_window.show_case_video_area)"):
            main_page.click(L.base.launcher_window.show_case_video_area)

        with step("[Verify] Verify the title of the import dialog is ('AI Wind Removal')"):
            dialog = main_page.exist(L.base.launcher_window.import_dialog)
            if dialog.AXTitle != 'AI Wind Removal':
                # Title similarity should exactly match ('AI Wind Removal')
                assert False, f"Import dialog title does not match expected value! Expected ('AI Wind Removal'), got ({dialog.AXTitle})"

        with step("[Action] Press [ESC] key to close the import dialog"):
            main_page.press_esc_key()

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.launch
    @pytest.mark.essential
    @pytest.mark.launcher
    @pytest.mark.ai_speech_to_text
    @pytest.mark.name("[test_essential_premium_func_31_1] Verify [AI Speech to Text] dialog behavior on launcher")
    @exception_screenshot
    def test_essential_premium_func_31_1(self):
        """
        1. Clear login account cache > Clear [AI Module] files > Clear cache > launch APP > wait DELAY_TIMES*3
        2. Click [Launch Free version] button on [Ess dialog] and check result is True
        3. Check [AI Speech to Text] button is on launcher by is_not_exist(L.base.launcher_window.btn_STT, timeout=6)
        4. Click [AI Speech to Text] button on launcher
        5. Check [AI Speech to Text] dialog title is 'AI Speech to Text' by target.AXTitle == 'AI Speech to Text'
        """
        with step("[Action] Clear login account cache > Clear [AI Module] files > Clear cache > launch APP > wait DELAY_TIMES*3"):
            main_page.clear_log_in()
            main_page.clear_AI_module()
            main_page.clear_cache()
            main_page.launch_app()
            time.sleep(DELAY_TIME * 3)

        with step("[Action] Click [Launch Free version] button on [Ess dialog] and check result is True"):
            result = main_page.launch_free_version()
            if not result:
                assert False, "Unable to click [Launcher Free Version] on [Ess dialog]"

        # [L80] 1.3 New Launcher > Tool area > AI Speech to Text > Single click Module on button
        # with uuid("bd309792-2782-4f4b-8511-a46c5acad285") as case:

        with step("[Verify] Check [AI Speech to Text] button is on launcher by is_not_exist(L.base.launcher_window.btn_STT, timeout=6)"):
            if main_page.is_not_exist(L.base.launcher_window.btn_STT, timeout=6):
                assert False, "[AI Speech to Text] button exists when it should not"

        with step("[Action] Click [AI Speech to Text] button on launcher"):
            main_page.click(L.base.launcher_window.btn_STT)

        with step("[Verify] Check [AI Speech to Text] dialog title is 'AI Speech to Text' by target.AXTitle == 'AI Speech to Text'"):
            target = main_page.exist(L.base.launcher_window.import_dialog, timeout=9)
            if target.AXTitle != 'AI Speech to Text':
                assert False, f"Dialog title does not match expected value! Expected 'AI Speech to Text', got {target.AXTitle}"

        assert True


    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.launcher
    @pytest.mark.ai_speech_to_text
    @pytest.mark.import_media
    @pytest.mark.name("[test_essential_premium_func_31_2] Verify [AI Speech to Text] bubble and checkbox on launcher after media import")
    @exception_screenshot
    def test_essential_premium_func_31_2(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_1') is run and passed
        1. Click [Import] button on [AI Module Import dialog] on Launcher and import media (Test_Material_Folder + 'Mark_Clips/2.mp4')
        2. Check [AI Speech to Text] bubble is shown after import video by is_exist(L.subtitle_room.library_menu.bb_first_time, timeout=8) and check result is True
        3. Check [AI Speech to Text] checkbox (L.subtitle_room.library_menu.btn_speech_to_text) is exist
        """
        dependency_test = "test_essential_premium_func_31_1"
        self.ensure_dependency(dependency_test)

        # [L81] 1.3 New Launcher > Tool area > AI Speech to Text > Select custom video in import dialog
        # with uuid("a9469954-7145-4c5b-a188-440a3f083979") as case:

        with step("[Action] Click [Import] button on [AI Module Import dialog] on Launcher and import media (Test_Material_Folder + 'Mark_Clips/2.mp4')"):
            main_page.click_to_import_media_when_open_AI_import_dialog(Test_Material_Folder + "Mark_Clips/2.mp4")

        # [L82] 1.3 New Launcher > Tool area > AI Speech to Text > Select custom video in import dialog
        # with uuid("25fad442-9d95-4a28-8c45-a4315eb7162d") as case:

        with step("[Verify] Check [AI Speech to Text] bubble is shown after import video by is_exist(L.subtitle_room.library_menu.bb_first_time, timeout=8) and check result is True"):
            if not main_page.is_exist(L.subtitle_room.library_menu.bb_first_time, timeout=8):
                assert False, "[AI Speech to Text] bubble is not shown after import video"

        with step("[Verify] Check [AI Speech to Text] checkbox (L.subtitle_room.library_menu.btn_speech_to_text) is exist"):
            if not main_page.is_exist(L.subtitle_room.library_menu.btn_speech_to_text, timeout=8):
                assert False, "[AI Speech to Text] checkbox does not exist"

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.ai_speech_to_text
    @pytest.mark.name("[test_essential_premium_func_31_3] Verify [AI Speech to Text] effect and dialog behavior")
    @exception_screenshot
    def test_essential_premium_func_31_3(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_2') is run and passed
        1. Click [Speech To Text] button (L.subtitle_room.library_menu.btn_speech_to_text) to apply effect
        2. Check [Premium] Icon (L.base.try_for_free_dialog.icon_premium) is shown
        3. Check [Try for Free] dialog (L.base.try_for_free_dialog.btn_try_once) is shown
        4. Click [Try for Free] button
        5. Check [AI Speech to Text] dialog (L.subtitle_room.speech_to_text_window.main_window) is shown
        6. Press [ESC] key to close the dialog
        """
        dependency_test = "test_essential_premium_func_31_2"
        self.ensure_dependency(dependency_test)

        # [L83] 1.3 New Launcher > Tool area > AI Speech to Text > [Premium feature mechanism: Try Before Buy]: Try to enable the function
        # with uuid("3d63e98e-19e7-4dda-98bc-e728d923689d") as case:

        with step("[Action] Click [Speech To Text] button (L.subtitle_room.library_menu.btn_speech_to_text) to apply effect"):
            main_page.click(L.subtitle_room.library_menu.btn_speech_to_text)

        with step("[Verify] Check [Premium] Icon (L.base.try_for_free_dialog.icon_premium) is shown"):
            if not main_page.is_exist(L.base.try_for_free_dialog.icon_premium):
                assert False, "[Premium] Icon is not shown"

        with step("[Verify] Check [Try for Free] dialog (L.base.try_for_free_dialog.btn_try_once) is shown"):
            if not main_page.is_exist(L.base.try_for_free_dialog.btn_try_once):
                assert False, "[Try for Free] dialog is not shown"

        with step("[Action] Click [Try for Free] button"):
            main_page.click(L.base.try_for_free_dialog.btn_try_once)

        with step("[Verify] Check [AI Speech to Text] dialog (L.subtitle_room.speech_to_text_window.main_window) is shown"):
            if not main_page.is_exist(L.subtitle_room.speech_to_text_window.main_window):
                assert False, "[AI Speech to Text] dialog is not shown"

        with step("[Action] Press [ESC] key to close the dialog"):
            main_page.press_esc_key()

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.whats_new
    @pytest.mark.name("[test_essential_premium_func_31_4] Verify [What's New] dialog and handle save changes dialog")
    @exception_screenshot
    def test_essential_premium_func_31_4(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_3') is run and passed
        1. Click [What's New] button (L.main.btn_whats_new_update) on top bar
        2. Check [What's New] dialog (L.main.dlg_whats_name_title) is shown
        3. Close the dialog by press [ESC] key
        4. Click [Close] button to back to launcher
        5. Handle [Do you want to save changes] dialog with option [No]
        """
        dependency_test = "test_essential_premium_func_31_3"
        self.ensure_dependency(dependency_test)

        # [L88] 1.4 Content notification > Click "New Advertising" icon on caption bar
        # with uuid("bc48f6fb-a3a7-41c7-938e-bf8e07fd7a7d") as case:

        with step("[Action] Click [What's New] button (L.main.btn_whats_new_update) on top bar"):
            main_page.click(L.main.btn_whats_new_update)

        with step("[Verify] Check [What's New] dialog (L.main.dlg_whats_name_title) is shown"):
            if not main_page.exist(L.main.dlg_whats_name_title):
                assert False, "[What's New] dialog is not shown"

        with step("[Action] Close the dialog by press [ESC] key"):
            main_page.press_esc_key()

        with step("[Action] Click [Close] button to back to launcher"):
            main_page.click_close_then_back_to_launcher()

        with step("[Action] Handle [Do you want to save changes] dialog with option [No]"):
            main_page.handle_no_save_project_dialog(option='no')

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.launcher
    @pytest.mark.ai_module
    @pytest.mark.import_media
    @pytest.mark.video_denoise
    @pytest.mark.name("[test_essential_premium_func_31_5] Verify [Video Denoise] button functionality, sample clip application, download, and Try for Free action")
    @exception_screenshot
    def test_essential_premium_func_31_5(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_4') is run and passed
        1. Check if [Video Denoise] button (L.base.launcher_window.btn_video_denoise) is on launcher
        2. Click [Video Denoise] button on launcher
        3. Apply [Sample Clip] on [AI Module Import dialog] on Launcher
        4. Download [AI Module] and check result is True
        5. Click [Try for Free] button and check result is True
        6. Click [Close] button to back to launcher > Handle [Do you want to save changes] dialog with option [No]
        """
        dependency_test = "test_essential_premium_func_31_4"
        self.ensure_dependency(dependency_test)

        # [L50] 1.3 New Launcher > Tool area > Video Denoise > [Premium feature mechanism: Try Before Buy]: Try to enable the function
        # with uuid("60dd982c-374c-4e9b-9e26-9425a41b02d5") as case:

        with step("[Verify] Check if [Video Denoise] button (L.base.launcher_window.btn_video_denoise) is on launcher"):
            if main_page.is_not_exist(L.base.launcher_window.btn_video_denoise):
                assert False, "[Video Denoise] button is not on launcher"

        with step("[Action] Click [Video Denoise] button on launcher"):
            main_page.click(L.base.launcher_window.btn_video_denoise)

        with step("[Action] Apply [Sample Clip] on [AI Module Import dialog] on Launcher"):
            main_page.apply_sample_clip_when_open_AI_import_dialog()

        with step("[Action] Download [AI Module] and check result is True"):
            result = self.download_AI_module_complete()
            if not result:
                assert False, "Downloading [AI Module] failed, result is not True"

        with step("[Action] Click [Try for Free] button and check result is True"):
            result = main_page.click_btn_try_for_free()
            if not result:
                assert False, "[Try for Free] button click did not return True"

        with step("[Action] Click [Close] button to back to launcher > Handle [Do you want to save changes] dialog with option [No]"):
            main_page.click_close_then_back_to_launcher()
            main_page.handle_no_save_project_dialog(option='no')

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.launcher
    @pytest.mark.ai_module
    @pytest.mark.import_media
    @pytest.mark.ai_background_remover
    @pytest.mark.name("[test_essential_premium_func_31_6] Verify [AI BG Remover] functionality, sample clip application, Try for Free action, download and exit Pip Designer")
    @exception_screenshot
    def test_essential_premium_func_31_6(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_5') is run and passed
        1. Check if [AI BG Remover] button (L.base.launcher_window.btn_ai_bg_remover) is on launcher
        2. Click [AI BG Remover] button on launcher
        3. Apply [Sample Clip] on [AI Module Import dialog] on Launcher
        4. Click [Try for Free] button and check result is True
        5. Download [AI Module] and check result is True
        6. Click [OK] to leave [Pip Designer] (back to timeline)
        """
        dependency_test = "test_essential_premium_func_31_5"
        self.ensure_dependency(dependency_test)

        # [L60] 1.3 New Launcher > Tool area > AI BG Remover > [Premium feature mechanism: Try Before Buy]: Try to enable the function
        # with uuid("554ac013-782e-40bd-ae70-f377c33ecc8b") as case:

        with step("[Verify] Check if [AI BG Remover] button (L.base.launcher_window.btn_ai_bg_remover) is on launcher"):
            if main_page.is_not_exist(L.base.launcher_window.btn_ai_bg_remover):
                assert False, "[AI BG Remover] button is not on launcher"

        with step("[Action] Click [AI BG Remover] button on launcher"):
            main_page.click(L.base.launcher_window.btn_ai_bg_remover)

        with step("[Action] Apply [Sample Clip] on [AI Module Import dialog] on Launcher"):
            main_page.apply_sample_clip_when_open_AI_import_dialog()

        with step("[Action] Click [Try for Free] button and check result is True"):
            result = main_page.click_btn_try_for_free()
            if not result:
                assert False, "[Try for Free] button click did not return True"

        with step("[Action] Download [AI Module] and check result is True"):
            result = self.download_AI_module_complete()
            if not result:
                assert False, "Downloading [AI Module] failed, result is not True"

        with step("[Action] Click [OK] to leave [Pip Designer] (back to timeline)"):
            pip_designer_page.click_ok()

        assert True


    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.media_room
    @pytest.mark.background_music
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.name("[test_essential_premium_func_31_7] Verify sound clip selection, timeline drag, Try for Free action and download OK status")
    @exception_screenshot
    def test_essential_premium_func_31_7(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_6') is run and passed
        1. Enter [Background Music (meta)] Category
        2. Select specific category in meta by name ('Brazilian')
        3. Search library ('Conexão Maior')
        4. Select specific sound clips in library by name ('Conexão Maior') > Wait DELAY_TIME*2 for downloading
        5. Drag current position media to timeline playhead position (track_no=1)
        6. Click [Try for Free] button and check result is True
        7. Check [Download OK] button (L.media_room.scroll_area.table_view_text_field_download_ok) is shown
        """
        dependency_test = "test_essential_premium_func_31_6"
        self.ensure_dependency(dependency_test)

        # [L159] 2.1 Media Room > BGM (Meta) Add to timeline preview > show [Try before buy] dialog
        # with uuid("39e063e9-d7e6-405a-9853-77c7fe598db9") as case:

        with step("[Action] Enter [Background Music (meta)] Category"):
            media_room_page.enter_background_music()

        with step("[Action] Select specific category in meta by name ('Brazilian')"):
            media_room_page.select_specific_category_in_meta("Brazilian")

        with step("[Action] Search library ('Conexão Maior')"):
            media_room_page.search_library("Conexão Maior")

        with step("[Action] Select specific sound clips in library by name ('Conexão Maior') > Wait DELAY_TIME*2 for downloading"):
            media_room_page.sound_clips_select_media('Conexão Maior')
            time.sleep(DELAY_TIME * 2)

        with step("[Action] Drag current position media to timeline playhead position (track_no=1)"):
            main_page.drag_current_pos_media_to_timeline_playhead_position(track_no=1)

        with step("[Action] Click [Try for Free] button and check result is True"):
            result = main_page.click_btn_try_for_free()
            if not result:
                assert False, "[Try for Free] button click did not return True"

        with step("[Verify] Check [Download OK] button (L.media_room.scroll_area.table_view_text_field_download_ok) is shown"):
            if not main_page.is_exist(L.media_room.scroll_area.table_view_text_field_download_ok):
                assert False, "[Download OK] button is not shown"

        assert True


    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.media_room
    @pytest.mark.background_music
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.name("[test_essential_premium_func_31_8] Verify sound clip selection, timeline drag and Prenium icon on launcher")
    @exception_screenshot
    def test_essential_premium_func_31_8(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_7') is run and passed
        1. Click [Cancel] button in search library
        2. Select timeline track (2)
        3. Search library ('Electr')
        4. Select specific sound clips in library by name ('Electrucada') > Wait DELAY_TIME*2 for downloading
        5. Drag current position media to timeline playhead position (track_no=2)
        6. Check [Prenium] icon (L.base.try_for_free_dialog.icon_premium) is shown
        """
        dependency_test = "test_essential_premium_func_31_7"
        self.ensure_dependency(dependency_test)

        # [L179] 2.1 Media Room > Insert clips to timeline & preview > show [Try before buy] dialog
        # with uuid("77bc7a1f-1e8e-4b83-95f8-01ee75175d49") as case:

        with step("[Action] Click [Cancel] button in search library"):
            media_room_page.search_library_click_cancel()

        with step("[Action] Select timeline track (2)"):
            main_page.timeline_select_track(2)

        with step("[Action] Search library ('Electr')"):
            media_room_page.search_library("Electr")

        with step("[Action] Select specific sound clips in library by name ('Electrucada') > Wait DELAY_TIME*2 for downloading"):
            media_room_page.sound_clips_select_media("Electrucada")
            time.sleep(DELAY_TIME * 2)

        with step("[Action] Drag current position media to timeline playhead position (track_no=2)"):
            main_page.drag_current_pos_media_to_timeline_playhead_position(track_no=2)

        with step("[Verify] Check [Prenium] icon (L.base.try_for_free_dialog.icon_premium) is shown"):
            if not main_page.is_exist(L.base.try_for_free_dialog.icon_premium):
                assert False, "[Prenium] icon is not shown"

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.media_room
    @pytest.mark.background_music
    @pytest.mark.search_library
    @pytest.mark.content_pack
    @pytest.mark.name("[test_essential_premium_func_31_9] Verify [Try for Free] action, undo, sound clip selection, timeline drag, search cancel and download OK status")
    @exception_screenshot
    def test_essential_premium_func_31_9(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_8') is run and passed
        1. Click [Try for Free] button with (option_dont_show_again=1) > Wait DELAY_TIME*4 for downloading
        2. [Undo] via hotkey
        3. Select specific sound clips in library by name ('Ancestrais') > Wait DELAY_TIME*2 for downloading
        4. Drag current position media to timeline playhead position (track_no=2)
        5. Click [Cancel] button in search library
        6. Search library ('Ancestrais')
        7. Check [Download OK] button (L.media_room.scroll_area.table_view_text_field_download_ok) is shown
        """
        dependency_test = "test_essential_premium_func_31_8"
        self.ensure_dependency(dependency_test)

        # [L180] 2.1 Media Room > Insert clips to timeline & preview > Not pop up "tro before buy" dialog
        # with uuid("11236769-ffd1-4a45-a846-c22c2b348b67") as case:

        with step("[Action] Click [Try for Free] button with (option_dont_show_again=1) > Wait DELAY_TIME*4 for downloading"):
            main_page.click_btn_try_for_free(option_dont_show_again=1)
            time.sleep(DELAY_TIME * 4)

        with step("[Action] [Undo] via hotkey"):
            main_page.tap_Undo_hotkey()

        with step("[Action] Select specific sound clips in library by name ('Ancestrais') > Wait DELAY_TIME*2 for downloading"):
            media_room_page.sound_clips_select_media("Ancestrais")
            time.sleep(DELAY_TIME * 2)

        with step("[Action] Drag current position media to timeline playhead position (track_no=2)"):
            main_page.drag_current_pos_media_to_timeline_playhead_position(track_no=2)

        with step("[Action] Click [Cancel] button in search library"):
            media_room_page.search_library_click_cancel()

        with step("[Action] Search library ('Ancestrais')"):
            media_room_page.search_library("Ancestrais")

        with step("[Verify] Check [Download OK] button (L.media_room.scroll_area.table_view_text_field_download_ok) is shown"):
            if not main_page.is_exist(L.media_room.scroll_area.table_view_text_field_download_ok):
                assert False, "[Download OK] button is not shown"

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.launch
    @pytest.mark.effect_room
    @pytest.mark.body_effect
    @pytest.mark.content_pack
    @pytest.mark.search_library
    @pytest.mark.import_media
    @pytest.mark.timeline
    @exception_screenshot
    def test_essential_premium_func_31_10(self):
        """
        1. Clear log in > Clear Cache > Launch APP > Launch App
        2. Click [Launch Free Version] button and enter main program by new project
        3. If [What's new] dialog (L.base.seasonal_bb_window.main) is shown, close it by press [ESC] key
        4. Import media for local file (Test_Material_Folder + 'Mark_Clips/1.mp4')
        5. Insert media to selected track
        6. Enter Effect room by hotkey and Select Library Room category [Body Effect]
        7. Search library ('Light Waves') and drag media to timeline playhead position
        8. Click [Try for Free] button and check result is True
        9. Wait until download [Body Effect] complete
        """
        with step("[Action] Clear log in > Clear Cache > Launch APP > Launch App"):
            main_page.clear_log_in()
            main_page.clear_cache()
            main_page.launch_app()

        with step("[Action] Click [Launch Free Version] button and enter main program by new project"):
            self.launch_Essential_build()

        with step("[Action] If [What's new] dialog (L.base.seasonal_bb_window.main) is shown, close it by press [ESC] key"):
            if main_page.exist(L.base.seasonal_bb_window.main):
                main_page.press_esc_key()

        with step("[Action] Import media for local file (Test_Material_Folder + 'Mark_Clips/1.mp4')"):
            media_path = Test_Material_Folder + 'Mark_Clips/1.mp4'
            media_room_page.import_media_file(media_path)

        with step("[Action] Insert media to selected track"):
            main_page.tips_area_insert_media_to_selected_track()

        # [L231] 2.3 Effect Room - Body effect > Apply each effect : Premium content
        # with uuid("d395a903-e843-4537-8f70-787ed096259e") as case:

        with step("[Action] Enter Effect room by hotkey and Select Library Room category [Body Effect]"):
            main_page.tap_EffectRoom_hotkey()
            main_page.select_LibraryRoom_category("Body Effect")

        with step("[Action] Search library ('Light Waves') and drag media to timeline playhead position"):
            media_room_page.search_library("Light Waves")
            main_page.drag_media_to_timeline_playhead_position("Light Waves")

        with step("[Action] Click [Try for Free] button and check result is True"):
            result = main_page.click_btn_try_for_free(option_dont_show_again=0)
            assert result is True

        with step("[Action] Wait until download [Body Effect] complete"):
            self.check_download_body_effect()

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.effect_room
    @pytest.mark.body_effect
    @pytest.mark.timeline
    @exception_screenshot
    @pytest.mark.name('[test_essential_premium_func_31_11] Verify timeline preview matches GT')
    def test_essential_premium_func_31_11(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_10') is run and passed
        1. Set timecode to ('00_00_29_16') at main page
        2. Check preview (L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L232_timelinepreview.png') matches GT (Ground_Truth_Folder + 'L232_timelinepreview.png') with similarity 0.95
        """
        dependency_test = "test_essential_premium_func_31_10"
        self.ensure_dependency(dependency_test)

        # [L232] 2.3 Effect Room - Body effect > Continue above case > click [OK] in [Try before buy] dialog
        # with uuid("64e855bd-610c-4735-8ed1-a90fd90df4eb") as case:

        with step("[Action] Set timecode to ('00_00_29_16') at main page"):
            main_page.set_timeline_timecode("00_00_29_16", is_verify=True)

        with step("[Verify] Check preview (L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L232_timelinepreview.png') matches GT (Ground_Truth_Folder + 'L232_timelinepreview.png') with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L232_timelinepreview.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L232_timelinepreview.png', preview_snapshot, similarity=0.95):
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match Ground Truth (L232_timelinepreview.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.bubble
    @pytest.mark.speech_to_text
    @pytest.mark.subtitle_room
    @pytest.mark.name('[test_essential_premium_func_31_12] Verify [Speech to Text] button and [Premium] Icon are shown')
    @exception_screenshot
    def test_essential_premium_func_31_12(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_11') is run and passed
        1. Enter Room (Subtitle) (8)
        2. Check if [Speech to Text] button (L.subtitle_room.library_menu.btn_speech_to_text) is shown
        3. Click [Speech to Text] button (L.subtitle_room.library_menu.btn_speech_to_text)
        4. Check [Premium] Icon (L.base.try_for_free_dialog.icon_premium) is shown
        """
        dependency_test = "test_essential_premium_func_31_11"
        self.ensure_dependency(dependency_test)

        # [L287] 2.6 Subtitle Room > [Ess.] Auto Transcribe subtitle > should try before buy dialog
        # with uuid("c4fcaf3b-87ed-4aa1-89ce-d63d637b7469") as case:

        with step("[Action] Enter Room (Subtitle) (8)"):
            main_page.enter_room(8)

        with step("[Verify] Check if [Speech to Text] button (L.subtitle_room.library_menu.btn_speech_to_text) is shown"):
            speech_to_text_button = main_page.is_exist(L.subtitle_room.library_menu.btn_speech_to_text)
            if not speech_to_text_button:
                assert False, "[Speech to Text] button is not shown"

        with step("[Action] Click [Speech to Text] button (L.subtitle_room.library_menu.btn_speech_to_text)"):
            main_page.click(L.subtitle_room.library_menu.btn_speech_to_text)

        with step("[Verify] Check [Premium] Icon (L.base.try_for_free_dialog.icon_premium) is shown"):
            premium_icon = main_page.is_exist(L.base.try_for_free_dialog.icon_premium)
            if not premium_icon:
                assert False, "[Premium] Icon is not shown"

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.speech_to_text
    @pytest.mark.subtitle_room
    @pytest.mark.body_effect
    @pytest.mark.name('[test_essential_premium_func_31_13] Verify [Try Once] and Speech to Text window functionality')
    @exception_screenshot
    def test_essential_premium_func_31_13(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_12') is run and passed
        1. Click [Try Once] button and check result is True
        2. Check if [Speech to Text] window (L.subtitle_room.speech_to_text_window.main_window, timeout=6) is shown
        3. Click [Create] button on [Speech to Text] window
        4. Wait until [Progress Dialog] (L.subtitle_room.handle_progress_dialog.btn_cancel) is closed
        5. Select timeline media with name ('1')
        6. Check if [Effect] button (L.tips_area.button.btn_effect_modify) shows up on [Tips Area] 
        7. Click [Effect] button on [Tips Area]
        8. Remove (Body Effect) from [Effect Settings] 
        """
        dependency_test = "test_essential_premium_func_31_12"
        self.ensure_dependency(dependency_test)

        # [L288] 2.6 Subtitle Room > [Ess.] click "try Once"
        # with uuid("257c6a24-17a3-4be5-8994-90f01ee29f06") as case:

        with step("[Action] Click [Try Once] button and check result is True"):
            result = main_page.click_btn_try_once()
            if not result:
                assert False, "[Try Once] button click did not return True"

        with step("[Verify] Check if [Speech to Text] window (L.subtitle_room.speech_to_text_window.main_window, timeout=6) is shown"):
            speech_to_text_window = main_page.is_exist(L.subtitle_room.speech_to_text_window.main_window, timeout=6)
            if not speech_to_text_window:
                assert False, "[Speech to Text] window is not shown"

        with step("[Action] Click [Create] button on [Speech to Text] window"):
            subtitle_room_page.auto_function.click_create()

        with step("[Action] Wait until [Progress Dialog] (L.subtitle_room.handle_progress_dialog.btn_cancel) is closed"):
            for _ in range(200):
                if not main_page.exist(L.subtitle_room.handle_progress_dialog.btn_cancel):
                    break
                time.sleep(DELAY_TIME)

        with step("[Action] Select timeline media with name ('1')"):
            main_page.select_timeline_media('1')

        with step("[Verify] Check if [Effect] button (L.tips_area.button.btn_effect_modify) shows up on [Tips Area]"):
            if not main_page.is_exist(L.tips_area.button.btn_effect_modify):
                assert False, "[Effect] button (L.tips_area.button.btn_effect_modify) does not show up on [Tips Area]"

        with step("[Action] Click [Effect] button on [Tips Area]"):
           tips_area_page.click_TipsArea_btn_effect()

        with step("[Action] Remove (Body Effect) from [Effect Settings]"):
            effect_room_page.remove_from_effectsettings()
            
        assert True


    @pytest.mark.essential_premium_func
    @pytest.mark.produce_page
    @pytest.mark.sign_in
    @pytest.mark.name('[test_essential_premium_func_31_14] Verify Produce page sign in, produce button, Premium dialog absence and Edit button click')
    @exception_screenshot
    def test_essential_premium_func_31_14(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_13') is run and passed
        1. Sign in to PDR (account='sistarftcn.006@gmail.com', pw='ilovecc680520')
        2. Click [Produce] button
        3. Check [Premium dialog] is not shown by verifying [H264] button (L.produce.local.btn_file_format_avc) is shown
        4. Click [Edit] button on produce page
        """
        dependency_test = "test_essential_premium_func_31_13"
        self.ensure_dependency(dependency_test)

        with step("[Action] Sign in to PDR (account='sistarftcn.006@gmail.com', pw='ilovecc680520')"):
            main_page.handle_sign_in(account='sistarftcn.006@gmail.com', pw='ilovecc680520')

        # [L289] 2.6 Subtitle Room > [Ess.] click "Export"
        # with uuid("d1dd188c-032d-475d-bd54-504f32f792cf") as case:

        with step("[Action] Click [Produce] button"):
            main_page.click_produce()

        with step("[Verify] Check [Premium dialog] is not shown by verifying [H264] button (L.produce.local.btn_file_format_avc) is shown"):
            if not main_page.is_exist(L.produce.local.btn_file_format_avc):
                assert False, "[H264] button (L.produce.local.btn_file_format_avc) is not shown"

        with step("[Action] Click [Edit] button on produce page"):
            produce_page.click_edit()

        assert True


    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.speech_to_text
    @pytest.mark.subtitle_room
    @pytest.mark.bubble
    @pytest.mark.name('[test_essential_premium_func_31_15] Verify [Speech to Text] button and [POU] dialog behavior')
    @exception_screenshot
    def test_essential_premium_func_31_15(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_14') is run and passed
        1. Enter Room (Subtitle) (8)
        2. Check [Speech to Text] button (L.subtitle_room.library_menu.uppper_btn_STT) is shown by is_exist()
        3. Click [Speech to Text] button (L.subtitle_room.library_menu.uppper_btn_STT)
        4. Check [POU] (L.base.pou_dialog.btn_get_premium, timeout=7) pops up
        5. Press [ESC] key to close the dialog
        """
        dependency_test = "test_essential_premium_func_31_14"
        self.ensure_dependency(dependency_test)

        # [L290] 2.6 Subtitle Room > [Ess.] Auto Transcribe subtitle > should try before buy dialog
        # with uuid("56c3bf80-c6f2-4b67-864d-9765ad73ddb0") as case:

        with step("[Action] Enter Room (Subtitle) (8)"):
            main_page.enter_room(8)

        with step("[Verify] Check [Speech to Text] button (L.subtitle_room.library_menu.uppper_btn_STT) is shown by is_exist()"):
            stt_button = main_page.is_exist(L.subtitle_room.library_menu.uppper_btn_STT)
            if not stt_button:
                assert False, "[Speech to Text] button (L.subtitle_room.library_menu.uppper_btn_STT) is not shown"

        with step("[Action] Click [Speech to Text] button (L.subtitle_room.library_menu.uppper_btn_STT)"):
            main_page.click(L.subtitle_room.library_menu.uppper_btn_STT)

        with step("[Verify] Check [POU] (L.base.pou_dialog.btn_get_premium, timeout=7) pops up"):
            pou_dialog = main_page.is_exist(L.base.pou_dialog.btn_get_premium, timeout=7)
            if not pou_dialog:
                assert False, "[POU] (L.base.pou_dialog.btn_get_premium, timeout=7) did not pop up"

        with step("[Action] Press [ESC] key to close the dialog"):
            main_page.press_esc_key()

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.media_room
    @pytest.mark.background_music
    @pytest.mark.produce_page
    @pytest.mark.premium
    @pytest.mark.name('[test_essential_premium_func_31_16] Verify BGM export Premium dialog and remove all BGM')
    @exception_screenshot
    def test_essential_premium_func_31_16(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_15') is run and passed
        1. Enter Room (Media) (0) > Enter [Background Music (meta)] Category
        2. Select specific category in meta by name ('Blue')
        3. Search library for ('Honky Mother')
        4. Select track (2)
        5. Select specific sound clips in library by name ('Honky Mother')
        6. Drag current position media to timeline playhead position
        7. Click [Try for Free] button
        8. Click [Produce] button
        9. Check [Premium for exporting] dialog (L.base.try_for_free_dialog.icon_premium) pops up
        10. Check [Now Now] button (L.base.pou_dialog.btn_not_now) is shown on [Premium for exporting] dialog
        11. Click [Remove All] button (L.base.pou_dialog.btn_remove_all) to remove BGM then back to timeline
        """
        dependency_test = "test_essential_premium_func_31_15"
        self.ensure_dependency(dependency_test)


        # [L160] 2.1 Media Room > BGM(Meta) > [Ess.] click [Export]
        # with uuid("f417bcf1-9403-4af0-bb6e-bda5596a7817") as case:

        with step("[Action] Enter Room (Media) (0) > Enter [Background Music (meta)] Category"):
            main_page.enter_room(0)
            media_room_page.enter_background_music()

        with step("[Action] Select specific category in meta by name ('Blue')"):
            media_room_page.select_specific_category_in_meta("Blue")

        with step("[Action] Search library for ('Honky Mother')"):
            media_room_page.search_library("Honky Mother")

        with step("[Action] Select track (2)"):
            main_page.timeline_select_track(2)

        with step("[Action] Select specific sound clips in library by name ('Honky Mother')"):
            media_room_page.sound_clips_select_media("Honky Mother")

        with step("[Action] Drag current position media to timeline playhead position"):
            main_page.drag_current_pos_media_to_timeline_playhead_position(track_no=2)

        with step("[Action] Click [Try for Free] button"):
            result = main_page.click_btn_try_for_free(option_dont_show_again=0)
            if not result:
                assert False, "[Try for Free] button click failed!"

        with step("[Action] Click [Produce] button"):
            main_page.click(L.main.btn_produce)

        with step("[Verify] Check [Premium for exporting] dialog (L.base.try_for_free_dialog.icon_premium) pops up"):
            if not main_page.is_exist(L.base.try_for_free_dialog.icon_premium):
                assert False, "[Premium for exporting] dialog did not pop up!"

        with step("[Verify] Check [Now Now] button (L.base.pou_dialog.btn_not_now) is shown on [Premium for exporting] dialog"):
            if not main_page.is_exist(L.base.pou_dialog.btn_not_now):
                assert False, "[Now Now] button is not shown on [Premium for exporting] dialog!"

        with step("[Action] Click [Remove All] button (L.base.pou_dialog.btn_remove_all) to remove BGM then back to timeline"):
            main_page.click(L.base.pou_dialog.btn_remove_all)

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.media_room
    @pytest.mark.video_denoise
    @pytest.mark.fix_enhance
    @pytest.mark.timeline
    @pytest.mark.name('[test_essential_premium_func_31_17] Verify Fix Enhance and Video Denoise checkbox and Try for Free dialog')
    @exception_screenshot
    def test_essential_premium_func_31_17(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_16') is run and passed
        1. Select timeline media with name ('1')
        2. Click [Fix Enhance] button on [Tips Area]
        3. Check [Video Denoise] checkbox (L.fix_enhance.fix.checkbox_video_denoise) is shown
        4. Enable [Video Denoise] checkbox
        5. Check of [Try for Free] dialog (L.base.try_for_free_dialog.btn_try_for_free) pops up
        """
        dependency_test = "test_essential_premium_func_31_16"
        self.ensure_dependency(dependency_test)

        # [L567] 4.3 Fix / Enhance > Fix > [Ess.] Apply [Video Denoise] > Should  show "Try Before Buy"
        # with uuid("a89bc4aa-12b2-4ed0-b232-d14da5fe94e7") as case:

        with step("[Action] Select timeline media with name ('1')"):
            main_page.select_timeline_media("1")

        with step("[Action] Click [Fix Enhance] button on [Tips Area]"):
            main_page.tips_area_click_fix_enhance()

        with step("[Verify] Check [Video Denoise] checkbox (L.fix_enhance.fix.checkbox_video_denoise) is shown"):
            checkbox = main_page.is_exist(L.fix_enhance.fix.checkbox_video_denoise)
            if not checkbox:
                assert False, "[Video Denoise] checkbox (L.fix_enhance.fix.checkbox_video_denoise) is not shown"

        with step("[Action] Enable [Video Denoise] checkbox"):
            fix_enhance_page.fix.enable_video_denoise()

        with step("[Verify] Check of [Try for Free] dialog (L.base.try_for_free_dialog.btn_try_for_free) pops up"):
            if not main_page.exist(L.base.try_for_free_dialog.btn_try_for_free):
                assert False, "[Try for Free] dialog (L.base.try_for_free_dialog.btn_try_for_free) did not pop up"

        assert True


    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.video_denoise
    @pytest.mark.fix_enhance
    @pytest.mark.timeline
    @pytest.mark.name('[test_essential_premium_func_31_18] Verify [Video Denoise] checkbox status and absence of [Try for Free] button')
    @exception_screenshot
    def test_essential_premium_func_31_18(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_17') is run and passed
        1. Select timeline media with name ('1')
        2. Click [Try For Free] button (L.base.try_for_free_dialog.btn_try_for_free)
        3. Check [Video Denoise] checkbox (L.fix_enhance.fix.checkbox_video_denoise).AXvalue ==1
        4. Check [Try for Free] button (L.base.try_for_free_dialog.btn_try_for_free) is not shown
        """
        dependency_test = "test_essential_premium_func_31_17"
        self.ensure_dependency(dependency_test)

        # [L568] 4.3 Fix / Enhance > Fix > [Ess.] Apply [Video Denoise] > Click Try for Free
        # with uuid("5c1b0c2c-c345-4d2f-a4df-afe1efd9667b") as case:

        with step("[Action] Select timeline media with name ('1')"):
            main_page.select_timeline_media("1")

        with step("[Action] Click [Try For Free] button (L.base.try_for_free_dialog.btn_try_for_free)"):
            main_page.click(L.base.try_for_free_dialog.btn_try_for_free)

        with step("[Verify] Check [Video Denoise] checkbox (L.fix_enhance.fix.checkbox_video_denoise).AXvalue ==1"):
            checkbox = main_page.exist(L.fix_enhance.fix.checkbox_video_denoise)
            if checkbox.AXValue != 1:
                assert False, "[Video Denoise] checkbox AXvalue is not 1!"

        with step("[Verify] Check [Try for Free] button (L.base.try_for_free_dialog.btn_try_for_free) is not shown"):
            if not main_page.is_not_exist(L.base.try_for_free_dialog.btn_try_for_free):
                assert False, "[Try for Free] button is still shown!"

        assert True


    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.video_denoise
    @pytest.mark.fix_enhance
    @pytest.mark.timeline
    @pytest.mark.produce_page
    @pytest.mark.name('[test_essential_premium_func_31_19] Verify Premium for exporting dialog and remove all BGM via Export')
    @exception_screenshot
    def test_essential_premium_func_31_19(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_18') is run and passed
        1. Click [Export] button (L.main.btn_produce)
        2. Check [Premium for exporting] dialog (L.base.try_for_free_dialog.icon_premium) pops up
        3. Check [Now Now] button (L.base.pou_dialog.btn_not_now) is shown on [Premium for exporting] dialog
        4. Click [Remove All] button (L.base.pou_dialog.btn_remove_all) to remove BGM then back to timeline
        """
        dependency_test = "test_essential_premium_func_31_18"
        self.ensure_dependency(dependency_test)

        # [L569] 4.3 Fix / Enhance > Fix > [Ess.] Apply [Video Denoise] > click Export
        # with uuid("97e7fda3-edd8-447c-9df5-7631e276dcf4") as case:

        with step("[Action] Click [Export] button (L.main.btn_produce)"):
            main_page.click(L.main.btn_produce)

        with step("[Verify] Check [Premium for exporting] dialog (L.base.try_for_free_dialog.icon_premium) pops up"):
            if not main_page.is_exist(L.base.try_for_free_dialog.icon_premium):
                assert False, "[Premium for exporting] dialog did not pop up"

        with step("[Verify] Check [Now Now] button (L.base.pou_dialog.btn_not_now) is shown on [Premium for exporting] dialog"):
            if not main_page.is_exist(L.base.pou_dialog.btn_not_now):
                assert False, "[Now Now] button is not shown on [Premium for exporting] dialog"

        with step("[Action] Click [Remove All] button (L.base.pou_dialog.btn_remove_all) to remove BGM then back to timeline"):
            main_page.click(L.base.pou_dialog.btn_remove_all)

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.launch
    @pytest.mark.import_media
    @pytest.mark.pip_designer
    @pytest.mark.chromakey
    @pytest.mark.ai_module
    @pytest.mark.name('[test_essential_premium_func_31_20] Verify Pip Designer export and AI module download workflow')
    @exception_screenshot
    def test_essential_premium_func_31_20(self):
        """
        1. Clear [AI Module] files > Clear Cache > Launch APP
        2. Click [Launch Free Version] button
        3. If [What's new] dialog (L.base.seasonal_bb_window.main) is shown > Press [ESC] key to close
        4. Import media for local file (Test_Material_Folder + 'Title_Designer_3/background01.jpg')
        5. Select media by library icon view ('background01.jpg') > Right click > Select right click menu ('Insert on Selected Track')
        6. Select [Pip Designer] from [Tip Areas] and check result is True
        7. Click [Express] button (L.pip_designer.express)
        8. Screenshot (L.pip_designer.preview)
        9. Enable [Chromakey]
        10. Check if [Try for Free] dialog (L.base.try_for_free_dialog.btn_try_for_free) is shown 
        11. Click [Try for Free] button
        12. Wait for downloading AI module
        13. Check preview is updated with similarity <0.75 and >0.4
        14. Click [OK] to close [Pip Designer]
        """
        with step("[Action] Clear [AI Module] files > Clear Cache > Launch APP"):
            main_page.clear_AI_module()
            main_page.clear_cache()
            main_page.launch_app()

        with step("[Action] Click [Launch Free Version] button"):
            self.launch_Essential_build()

        with step("[Action] If [What's new] dialog (L.base.seasonal_bb_window.main) is shown > Press [ESC] key to close"):
            if main_page.exist(L.base.seasonal_bb_window.main):
                main_page.press_esc_key()

        with step("[Action] Import media for local file (Test_Material_Folder + 'Title_Designer_3/background01.jpg')"):
            media_path = Test_Material_Folder + "Title_Designer_3/background01.jpg"
            media_room_page.import_media_file(media_path)

        with step("[Action] Select media by library icon view ('background01.jpg') > Right click > Select right click menu ('Insert on Selected Track')"):
            main_page.select_library_icon_view_media("background01.jpg")
            main_page.right_click()
            main_page.select_right_click_menu("Insert on Selected Track")

        # [L416] 3.4 Pip Designer > Auto cutout > [Ess.] show try before buy dialog
        # with uuid("4d267db6-55ba-43cf-849c-f57a1ee116f4") as case:

        with step("[Action] Select [Pip Designer] from [Tip Areas] and check result is True"):
            result = tips_area_page.tools.select_PiP_Designer()
            if not result:
                assert False, "Select [Pip Designer] from [Tip Areas] Fail"

        with step("[Action] Click [Express] button (L.pip_designer.express)"):
            main_page.click(L.pip_designer.express)

        with step("[Action] Screenshot (L.pip_designer.preview)"):
            preview_initial = main_page.snapshot(locator=L.pip_designer.preview)

        with step("[Action] Enable [Chromakey]"):
            pip_designer_page.apply_chromakey(bApply=1)

        with step("[Verify] Check if [Try for Free] dialog (L.base.try_for_free_dialog.btn_try_for_free) is shown"):
            if not main_page.is_exist(L.base.try_for_free_dialog.btn_try_for_free):
                assert False, "[Try for Free] dialog is not shown"

        # [L417] 3.4 Pip Designer > Auto cutout > [Ess.] click "Try for Free"
        # with uuid("bab1a707-3fc4-496d-9c7e-fd1f0c33c015") as case
        with step("[Action] Click [Try for Free] button"):
            main_page.click(L.base.try_for_free_dialog.btn_try_for_free)

        with step("[Action] Wait for downloading AI module"):
            self.check_downloading_AI_module()

        with step("[Verify] Check preview is updated with similarity <0.75 and >0.4"):
            preview_updated = main_page.snapshot(locator=L.pip_designer.preview)
            # If preview similarity is >= 0.75, then the update did not occur as expected
            if main_page.compare(preview_initial, preview_updated, similarity=0.75):
                assert False, "Preview similarity is not less than 0.75"
            # If preview similarity is < 0.4, then the update did not occur as expected
            if not main_page.compare(preview_initial, preview_updated, similarity=0.4):
                assert False, "Preview similarity is not greater than 0.4"

        with step("[Action] Click [OK] to close [Pip Designer]"):
            pip_designer_page.click_ok()

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.pip_designer
    @pytest.mark.chromakey
    @pytest.mark.ai_module    
    @pytest.mark.name('[test_essential_premium_func_31_21] Verify Export button and Premium dialog for exporting')
    @exception_screenshot
    def test_essential_premium_func_31_21(self):
        """
        0. Ensure the dependency test ('test_essential_premium_func_31_20') is run and passed
        1. Click [Export] button (L.main.btn_produce)
        2. Check [Premium for exporting] dialog (L.base.try_for_free_dialog.icon_premium) pops up
        3. Check [Now Now] button (L.base.pou_dialog.btn_not_now) is shown on [Premium for exporting] dialog
        4. Click [Not Now] button (L.base.pou_dialog.btn_not_now) to close the dialog
        """
        dependency_test = "test_essential_premium_func_31_20"
        self.ensure_dependency(dependency_test)

        # [L418] 3.4 Pip Designer > Auto cutout > [Ess.] Click [Export]
        # with uuid("df9a73b4-21fb-42dc-8130-b565c77cb2ea") as case:

        with step("[Action] Click [Export] button (L.main.btn_produce)"):
            main_page.click(L.main.btn_produce)

        with step("[Verify] Check [Premium for exporting] dialog (L.base.try_for_free_dialog.icon_premium) pops up"):
            if not main_page.is_exist(L.base.try_for_free_dialog.icon_premium):
                assert False, "[Premium for exporting] dialog did not pop up!"

        with step("[Verify] Check [Now Now] button (L.base.pou_dialog.btn_not_now) is shown on [Premium for exporting] dialog"):
            if not main_page.is_exist(L.base.pou_dialog.btn_not_now):
                assert False, "[Now Now] button is not shown on [Premium for exporting] dialog"

        with step("[Action] Click [Not Now] button (L.base.pou_dialog.btn_not_now) to close the dialog"):
            main_page.click(L.base.pou_dialog.btn_not_now)

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.launch
    @pytest.mark.import_media
    @pytest.mark.pip_designer
    @pytest.mark.chromakey
    @pytest.mark.ai_module
    @pytest.mark.name('[test_essential_premium_func_31_22] Launch APP > Import media > Apply Chromakey in [Pip Designer] > Click [Try for Free] button > Check preview matches GT > Close [Pip Designer]')
    def test_essential_premium_func_31_22(self):
        '''
        1. Clear [AI Module] Files > Clear Cache > Launch APP > Launch Essential build
        2. If [What\'s new] dialog (L.base.seasonal_bb_window.main) is shown > Press [ESC] key to close
        3. Import media for local file (Test_Material_Folder + 'BFT_21_Stage1/eight_people.png')
        4. Select media by library icon view ('eight_people.png') > Right click > Select right click menu ('Insert on Selected Track')
        5. Select [Pip Designer] from [Tip Areas] and check result is True
        6. Enter [Express Mode] by click (L.pip_designer.express)
        7. Enable Chromakey
        8. Check if [Try for Free] button (L.base.try_for_free_dialog.btn_try_for_free) is shown
        9. Click [Try for Free] button
        10. Wait for downloading AI module
        11. Check preview (L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L420_cutout.png') match Ground Truth (Ground_Truth_Folder + 'L420_cutout.png') with similarity=0.9
        12. Click [OK] to close [Pip Designer]
        '''
        with step('[Action] Clear [AI Module] Files and Cache, Launch APP and Essential Build'):
            main_page.clear_AI_module()
            main_page.clear_cache()
            main_page.launch_app()
            self.launch_Essential_build()

        with step('[Action] Close [What\'s new] dialog if shown'):
            if main_page.exist(L.base.seasonal_bb_window.main):
                main_page.press_esc_key()

        with step('[Action] Import media file (Test_Material_Folder + "BFT_21_Stage1/eight_people.png")'):
            media_room_page.import_media_file(Test_Material_Folder + "BFT_21_Stage1/eight_people.png")

        with step('[Action] Select media by library icon view (eight_people.png) and right click'):
            main_page.select_library_icon_view_media('eight_people.png')
            main_page.right_click()

        with step('[Action] Select right click menu (Insert on Selected Track)'):
            main_page.select_right_click_menu('Insert on Selected Track')

        # [L419] 3.4 Pip Designer > Auto cutout > [Ess.] show try before buy dialog
        # with uuid("488b0d96-ed37-4200-824c-aadd9a4aabf0") as case:

        with step('[Action] Select [Pip Designer] from [Tip Areas] and check result is True'):
            if not tips_area_page.tools.select_PiP_Designer():
                assert False, "Pip Designer not selected correctly"

        with step('[Action] Enter [Express Mode] by clicking (L.pip_designer.express)'):
            pip_designer_page.switch_mode("Express Mode")

        with step('[Action] Enable Chromakey'):
            pip_designer_page.apply_chromakey(bApply=1)

        with step('[Verify] Check if [Try for Free] button is shown'):
            if not  main_page.exist(L.base.try_for_free_dialog.btn_try_for_free):
                assert False,  "Try for Free button not shown"

        # [L420] 3.4 Pip Designer > Auto cutout > [Ess.] click "Try for Free"
        # with uuid("a289204a-09f9-4f86-8aec-28ab6d5ec49e") as case:

        with step('[Action] Click [Try for Free] button'):
            target = main_page.exist(L.base.try_for_free_dialog.btn_try_for_free)
            main_page.mouse.click(*target.center)
            time.sleep(DELAY_TIME)


        with step('[Action] Wait for downloading AI module'):
            self.check_downloading_AI_module()

        with step('[Verify] Check preview matches GT (L420_cutout.png)'):
            preview = main_page.snapshot(
                locator=L.pip_designer.preview,
                file_name=Auto_Ground_Truth_Folder + 'L420_cutout.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L420_cutout.png',
                preview,
                similarity=0.9
            )
            if not check_preview:
                # Similarity should be greater than 0.9 for matching preview
                assert False, "Preview does not match GT (L420_cutout.png)! Similarity should > 0.9"

        with step('[Action] Click [OK] to close [Pip Designer]'):
            pip_designer_page.click_ok()

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.launch
    @pytest.mark.import_media
    @pytest.mark.pip_designer
    @pytest.mark.chromakey
    @pytest.mark.ai_module
    @pytest.mark.name('[test_essential_premium_func_31_23] Verify the handling of the [Premium for exporting] dialog after clicking [Export]')
    @exception_screenshot
    def test_essential_premium_func_31_23(self):
        '''
        0. Ensure the dependency test ('test_essential_premium_func_31_22') is run and passed
        1. Click [Export] button (L.main.btn_produce)
        2. Check [Premium for exporting] dialog (L.base.try_for_free_dialog.icon_premium) pops up
        3. Check [Now Now] button (L.base.pou_dialog.btn_not_now) is shown on [Premium for exporting] dialog
        4. Click [Remove all] to remove cutout effect then back to timeline
        '''
        dependency_test = "test_essential_premium_func_31_22"
        self.ensure_dependency(dependency_test)

        # [L421] 3.4 Pip Designer > Auto cutout > [Ess.] Click [Export]
        # with uuid("89801e91-efe4-4ad2-a615-f52f376e2e28") as case:

        with step('[Action] Click [Export] button'):
            main_page.click(L.main.btn_produce)

        with step('[Verify] Check [Premium for exporting] dialog pops up'):
            premium_dialog = main_page.exist(L.base.try_for_free_dialog.icon_premium)
            if not premium_dialog:
                assert False, "[Premium for exporting] dialog did not pop up!"

        with step('[Verify] Check [Now Now] button is shown on [Premium for exporting] dialog'):
            assert main_page.exist(L.base.pou_dialog.btn_not_now), "[Now Now] button is not shown on dialog"

        with step('[Action] Click [Remove all] to remove cutout effect then back to timeline'):
            main_page.click(L.base.pou_dialog.btn_remove_all)

        assert True


    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.launch
    @pytest.mark.import_media
    @pytest.mark.pip_designer
    @pytest.mark.chromakey
    @pytest.mark.ai_module
    @pytest.mark.name('[test_essential_premium_func_31_24] Launch APP > Import media (HEIC) > Apply Chromakey in [Pip Designer] > Click [Try for Free] button > Check preview matches GT > Close [Pip Designer]')
    def test_essential_premium_func_31_24(self):
        '''
        1. Clear [AI Module] Files > Clear Cache > Launch APP > Launch Essential build
        2. If [What\'s new] dialog (L.base.seasonal_bb_window.main) is shown > Press [ESC] key to close
        3. Import media for local file (Test_Material_Folder + 'BFT_21_Stage1/IMG_0008.HEIC')
        4. Select media by library icon view ('IMG_0008.HEIC') > Right click > Select right click menu ('Insert on Selected Track')
        5. Select [Pip Designer] from [Tip Areas] and check result is True
        6. Enter [Express Mode] by click (L.pip_designer.express)
        7. Enable Chromakey
        8. Check if [Try for Free] button (L.base.try_for_free_dialog.btn_try_for_free) is shown
        9. Click [Try for Free] button
        10. Wait for downloading AI module
        11. Check preview (L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L423_cutout.png') match Ground Truth (Ground_Truth_Folder + 'L423_cutout.png') with similarity=0.94
        12. Click [OK] to close [Pip Designer]
        '''
        with step('[Action] Clear [AI Module] Files and Cache, Launch APP and Essential Build'):
            main_page.clear_AI_module()
            main_page.clear_cache()
            main_page.launch_app()
            self.launch_Essential_build()

        with step('[Action] Close [What\'s new] dialog if shown'):
            if main_page.exist(L.base.seasonal_bb_window.main):
                main_page.press_esc_key()

        with step('[Action] Import media file (Test_Material_Folder + "BFT_21_Stage1/IMG_0008.HEIC")'):
            media_room_page.import_media_file(Test_Material_Folder + "BFT_21_Stage1/IMG_0008.HEIC")

        with step('[Action] Select media by library icon view (IMG_0008.HEIC) and right click'):
            main_page.select_library_icon_view_media('IMG_0008.HEIC')
            main_page.right_click()

        with step('[Action] Select right click menu (Insert on Selected Track)'):
            main_page.select_right_click_menu('Insert on Selected Track')

        # [L422] 3.4 Pip Designer > Auto cutout > [Ess.] show try before buy dialog
        # with uuid("6bc0f10e-6efa-477a-9fb4-bf70912b8ba6") as case:

        with step('[Action] Select [Pip Designer] from [Tip Areas] and check result is True'):
            if not tips_area_page.tools.select_PiP_Designer():
                assert False, "Pip Designer not selected correctly"

        with step('[Action] Enter [Express Mode] by clicking (L.pip_designer.express)'):
            pip_designer_page.switch_mode("Express Mode")

        with step('[Action] Enable Chromakey'):
            pip_designer_page.apply_chromakey(bApply=1)

        with step('[Verify] Check if [Try for Free] button is shown'):
            if not  main_page.exist(L.base.try_for_free_dialog.btn_try_for_free):
                assert False, "Try for Free button not shown"

        # [L423] 3.4 Pip Designer > Auto cutout > [Ess.] click "Try for Free"
        # with uuid("204a6bcf-a544-48a9-bffd-6c6d5d3d844b") as case:

        with step('[Action] Click [Try for Free] button'):
            target = main_page.exist(L.base.try_for_free_dialog.btn_try_for_free)
            main_page.mouse.click(*target.center)
            time.sleep(DELAY_TIME)

        with step('[Action] Wait for downloading AI module'):
            self.check_downloading_AI_module()

        with step('[Verify] Check preview matches GT (L423_cutout.png)'):
            preview = main_page.snapshot(
                locator=L.pip_designer.preview,
                file_name=Auto_Ground_Truth_Folder + 'L423_cutout.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L423_cutout.png',
                preview,
                similarity=0.94
            )
            if not check_preview:
                # Similarity should be greater than 0.94 for matching preview
                assert False, "Preview does not match GT (L423_cutout.png)! Similarity should > 0.94"

        with step('[Action] Click [OK] to close [Pip Designer]'):
            pip_designer_page.click_ok()

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.pip_designer
    @pytest.mark.chromakey
    @pytest.mark.ai_module
    @pytest.mark.name('[test_essential_premium_func_31_25] Verify the handling of the [Premium for exporting] dialog after clicking [Export]')
    @exception_screenshot
    def test_essential_premium_func_31_25(self):
        '''
        0. Ensure the dependency test ('test_essential_premium_func_31_24') is run and passed
        1. Click [Export] button (L.main.btn_produce)
        2. Check [Premium for exporting] dialog (L.base.try_for_free_dialog.icon_premium) pops up
        3. Check [Now Now] button (L.base.pou_dialog.btn_not_now) is shown on [Premium for exporting] dialog
        4. Click [Remove all] to remove cutout effect then back to timeline
        '''
        dependency_test = "test_essential_premium_func_31_24"
        self.ensure_dependency(dependency_test)

        # [L424] 3.4 Pip Designer > Auto cutout > [Ess.] Click [Export]
        # with uuid("85b7fda5-107b-49e1-8ff1-2c105d987b1f") as case:

        with step('[Action] Click [Export] button'):
            main_page.click(L.main.btn_produce)

        with step('[Verify] Check [Premium for exporting] dialog pops up'):
            premium_dialog = main_page.exist(L.base.try_for_free_dialog.icon_premium)
            if not premium_dialog:
                assert False, "[Premium for exporting] dialog did not pop up!"

        with step('[Verify] Check [Now Now] button is shown on [Premium for exporting] dialog'):
            assert main_page.exist(L.base.pou_dialog.btn_not_now), "[Now Now] button is not shown on dialog"

        with step('[Action] Click [Remove all] to remove cutout effect then back to timeline'):
            main_page.click(L.base.pou_dialog.btn_remove_all)

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.launch
    @pytest.mark.import_media
    @pytest.mark.effect_room
    @pytest.mark.body_effect
    @pytest.mark.pip_designer
    @pytest.mark.chromakey
    @pytest.mark.ai_module
    @pytest.mark.name('[test_essential_premium_func_31_26] Apply Body Effect and Cutout Effect in [Pip Designer] and check [Premium] related functions')
    @exception_screenshot
    def test_essential_premium_func_31_26(self):
        '''
        1. Clear [AI Module] Files > Clear Cache > Launch APP > Launch Essential build
        2. If [What\'s new] dialog (L.base.seasonal_bb_window.main) is shown > Press [ESC] key to close
        3. Set [Project Aspect Ratio] as (4:3)
        4. Import media for local file (Test_Material_Folder + \'BFT_21_Stage1/4_3_testing.mp4\') > Handle high definition dialog
        5. Select media (\'4_3_testing.mp4\') by library icon view > Insert media (\'4_3_testing.mp4\') to timeline
        6. Enter Room (Effect) > Select category (Body Effect) > Search library (\'Star Shower\') > Drag media to timeline playhead position
        7. Check if [Try for Free] button (L.base.try_for_free_dialog.btn_try_for_free) is shown
        8. Click [Try for Free] button
        9. Wait until download [Body Effect] complete
        10. Check [Effect] button (L.tips_area.button.btn_effect_modify) is exist after applying body effect
        11. Select [Pip Designer] from [Tip Areas] and check result is True
        12. Enter [Express Mode] by click (L.pip_designer.express) > Screenshot (L.pip_designer.preview)
        13. Enable Chromakey
        14. Check if [Try for Free] button (L.base.try_for_free_dialog.btn_try_for_free) is shown
        15. Click [Try for Free] button
        16. Wait for downloading AI module
        17. Check preview is updated after applying cutout effect (similarity<0.95)
        18. Click [OK] to close [Pip Designer]
        19. Click [Play] in playback window
        20. Check if the preview window is different when playing(main_page.area.preview.main, sec=3)
        21. Press [Space] key to pause the preview
        '''
        with step('[Action] Clear [AI Module] Files and Cache, Launch APP, and Launch Essential Build'):
            main_page.clear_AI_module()
            main_page.clear_cache()
            main_page.launch_app()
            self.launch_Essential_build()

        with step('[Action] Close [What\'s new] dialog if shown'):
            if main_page.exist(L.base.seasonal_bb_window.main):
                main_page.press_esc_key()

        with step('[Action] Set Project Aspect Ratio to 4:3'):
            main_page.set_project_aspect_ratio_4_3()

        with step('[Action] Import media file (Test_Material_Folder + "BFT_21_Stage1/4_3_testing.mp4")'):
            media_path = Test_Material_Folder + "BFT_21_Stage1/4_3_testing.mp4"
            media_room_page.import_media_file(media_path)
            media_room_page.handle_high_definition_dialog()

        with step('[Action] Select media (4_3_testing.mp4) by library icon view and insert to timeline'):
            main_page.select_library_icon_view_media('4_3_testing.mp4')
            main_page.insert_media('4_3_testing.mp4')

        with step('[Action] Enter Room (Effect) and select category (Body Effect)'):
            main_page.enter_room(3)
            main_page.select_LibraryRoom_category('Body Effect')

        with step('[Action] Search library for "Star Shower" and drag media to timeline'):
            media_room_page.search_library('Star Shower')
            time.sleep(DELAY_TIME * 2)  # Wait for search to complete
            main_page.drag_media_to_timeline_playhead_position("Star Shower")

        with step('[Verify] Check if [Try for Free] button is shown'):
            if not main_page.exist(L.base.try_for_free_dialog.btn_try_for_free):
                assert False, "[Try for Free] button not shown"

        with step('[Action] Click [Try for Free] button'):
            target = main_page.exist(L.base.try_for_free_dialog.btn_try_for_free)
            if target:
                main_page.mouse.click(*target.center)
                time.sleep(DELAY_TIME)

        with step('[Action] Wait for downloading [Body Effect]'):
            self.check_download_body_effect()

        with step('[Verify] Check [Effect] button existence after applying body effect'):
            if not main_page.exist(L.tips_area.button.btn_effect_modify):
                assert False, "[Effect] button does not exist after applying effect"
        
        # [L409] 3.4 Pip Designer > Auto cutout > [Ess.] show try before buy dialog
        # with uuid("1cd72a43-b2c9-4cb6-a517-7ed05349e232") as case:

        with step('[Action] Select [Pip Designer] from [Tip Areas] and check result is True'):
            if not tips_area_page.tools.select_PiP_Designer():
                assert False, "Pip Designer not selected correctly"

        with step('[Action] Enter [Express Mode] and take a screenshot of the preview'):
            pip_designer_page.switch_mode("Express Mode")
            preview_before_cutout = main_page.snapshot(locator=L.pip_designer.preview)

        with step('[Action] Enable Chromakey'):
            pip_designer_page.apply_chromakey(bApply=1)

        with step('[Verify] Check if [Try for Free] button is shown'):
            if not main_page.exist(L.base.try_for_free_dialog.btn_try_for_free):
                assert False, "[Try for Free] button not shown"

        # [L410] 3.4 Pip Designer > Auto cutout > [Ess.] click "Try for Free"
        # with uuid("3b82099e-b0af-4337-b7d3-53e5310a47ba") as case:

        with step('[Action] Click [Try for Free] button'):
            target = main_page.exist(L.base.try_for_free_dialog.btn_try_for_free)
            main_page.mouse.click(*target.center)
            time.sleep(DELAY_TIME)

        with step('[Action] Wait for downloading AI module'):
            self.check_downloading_AI_module()

        with step('[Verify] Check preview is updated after applying cutout effect'):
            preview_after_cutout = main_page.snapshot(locator=L.pip_designer.preview)
            if not main_page.compare(preview_before_cutout, preview_after_cutout, similarity=0.95):
                assert False, "Preview did not update as expected after applying cutout effect! Similarity should < 0.95"

        with step('[Action] Click [OK] to close [Pip Designer]'):
            pip_designer_page.click_ok()

        with step('[Action] Click [Play] in playback window'):
            playback_window_page.Edit_Timeline_PreviewOperation('Play')

        with step('[Verify] Check if preview window is different when playing'):
            if not main_page.Check_PreviewWindow_is_different(area=main_page.area.preview.main, sec=3):
                assert False, "Preview window is not different when playing"

        with step('[Action] Press [Space] key to pause the preview'):
            main_page.press_space_key()

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.effect_room
    @pytest.mark.body_effect
    @pytest.mark.pip_designer
    @pytest.mark.chromakey
    @pytest.mark.ai_module
    @pytest.mark.name('[test_essential_premium_func_31_27] Verify the handling of the [Premium for exporting] dialog after clicking [Export] with applied body effect and auto cutout')
    @exception_screenshot
    def test_essential_premium_func_31_27(self):
        '''
        0. Ensure the dependency test ('test_essential_premium_func_31_26') is run and passed
        1. Click [Export] button (L.main.btn_produce)
        2. Check [Premium for exporting] dialog (L.base.try_for_free_dialog.icon_premium) pops up
        3. Check [Now Now] button (L.base.pou_dialog.btn_not_now) is shown on [Premium for exporting] dialog
        4. Click [Not Now] button to leave
        '''
        dependency_test = "test_essential_premium_func_31_26"
        self.ensure_dependency(dependency_test)

        # [L411] 3.4 Pip Designer > Auto cutout > [Ess.] Click [Export]
        # with uuid("7bbcbe2e-e502-4c0b-94cd-628c9a8d59ae") as case:

        with step('[Action] Click [Export] button'):
            main_page.click(L.main.btn_produce)

        with step('[Verify] Check [Premium for exporting] dialog pops up'):
            premium_dialog = main_page.exist(L.base.try_for_free_dialog.icon_premium)
            if not premium_dialog:
                assert False, "[Premium for exporting] dialog did not pop up!"

        with step('[Verify] Check [Now Now] button is shown on [Premium for exporting] dialog'):
            assert main_page.exist(L.base.pou_dialog.btn_not_now), "[Now Now] button is not shown on dialog"

        with step('[Action] Click [Not Now] button to leave'):
            main_page.click(L.base.pou_dialog.btn_not_now)

        assert True


    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.launch
    @pytest.mark.import_media
    @pytest.mark.fix_enhance
    @pytest.mark.lightening_adjustment
    @pytest.mark.extreme_backlight
    @pytest.mark.pip_designer
    @pytest.mark.chromakey
    @pytest.mark.ai_module
    @pytest.mark.name('[test_essential_premium_func_31_28] Apply Lighting Adjustment and Cutout Effect in [Pip Designer] and check [Premium] related functions')
    @exception_screenshot
    def test_essential_premium_func_31_25(self):
        '''
        1. Clear [AI Module] Files > Clear Cache > Launch APP > Launch Essential build
        2. If [What\'s new] dialog (L.base.seasonal_bb_window.main) is shown > Press [ESC] key to close
        3. Import media for local file (Test_Material_Folder + 'Produce_Local/4978895.mov') > Handle high definition dialog
        4. Select media ('4978895.mov') by library icon view > Insert media ('4978895.mov') to timeline
        5. Click [Fix Enhance] button on [Tips Area]
        6. Enable [Lighting Adjustment] > Enable [Extreme Backlight] > Set value in [Fix Enhance] to (90)
        7. Get value in [Fix Enhance] > Check value is (90)
        8. Select [Pip Designer] from [Tip Areas] and check result is True
        9. Enter [Express Mode] by click (L.pip_designer.express) > Screenshot (L.pip_designer.preview)
        10. Enable Chromakey
        11. Check if [Try for Free] button (L.base.try_for_free_dialog.btn_try_for_free) is shown
        12. Click [Try for Free] button
        13. Wait for downloading AI module
        14. Check preview is not updated after applying cutout effect (similarity>0.8)
        15. Click [OK] to close [Pip Designer]
        '''
        with step('[Action] Clear [AI Module] Files and Cache, Launch APP, and Launch Essential Build'):
            main_page.clear_AI_module()
            main_page.clear_cache()
            main_page.start_app()
            self.launch_Essential_build()

        with step('[Action] Close [What\'s new] dialog if shown'):
            if main_page.exist(L.base.seasonal_bb_window.main):
                main_page.press_esc_key()

        with step('[Action] Import media (4978895.mov) from local file'):
            media_path = Test_Material_Folder + 'Produce_Local/4978895.mov'
            media_room_page.import_media_file(media_path)
            media_room_page.handle_high_definition_dialog()

        with step('[Action] Select media (4978895.mov) by library icon view and insert to timeline'):
            main_page.select_library_icon_view_media('4978895.mov')
            main_page.insert_media()

        with step('[Action] Click [Fix Enhance] button on [Tips Area]'):
            main_page.tips_area_click_fix_enhance()

        with step('[Action] Enable [Lighting Adjustment] > Enable [Extreme Backlight] > Set value to 90 in [Fix Enhance]'):
            fix_enhance_page.fix.enable_lighting_adjustment(value=True)
            fix_enhance_page.fix.lighting_adjustment.enable_extreme_backlight(True)
            fix_enhance_page.fix.lighting_adjustment.extreme_backlight.set_value(90)

        with step('[Verify] Check value in [Fix Enhance] is 90'):
            current_value = fix_enhance_page.fix.lighting_adjustment.extreme_backlight.get_value()
            if current_value != '90':
                assert False, f"Lighting adjustment value is not 90! Expected: 90; Actual: {current_value}"

        # [L412] 3.4 Pip Designer > apply Auto cutout > [Ess.] show try before buy dialog
        # with uuid("fcd45b9b-7f84-484b-8f31-c32eb9803b86") as case:

        with step('[Action] Select [Pip Designer] from [Tip Areas] and check result is True'):
            if not tips_area_page.tools.select_PiP_Designer():
                assert False, "Pip Designer not selected correctly"

        with step('[Action] Enter [Express Mode] and take a screenshot of the preview'):
            pip_designer_page.switch_mode("Express Mode")
            preview_before_cutout = main_page.snapshot(locator=L.pip_designer.preview)

        with step('[Action] Enable Chromakey'):
            pip_designer_page.apply_chromakey(bApply=1)

        with step('[Verify] Check if [Try for Free] button is shown'):
            if not main_page.exist(L.base.try_for_free_dialog.btn_try_for_free):
                assert False, "[Try for Free] button not shown"

        # [L413] 3.4 Pip Designer > Auto cutout > [Ess.] click "Try for Free"
        # with uuid("b7e1a152-dee5-488d-8564-2cbe7cda1385") as case:

        with step('[Action] Click [Try for Free] button'):
            target = main_page.exist(L.base.try_for_free_dialog.btn_try_for_free)
            main_page.mouse.click(*target.center)
            time.sleep(DELAY_TIME)

        with step('[Action] Wait for downloading AI module'):
            self.check_downloading_AI_module()

        with step('[Verify] Check preview is updated after applying cutout effect'):
            preview_after_cutout = main_page.snapshot(locator=L.pip_designer.preview)
            if main_page.compare(preview_before_cutout, preview_after_cutout, similarity=0.8):
                #
                assert False, "Preview updated as unexpected after applying cutout effect! Similarity should > 0.8"

        with step('[Action] Click [OK] to close [Pip Designer]'):
            pip_designer_page.click_ok()

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.essential
    @pytest.mark.fix_enhance
    @pytest.mark.lightening_adjustment
    @pytest.mark.extreme_backlight
    @pytest.mark.pip_designer
    @pytest.mark.chromakey
    @pytest.mark.ai_module
    @pytest.mark.name('[test_essential_premium_func_31_29] Verify the handling of the [Premium for exporting] dialog after clicking [Export] with applied body effect and auto cutout')
    @exception_screenshot
    def test_essential_premium_func_31_29(self):
        '''
        0. Ensure the dependency test ('test_essential_premium_func_31_28') is run and passed
        1. Click [Export] button (L.main.btn_produce)
        2. Check [Premium for exporting] dialog (L.base.try_for_free_dialog.icon_premium) pops up
        3. Check [Now Now] button (L.base.pou_dialog.btn_not_now) is shown on [Premium for exporting] dialog
        4. Click [Not Now] button to leave
        '''
        dependency_test = "test_essential_premium_func_31_28"
        self.ensure_dependency(dependency_test)

        # [L414] 3.4 Pip Designer > Auto cutout > [Ess.] Click [Export]
        # with uuid("48d05346-ea4e-4dc8-851e-efb8bc390f4a") as case:

        with step('[Action] Click [Export] button'):
            main_page.click(L.main.btn_produce)

        with step('[Verify] Check [Premium for exporting] dialog pops up'):
            premium_dialog = main_page.exist(L.base.try_for_free_dialog.icon_premium)
            if not premium_dialog:
                assert False, "[Premium for exporting] dialog did not pop up!"

        with step('[Verify] Check [Now Now] button is shown on [Premium for exporting] dialog'):
            assert main_page.exist(L.base.pou_dialog.btn_not_now), "[Now Now] button is not shown on dialog"

        with step('[Action] Click [Not Now] button to leave'):
            main_page.click(L.base.pou_dialog.btn_not_now)

        assert True

    @pytest.mark.essential_premium_func
    @pytest.mark.sign
    @pytest.mark.essential
    @pytest.mark.name('[test_essential_premium_func_31_30] Sign in 365 account')
    @exception_screenshot
    def test_essential_premium_func_31_30(self):
        '''
        1. Sign in 365 account
        '''
        with step('[Action] Sign in 365 account'):
            self.sign_in_365_again()

        assert True


    @pytest.mark.effect_room_func
    @pytest.mark.launch
    @pytest.mark.effect_room
    @pytest.mark.content_pack
    @pytest.mark.search_libary
    @pytest.mark.sort
    @pytest.mark.my_favorites
    @pytest.mark.name('[test_effect_room_func_32_1] Add 3 [Template] to [My Favorites] and Sort by [Name] in [Effect Room]')
    @exception_screenshot
    def test_effect_room_func_32_1(self):
        '''
        1. Start App
        2. Enter Room (Effect)(3)
        3. Select Category ('Style Effect') in Library Room > my_favorites_list = ['Solarize', 'Halftone', 'Chinese Painting']
        4. Search library ('chinese') > Select media (my_favorites_list[2]) > right click > Choose ('Add to', 'My Favorites') in right click menu
        5. Click [Cancel] button in search library
        6. Search library ('Halftone') > Select media (my_favorites_list[1]) > right click > Choose ('Add to', 'My Favorites') in right click menu
        7. Click [Cancel] button in search library
        8. Search library ('Solarize') > Select media (my_favorites_list[0]) > right click > Choose ('Add to', 'My Favorites') in right click menu
        9. Click [Cancel] button in search library
        10. Select Category ('My Favorites') in Library Room > Screenshot (locator=main_page.area.library_icon_view)
        11. Sort by [Name] in [Library Menu]
        12. Check preview is updated after sorted by [Name] with similarity<0.95 and similarity>0.6
        13. Sort by [Name] in [Library Menu] to set to default status
        14. Select media (my_favorites_list[0]) > right click > Choose ('Remove from My Favorites') in right click menu
        15. Select media (my_favorites_list[1]) > right click > Choose ('Remove from My Favorites') in right click menu
        16. Select media (my_favorites_list[2]) > right click > Choose ('Remove from My Favorites') in right click menu       
        '''
        my_favorites_list = ['Solarize', 'Halftone', 'Chinese Painting']
        
        with step("[Action] Start App"):
            main_page.start_app()

        with step("[Action] Enter Room (Effect)(3)"):
            main_page.enter_room(3)

        with step("[Action] Select Category ('Style Effect') in Library Room"):
            main_page.select_LibraryRoom_category('Style Effect')

        with step("[Action] Search library ('chinese') and add media to My Favorites"):
            media_room_page.search_library('chinese')
            main_page.select_library_icon_view_media(my_favorites_list[2])
            main_page.right_click()
            main_page.select_right_click_menu('Add to', 'My Favorites')
            media_room_page.search_library_click_cancel()

        with step("[Action] Search library ('Halftone') and add media to My Favorites"):
            media_room_page.search_library('Halftone')
            main_page.select_library_icon_view_media(my_favorites_list[1])
            main_page.right_click()
            main_page.select_right_click_menu('Add to', 'My Favorites')
            media_room_page.search_library_click_cancel()

        with step("[Action] Search library ('Solarize') and add media to My Favorites"):
            media_room_page.search_library('Solarize')
            main_page.select_library_icon_view_media(my_favorites_list[0])
            main_page.right_click()
            main_page.select_right_click_menu('Add to', 'My Favorites')

        with step("[Action] Select Category ('My Favorites') in Library Room"):
            main_page.select_LibraryRoom_category('My Favorites')

        # [L248] 2.3 Effect Room > My Favorites sorting rule
        # with uuid("aeca8061-63b1-4d65-9feb-5854c7cdbc08") as case:

        with step("[Action] Screenshot of library icon view"):
            library_snapshot = main_page.snapshot(locator=main_page.area.library_icon_view)

        with step("[Action] Sort by [Name] in [Library Menu]"):
            media_room_page.library_menu_sort_by_name()

        with step("[Verify] Check preview is updated after sorted by [Name]"):
            preview_snapshot = main_page.snapshot(locator=main_page.area.library_icon_view)
            if main_page.compare(library_snapshot, preview_snapshot, similarity=0.95):
                assert False, "Preview did not update as expected! Similarity should < 0.95"
            if not main_page.compare(library_snapshot, preview_snapshot, similarity=0.6):
                assert False, "Preview did not update correctly! Similarity should > 0.6"

        with step("[Action] Sort by [Name] in [Library Menu] to set to default status"):
            media_room_page.library_menu_sort_by_name()

        with step("[Action] Remove 'Solarize' from My Favorites"):
            main_page.select_library_icon_view_media(my_favorites_list[0])
            main_page.right_click()
            main_page.select_right_click_menu('Remove from My Favorites')

        with step("[Action] Remove 'Halftone' from My Favorites"):
            main_page.select_library_icon_view_media(my_favorites_list[1])
            main_page.right_click()
            main_page.select_right_click_menu('Remove from My Favorites')

        with step("[Action] Remove 'Chinese Painting' from My Favorites"):
            main_page.select_library_icon_view_media(my_favorites_list[2])
            main_page.right_click()
            main_page.select_right_click_menu('Remove from My Favorites')

        assert True

    @pytest.mark.effect_room_func
    @pytest.mark.effect_room
    @pytest.mark.content_pack
    @pytest.mark.name('[test_effect_room_func_32_2] Verify preview update after dragging scroll bar in Effect Room')
    @exception_screenshot
    def test_effect_room_func_32_2(self):
        '''
        0. Ensure the dependency test ('test_effect_room_func_32_1') is run and passed
        1. Select Category ('Blending Effect') > Screenshot (locator=L.base.Area.library_icon_view)
        2. Drag [Scroll Bar] to (0.4) in [Effect Room]
        3. Check preview is updated after drag [Scroll Bar] to (0.4) with similarity<0.95
        4. Drag [Scroll Bar] to (1) in [Effect Room]
        5. Drag [Scroll Bar] to (0.963) in [Effect Room]
        6. Check preview is updated after drag [Scroll Bar] to (0.963) with similarity<0.95
        '''
        
        with step("[Action] Ensure the dependency test 'test_effect_room_func_32_1' is run and passed"):
            dependency_test = "test_effect_room_func_32_1"
            self.ensure_dependency(dependency_test)

        # [L250] 2.3 Effect Room > Check other IAD category > sorting rule
        # with uuid("1420b07d-7dc0-49ec-aa60-7a8cd5798eb3") as case:

        with step("[Action] Select Category ('Blending Effect') and capture screenshot"):
            main_page.select_LibraryRoom_category('Blending Effect')
            initial_preview = main_page.snapshot(locator=L.base.Area.library_icon_view)

        with step("[Action] Drag [Scroll Bar] to (0.4) in [Effect Room]"):
            effect_room_page.drag_EffectRoom_Scroll_Bar(0.4)

        with step("[Verify] Check preview is updated after drag [Scroll Bar] to (0.4)"):
            updated_preview_0_4 = main_page.snapshot(locator=L.base.Area.library_icon_view)
            if main_page.compare(initial_preview, updated_preview_0_4, similarity=0.95):
                assert False, "Preview did not update as expected after dragging scroll bar to 0.4! Similarity should < 0.95"

        with step("[Action] Drag [Scroll Bar] to (1) in [Effect Room]"):
            effect_room_page.drag_EffectRoom_Scroll_Bar(1)

        with step("[Action] Drag [Scroll Bar] to (0.963) in [Effect Room]"):
            effect_room_page.drag_EffectRoom_Scroll_Bar(0.963)

        with step("[Verify] Check preview is updated after drag [Scroll Bar] to (0.963)"):
            updated_preview_0_963 = main_page.snapshot(locator=L.base.Area.library_icon_view)
            if main_page.compare(updated_preview_0_4, updated_preview_0_963, similarity=0.95):
                assert False, "Preview did not update as expected after dragging scroll bar to 0.963! Similarity should < 0.95"

        assert True


    @pytest.mark.effect_room_func
    @pytest.mark.effect_room
    @pytest.mark.search_library
    @pytest.mark.name('[test_effect_room_func_32_3] Verify no results found for special characters search in [Effect Room]')
    @exception_screenshot
    def test_effect_room_func_32_3(self):
        '''
        0. Ensure the dependency test ('test_effect_room_func_32_2') is run and passed
        1. Search library ('@#$%^')
        2. Check [No results] string (L.media_room.txt_no_search_result) is shown with AXValue='No results for "@#$%^"'
        '''
        
        dependency_test = "test_effect_room_func_32_2"
        self.ensure_dependency(dependency_test)

        # [L252] 2.3 Effect Room > Search @#$%^
        # with uuid("6965de5e-78c3-4d89-8eba-4aa8d2977004") as case:

        with step("[Action] Search library with special characters '@#$%^'"):
            media_room_page.search_library('@#$%^')

        with step("[Verify] Check if 'No results' text is displayed with correct AXValue"):
            result_text =  main_page.exist(L.media_room.txt_no_search_result)
            if result_text.AXValue != 'No results for "@#$%^"':
                assert False, f"AXValue is incorrect! Expected 'No results for \"@#$%^\"', but got '{ax_value}'"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.launch
    @pytest.mark.import_media
    @pytest.mark.precut
    @pytest.mark.single_trim
    @pytest.mark.name('[test_tip_areas_func_33_1] Check able to enter [Precut] Window with [Single Trim] button')
    @exception_screenshot
    def test_tip_areas_func_33_1(self):
        '''
        1. Clear Cache > Start App
        2. Import media from local (Test_Material_Folder + 'Produce_Local/Produce_G182.mp4')
        3. Select media (Produce_G182.mp4) > Click [Precut...] from right click menu
        4. Check [Single Trim] button (L.precut.single_trim) is shown in [Precut] window
        5. Close [Precut] Window and check result is True
        '''
        
        with step("[Action] Clear Cache and Start App"):
            main_page.clear_cache()
            main_page.start_app()

        with step("[Action] Import media from local (Test_Material_Folder + 'Produce_Local/Produce_G182.mp4')"):
            media_room_page.import_media_file(Test_Material_Folder + "Produce_Local/Produce_G182.mp4")

        # [L280] 4.1 Basic > Trim > Entry (from Precut)
        # with uuid("f700865e-864a-4a3f-8823-8ba456586b94") as case:

        with step("[Action] Select media (Produce_G182.mp4) and click [Precut...] from right click menu"):
            media_room_page.select_library_icon_view_media("Produce_G182.mp4")
            media_room_page.library_clip_context_menu_precut()

        with step("[Verify] Check [Single Trim] button is shown in [Precut] window"):
            if not main_page.is_exist(L.precut.single_trim):
                assert False, "Single Trim button is not shown in [Precut] window!"

        with step("[Action] Close [Precut] Window and check result is True"):
            leave_result = precut_page.close_precut_window()
            if leave_result != True:
                assert False, "Failed to close Precut window or incorrect result!"
        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.precut
    @pytest.mark.single_trim
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_2] Apply [Mark In] and [Mark Out] in [Precut] Window with [Single Trim]')
    @exception_screenshot
    def test_tip_areas_func_33_2(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_1') is run and passed
        1. Select media (Produce_G182.mp4) > Click [Precut...] from right click menu
        2. Set timecode to ('00_00_00_21') at [Precut] Window
        3. Set [Single Trim Mark In] at [Precut] Window
        4. Set timecode to ('00_00_06_05') at [Precut] Window
        5. Set [Single Trim Mark Out] at [Precut] Window
        6. Get [Single Trim] Duration at [Precut] Window > Check duration is ('00_00_05:14')
        7. Click [OK] button in [Precut] Window
        8. Set timeline timecode to ('00_00_16_12') at [Main Window]
        9. Get timecode from slidebar from [Playback Window] > Check timecode is ('00_00_06:05')
        '''
        
        dependency_test = "test_tip_areas_func_33_1"
        self.ensure_dependency(dependency_test)

        # [L282] 4.1 Basic > Trim type > Single Trim
        # with uuid("4a4476a8-9b44-4a22-b607-638c18431bd2") as case:

        with step("[Action] Select media (Produce_G182.mp4) and click [Precut...] from right click menu"):
            media_room_page.select_library_icon_view_media("Produce_G182.mp4")
            media_room_page.library_clip_context_menu_precut()

        with step("[Action] Set timecode to '00_00_00_21' at [Precut] Window"):
            precut_page.set_precut_timecode("00_00_00_21")

        with step("[Action] Set [Single Trim Mark In] at [Precut] Window"):
            precut_page.tap_single_trim_mark_in()

        with step("[Action] Set timecode to '00_00_06_05' at [Precut] Window"):
            precut_page.set_precut_timecode("00_00_06_05")

        with step("[Action] Set [Single Trim Mark Out] at [Precut] Window"):
            precut_page.tap_single_trim_mark_out()

        with step("[Action] Get [Single Trim] Duration at [Precut] Window and check duration is '00:00:05:14'"):
            trim_duration = precut_page.get_precut_single_trim_duration()
            if trim_duration != "00:00:05:14":
                assert False, f"Trim duration mismatch! Expected: 00:00:05:14, Got: {trim_duration}"

        with step("[Action] Click [OK] button in [Precut] Window"):
            precut_page.click_ok()

        with step("[Action] Set timeline timecode to '00_00_16_12' at [Main Window]"):
            main_page.set_timeline_timecode("00_00_16_12")

        with step("[Action] Get timecode from slidebar from [Playback Window] and check timecode is '00_00_06_05'"):
            playback_timecode = playback_window_page.get_timecode_slidebar()
            if playback_timecode != "00_00_06_05":
                assert False, f"Playback timecode mismatch! Expected: 00_00_06_05, Got: {playback_timecode}"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.precut
    @pytest.mark.import_media
    @pytest.mark.single_trim
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_3] Check Default [Single Trim] duration in [Precut] Window with type (Video)')
    @exception_screenshot
    def test_tip_areas_func_33_3(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_2') is run and passed
        1. Select media ('Precut 0001') > Click [Insert] button from [Tip Areas]
        2. Click [Trim] button in [Tips Area] with type ('video')
        3. Get [Single Trim] duration in [Precut] window
        4. Check duration is ('00:00:05:14')
        '''
        
        dependency_test = "test_tip_areas_func_33_2"
        self.ensure_dependency(dependency_test)

        # [L281] 4.1 Basic > Entry > Tips area > Trim
        # with uuid("bfe1147f-d5fc-46e4-a105-243696f4b7a6") as case:

        with step("[Action] Select media ('Precut 0001') and click [Insert] button from [Tip Areas]"):
            media_room_page.select_library_icon_view_media("Precut 0001")
            main_page.tips_area_insert_media_to_selected_track()

        with step("[Action] Click [Trim] button in [Tips Area] with type ('video')"):
            tips_area_page.click_TipsArea_btn_Trim(type='video')

        with step("[Action] Get [Single Trim] duration in [Precut] window"):
            trim_duration = precut_page.get_precut_single_trim_duration()

        with step("[Verify] Check duration is ('00:00:05:14')"):
            if trim_duration != '00:00:05:14':
                assert False, f"Trim duration mismatch! Expected: '00:00:05:14', Got: {trim_duration}"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.precut
    @pytest.mark.multi_trim
    @pytest.mark.mark_in
    @pytest.mark.mark_out
    @pytest.mark.name('[test_tip_areas_func_33_4] Verify [Multi Trim] Mode and preview after Multi Trim [Mark In/Out]')
    @exception_screenshot
    def test_tip_areas_func_33_4(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_3') is run and passed
        1. Switch [Trim Mode] in [Precut Window] with type ('Multi')
        2. Click [Remove] Button in [Multi Trim] Window
        3. Set timecode to ('00_00_01_14') at [Precut] Window
        4. Set [Multi Trim Mark In]
        5. Set timecode to ('00_00_04_09') at [Precut] Window
        6. Set [Multi Trim Mark Out]
        7. Set timecode to ('00_00_06_18') at [Precut] Window
        8. Set [Multi Trim Mark In]
        9. Set timecode to ('00_00_08_25') at [Precut] Window
        10. Set [Multi Trim Mark Out]
        11. Check preview (locator=L.precut.main_window, file_name=Auto_Ground_Truth_Folder + 'L283.png') matches Ground Truth (Ground_Truth_Folder + 'L283.png') with similarity=0.95
        '''
        
        dependency_test = "test_tip_areas_func_33_3"
        self.ensure_dependency(dependency_test)

        # [L283] 4.1 Basic > Tips type > Multi Trim
        # with uuid("a7560fe1-5c8f-450c-9455-ddcfabf65d76") as case:

        with step("[Action] Switch [Trim Mode] in [Precut Window] with type ('Multi')"):
            precut_page.edit_precut_switch_trim_mode('Multi')

        with step("[Action] Click [Remove] Button in [Multi Trim] Window"):
            precut_page.tap_multi_trim_remove()

        with step("[Action] Set timecode to ('00_00_01_14') at [Precut] Window"):
            precut_page.set_precut_timecode('00_00_01_14')

        with step("[Action] Set [Multi Trim Mark In]"):
            precut_page.tap_multi_trim_mark_in()

        with step("[Action] Set timecode to ('00_00_04_09') at [Precut] Window"):
            precut_page.set_precut_timecode('00_00_04_09')

        with step("[Action] Set [Multi Trim Mark Out]"):
            precut_page.tap_multi_trim_mark_out()

        with step("[Action] Set timecode to ('00_00_06_18') at [Precut] Window"):
            precut_page.set_precut_timecode('00_00_06_18')

        with step("[Action] Set [Multi Trim Mark In]"):
            precut_page.tap_multi_trim_mark_in()

        with step("[Action] Set timecode to ('00_00_08_25') at [Precut] Window"):
            precut_page.set_precut_timecode('00_00_08_25')

        with step("[Action] Set [Multi Trim Mark Out]"):
            precut_page.tap_multi_trim_mark_out()

        with step("[Verify] Check preview matches GT (L283.png)"):
            preview = main_page.snapshot(
                locator=L.precut.main_window,
                file_name=Auto_Ground_Truth_Folder + 'L283.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L283.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L283.png)! Similarity should > 0.95"

        assert True



    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.precut
    @pytest.mark.preview
    @pytest.mark.play_video
    @pytest.mark.muti_trim
    @pytest.mark.name('[test_tip_areas_func_33_5] Verify preview after trimming in [Mutil Trim] and playback')
    @exception_screenshot
    def test_tip_areas_func_33_5(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_4') is run and passed
        1. Click [OK] button to leave [Precut] window
        2. Select timeline track (1)
        3. Check preview ((locator=L.base.Area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L284.png') matches Ground Truth (Ground_Truth_Folder + 'L284.png') with similarity=0.85
        4. Click [Stop] button in [Playback Window]
        5. Click [Play] button in [Playback Window]
        6. Check preview is updated when playing video (area=L.base.Area.preview.main, sec=2)
        7. Click [Stop] button in [Playback Window] to back to default status
        8. Click [Up One Level] button in media content
        '''
        
        dependency_test = "test_tip_areas_func_33_4"
        self.ensure_dependency(dependency_test)

        # [L284] 4.1 Basic > Trim > Preview trimmed clip in timeline
        # with uuid("1e8b6a66-bbb6-4408-9618-5e8cb2c9ded5") as case:

        with step("[Action] Click [OK] button to leave [Precut] window"):
            precut_page.click_ok()

        with step("[Action] Select timeline track (1)"):
            main_page.timeline_select_track(1)

        with step("[Verify] Check preview matches GT (L284.png) with similarity=0.85"):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.main,
                file_name=Auto_Ground_Truth_Folder + 'L284.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L284.png', preview, similarity=0.85):
                # Similarity should be greater than 0.85 for matching preview
                assert False, "Preview does not match GT (L284.png)! Similarity should > 0.85"

        with step("[Action] Click [Stop] button in [Playback Window]"):
            playback_window_page.Edit_Timeline_PreviewOperation('Stop')

        with step("[Action] Click [Play] button in [Playback Window]"):
            playback_window_page.Edit_Timeline_PreviewOperation('Play')

        with step("[Verify] Check preview is updated when playing video"):
            preview_updated = main_page.Check_PreviewWindow_is_different(area=L.base.Area.preview.main, sec=2)
            if not preview_updated:
                # Similarity should be > expected threshold
                assert False, "Preview is not updated when playing video in 2 secs!"

        with step("[Action] Click [Stop] button in [Playback Window] to back to default status"):
            playback_window_page.Edit_Timeline_PreviewOperation('Stop')

        with step("[Action] Click [Up One Level] button in media content"):
            media_room_page.media_content_click_up_one_level()

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.timeline
    @pytest.mark.timecode
    @pytest.mark.split
    @pytest.mark.sync_by_audio
    @pytest.mark.blending_mode
    @pytest.mark.name('[test_tip_areas_func_33_6] Split > Sync Audio > Blending Mode > Check Preview')
    @exception_screenshot
    def test_tip_areas_func_33_6(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_5') is run and passed
        1. Select timeline track (1)
        2. Set timecode to ('00_00_05_02') at [Main Window]
        3. Insert video to timeline (Skateboard 01.mp4) > Insert media to selected track
        4. Set timecode to ('00_00_05_00') at [Main Window]
        5. Enter [Split] via hotkey
        6. Select multiple clips on timeline (media1_track_index=0, media1_clip_index=2, media2_track_index=0, media2_clip_index=3)
        7. Click [Sync by Audio] button in [Tips Area]
        8. Select a clip on timeline (track_index=4, clip_index=0)
        9. Select [Blending Mode] from [Tip Areas] > Set [Blending Mode] value to ('Difference')
        10. Click [OK] button to leave [Blending Mode]
        11. Set timecode to ('00_00_03_16') at [Main Window]
        12. Select timeline track (1)
        13. Insert media to timeline (Landscape 01.jpg) > Insert media to selected track
        14. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L288.png') matches Ground Truth (Ground_Truth_Folder + 'L288.png') with similarity=0.85
        15. Undo 6 times
        '''
        dependency_test = "test_tip_areas_func_33_5"
        self.ensure_dependency(dependency_test)

        # [L288] 4.1 Basic > Sync by audio
        # with uuid("d460d39c-c631-4eb4-8e8f-4700ae1edabc") as case:

        with step("[Action] Select timeline track (1)"):
            main_page.timeline_select_track(1)

        with step("[Action] Set timecode to ('00_00_05_02') at [Main Window]"):
            main_page.set_timeline_timecode('00_00_05_02')

        with step("[Action] Insert video to timeline ('Skateboard 01.mp4') > Insert media to selected track"):
            main_page.select_library_icon_view_media('Skateboard 01.mp4')
            main_page.tips_area_insert_media_to_selected_track()


        with step("[Action] Set timecode to ('00_00_05_00') at [Main Window]"):
            main_page.set_timeline_timecode('00_00_05_00')

        with step("[Action] Enter [Split] via hotkey"):
            main_page.tap_Split_hotkey()

        with step("[Action] Select multiple clips on timeline (media1_track_index=0, media1_clip_index=2, media2_track_index=0, media2_clip_index=3)"):
            timeline_operation_page.select_multiple_timeline_media(media1_track_index=0, media1_clip_index=2, media2_track_index=0, media2_clip_index=3)
        
        with step("[Action] Click [Sync by Audio] button in [Tips Area]"):
            tips_area_page.click_sync_by_audio()

        with step("[Action] Select a clip on timeline (track_index=4, clip_index=0)"):
            timeline_operation_page.select_timeline_media(track_index=4, clip_index=0)

        with step("[Action] Select [Blending Mode] from [Tip Areas] > Set [Blending Mode] value to ('Difference')"):
            tips_area_page.tools.select_Blending_Mode()
            blending_mode_page.set_blending_mode('Difference')

        with step("[Action] Click [OK] button to leave [Blending Mode]"):
            blending_mode_page.click_ok()

        with step("[Action] Set timecode to ('00_00_03_16') at [Main Window]"):
            main_page.set_timeline_timecode('00_00_03_16')

        with step("[Action] Select timeline track (1)"):
            main_page.timeline_select_track(1)

        with step("[Action] Insert media to timeline ('Landscape 01.jpg') > Insert media to selected track"):
            main_page.select_library_icon_view_media('Landscape 01.jpg')
            main_page.tips_area_insert_media_to_selected_track()

        with step("[Verify] Check preview matches Ground Truth (L288.png) with similarity=0.85"):
            preview = main_page.snapshot(locator=main_page.area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L288.png')
            if not main_page.compare(Ground_Truth_Folder + 'L288.png', preview, similarity=0.85):
                assert False, "Preview does not match Ground Truth (L288.png)! Similarity should > 0.85"

        with step("[Action] Undo 6 times"):
            for _ in range(6):
                main_page.click_undo()
                time.sleep(DELAY_TIME * 0.5)

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.timeline
    @pytest.mark.timecode
    @pytest.mark.split
    @pytest.mark.copy_paste
    @pytest.mark.blending_mode
    @pytest.mark.crop_image
    @pytest.mark.name('[test_tip_areas_func_33_7] Insert media, apply blending mode, crop image, and verify')
    @exception_screenshot
    def test_tip_areas_func_33_7(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_6') is run and passed
        1. Select timeline track (3)
        2. Insert video to timeline (Skateboard 01.mp4) > Insert media to selected track
        3. Set timecode to ('00_00_05_00') at [Main Window]
        4. Enter [Split] via hotkey
        5. Select a clip ('Skateboard 01') on timeline
        6. Right click > Select ('Cut', 'Cut and Fill Gap') on right click menu
        7. Set timecode to ('00_00_06_00') at [Main Window]
        8. Select timeline track (2) > Right Click > Select ('Paste') on right click menu
        9. Select a clip on timeline (track_index=4, clip_index=0)
        10. Select [Blending Mode] from [Tip Areas] > Set [Blending Mode] value to ('Difference')
        11. Click [OK] button to leave [Blending Mode]
        12. Set timecode to ('00_00_03_16') at [Main Window] > Select timeline track (1)
        13. Select media ('Landscape 01.jpg') > Insert media to selected track
        14. Select [Crop Image] button on [Tip Areas]
        15. Check [Crop The Selected Image] window (L.crop_image.crop_window) is shown
        '''
        dependency_test = "test_tip_areas_func_33_6"
        self.ensure_dependency(dependency_test)

        with step("[Action] Select timeline track (3)"):
            main_page.timeline_select_track(3)

        with step("[Action] Insert video to timeline ('Skateboard 01.mp4') > Insert media to selected track"):
            main_page.select_library_icon_view_media('Skateboard 01.mp4')
            main_page.tips_area_insert_media_to_selected_track()

        with step("[Action] Set timecode to ('00_00_05_00') at [Main Window]"):
            main_page.set_timeline_timecode('00_00_05_00')

        with step("[Action] Enter [Split] via hotkey"):
            main_page.tap_Split_hotkey()

        with step("[Action] Select a clip ('Skateboard 01') on timeline"):
            main_page.select_timeline_media('Skateboard 01')

        with step("[Action] Right click > Select ('Cut', 'Cut and Fill Gap') on right click menu"):
            main_page.right_click()
            main_page.select_right_click_menu('Cut', 'Cut and Fill Gap')

        with step("[Action] Set timecode to ('00_00_06_00') at [Main Window]"):
            main_page.set_timeline_timecode('00_00_06_00')

        with step("[Action] Select timeline track (2) > Right Click > Select ('Paste') on right click menu"):
            main_page.timeline_select_track(2)
            main_page.right_click()
            main_page.select_right_click_menu("Paste")

        with step("[Action] Select a clip on timeline (track_index=4, clip_index=0)"):
            timeline_operation_page.select_timeline_media(track_index=4, clip_index=0)

        with step("[Action] Select [Blending Mode] from [Tip Areas] > Set [Blending Mode] value to ('Difference')"):
            tips_area_page.tools.select_Blending_Mode()
            blending_mode_page.set_blending_mode('Difference')

        with step("[Action] Click [OK] button to leave [Blending Mode]"):
            main_page.select_right_click_menu("OK")

        with step("[Action] Set timecode to ('00_00_03_16') at [Main Window] > Select timeline track (1)"):
            main_page.set_timeline_timecode('00_00_03_16')
            main_page.timeline_select_track(1)

        # [L285] 4.1 Basic > Crop > Open [Crop Image] window
        # with uuid("40626f6d-c346-4962-98bc-f72027dbfbee") as case:

        with step("[Action] Select media ('Landscape 01.jpg') > Insert media to selected track"):
            main_page.select_library_icon_view_media('Landscape 01.jpg')
            main_page.tips_area_insert_media_to_selected_track()

        with step("[Action] Select [Crop Image] button on [Tip Areas]"):
            tips_area_page.click_TipsArea_btn_Crop_Image()

        with step("[Verify] Check [Crop The Selected Image] window (L.crop_image.crop_window) is shown"):
            if not main_page.exist(L.crop_image.crop_window):
                assert False, "Crop Image window is not shown!"

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.crop_image
    @pytest.mark.timecode
    @pytest.mark.save_project
    @pytest.mark.name('[test_tip_areas_func_33_8] Crop Image and Verify Preview, Save Project')
    def test_tip_areas_func_33_8(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_7') is run and passed
        1. Set [Crop Aspect Ratio] to (4:3)
        2. Click [OK] button to leave [Crop Image] window
        3. Set timeline timecode to ('00_00_04_00') at main page
        4. Check preview (locator=L.base.Area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L286.png') matches Ground Truth (Ground_Truth_Folder + 'L286.png') with similarity=0.9
        5. Select timeline track (2) > Set timecode to ('00_00_13_18') at main page
        6. Save project as ('test_tip_areas_func_33_8') in (Test_Material_Folder + 'BFT_21_Stage1/')
        '''
        dependency_test = "test_tip_areas_func_33_7"
        self.ensure_dependency(dependency_test)

        # [L286] 4.1 Basic > Crop > Set crop area
        # with uuid("cdfdf12d-cbe7-46bd-80d1-044f5afa6ec7") as case:
            # [L287] 4.1 Basic > Crop > Preview image in timeline
            # with uuid("3bf42f48-6698-4d77-b7ee-4935bff07938") as case:

        with step("[Action] Set [Crop Aspect Ratio] to (4:3)") :
            crop_image_page.set_aspect_ratio("4:3")
        
        with step("[Action] Click [OK] button to leave [Crop Image] window"):
            crop_image_page.click_ok()
        
        with step("[Action] Set timeline timecode to ('00_00_04_00') at main page"):
            main_page.set_timeline_timecode("00_00_04_00", is_verify=True)
        
        with step("[Verify] Screenshot preview and compare with Ground Truth (L286.png)"):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.main, 
                file_name=Auto_Ground_Truth_Folder + 'L286.png'
            )
            if not main_page.compare(
                Ground_Truth_Folder + 'L286.png', preview, similarity=0.9):
                # Similarity should be greater than 0.9 for a matching preview
                assert False, "Preview does not match Ground Truth (L286.png)! Similarity should > 0.9"
        
        with step("[Action] Select timeline track (2) > Set timecode to ('00_00_13_18') at main page"):
            main_page.timeline_select_track(2)
            main_page.set_timeline_timecode("00_00_13_18", is_verify=True)

        with step("[Action] Save project as ('test_tip_areas_func_33_8') in (Test_Material_Folder + 'BFT_21_Stage1/')"):
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(
                name='test_tip_areas_func_33_8', 
                folder_path=Test_Material_Folder + 'BFT_21_Stage1/'
            )

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.insert_media
    @pytest.mark.pan_zoom
    @pytest.mark.name('[test_tip_areas_func_33_9] Open Packed Project, Insert Media, Pan Zoom and Close')
    def test_tip_areas_func_33_9(self):
        '''
        1. Start App
        2. Open packed project ('Packed_Project/test_tip_areas_func_33_9_from_test_tip_areas_func_33_8.pdk', 'Extracted_Folder/test_tip_areas_func_33_9')
        3. Select media ('Food.jpg') from library icon view > Insert clip in library to selected track
        4. Select timeline media ('Food.jpg') > Select timeline track (0), clip index (2)
        5. Click [Pan Zoom] button in [Tips Area]
        6. Check if [Pan Zoom] window is shown
        7. Click [Close] button to leave [Pan Zoom] window
        '''
        
        with step("[Action] Start App"):
            main_page.start_app()

        with step("[Action] Open packed project ('Packed_Project/test_tip_areas_func_33_9_from_test_tip_areas_func_33_8.pdk', 'Extracted_Folder/test_tip_areas_func_33_9')"):
            self.open_packed_project(
                'Packed_Project/test_tip_areas_func_33_9_from_test_tip_areas_func_33_8.pdk', 
                'Extracted_Folder/test_tip_areas_func_33_9'
            )

        with step("[Action] Select media ('Food.jpg') from library icon view > Insert clip in library to selected track"):
            main_page.select_library_icon_view_media('Food.jpg')
            main_page.library_clip_context_menu_insert_on_selected_track()

        # [L290] 4.2 > Tools > Pan & Zoom (image) > [Pan & Zoom] page > UI switch to Pan & Zoom
        # with uuid("a7c4224f-cdd0-4eae-af6c-6d8c138e1469") as case:

        with step("[Action] Select timeline media ('Food.jpg') > Select timeline track (0), clip index (2)"):
            main_page.select_timeline_media(track_index=0, clip_index=2)

        with step("[Action] Click [Pan Zoom] button in [Tips Area]"):
            tips_area_page.tools.select_Pan_Zoom()

        with step("[Verify] Check if [Pan Zoom] window is shown"):
            if not pan_zoom_page.is_enter_pan_zoom():
                assert False, "Pan Zoom window is not shown!"

        with step("[Action] Click [Close] button to leave [Pan Zoom] window"):
            pan_zoom_page.click_close()

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.pan_zoom
    @pytest.mark.motion_style
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_10] Apply Motion Style, Set Timecode, and Verify Preview')
    def test_tip_areas_func_33_10(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_9') is run and passed
        1. Set timeline timecode to ('00_00_03_05') at main page
        2. Click [Pan Zoom] button in [Tips Area]
        3. Apply [Motion Style] by index (3)
        4. Set timeline timecode to ('00_00_04_20') at main page
        5. Check preview (locator=L.base.Area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L291.png') matches Ground Truth (Ground_Truth_Folder + 'L291.png') with similarity=0.9
        6. Click [Close] button to leave [Pan Zoom] window
        '''
        
        dependency_test = "test_tip_areas_func_33_9"
        self.ensure_dependency(dependency_test)

        # [L291] 4.2 > Tools > Pan & Zoom (image) > [Pan & Zoom] page > Select style
        # with uuid("f7470554-59f0-46e2-bf7d-e25c83ac7a54") as case:

        with step("[Action] Set timeline timecode to ('00_00_03_05') at main page"):
            main_page.set_timeline_timecode("00_00_03_05", is_verify=True)

        with step("[Action] Click [Pan Zoom] button in [Tips Area]"):
            tips_area_page.tools.select_Pan_Zoom()

        with step("[Action] Apply [Motion Style] by index (3)"):
            pan_zoom_page.apply_motion_style(3)

        with step("[Action] Set timeline timecode to ('00_00_04_20') at main page"):
            main_page.set_timeline_timecode("00_00_04_20", is_verify=True)

        with step("[Verify] Check preview matches GT (L291.png) with similarity 0.9"):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.main, 
                file_name=Auto_Ground_Truth_Folder + 'L291.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L291.png', preview, similarity=0.9):
                # Similarity should be greater than 0.9 for a matching preview
                assert False, "Preview does not match GT (L291.png)! Similarity should > 0.9"

        with step("[Action] Click [Close] button to leave [Pan Zoom] window"):
            pan_zoom_page.click_close()

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.pan_zoom
    @pytest.mark.motion_style
    @pytest.mark.name('[test_tip_areas_func_33_11] Apply [Motion Style] in [Pan Zoom] window and Verify Preview')
    def test_tip_areas_func_33_11(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_10') is run and passed
        1. Select a clip on timeline(track_index=0, clip_index=3)
        2. Select [Pan Zoom] button in [Tips Area]
        3. Apply [Motion Style] by index (11)
        4. Click [Apply to All] button in [Pan Zoom] window
        5. Click [Close] button to leave [Pan Zoom] window
        6. Select a clip on timeline(track_index=0, clip_index=2)
        7. Select [Pan Zoom] button in [Tips Area]
        8. Set timeline timecode to ('00_00_04_20') at main page
        9. Check preview (locator=L.base.Area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L291.png') matches Ground Truth (Ground_Truth_Folder + 'L291.png') with similarity=0.9
        '''
        
        dependency_test = "test_tip_areas_func_33_10"
        self.ensure_dependency(dependency_test)

        # [L292] 4.2 > Tools > Pan & Zoom (image) > [Pan & Zoom] page > Apply to all
        # with uuid("01b7c7c1-017d-4915-a6a0-f0b224a967d3") as case:

        with step("[Action] Select a clip on timeline(track_index=0, clip_index=3)"):
            timeline_operation_page.select_timeline_media(track_index=0, clip_index=3)

        with step("[Action] Select [Pan Zoom] button in [Tips Area]"):
            tips_area_page.tools.select_Pan_Zoom()

        with step("[Action] Apply [Motion Style] by index (11)"):
            pan_zoom_page.apply_motion_style(11)

        with step("[Action] Click [Apply to All] button in [Pan Zoom] window"):
            pan_zoom_page.click_apply_to_all()

        with step("[Action] Click [Close] button to leave [Pan Zoom] window"):
            pan_zoom_page.click_close()

        with step("[Action] Select a clip on timeline(track_index=0, clip_index=2)"):
            timeline_operation_page.select_timeline_media(track_index=0, clip_index=2)

        with step("[Action] Select [Pan Zoom] button in [Tips Area]"):
            tips_area_page.tools.select_Pan_Zoom()

        with step("[Action] Set timeline timecode to ('00_00_04_20') at main page"):
            main_page.set_timeline_timecode("00_00_04_20", is_verify=True)

        with step("[Verify] Check preview matches GT (L291.png) with similarity 0.9"):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.main, 
                file_name=Auto_Ground_Truth_Folder + 'L291.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L291.png', preview, similarity=0.9):
                # Similarity should be greater than 0.9 for a matching preview
                assert False, "Preview does not match GT (L291.png)! Similarity should > 0.9"

        assert True
    
    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.motion_designer
    @pytest.mark.pan_zoom
    @pytest.mark.name('[test_tip_areas_func_33_12] Set [Aspect Ratio] and [Rotate] in [Motion Designer] and check value')
    def test_tip_areas_func_33_12(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_11') is run and passed
        1. Click [Motion Designer] button
        2. Get [Aspect Ratio] value in [Motion Designer]
        3. Check [Aspect Ratio] is ('16:9')
        4. Set [Aspect Ratio] 16:9
        5. Drag preview object to rotate clockwise with degree (210)
        6. Get [Value] in [Motion Designer] and check is ('90')
        '''
        
        dependency_test = "test_tip_areas_func_33_11"
        self.ensure_dependency(dependency_test)

        # [L293] 4.2 > Tools > Pan & Zoom (image) > Magic Motion Designer > Adjust position / scale / Rotate
        # with uuid("e0c915bc-66a2-4b11-bda4-206127c3dcc6") as case:

        with step("[Action] Click [Motion Designer] button"):
            pan_zoom_page.click_motion_designer()

        with step("[Action] Get [Aspect Ratio] value in [Motion Designer]"):
            aspect_ratio = pan_zoom_page.magic_motion_designer.get_current_aspect_ratio()

        with step("[Verify] Check [Aspect Ratio] is ('16:9')"):
            if aspect_ratio != '16:9':
                assert False, f"Aspect Ratio is incorrect! Expected: '16:9', Got: {aspect_ratio}"

        with step("[Action] Set [Aspect Ratio] to 16:9"):
             pan_zoom_page.magic_motion_designer.set_aspect_ratio_16_9('ok')

        with step("[Action] Drag preview object to rotate clockwise with degree (210)"):
            pan_zoom_page.magic_motion_designer.drag_preview_object_rotate_clockwise(radius=210)

        with step("[Action] Get [Value] in [Motion Designer] and check is ('90')"):
            current_degree_value = pan_zoom_page.magic_motion_designer.rotation.get_value()
            if current_degree_value != '90':
                assert False, f"Rotation value is incorrect! Expected: '90', Got: {current_degree_value}"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.pan_zoom
    @pytest.mark.motion_designer
    @pytest.mark.name('[test_tip_areas_func_33_13] Check previes as GT for test_tip_areas_func_33_12')
    def test_tip_areas_func_33_13(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_12') is run and passed
        1. Set [Timecode] to ('00_00_02_08') in [Motion Designer]
        2. Check preview (locator=L.pan_zoom.magic_motion_designer.preview_area, file_name=Auto_Ground_Truth_Folder + 'L295.png') matches Ground Truth (Ground_Truth_Folder + 'L295.png') with similarity=0.95
        '''
        
        dependency_test = "test_tip_areas_func_33_12"
        self.ensure_dependency(dependency_test)

        # [L295] 4.2 > Tools > Pan & Zoom (image) > Magic Motion Designer > Adjust position / scale / Rotate
        # with uuid("ca4cf4fe-ee2f-4312-8416-59574bcebd88") as case:

        with step("[Action] Set [Timecode] to ('00_00_02_08') in [Motion Designer]"):
            pan_zoom_page.magic_motion_designer.set_timecode('00_00_02_08')

        with step("[Verify] Check preview matches GT (L295.png) with similarity 0.95"):
            preview = main_page.snapshot(
                locator=L.pan_zoom.magic_motion_designer.preview_area,
                file_name=Auto_Ground_Truth_Folder + 'L295.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L295.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match Ground Truth (L295.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.pan_zoom
    @pytest.mark.motion_designer
    @pytest.mark.rotation
    @pytest.mark.name('[test_tip_areas_func_33_14] Set [Rotation] in [Magic Motion Designer] and Verify Preview')
    def test_tip_areas_func_33_14(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_13') is run and passed
        1. Set Rotation value to (120) in [Magic Motion Designer]
        2. Click [OK] button to close [Motion Designer]
        3. Check preview (locator=L.base.Area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L296.png') matches Ground Truth (Ground_Truth_Folder + 'L296.png') with similarity=0.95
        '''
        
        dependency_test = "test_tip_areas_func_33_13"
        self.ensure_dependency(dependency_test)

        # [L296] 4.2 > Tools > Pan & Zoom (image) > Magic Motion Designer > Apply (check timeline preview)
        # with uuid("fcb0b21f-bc5f-45cb-b23d-5f8bdce523ad") as case:

        with step("[Action] Set Rotation value to (120) in [Magic Motion Designer]"):
            pan_zoom_page.magic_motion_designer.rotation.set_value(120)

        with step("[Action] Click [OK] button to close [Motion Designer]"):
            pan_zoom_page.magic_motion_designer.click_ok()

        with step("[Verify] Check preview matches GT (L296.png) with similarity 0.95"):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.main,
                file_name=Auto_Ground_Truth_Folder + 'L296.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L296.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match Ground Truth (L296.png)! Similarity should > 0.95"

        assert True
    
    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.pan_zoom
    @pytest.mark.motion_designer
    @pytest.mark.name('[test_tip_areas_func_33_15] Reset [Motion Designer] and Verify Preview')
    def test_tip_areas_func_33_15(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_14') is run and passed
        1. Click [Motion Designer] button
        2. Click [Reset] button in [Motion Designer]
        3. Check preview (locator=L.pan_zoom.magic_motion_designer.preview_area, file_name=Auto_Ground_Truth_Folder + 'L294.png') matches Ground Truth (Ground_Truth_Folder + 'L294.png') with similarity=0.95
        4. Click [Undo] button in [Motion Designer]
        5. Click [OK] button to close [Motion Designer]
        6. Click [OK] button to leave [Pan Zoom] window
        '''
        # [L294] 4.2 > Tools > Pan & Zoom (image) > Magic Motion Designer > Reset
        # with uuid("ca1defd1-293c-4f10-b65b-cc9d6dfe1ff4") as case:

        dependency_test = "test_tip_areas_func_33_14"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click [Motion Designer] button"):
            pan_zoom_page.click_motion_designer()

        with step("[Action] Click [Reset] button in [Motion Designer]"):
            pan_zoom_page.magic_motion_designer.click_reset()

        with step("[Verify] Check preview matches GT (L294.png) with similarity 0.95"):
            preview = main_page.snapshot(
                locator=L.pan_zoom.magic_motion_designer.preview_area,
                file_name=Auto_Ground_Truth_Folder + 'L294.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L294.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match Ground Truth (L294.png)! Similarity should > 0.95"

        with step("[Action] Click [Undo] button in [Motion Designer]"):
            pan_zoom_page.magic_motion_designer.click_undo()

        with step("[Action] Click [OK] button to close [Motion Designer]"):
            pan_zoom_page.magic_motion_designer.click_ok()

        with step("[Action] Click [OK] button to leave [Pan Zoom] window"):
            pan_zoom_page.click_close()

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.crop_zoom_pan
    @pytest.mark.position
    @pytest.mark.scale
    @pytest.mark.name('[test_tip_areas_func_33_16] Verify Crop Zoom Pan with Aspect Ratio and Position X update')
    @exception_screenshot
    def test_tip_areas_func_33_16(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_15') is run and passed
        1. Select a clip on timeline (track_index=0, clip_index=0)
        2. Select [Crop/Zoom/Pan] from [Tip Areas]
        3. Check if [Crop Zoom Pan] Window is shown
        4. Set [Aspect Ratio] to (1:1) > Screenshot (locator=L.crop_zoom_pan.window)
        5. Set [Position X] to (0.627) > Check preview is updated after set [Position X] with similarity<0.99
        6. Set [Scale Width] to (0.45) > Check preview is updated after set [Scale Width] with similarity<0.99
        7. Check preview (locator=L.crop_zoom_pan.window, file_name=Auto_Ground_Truth_Folder + 'L297.png') matches Ground Truth (Ground_Truth_Folder + 'L297.png') with similarity=0.95
        '''
        dependency_test = "test_tip_areas_func_33_15"
        self.ensure_dependency(dependency_test)

        # [L297] 4.2 > Tools > Crop / Zoom / Pan > Adjust position / scale / rotation
        # with uuid("1425e2a8-b34c-44ef-8e5e-70c36b51eed8") as case:

        with step("[Action] Select a clip on timeline (track_index=0, clip_index=0)"):
            timeline_operation_page.select_timeline_media(track_index=0, clip_index=0)

        with step("[Action] Select [Crop/Zoom/Pan] from [Tip Areas]"):
            tips_area_page.tools.select_CropZoomPan()

        with step("[Verify] Check if [Crop Zoom Pan] Window is shown"):
            if not crop_zoom_pan_page.is_enter_crop_zoom_pan():
                assert False, "Crop Zoom Pan window is not shown!"

        with step("[Action] Set [Aspect Ratio] to (1:1)"):
            crop_zoom_pan_page.set_AspectRatio_1_1()
            crop_zoom_pan_page.snapshot(locator=L.crop_zoom_pan.window)

        with step("[Action] Set [Position X] to (0.627)"):
            crop_zoom_pan_page.set_position_x('0.627')
            preview_position_x = main_page.snapshot(locator=L.crop_zoom_pan.window)
            if main_page.compare(preview_position_x, similarity=0.99):
                assert False, "Preview did not update correctly after setting Position X! Similarity should < 0.99"

        with step("[Action] Set [Scale Width] to (0.45)"):
            crop_zoom_pan_page.set_scale_width(0.45)
            preview_scale_width = main_page.snapshot(locator=L.crop_zoom_pan.window)
            if main_page.compare(preview_scale_width, similarity=0.99):
                assert False, "Preview did not update correctly after setting Scale Width! Similarity should < 0.99"

        with step("[Verify] Check preview matches GT (L297.png) with similarity=0.95"):
            final_preview = main_page.snapshot(locator=L.crop_zoom_pan.window, file_name=Auto_Ground_Truth_Folder + 'L297.png')
            if not main_page.compare(Ground_Truth_Folder + 'L297.png', final_preview, similarity=0.95):
                assert False, "Preview does not match Ground Truth (L297.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.crop_zoom_pan
    @pytest.mark.position
    @pytest.mark.scale
    @pytest.mark.name('[test_tip_areas_func_33_17] Check preview as GT for test_tip_areas_func_33_16')
    @exception_screenshot
    def test_tip_areas_func_33_17(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_16') is run and passed
        1. Set [Timecode] to ('00_00_01_24') in [Crop Zoom Pan] window
        2. Check preview (locator=L.crop_zoom_pan.preview, file_name=Auto_Ground_Truth_Folder + 'L299.png') matches Ground Truth (Ground_Truth_Folder + 'L299.png') with similarity=0.95
        '''
        
        dependency_test = "test_tip_areas_func_33_16"
        self.ensure_dependency(dependency_test)

        # [L299] 4.2 > Tools > Crop / Zoom / Pan > Preview
        # with uuid("6dcb0c75-2424-4716-9a68-059d53834b8f") as case:

        with step("[Action] Set [Timecode] to ('00_00_01_24') in [Crop Zoom Pan] window"):
            crop_zoom_pan_page.set_timecode("00_00_01_24")

        with step("[Verify] Check preview matches GT (L299.png) with similarity=0.95"):
            preview = main_page.snapshot(
                locator=L.crop_zoom_pan.preview,
                file_name=Auto_Ground_Truth_Folder + 'L299.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L299.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L299.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.crop_zoom_pan
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_18] Check preview as GT for test_tip_areas_func_33_16 at [Main Window]')
    @exception_screenshot
    def test_tip_areas_func_33_18(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_17') is run and passed
        1. Click [OK] Button to leave [Crop Zoom Pan] window
        2. Set [Timecode] to ('00_00_01_15') in [Main Window]
        3. Check preview (locator=L.base.Area.preview.main, file_name=Auto_Ground_Truth_Folder + 'L300.png') matches Ground Truth (Ground_Truth_Folder + 'L300.png') with similarity=0.95
        '''
        
        dependency_test = "test_tip_areas_func_33_17"
        self.ensure_dependency(dependency_test)

        # [L300] 4.2 > Tools > Crop / Zoom / Pan > Apply (Check timeline preview after apply)
        # with uuid("6ef237b8-e614-4a71-a1da-8f764d159680") as case:

        with step("[Action] Click [OK] Button to leave [Crop Zoom Pan] window"):
            crop_zoom_pan_page.click_ok()

        with step("[Action] Set [Timecode] to ('00_00_01_15') in [Main Window]"):
            main_page.set_timeline_timecode("00_00_01_15")

        with step("[Verify] Check preview matches GT (L300.png) with similarity=0.95"):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.main,
                file_name=Auto_Ground_Truth_Folder + 'L300.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L300.png', preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L300.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.crop_zoom_pan
    @pytest.mark.reset
    @pytest.mark.save_project
    @pytest.mark.name('[test_tip_areas_func_33_19] Reset in [Crop Zoom Pan] > Check Default [Aspect Ratio]/ [Scale Width] > Save Project')
    @exception_screenshot
    def test_tip_areas_func_33_19(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_18') is run and passed
        1. Click [Crop/Zoom/Pan] from [Tip Areas]
        2. Click [Reset] button in [Crop Zoom Pan] window
        3. Get [Aspect Ratio] value in [Crop Zoom Pan] window and check is ('16:9')
        4. Get [Scale Width] value in [Crop Zoom Pan] window and check is ('1.000')
        5. Click [OK] button to leave [Crop Zoom Pan] window
        6. Save project as ('test_tip_areas_func_33_18') in (Test_Material_Folder + 'BFT_21_Stage1/')
        '''
        
        dependency_test = "test_tip_areas_func_33_18"
        self.ensure_dependency(dependency_test)

        # [L298] 4.2 > Tools > Crop / Zoom / Pan > Reset
        # with uuid("d4ea74c3-f6d6-4e49-be46-c0b9d452c447") as case:

        with step("[Action] Click [Crop/Zoom/Pan] from [Tip Areas]"):
            tips_area_page.tools.select_CropZoomPan()

        with step("[Action] Click [Reset] button in [Crop Zoom Pan] window"):
            crop_zoom_pan_page.click_reset()

        with step("[Verify] Get [Aspect Ratio] value in [Crop Zoom Pan] window and check is ('16:9')"):
            aspect_ratio = crop_zoom_pan_page.get_current_AspectRatio()
            if aspect_ratio != '16:9':
                assert False, f"Aspect Ratio is incorrect! Expected: '16:9', Got: {aspect_ratio}"

        with step("[Verify] Get [Scale Width] value in [Crop Zoom Pan] window and check is ('1.000')"):
            scale_width = crop_zoom_pan_page.get_scale_width()
            if scale_width != '1.000':
                assert False, f"Scale Width is incorrect! Expected: '1.000', Got: {scale_width}"

        with step("[Action] Click [OK] button to leave [Crop Zoom Pan] window"):
            crop_zoom_pan_page.click_ok()

        with step("[Action] Save project as 'test_tip_areas_func_33_18' in (Test_Material_Folder + 'BFT_21_Stage1/')"):
            main_page.handle_save_file_dialog(name="test_tip_areas_func_33_19", folder_path=Test_Material_Folder + 'BFT_21_Stage1/')

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.import_media
    @pytest.mark.video_speed
    @pytest.mark.duration
    @pytest.mark.name('[test_tip_areas_func_33_20] Verify packed project and video speed changes')
    @exception_screenshot
    def test_tip_areas_func_33_20(self):
        '''
        1. Start APP
        2. Open packed project ('Packed_Project/test_tip_areas_func_33_19_from_test_tip_areas_func_33_18.pdk', 'Extracted_Folder/test_tip_areas_func_33_19')
        3. Select timeline track (2) > Set timecode to ('00_00_11_00') at main page
        4. Import media from local (Test_Material_Folder + 'Produce_Local/4978895.mov') > Handle high definition dialog
        5. Insert media to selected track
        6. Select [Video Speed] from [Tip Areas]
        7. Get [New Video Duration] value for [Entire Clip] > Check the default value is ('00:00:17:26')
        8. Set [New Video Duration] value for [Entire Clip] to ('00_00_10_26')
        9. Get [New Video Duration] value for [Entire Clip] > Check the default value is ('00:00_10_26')
        '''

        with step("[Action] Start APP"):
            main_page.start_app()

        with step("[Action] Open packed project ('Packed_Project/test_tip_areas_func_33_19_from_test_tip_areas_func_33_18.pdk', 'Extracted_Folder/test_tip_areas_func_33_19')"):
            self.open_packed_project('Packed_Project/test_tip_areas_func_33_19_from_test_tip_areas_func_33_18.pdk', 'Extracted_Folder/test_tip_areas_func_33_19')

        with step("[Action] Select timeline track (2) > Set timecode to ('00_00_11_00') at main page"):
            main_page.timeline_select_track(2)
            main_page.set_timeline_timecode('00_00_11_00')

        with step("[Action] Import media from local (Test_Material_Folder + 'Produce_Local/4978895.mov') > Handle high definition dialog"):
            media_room_page.import_media_file(Test_Material_Folder + 'Produce_Local/4978895.mov')
            media_room_page.handle_high_definition_dialog(option='no')

        with step("[Action] Insert media to selected track"):
            main_page.tips_area_insert_media_to_selected_track()

        # [L304] 4.2 Tools > Video Speed > Entire Clip > Adjust from new video duration
        # with uuid("5beaaacf-885e-4d34-8e20-402e9404f46b") as case:

        with step("[Action] Select [Video Speed] from [Tip Areas]"):
            tips_area_page.tools.select_VideoSpeed()

        with step("[Verify] Get [New Video Duration] value for [Entire Clip] > Check the default value is ('00:00:17:26')"):
            new_video_duration = video_speed_page.Edit_VideoSpeed_EntireClip_NewVideoDuration_GetValue()
            if new_video_duration != '00:00:17:26':
                assert False, f"Expected video duration '00:00:17:26', but got {new_video_duration}"

        with step("[Action] Set [New Video Duration] value for [Entire Clip] to ('00_00_10_26')"):
            video_speed_page.Edit_VideoSpeed_EntireClip_NewVideoDuration_SetValue('00_00_10_26')

        with step("[Verify] Get [New Video Duration] value for [Entire Clip] > Check the default value is ('00:00:10:26')"):
            new_video_duration = video_speed_page.Edit_VideoSpeed_EntireClip_NewVideoDuration_GetValue()
            if new_video_duration != '00:00:10:26':
                assert False, f"Expected video duration '00:00:10:26', but got {new_video_duration}"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.video_speed
    @pytest.mark.speed_multiplier
    @pytest.mark.name('[test_tip_areas_func_33_21] Apply [Speed Multiplier] in [Video Speed] window and Verify Preview')
    @exception_screenshot
    def test_tip_areas_func_33_21(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_19') is run and passed
        1. Get [Speed Multiplier] value for [Entire Clip] > Check the default value is ('1.644')
        2. Set [Speed Multiplier] for [Entire Clip] by dragging the slider to (42.45)
        3. Set [Speed Multiplier] for [Entire Clip] by clicking the arrow button ('Up')
        4. Get [Speed Multiplier] value for [Entire Clip] > Check the default value is ('0.850')
        '''
        
        dependency_test = "test_tip_areas_func_33_19"
        self.ensure_dependency(dependency_test)

        # [L305] 4.2 Tools > Video Speed > Entire Clip > Adjust Speed multiplier
        # with uuid("875648d7-cadc-497d-869a-1f8c5a2f2409") as case:

        with step("[Action] Get [Speed Multiplier] value for [Entire Clip] > Check the default value is ('1.644')"):
            speed_multiplier = video_speed_page.Edit_VideoSpeedDesigner_EntireClip_SpeedMultiplier_GetValue()
            if speed_multiplier != '1.644':
                assert False, f"Expected Speed Multiplier '1.644', but got {speed_multiplier}"

        with step("[Action] Set [Speed Multiplier] for [Entire Clip] by dragging the slider to (42.45)"):
            video_speed_page.Edit_VideoSpeedDesigner_EntireClip_SpeedMultiplier_DragSlider(42.45)

        with step("[Action] Set [Speed Multiplier] for [Entire Clip] by clicking the arrow button ('Up')"):
            video_speed_page.Edit_VideoSpeedDesigner_EntireClip_SpeedMultiplier_ArrowButton('Up')

        with step("[Verify] Get [Speed Multiplier] value for [Entire Clip] > Check the default value is ('0.850')"):
            speed_multiplier = video_speed_page.Edit_VideoSpeedDesigner_EntireClip_SpeedMultiplier_GetValue()
            if speed_multiplier != '0.850':
                assert False, f"Expected Speed Multiplier '0.850', but got {speed_multiplier}"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.video_speed
    @pytest.mark.time_shift
    @pytest.mark.name('[test_tip_areas_func_33_22] Set [Create Time Shift] to Upper and check status in [Video Speed Designer]')
    @exception_screenshot
    def test_tip_areas_func_33_22(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_21') is run and passed
        1. Select Tab ('selected range') in [Video Speed Designer]
        2. Click [OK] button if [Do you want to continue?] dialog is shown
        3. Click [Create Time Shift] button to upper and check the result is True
        4. Check [Time Shift Upper] button (L.video_speed.time_shift_1) is disabled (Not exist)
        '''
        
        dependency_test = "test_tip_areas_func_33_21"
        self.ensure_dependency(dependency_test)

        # [L306] 4.2 Tools > Video Speed > Selected Range > Create a time shift
        # with uuid("48ded325-7c78-4c8a-be87-0959e9b0c833") as case:

        with step("[Action] Select Tab ('selected range') in [Video Speed Designer]"):
            video_speed_page.Edit_VideoSpeedDesigner_SelectTab('selected range')

        with step("[Action] Click [OK] button if [Do you want to continue?] dialog is shown"):
            main_page.exist_click(L.main.confirm_dialog.btn_ok, timeout=10)

        with step("[Action] Click [Create Time Shift] button to upper and check the result is True"):
            result = video_speed_page.VideoSpeedDesigner_SelectRange_Click_Upper_CreateTimeShift_btn()
            if not result:
                assert False, "Time shift upper button did not work as expected!"

        with step("[Verify] Check [Time Shift Upper] button (L.video_speed.time_shift_1) is disabled (Not exist)"):
            elem_btn = main_page.exist(L.video_speed.time_shift_1)
            if elem_btn.AXEnabled != False:
                assert False, "Time Shift Upper button is still enabled or exists when it should not."

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.video_speed
    @pytest.mark.speed_multiplier
    @pytest.mark.video_length
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_23] Set and verify [Speed Multiplier] and [Video Length] for Selected Range in [Video Speed Designer]')
    @exception_screenshot
    def test_tip_areas_func_33_23(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_22') is run and passed
        1. Get [Speed Multiplier] value for [Selected Range] > Check the default value is ('1.000')
        2. Set [Speed Multiplier] value for [Selected Range] to (1.500) > Check the value is ('1.500')
        3. Get [Video Length] value for [Select Range] > Check the default value is ('00:00:01:15')
        '''
        
        dependency_test = "test_tip_areas_func_33_22"
        self.ensure_dependency(dependency_test)

        # [L307] 4.2 Tools > Video Speed > Selected Range > Adjust speed (1.5x)
        # with uuid("2de16d6c-ea92-4c32-9557-4f972f23f720") as case:
        
        with step('[Action] Get [Speed Multiplier] value for [Selected Range]'):
            speed_multiplier = video_speed_page.Edit_VideoSpeedDesigner_SelectRange_SpeedMultiplier_GetValue()
        
        with step('[Verify] Check the default value is (1.000)'):
            if speed_multiplier != '1.000':
                assert False, f"Speed Multiplier for selected range is not as expected! Expected: 1.000, Got: {speed_multiplier}"

        with step('[Action] Set [Speed Multiplier] value for [Selected Range] to (1.500)'):
            video_speed_page.Edit_VideoSpeedDesigner_SelectRange_SpeedMultiplier_SetValue(1.500)

        with step('[Verify] Check the value is (1.500)'):
            updated_speed_multiplier = video_speed_page.Edit_VideoSpeedDesigner_SelectRange_SpeedMultiplier_GetValue()
            if updated_speed_multiplier != '1.500':
                assert False, f"Speed Multiplier for selected range is not as expected! Expected: 1.500, Got: {updated_speed_multiplier}"

        with step('[Action] Get [Video Length] value for [Selected Range]'):
            video_length = video_speed_page.Edit_VideoSpeedDesigner_SelectRange_VideoLength_GetValue()

        with step('[Verify] Check the default value is (00:00:01:15)'):
            if video_length != '00:00:01:15':
                assert False, f"Video Length for selected range is not as expected! Expected: 00:00:01:15, Got: {video_length}"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.video_speed
    @pytest.mark.reset
    @pytest.mark.video_length
    @pytest.mark.name('[test_tip_areas_func_33_24] Reset and check [Video Length] for Selected Range in [Video Speed Designer]')
    @exception_screenshot
    def test_tip_areas_func_33_24(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_23') is run and passed
        1. Click [Reset] button in [Video Speed Designer]
        2. Get [Video Length] value for [Select Range] > Check the default value is ('00:00:00:00')
        '''
        
        dependency_test = "test_tip_areas_func_33_23"
        self.ensure_dependency(dependency_test)

        # [L308] 4.2 Tools > Video Speed > Reset
        # with uuid("c79b1222-f933-4738-8062-39bf61d9e93c") as case:

        with step('[Action] Click [Reset] button in [Video Speed Designer]'):
            video_speed_page.Edit_VideoSpeedDesigner_ClickReset()

        with step('[Action] Get [Video Length] value for [Select Range]'):
            video_length = video_speed_page.Edit_VideoSpeedDesigner_SelectRange_VideoLength_GetValue()

        with step('[Verify] Check the default value is (00:00:00:00)'):
            if video_length != '00:00:00:00':
                assert False, f"Video Length for selected range is not as expected! Expected: 00:00:00:00, Got: {video_length}"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.video_speed
    @pytest.mark.timecode
    @pytest.mark.time_shift
    @pytest.mark.speed_multiplier
    @pytest.mark.save_project
    @pytest.mark.name('[test_tip_areas_func_33_25] Set [Time Shift] to upper > [Speed Mutiplier] to (10) > Check preview and Save project')
    @exception_screenshot
    def test_tip_areas_func_33_25(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_24') is run and passed
        1. Set [Timecode] to ('00_00_12_00') in [Video Speed Designer]
        2. Click [Create Time Shift] button to upper
        3. Set [Speed Multiplier] value for [Selected Range] to (10)
        4. Set [Timecode] to ('00_00_13_16') in [Video Speed Designer]
        5. Check preview (locator=L.video_speed.main, file_name=Auto_Ground_Truth_Folder + 'L309.png') matches Ground Truth (Ground_Truth_Folder + 'L309.png') with similarity=0.95
        6. Click [OK] button to leave [Video Speed Designer] window
        7. Save project as ('test_tip_areas_func_33_23') in (Test_Material_Folder + 'BFT_21_Stage1/')
        '''
        
        dependency_test = "test_tip_areas_func_33_24"
        self.ensure_dependency(dependency_test)

        # [L309] 4.2 Tools > Video Speed > Preview
        # with uuid("53aadaee-c816-446f-af87-a878ba5c8d0c") as case:

        with step('[Action] Set [Timecode] to (00_00_12_00) in [Video Speed Designer]'):
            video_speed_page.set_VideoSpeedDesigner_timecode('00_00_12_00')

        with step('[Action] Click [Create Time Shift] button to upper'):
            if not video_speed_page.VideoSpeedDesigner_SelectRange_Click_Upper_CreateTimeShift_btn():
                assert False, "Time shift upper button did not work as expected!"

        with step('[Action] Set [Speed Multiplier] value for [Selected Range] to (10)'):
            video_speed_page.Edit_VideoSpeedDesigner_SelectRange_SpeedMultiplier_SetValue(10)

        with step('[Action] Set [Timecode] to (00_00_13_16) in [Video Speed Designer]'):
            video_speed_page.set_VideoSpeedDesigner_timecode('00_00_13_16')

        with step('[Verify] Check preview (locator=L.video_speed.main, file_name=Auto_Ground_Truth_Folder + \'L309.png\') matches Ground Truth (Ground_Truth_Folder + \'L309.png\') with similarity=0.95'):
            preview = main_page.snapshot(
                locator=L.video_speed.main,
                file_name=Auto_Ground_Truth_Folder + 'L309.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L309.png', preview, similarity=0.95):
                assert False, "Preview does not match GT (L309.png)! Similarity should > 0.95"

        with step('[Action] Click [OK] button to leave [Video Speed Designer] window'):
            video_speed_page.Edit_VideoSpeedDesigner_ClickOK()

        with step('[Action] Save project as (test_tip_areas_func_33_23) in (Test_Material_Folder + \'BFT_21_Stage1/\')'):
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(
                name='test_tip_areas_func_33_23', 
                folder_path=Test_Material_Folder + 'BFT_21_Stage1/'
            )

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.blending_mode
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.name('[test_tip_areas_func_33_26] Set [Blending Mode] and Check Preview Updates')
    @exception_screenshot
    def test_tip_areas_func_33_26(self):
        '''
        1. Start App
        2. Open packed project ('Packed_Project/test_tip_areas_func_33_25_from_test_tip_areas_func_33_24.pdk', 'Extracted_Folder/test_tip_areas_func_33_25')
        3. Select timeline track (2) > Set timecode to ('00_00_00_00') at main page
        4. Select media ('Food.jpg') from [Library] Icon View > Insert media to selected track
        5. Screenshot (locator=L.base.Area.preview.only_mtk_view)
        6. Select [Blending Mode] from [Tip Areas] > Set [Blending Mode] value to ('Overlay')
        7. Click [OK] button to leave [Blending Mode] window
        8. Check preview is updated with similarity<0.95
        9. Select [Blending Mode] from [Tip Areas] > Set [Blending Mode] value to ('Screen')
        10. Click [OK] button to leave [Blending Mode] window
        11. Check preview is updated with similarity<0.98
        '''
        
        with step('[Action] Start App'):
            main_page.start_app()

        with step("[Action] Open packed project ('Packed_Project/test_tip_areas_func_33_25_from_test_tip_areas_func_33_24.pdk', 'Extracted_Folder/test_tip_areas_func_33_25')"):
            self.open_packed_project('Packed_Project/test_tip_areas_func_33_25_from_test_tip_areas_func_33_24.pdk', 'Extracted_Folder/test_tip_areas_func_33_25')

        with step('[Action] Select timeline track (2) > Set timecode to (00_00_00_00) at main page'):
            main_page.timeline_select_track(2)
            main_page.set_timeline_timecode('00_00_00_00')

        with step('[Action] Select media (\'Food.jpg\') from [Library] Icon View > Insert media to selected track'):
            main_page.select_library_icon_view_media('Food.jpg')
            main_page.tips_area_insert_media_to_selected_track()

        with step('[Action] Screenshot (locator=L.base.Area.preview.only_mtk_view)'):
            preview_0 = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        # [L319] 4.2 Tools > Blending Mode > Image
        # with uuid("76b12400-6632-4a70-88b6-e1787e0f2e10") as case:

        with step('[Action] Select [Blending Mode] from [Tip Areas] > Set [Blending Mode] value to (Overlay)'):
            tips_area_page.tools.select_Blending_Mode()
            blending_mode_page.set_blending_mode('Overlay')

        with step('[Action] Click [OK] button to leave [Blending Mode] window'):
            blending_mode_page.click_ok()

        with step('[Verify] Check preview is updated with similarity<0.95'):
            preview_overlay = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            if main_page.compare(preview_0, preview_overlay, similarity=0.95):
                assert False, "Preview did not update after setting Blending Mode to Overlay! Similarity should < 0.95"

        with step('[Action] Select [Blending Mode] from [Tip Areas] > Set [Blending Mode] value to (Screen)'):
            tips_area_page.tools.select_Blending_Mode()
            blending_mode_page.set_blending_mode('Screen')

        with step('[Action] Click [OK] button to leave [Blending Mode] window'):
            blending_mode_page.click_ok()

        with step('[Verify] Check preview is updated with similarity<0.98'):
            preview_screen = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            if main_page.compare(preview_overlay, preview_screen, similarity=0.98):
                assert False, "Preview did not update after setting Blending Mode to Screen! Similarity should < 0.98"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.timecode
    @pytest.mark.blending_mode
    @pytest.mark.name('[test_tip_areas_func_33_27] Verify [Blending Mode] changes and preview updates')
    @exception_screenshot
    def test_tip_areas_func_33_27(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_26') is run and passed
        1. Select timeline media (track_index=4, clip_index=0)
        2. Set timecode to ('00_00_03_00') at main page > Screenshot (locator=L.base.Area.preview.only_mtk_view)
        3. Select [Blending Mode] from [Tools] > Set [Blending Mode] value to ('Normal')
        4. Click [OK] button to leave [Blending Mode] window
        5. Check preview is updated with similarity<0.95
        6. Select [Blending Mode] from [Tools] > Set [Blending Mode] value to ('Multiply') > Screenshot (locator=L.base.Area.preview.only_mtk_view) as self.multiply_preview
        7. Click [OK] button to leave [Blending Mode] window
        8. Check preview is updated with similarity<0.95
        '''

        with step('[Action] Ensure the dependency test ("test_tip_areas_func_33_26") is run and passed'):
            dependency_test = 'test_tip_areas_func_33_26'
            self.ensure_dependency(dependency_test)

        # [L318] 4.2 Tools > Blending Mode > Video
        # with uuid("5bc6914b-b112-40e7-ad78-69df9425fb16") as case:

        with step('[Action] Select timeline media (track_index=4, clip_index=0)'):
            timeline_operation_page.select_timeline_media(track_index=4, clip_index=0)

        with step('[Action] Set timecode to (00_00_03_00) at main page > Screenshot (locator=L.base.Area.preview.only_mtk_view)'):
            main_page.set_timeline_timecode('00_00_03_00', is_verify=True)
            initial_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        with step('[Action] Select [Blending Mode] from [Tools] > Set [Blending Mode] value to (Normal)'):
            tips_area_page.tools.select_Blending_Mode()
            blending_mode_page.set_blending_mode('Normal')

        with step('[Action] Click [OK] button to leave [Blending Mode] window'):
            blending_mode_page.click_ok()

        with step('[Verify] Check preview is updated with similarity<0.95'):
            preview_normal = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            if main_page.compare(initial_preview, preview_normal, similarity=0.95):
                assert False, "Preview did not update after setting Blending Mode to Normal! Similarity should < 0.95"

        with step('[Action] Select [Blending Mode] from [Tools] > Set [Blending Mode] value to (Multiply)'):
            tips_area_page.tools.select_Blending_Mode()
            main_page.set_blending_mode('Multiply')

        with step('[Action] Screenshot (locator=L.base.Area.preview.only_mtk_view) as self.multiply_preview'):
            self.multiply_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        with step('[Action] Click [OK] button to leave [Blending Mode] window'):
            blending_mode_page.click_ok()

        with step('[Verify] Check preview is updated with similarity<0.95'):
            preview_multiply = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            if main_page.compare(self.multiply_preview, preview_multiply, similarity=0.95):
                assert False, "Preview did not update after setting Blending Mode to Multiply! Similarity should < 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.video_in_reverse
    @pytest.mark.name('[test_tip_areas_func_33_28] Verify [Video in Reverse] effect and preview update')
    @exception_screenshot
    def test_tip_areas_func_33_28(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_27') is run and passed
        1. Select [Video in Reverse] from [Tip Areas]
        2. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L310.png') matches Ground Truth (Ground_Truth_Folder + 'L310.png') with similarity=0.95
        '''
        
        with step('[Action] Ensure the dependency test ("test_tip_areas_func_33_27") is run and passed'):
            dependency_test = 'test_tip_areas_func_33_27'
            self.ensure_dependency(dependency_test)

        # [L310] 4.2 Tools > Video / Audio in Reverse > Tick
        # with uuid("bf0eaa18-6d18-4853-aab6-71b55d267007") as case:

        with step('[Action] Select [Video in Reverse] from [Tip Areas]'):
            tips_area_page.tools.select_Video_in_Reverse(skip=1)

        with step('[Verify] Check preview matches GT (L310.png) with similarity=0.95'):
            preview_snapshot = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, 
                                                file_name=Auto_Ground_Truth_Folder + 'L310.png')
            if not main_page.compare(Ground_Truth_Folder + 'L310.png', preview_snapshot, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match Ground Truth (L310.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.video_in_reverse
    @pytest.mark.name('[test_tip_areas_func_33_29] Verify [Video in Reverse] effect and preview update')
    @exception_screenshot
    def test_tip_areas_func_33_29(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_28') is run and passed
        1. Screenshot (locator=L.base.Area.preview.only_mtk_view)
        2. Select [Video in Reverse] from [Tip Areas] with (skip=1) > Screenshot (locator=L.base.Area.preview.only_mtk_view) as self.no_reverse_preview
        3. Check preview is updated with similarity<0.95
        4. Check preview is the same as self.multiply_preview with similarity>0.95
        '''
        
        with step('[Action] Ensure the dependency test ("test_tip_areas_func_33_28") is run and passed'):
            dependency_test = 'test_tip_areas_func_33_28'
            self.ensure_dependency(dependency_test)

        # [L311] 4.2 Tools > Video / Audio in Reverse > UnTick
        # with uuid("2aa40a98-c103-4394-8c49-0ab946b8a96b") as case:

        with step('[Action] Screenshot initial preview'):
            initial_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        with step('[Action] Select [Video in Reverse] from [Tip Areas] with (skip=1)'):
            tips_area_page.tools.select_Video_in_Reverse(skip=1)
            self.no_reverse_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        with step('[Verify] Check preview is updated with similarity<0.95'):
            if main_page.compare(initial_preview, self.no_reverse_preview, similarity=0.95):
                # Similarity should be less than 0.95 for an updated preview
                assert False, "Preview did not update after applying [Video in Reverse]! Similarity should < 0.95"

        with step('[Verify] Check preview is the same as self.multiply_preview with similarity>0.95'):
            if not main_page.compare(self.no_reverse_preview, self.multiply_preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match multiply preview! Similarity should > 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.audio_editor
    @pytest.mark.single_channel
    @pytest.mark.name('[test_tip_areas_func_33_30] Enable [Single Channel] in [Audio Editor] and Verify Preview Update')
    @exception_screenshot
    def test_tip_areas_func_33_30(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_29') is run and passed
        1. Select [Audio Editor] from [Tip Areas]
        2. Screenshot (locator=L.audio_editing.editor_window.preview_only_two_channel)
        3. Switch to [Single Channel] mode in [Audio Editor] window
        4. Check preview is updated with similarity<0.95
        '''
        dependency_test = 'test_tip_areas_func_33_29'
        self.ensure_dependency(dependency_test)

        # [L322] 4.2 Tools > Audio Editor > Set Channel
        # with uuid("3d06fc81-911c-4ac8-85a7-79111d7f7cb5") as case:

        with step('[Action] Select [Audio Editor] from [Tip Areas]'):
            tips_area_page.tools.select_Audio_Editor()

        with step('[Action] Screenshot current preview in [Audio Editor]'):
            initial_preview = main_page.snapshot(locator=L.audio_editing.editor_window.preview_only_two_channel)

        with step('[Action] Switch to [Single Channel] mode in [Audio Editor] window'):
            audio_editing_page.audio_editor.switch_single_channel(single_mode='yes')

        with step('[Verify] Check if preview is updated after switching to Single Channel mode'):
            updated_preview = main_page.snapshot(locator=L.audio_editing.editor_window.preview_only_two_channel)
            if main_page.compare(initial_preview, updated_preview, similarity=0.95):
                # Similarity should be less than 0.95 for updated preview
                assert False, "Preview did not update after switching to Single Channel mode! Similarity should < 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.audio_editor
    @pytest.mark.effect_phone
    @pytest.mark.name('[test_tip_areas_func_33_31] Apply [Effect Phone] in [Audio Editor] and Verify Preview Update')
    @exception_screenshot
    def test_tip_areas_func_33_31(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_30') is run and passed
        1. Open [Effect Phone] window in [Audio Editor] > Screenshot (locator=L.audio_editing.editor_window.preview_only_two_channel)
        2. Apply [Effect Phone] in [Audio Editor]
        3. Check preview is updated with similarity<0.95
        '''
        
        with step('[Action] Ensure the dependency test ("test_tip_areas_func_33_30") is run and passed'):
            dependency_test = 'test_tip_areas_func_33_30'
            self.ensure_dependency(dependency_test)

        # [L321] 4.2 Tools > Audio Editor > Apply each adjustment function
        # with uuid("902dbff1-18ec-4175-b29e-a41c53183ccc") as case:

        with step('[Action] Open [Effect Phone] window in [Audio Editor]'):
            audio_editing_page.audio_editor.open_special_effect_phone()

        with step('[Action] Screenshot current preview in [Audio Editor]'):
            initial_preview = main_page.snapshot(locator=L.audio_editing.editor_window.preview_only_two_channel)

        with step('[Action] Apply [Effect Phone] in [Audio Editor]'):
            audio_editing_page.audio_editor.apply_phone_effect()

        with step('[Verify] Check preview is updated after applying Effect Phone'):
            updated_preview = main_page.snapshot(locator=L.audio_editing.editor_window.preview_only_two_channel)
            if main_page.compare(initial_preview, updated_preview, similarity=0.95):
                # Similarity should be less than 0.95 for updated preview
                assert False, "Preview did not update after applying Effect Phone! Similarity should < 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.audio_editor
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_32] Check able to play video in [Audio Editor] and timecode is updated')
    @exception_screenshot
    def test_tip_areas_func_33_32(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_31') is run and passed
        1. Get [Timecode] in [Audio Editor] window
        2. Press [Space] key to play > Wait for (DELAY_TIME*2) > Press [Space] key to pause
        3. Get [Timecode] in [Audio Editor] window
        4. Check timecode is updated (not the same as original)
        '''
        
        with step('[Action] Ensure the dependency test ("test_tip_areas_func_33_31") is run and passed'):
            dependency_test = 'test_tip_areas_func_33_31'
            self.ensure_dependency(dependency_test)
        
        # [L323] 4.2 Tools > Audio Editor > Check Preview
        # with uuid("cafca61b-b8cf-4517-8996-17744a054d46") as case:

        with step('[Action] Get [Timecode] in [Audio Editor] window'):
            initial_timecode = audio_editing_page.audio_editor.get_current_timecode()
        
        with step('[Action] Press [Space] key to play, wait for DELAY_TIME*2, and press [Space] key to pause'):
            main_page.press_space_key()  # Play
            time.sleep(DELAY_TIME * 2)   # Wait for DELAY_TIME*2
            main_page.press_space_key()  # Pause
        
        with step('[Action] Get [Timecode] in [Audio Editor] window after play and pause'):
            updated_timecode = audio_editing_page.audio_editor.get_current_timecode()
        
        with step('[Verify] Check timecode is updated'):
            if initial_timecode == updated_timecode:
                assert False, f"Timecode did not update! Initial timecode: {initial_timecode}, Updated timecode: {updated_timecode}"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.audio_editor
    @pytest.mark.timeline
    @pytest.mark.save_project
    @pytest.mark.name('[test_tip_areas_func_33_33] Check preview as GT from test_tip_areas_func_33_32 and save project')
    @exception_screenshot
    def test_tip_areas_func_33_33(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_32') is run and passed
        1. Click [OK] button to leave [Audio Editor] and check result is True
        2. Check preview is the same as self.no_reverse_preview with similarity>0.95
        3. Select track (1) > Click [Stop] button at [PlayBack Window]
        4. Save the project as ('test_tip_areas_func_33_33') in (Test_Material_Folder + 'BFT_21_Stage1/')
        '''
        
        dependency_test = 'test_tip_areas_func_33_32'
        self.ensure_dependency(dependency_test)

        # [L325] 4.2 Tools > Audio Editor > Apply (Result is correct in timeline after apply)
        # with uuid("d3e2bba3-2613-439c-bdab-f2a5ff15071d") as case:

        with step('[Action] Click [OK] button to leave [Audio Editor] and check result is True'):
            audio_editing_page.audio_editor.click_ok()

        with step('[Verify] Check preview is the same as self.no_reverse_preview with similarity>0.95'):
            if not main_page.compare(self.no_reverse_preview, main_page.snapshot(locator=L.base.Area.preview.only_mtk_view), similarity=0.95):
                assert False, "Preview does not match expected preview after leaving Audio Editor!"

        with step('[Action] Select track (1) > Click [Stop] button at [PlayBack Window]'):
            main_page.timeline_select_track(1)
            playback_window_page.Edit_Timeline_PreviewOperation('stop')

        with step('[Action] Save the project as \'test_tip_areas_func_33_33\''):
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name='test_tip_areas_func_33_33', folder_path=Test_Material_Folder + 'BFT_21_Stage1/')

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.launch
    @pytest.mark.smart_fit_for_duration
    @pytest.mark.custom_duration
    @pytest.mark.name('[test_tip_areas_func_33_34] Set [Custom Duration] in [Smart Fit for Duration] and Check Preview Update')
    @exception_screenshot
    def test_tip_areas_func_33_34(self):
        '''
        1. Start App
        2. Select media ('Mahoroba.mp3') by library icon view > Insert clip in library to selected track
        3. Select [Smart Fit for Duration] from [Tip Areas]
        4. Click [Original Duration] option in [Smart Fit] window
        5. Get [Custom Duration] option value in [Smart Fit] window > Check the value is (0)
        6. Screenshot (locator=L.audio_editing.smart_fit.waveform_area)
        7. Click [Custom Duration] option in [Smart Fit] window
        8. Set [Custom Duration] in [Smart Fit] window to ('00_01_03_00')
        9. Check preview is updated with similarity<0.95
        '''
        
        with step('[Action] Start App'):
            main_page.start_app()

        with step("[Action] Select media ('Mahoroba.mp3') by library icon view and insert to selected track"):
            main_page.select_library_icon_view_media("Mahoroba.mp3")
            media_room_page.library_clip_context_menu_insert_on_selected_track()

        # [L301] 4.2 Tools > Audio Smart Fit for Duration > Remix audio
        # with uuid("fa162ec0-f523-404a-bc6b-f51cd7250a4f") as case:

        with step('[Action] Select [Smart Fit for Duration] from [Tip Areas]'):
            if not tips_area_page.tools.select_smart_fit_duration():
                assert False, "Failed to select Smart Fit for Duration from Tip Areas!"

        with step('[Action] Click [Original Duration] option in [Smart Fit] window'):
            audio_editing_page.smart_fit.click_org_option()

        with step('[Verify] Get [Custom Duration] option value in [Smart Fit] window and check the value is (0)'):
            custom_duration_value = audio_editing_page.smart_fit.get_custom_option_value()
            if custom_duration_value != "0":
                assert False, f"Expected Custom Duration value to be 0, but got {custom_duration_value}"

        with step('[Action] Screenshot (locator=L.audio_editing.smart_fit.waveform_area)'):
            before_preview = main_page.snapshot(locator=L.audio_editing.smart_fit.waveform_area)

        with step('[Action] Click [Custom Duration] option in [Smart Fit] window'):
            audio_editing_page.smart_fit.click_custom_option()

        with step('[Action] Set [Custom Duration] in [Smart Fit] window to (00_01_03_00)'):
            audio_editing_page.smart_fit.set_custom_new_duration("00_01_03_00")

        with step('[Verify] Check preview is updated with similarity<0.95'):
            after_preview = main_page.snapshot(locator=L.audio_editing.smart_fit.waveform_area)
            if main_page.compare(after_preview, before_preview, similarity=0.95):
                assert False, "Preview did not update as expected after setting custom duration! Similarity should < 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.timecpde
    @pytest.mark.smart_fit_for_duration
    @pytest.mark.name('[test_tip_areas_func_33_35] Check able to play in [Smart Fit] window and timecode is updated')
    @exception_screenshot
    def test_tip_areas_func_33_35(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_34') is run and passed
        1. Get [Timecode] in [Smart Fit] window > Check timecode is ('00:00:00:00')
        2. Click [Space] key to play in [Smart Fit] window > Wait for (DELAY_TIME*5) > Click [Space] key to pause
        3. Get [Timecode] in [Smart Fit] window > Check timecode is updated (not the same as original)
        '''
        
        dependency_test = "test_tip_areas_func_33_34"
        self.ensure_dependency(dependency_test)

        # [L302] 4.2 Tools > Audio Smart Fit for Duration > Preview
        # with uuid("7d60615e-c270-4b9c-b30c-d3cc5f8fde31") as case:

        with step("[Action] Get [Timecode] in [Smart Fit] window and check timecode is ('00:00:00:00')"):
            initial_timecode = audio_editing_page.smart_fit.get_current_timecode()
            if initial_timecode != "00:00:00:00":
                assert False, f"Expected timecode '00:00:00:00', but got {initial_timecode}"

        with step("[Action] Click [Space] key to play in [Smart Fit] window > Wait for (DELAY_TIME*5) > Click [Space] key to pause"):
            main_page.press_space_key()
            time.sleep(DELAY_TIME * 5)
            main_page.press_space_key()

        with step("[Verify] Get [Timecode] in [Smart Fit] window and check timecode is updated"):
            updated_timecode = audio_editing_page.smart_fit.get_current_timecode()
            if updated_timecode == initial_timecode:
                assert False, f"Timecode did not update as expected! Initial: {initial_timecode}, Updated: {updated_timecode}"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.smart_fit_for_duration
    @pytest.mark.timecpde
    @pytest.mark.name('[test_tip_areas_func_33_36] Check Video Length is correct after leave [Smart Fit] window')
    @exception_screenshot
    def test_tip_areas_func_33_36(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_35') is run and passed
        1. Click [OK] button to leave [Smart Fit] window > Check result is True
        2. Set [Timecode] to ('00_99_99_00') in [Main Page]
        3. Get [Timecode] in [PlayBack Window] > Check timecode is ('00:01:03:00')
        4. Clear [Remix] file via terminal command
        '''
        
        dependency_test = "test_tip_areas_func_33_35"
        self.ensure_dependency(dependency_test)

        # [L303] 4.2 Tools > Audio Smart Fit for Duration > Apply result to timeline clip correctly
        # with uuid("c655ce1a-0489-429b-a860-f06b764a254e") as case:

        with step("[Action] Click [OK] button to leave [Smart Fit] window and check result is True"):
            result = audio_editing_page.smart_fit.click_ok()
            if not result:
                assert False, "Failed to leave [Smart Fit] window properly!"

        with step("[Action] Set [Timecode] to ('00_99_99_00') in [Main Page]"):
            main_page.set_timeline_timecode("00_99_99_00", is_verify=True)

        with step("[Verify] Get [Timecode] in [PlayBack Window] and check timecode is ('00:01:03:00')"):
            timecode = playback_window_page.get_timecode_slidebar()
            if timecode != "00:01:03:00":
                assert False, f"Expected timecode '00:01:03:00', but got {timecode}"

        with step("[Action] Clear [Remix] file via terminal command"):
            main_page.clear_remix_file('Mahoroba_remix.wav')

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.name('[test_tip_areas_func_33_37] Open [Fix Enhance] window via [Tips Area] and Check [Fix Enhance] Window is Opened')
    @exception_screenshot
    def test_tip_areas_func_33_37(self):
        '''
        1. Start App
        2. Open packed project ('Packed_Project/test_tip_areas_func_33_37_from_test_tip_areas_func_33_33.pdk', 'Extracted_Folder/test_tip_areas_func_33_37')
        3. Select timeline media (track_index=0, clip_index=0)
        4. Click [Fix Enhance] button on [Tips Area]
        5. Check if [Fix Enhance] Window is Opened
        '''
        
        with step("[Action] Start App"):
            main_page.start_app()
        
        with step("[Action] Open packed project ('Packed_Project/test_tip_areas_func_33_37_from_test_tip_areas_func_33_33.pdk', 'Extracted_Folder/test_tip_areas_func_33_37')"):
            self.open_packed_project('Packed_Project/test_tip_areas_func_33_37_from_test_tip_areas_func_33_33.pdk',
                                    'Extracted_Folder/test_tip_areas_func_33_37')

        # [L327] 4.3 Fix / Enhance > Enter [Fix / Enhance] page with each clip
        # with uuid("d0a1e193-d13f-4e18-9ac8-e04924cfd021") as case:

        with step("[Action] Select timeline media (track_index=0, clip_index=0)"):
            timeline_operation_page.select_timeline_media(track_index=0, clip_index=0)

        with step("[Action] Click [Fix Enhance] button on [Tips Area]"):
            main_page.tips_area_click_fix_enhance()

        with step("[Verify] Check if [Fix Enhance] Window is Opened"):
            if not fix_enhance_page.is_in_fix_enhance():
                assert False, "Fix Enhance window is not opened!"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.lighting_adjustment
    @pytest.mark.extreme_backlight
    @pytest.mark.name('[test_tip_areas_func_33_38] Set [Extreme Backlight] in [Fix Enhance] and Verify Checkbox Status and Value')
    @exception_screenshot
    def test_tip_areas_func_33_38(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_37') is run and passed
        1. Enable [Lighting Adjustment] in [Fix Enhance] window
        2. Enable [Extreme Backlight] in [Lighting Adjustment]
        3. Set [Extreme Backlight] value in [Fix Enhance] to (75)
        4. Get [Extreme Backlight] Checkbox Status in [Lighting Adjustment] and check the status is True
        5. Get [Extreme Backlight] value in [Fix Enhance] and check the value is ('75')
        '''
        
        dependency_test = "test_tip_areas_func_33_37"
        self.ensure_dependency(dependency_test)

        # [L329] 4.3 Fix / Enhance > Fix > Apply [Lighting Adjustment]
        # with uuid("8f26c266-40d9-4a72-9403-a9c90974cad1") as case:

        with step("[Action] Enable [Lighting Adjustment] in [Fix Enhance] window"):
            fix_enhance_page.fix.enable_lighting_adjustment(value=True)

        with step("[Action] Enable [Extreme Backlight] in [Lighting Adjustment]"):
            fix_enhance_page.fix.lighting_adjustment.enable_extreme_backlight(value=True)

        with step("[Action] Set [Extreme Backlight] value in [Fix Enhance] to (75)"):
            fix_enhance_page.fix.lighting_adjustment.extreme_backlight.set_value(75)

        with step("[Verify] Get [Extreme Backlight] Checkbox Status in [Lighting Adjustment] and check the status is True"):
            extreme_backlight_status = fix_enhance_page.fix.lighting_adjustment.get_extreme_backlight()
            if not extreme_backlight_status:
                assert False, "Extreme Backlight checkbox is not enabled!"

        with step("[Verify] Get [Extreme Backlight] value in [Fix Enhance] and check the value is ('75')"):
            extreme_backlight_value = fix_enhance_page.fix.lighting_adjustment.extreme_backlight.get_value()
            if extreme_backlight_value != '75':
                assert False, f"Expected Extreme Backlight value to be '75', but got {extreme_backlight_value}"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.white_balance
    @pytest.mark.color_temperature
    @pytest.mark.name('[test_tip_areas_func_33_39] Enable [White Balance] > Set [Color Temperature] in [Fix Enhance] > Verify Preview Update')
    @exception_screenshot
    def test_tip_areas_func_33_39(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_38') is run and passed
        1. Enable [White Balance] in [Fix Enhance] window
        2. Set [Color Temperature] value in [Fix Enhance] to (90)
        3. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L330.png') matches Ground Truth (Ground_Truth_Folder + 'L330.png') with similarity=0.95
        '''

        dependency_test = "test_tip_areas_func_33_38"
        self.ensure_dependency(dependency_test)

        # [L330] 4.3 Fix / Enhance > Fix > Apply [White Balance]
        # with uuid("307558b2-3c13-4520-9004-003730df8f4c") as case:

        with step("[Action] Enable [White Balance] in [Fix Enhance] window"):
            fix_enhance_page.fix.enable_white_balance(value=True)

        with step("[Action] Set [Color Temperature] value in [Fix Enhance] to (90)"):
            fix_enhance_page.fix.white_balance.color_temperature.set_value(90)

        with step("[Verify] Check preview matches GT (L330.png) with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L330.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L330.png', preview_snapshot, similarity=0.95):
                assert False, "Preview does not match Ground Truth (L330.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.compare_in_split_preview
    @pytest.mark.name('[test_tip_areas_func_33_40] Enable/Disable [Compare in Split Preview] in [Fix Enhance] and Verify Preview')
    @exception_screenshot
    def test_tip_areas_func_33_40(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_39') is run and passed
        1. Enable [Compare in Split Preview] Checkbox (1)
        2. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L342.png') matches Ground Truth (Ground_Truth_Folder + 'L342.png') with similarity=0.95
        3. Disable [Compare in Split Preview] Checkbox (0)
        4. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L330.png') matches Ground Truth (Ground_Truth_Folder + 'L330.png') with similarity=0.95
        '''

        dependency_test = "test_tip_areas_func_33_39"
        self.ensure_dependency(dependency_test)

        # [L342] 4.3 Fix / Enhance > Compare in split preview
        # with uuid("67ccfb1a-5549-4d28-8fed-20757654c48d") as case:

        with step("[Action] Enable [Compare in Split Preview] Checkbox (1)"):
            fix_enhance_page.set_check_compare_in_split_preview(value=1)

        with step("[Verify] Check preview matches GT (L342.png) with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L342.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L342.png', preview_snapshot, similarity=0.95):
                assert False, "Preview does not match Ground Truth (L342.png)! Similarity should > 0.95"

        with step("[Action] Disable [Compare in Split Preview] Checkbox (0)"):
            fix_enhance_page.set_check_compare_in_split_preview(value=0)

        with step("[Verify] Check preview matches GT (L330.png) with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L330.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L330.png', preview_snapshot, similarity=0.95):
                assert False, "Preview does not match Ground Truth (L330.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.color_adjustment
    @pytest.mark.exposure
    @pytest.mark.hue
    @pytest.mark.name('[test_tip_areas_func_33_41] Set [Color Adjustment] - [Expose]/[Hue] in [Fix Enhance] and Verify Value')
    @exception_screenshot
    def test_tip_areas_func_33_41(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_40') is run and passed
        1. Select Timeline media (track_index=2, clip_index=2)
        2. Enable [Color Adjustment] Tab in [Fix Enhance] window
        3. Set [Color Adjustment][Exposure] value to (182)
        4. Get [Color Adjustment][Exposure] value in [Fix Enhance] and check the value is ('182')
        5. Set [Color Adjustment][Hue] value to (36)
        6. Get [Color Adjustment][Hue] value in [Fix Enhance] and check the value is ('36')
        '''

        dependency_test = "test_tip_areas_func_33_40"
        self.ensure_dependency(dependency_test)

        # [L336] 4.3 Fix / Enhance > Enhance > Apply [Color Adjustment]
        # with uuid("3eaa9f75-2ff7-4f74-9d67-49badebcaa8b") as case:

        with step("[Action] Select Timeline media (track_index=2, clip_index=2)") :
            timeline_operation_page.select_timeline_media(track_index=2, clip_index=2)

        with step("[Action] Enable [Color Adjustment] Tab in [Fix Enhance] window"):
            fix_enhance_page.enhance.switch_to_color_adjustment()

        with step("[Action] Set [Color Adjustment][Exposure] value to (182)"):
            fix_enhance_page.enhance.color_adjustment.exposure.set_value(182)

        with step("[Verify] Get [Color Adjustment][Exposure] value in [Fix Enhance] and check the value is ('182')"):
            exposure_value = fix_enhance_page.enhance.color_adjustment.exposure.get_value()
            if exposure_value != '182':
                assert False, f"Expected Exposure value '182', got '{exposure_value}'"

        with step("[Action] Set [Color Adjustment][Hue] value to (36)"):
            fix_enhance_page.enhance.color_adjustment.hue.set_value(36)

        with step("[Verify] Get [Color Adjustment][Hue] value in [Fix Enhance] and check the value is ('36')"):
            hue_value = fix_enhance_page.enhance.color_adjustment.hue.get_value()
            if hue_value != '36':
                assert False, f"Expected Hue value '36', got '{hue_value}'"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.split_toning
    @pytest.mark.balance
    @pytest.mark.shadow
    @pytest.mark.hue
    @pytest.mark.saturation
    @pytest.mark.name('[test_tip_areas_func_33_42] Enable [Split Toning] > Apply [Balance]/ [Shadow] and check preview')
    @exception_screenshot
    def test_tip_areas_func_33_42(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_41') is run and passed
        1. Enable [Split Toning] in [Fix Enhance] window
        2. Set [Split Toning][Balance] value to (53)
        3. Set [Split Toning][Sahdow][Hue] value to (291)
        4. Set [Split Toning][Sahdow][Saturation] value to (89)
        5. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L339.png') matches Ground Truth (Ground_Truth_Folder + 'L339.png') with similarity=0.95
        '''

        dependency_test = "test_tip_areas_func_33_41"
        self.ensure_dependency(dependency_test)

        # [L339] 4.3 Fix / Enhance > Enhance > Apply [Split Toning]
        # with uuid("3dedd39f-8afd-4a17-89cc-dfa0e6da72ec") as case:

        with step("[Action] Enable [Split Toning] in [Fix Enhance] window"):
            fix_enhance_page.enhance.enable_split_toning(value=True)

        with step("[Action] Set [Split Toning][Balance] value to (53)"):
            fix_enhance_page.enhance.split_toning.balance.set_value(53)

        with step("[Action] Set [Split Toning][Shadow][Hue] value to (291)"):
            fix_enhance_page.enhance.split_toning.shadow.hue.set_value(291)

        with step("[Action] Set [Split Toning][Shadow][Saturation] value to (89)"):
            fix_enhance_page.enhance.split_toning.shadow.saturation.set_value(89)

        with step("[Verify] Check preview matches GT (L339.png) with similarity 0.95"):
            preview_snapshot = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + 'L339.png'
            )
            if not main_page.compare(Ground_Truth_Folder + 'L339.png', preview_snapshot, similarity=0.95):
                assert False, "Preview does not match GT (L339.png)! Similarity should > 0.95"

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.timeline
    @pytest.mark.fix_enhacne
    @pytest.mark.name('[test_tip_areas_func_33_43] Leave [Fix Enhacne] > Choose another media > Re-enter [Fix Enhacne]')
    @exception_screenshot
    def test_tip_areas_func_33_43(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_42') is run and passed
        1. Click [Close] to leave [Fix Enhance] window
        2. Select timeline track (3)
        3. Select media ('Sport 01.jpg') by library icon view > Insert clip in library to selected track
        4. Click [Fix Enhance] button on [Tips Area]
        5. Check if [Fix Enhance] Window is Opened
        '''
        
        dependency_test = "test_tip_areas_func_33_42"
        self.ensure_dependency(dependency_test)

        # [L328] 4.3 Fix / Enhance > Enter [Fix / Enhance] w/ Image clip
        # with uuid("c91a00e7-fe55-412a-892b-15d281d69304") as case:

        with step("[Action] Click [Close] to leave [Fix Enhance] window"):
            fix_enhance_page.click_close()

        with step("[Action] Select timeline track (3)"):
            main_page.timeline_select_track(3)

        with step("[Action] Select media ('Sport 01.jpg') by library icon view and insert clip in library to selected track"):
            main_page.select_library_icon_view_media('Sport 01.jpg')
            media_room_page.library_clip_context_menu_insert_on_selected_track()

        with step("[Action] Click [Fix Enhance] button on [Tips Area]"):
            main_page.tips_area_click_fix_enhance()

        with step("[Verify] Check if [Fix Enhance] window is opened"):
            if not fix_enhance_page.is_in_fix_enhance():
                assert False, "[Fix Enhance] Window is not opened"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.lens_correction
    @pytest.mark.fisheyes
    @pytest.mark.name('[test_tip_areas_func_33_44] Set [Lens Correction] - [Marker Type]/ [Fisheye] in [Fix Enhance] and Verify Value')
    @exception_screenshot
    def test_tip_areas_func_33_44(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_43') is run and passed
        1. Enable [Lens Correction] Tab in [Fix Enhance] window
        2. Set [Marker Type] in [Lens Correction] Window to ('Garmin')
        3. Get [Lens Correction] value in [Fix Enhance] and check the value is ('Garmin')
        4. Set [Lens Correction][Fisheye] value to (75)
        5. Get [Lens Correction][Fisheye] value in [Fix Enhance] and check the value is ('75')
        '''
        
        dependency_test = "test_tip_areas_func_33_43"
        self.ensure_dependency(dependency_test)

        # [L332] 4.3 Fix / Enhance > Fix > Apply Lens Correction
        # with uuid("79967191-3497-482f-8767-6ab238b50b79") as case:

        with step("[Action] Enable [Lens Correction] Tab in [Fix Enhance] window"):
            fix_enhance_page.fix.switch_to_lens_correction()

        with step("[Action] Set [Marker Type] in [Lens Correction] Window to ('Garmin')"):
            fix_enhance_page.fix.lens_correction.select_marker_type('Garmin')

        with step("[Verify] Check [Lens Correction] value in [Fix Enhance] is ('Garmin')"):
            marker_type = fix_enhance_page.fix.lens_correction.get_marker_type()
            if marker_type != 'Garmin':
                assert False, f"Expected Marker Type 'Garmin', but got {marker_type}"

        with step("[Action] Set [Lens Correction][Fisheye] value to (75)"):
            fix_enhance_page.fix.lens_correction.fisheye_distortion.set_value(75)

        with step("[Verify] Check [Lens Correction][Fisheye] value in [Fix Enhance] is ('75')"):
            fisheye_value = fix_enhance_page.fix.lens_correction.fisheye_distortion.get_value()
            if fisheye_value != 75:
                assert False, f"Expected Fisheye value '75', but got {fisheye_value}"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.hdr_effect
    @pytest.mark.glow
    @pytest.mark.name("[test_tip_areas_func_33_45] Apply [HDR Effect] - [Glow] in [Fix Enhance] and Verify Preview")
    @exception_screenshot
    def test_tip_areas_func_33_45(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_44') is run and passed
        1. Enable/ Disable [HDR Effect] Tab in [Fix Enhance] window > ScreenShot (locator=L.base.Area.preview.only_mtk_view)
        2. Set [HDR Effect][Glow][Strength] value to (89) > Check preview is updated with similarity<0.99
        3. Set [HDR Effect][Glow][Radius] value to (31) by dragging the slider > Check preview is updated with similarity<0.99
        4. Set [HDR Effect][Glow][Balance] value to (-17) > Check preview is updated with similarity<0.99
        5. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L340.png') matches Ground Truth (Ground_Truth_Folder + 'L340.png') with similarity=0.95
        6. Save the project as ('test_tip_areas_func_33_44') in (Test_Material_Folder + 'BFT_21_Stage1/')
        '''

        self.ensure_dependency("test_tip_areas_func_33_44")

        # [L340] 4.3 Fix / Enhance > Enhance > Apply HDR Effect
        # with uuid("4bd05dc1-8871-4893-a6e2-ac9933173ca3") as case:

        with step("[Action] Enable/ Disable [HDR Effect] Tab in [Fix Enhance] window > ScreenShot (locator=L.base.Area.preview.only_mtk_view)"):
            fix_enhance_page.enhance.switch_to_hdr_effect()
            hdr_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        with step("[Action] Set [HDR Effect][Glow][Strength] value to (89) > Check preview is updated with similarity<0.99"):
            fix_enhance_page.enhance.hdr_effect.glow.strength.set_value(89)
            preview_strength = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            # Similarity should be less than 0.99 for updated preview
            if main_page.compare(hdr_preview, preview_strength, similarity=0.99):
                assert False, "Preview similarity should < 0.99 after setting [HDR Effect][Glow][Strength] value to (89)"

        with step("[Action] Set [HDR Effect][Glow][Radius] value to (31) by dragging the slider > Check preview is updated with similarity<0.99"):
            fix_enhance_page.enhance.hdr_effect.glow.radius.adjust_slider(31)
            preview_radius = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            # Similarity should be less than 0.99 for updated preview
            if main_page.compare(preview_strength, preview_radius, similarity=0.99):
                assert False, "Preview similarity should < 0.99 after setting [HDR Effect][Glow][Radius] value to (31)"

        with step("[Action] Set [HDR Effect][Glow][Balance] value to (-17) > Check preview is updated with similarity<0.99"):
            fix_enhance_page.enhance.hdr_effect.glow.balance.set_value(-17)
            preview_balance = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            # Similarity should be less than 0.99 for updated preview
            if main_page.compare(preview_radius, preview_balance, similarity=0.99):
                assert False, "Preview similarity should < 0.99 after setting [HDR Effect][Glow][Balance] value to (-17)"

        with step("[Verify] Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L340.png') matches Ground Truth (Ground_Truth_Folder + 'L340.png') with similarity=0.95"):
            preview_final = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + "L340.png")
            if not main_page.compare(Ground_Truth_Folder + "L340.png", preview_final, similarity=0.95):
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match Ground Truth (L340.png)! Similarity should > 0.95"

        with step("[Action] Save the project as ('test_tip_areas_func_33_44') in (Test_Material_Folder + 'BFT_21_Stage1/')"):
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name="test_tip_areas_func_33_44", folder_path=Test_Material_Folder + "BFT_21_Stage1/")

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.launch
    @pytest.mark.timeline
    @pytest.mark.fix_enhance
    @pytest.mark.hdr_effect
    @pytest.mark.edge
    @pytest.mark.color_match
    @pytest.mark.name("[test_tip_areas_func_33_46] Enable [Color Match] with 2 medias in [Fix Enhance] and Verify Preview")
    @exception_screenshot
    def test_tip_areas_func_33_46(self):
        '''
        1. Start App
        2. Select media ('Sport 02.jpg') by library icon view > Insert clip in library to selected track
        3. Select media ('Travel 01.jpg') by library icon view > Insert media to timeline by self.temp_for_os_14_insert_function(2)
        4. Click [Fix Enhance] button on [Tips Area]
        5. Enable [HDR Effect] Tab in [Fix Enhance] window
        6. Select timeline media (track_index=0, clip_index=1) which is (Sport 02.jpg)
        7. Set [HDR Effect][Edge][Strength] value to (65)
        8. Select timeline media (track_index=0, clip_index=0) which is (Travel 01.jpg)
        9. Enable [Color Match] Tab > Click [Color Match] button in [Fix Enhance] window
        10. Get [Match Color] button Status and check the status is False
        11. Select timeline media (track_index=0, clip_index=1) which is (Sport 02.jpg)
        12. Click [Color Match] button in [Fix Enhance] window
        13. Check preview (locator=L.fix_enhance.enhance.color_match.setting_scroll_view, file_name=Auto_Ground_Truth_Folder + 'L338.png') matches Ground Truth (Ground_Truth_Folder + 'L338.png') with similarity=0.95
        '''
        with step("[Action] Start App"):
            produce_page.click_start()

        with step("[Action] Select media ('Sport 02.jpg') by library icon view > Insert clip in library to selected track"):
            main_page.select_library_icon_view_media('Sport 02.jpg')
            media_room_page.library_clip_context_menu_insert_on_selected_track()

        with step("[Action] Select media ('Travel 01.jpg') by library icon view > Insert media to timeline by self.temp_for_os_14_insert_function(2)"):
            main_page.select_library_icon_view_media('Travel 01.jpg')
            self.temp_for_os_14_insert_function(2)

        with step("[Action] Click [Fix Enhance] button on [Tips Area]"):
            main_page.tips_area_click_fix_enhance()

        with step("[Action] Enable [HDR Effect] Tab in [Fix Enhance] window"):
            fix_enhance_page.enhance.enable_hdr_effect()

        with step("[Action] Select timeline media (track_index=0, clip_index=1) which is (Sport 02.jpg)"):
            timeline_operation_page.select_timeline_media(track_index=0, clip_index=1)

        # [L338] 4.3 Fix / Enhance > Enhance > Color Match
        # with uuid("63d5644b-8272-4693-a015-75f8da7f239d") as case:
        with step("[Action] Set [HDR Effect][Edge][Strength] value to (65)"):
            fix_enhance_page.enhance.hdr_effect.edge.strength.set_value(65)

        with step("[Action] Select timeline media (track_index=0, clip_index=0) which is (Travel 01.jpg)"):
            timeline_operation_page.select_timeline_media(track_index=0, clip_index=0)

        with step("[Action] Enable [Color Match] Tab > Click [Color Match] button in [Fix Enhance] window"):
            fix_enhance_page.enhance.switch_to_color_match()
            fix_enhance_page.enhance.color_match.click_color_match_button()

        with step("[Action] Get [Match Color] button Status and check the status is False"):
            status = fix_enhance_page.enhance.color_match.get_match_color_status()
            if status != False:
                assert False, "Match Color button status is not False! Expected: False"

        with step("[Action] Select timeline media (track_index=0, clip_index=1) which is (Sport 02.jpg)"):
            timeline_operation_page.select_timeline_media(track_index=0, clip_index=1)

        with step("[Action] Click [Color Match] button in [Fix Enhance] window"):
            fix_enhance_page.enhance.color_match.click_match_color()

        with step("[Verify] Check preview (locator=L.fix_enhance.enhance.color_match.setting_scroll_view, file_name=Auto_Ground_Truth_Folder + 'L338.png') matches Ground Truth (Ground_Truth_Folder + 'L338.png') with similarity=0.95"):
            preview = main_page.snapshot(locator=L.fix_enhance.enhance.color_match.setting_scroll_view, file_name=Auto_Ground_Truth_Folder + "L338.png")
            if not main_page.compare(Ground_Truth_Folder + "L338.png", preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L338.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.color_match
    @pytest.mark.name("[test_tip_areas_func_33_47] Leave [Color Match] with applied effect (in test_tip_areas_func_33_46) and check preview as GT")
    @exception_screenshot
    def test_tip_areas_func_33_47(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_46') is run and passed
        1. Click [Close] Button to leave [Color Match] with option ('Yes')
        2. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L343.png') matches GT (Ground_Truth_Folder + 'L343.png') with similarity=0.95
        '''
        dependency_test = "test_tip_areas_func_33_46"
        self.ensure_dependency(dependency_test)

        # [L343] 4.3 Fix / Enhance > Preview is correct
        # with uuid("00fdc131-d451-496f-8629-31b76be21d67") as case:

        with step("[Action] Click [Close] Button to leave [Color Match] with option ('Yes')"):
            check_apply = fix_enhance_page.enhance.color_match.click_close('Yes')
            if not check_apply:
                assert False, "Failed to close Color Match window"

        with step("[Verify] Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L343.png') matches GT (Ground_Truth_Folder + 'L343.png') with similarity=0.95"):
            preview_snapshot = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + "L343.png")
            if not main_page.compare(Ground_Truth_Folder + "L343.png", preview_snapshot, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L343.png)! Similarity should > 0.95"

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_area
    @pytest.mark.launch
    @pytest.mark.motion_tracker
    @pytest.mark.ai_module
    @pytest.mark.object_track
    @pytest.mark.name("[test_tip_areas_func_33_48] Open [Motion Tracker] from [Tips Area] > Remove Tracker 2 > Click [Object Track] button and Verify Result")
    @exception_screenshot
    def test_tip_areas_func_33_48(self):
        '''
        1. Clear [AI Module] Files > Start APP
        2. Select media ('Skateboard 03.mp4') by library icon view > Insert clip in library to selected track
        3. Enter [Motion Tracker] from [Tips Area]
        4. Wait for AI Module Downloading
        5. Remove Tracker 2 in [Motion Tracker]
        6. Check if [Motion Tracker] window is opened
        7. Click [Object Track] button in [Motion Tracker] and check result is True
        '''
        with step("[Action] Clear [AI Module] Files > Start APP"):
            main_page.clear_AI_module()
            main_page.start_app()

        with step("[Action] Select media ('Skateboard 03.mp4') by library icon view > Insert clip in library to selected track"):
            main_page.select_library_icon_view_media('Skateboard 03.mp4')
            media_room_page.library_clip_context_menu_insert_on_selected_track()

        with step("[Action] Enter [Motion Tracker] from [Tips Area]"):
            main_page.click(L.tips_area.button.btn_Tools)
            main_page.select_right_click_menu('Motion Tracker')

        with step("[Action] Wait for AI Module Downloading"):
            self.check_downloading_AI_module()

        with step("[Action] Remove Tracker 2 in [Motion Tracker]"):
            motion_tracker_page.remove_tracker2()

        # [L312] 4.2 Tools > Motion Tracker > Object Tracking
        # with uuid("c7d17581-dfea-4f5f-9765-82eb268dd5c7") as case:

        with step("[Verify] Check if [Motion Tracker] window is opened"):
            if not motion_tracker_page.is_in_motion_tracker():
                assert False, "[Motion Tracker] window is not opened"

        with step("[Action] Click [Object Track] button in [Motion Tracker] and check result is True"):
            result = motion_tracker_page.click_object_track(delay_time=10)
            if not result:
                assert False, "[Object Track] button did not return True"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.motion_tracker
    @pytest.mark.title
    @pytest.mark.name("[test_tip_areas_func_33_49] Edit [Title]/ [Title Color] in [Motion Tracker] and check preview")
    @exception_screenshot
    def test_tip_areas_func_33_49(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_48') is run and passed
        1. Click [Add Title] button in [Motion Tracker] > ScreenShot (locator=L.motion_tracker.main_window)
        2. Edit [Title] to ('ぱざだたタ../*') in [Motion Tracker] > Check preview is updated with similarity<0.99
        3. Change [Title Color] to ('CE2E47') in [Motion Tracker] > Check preview is updated with similarity<0.99
        4. Check preview (locator=L.motion_tracker.main_window, file_name=Auto_Ground_Truth_Folder + 'L313.png') matches GT (Ground_Truth_Folder + 'L313.png') with similarity=0.95
        '''
        dependency_test = "test_tip_areas_func_33_48"
        self.ensure_dependency(dependency_test)

        # [L313] 4.2 Tools > Motion Tracker > Add Text Object
        # with uuid("b89b4237-429d-4d95-a76d-a1a769785e4d") as case:

        with step("[Action] Click [Add Title] button in [Motion Tracker] > ScreenShot (locator=L.motion_tracker.main_window)"):
            motion_tracker.add_title_button()
            initial_preview = main_page.snapshot(locator=L.motion_tracker.main_window)

        with step("[Action] Edit [Title] to ('ぱざだたタ../*') in [Motion Tracker] > Check preview is updated with similarity<0.99"):
            motion_tracker_page.edit_title('ぱざだたタ../*')
            preview_after_edit = main_page.snapshot(locator=L.motion_tracker.main_window)
            if main_page.compare(initial_preview, preview_after_edit, similarity=0.99):
                # Similarity should be less than 0.99 for an updated preview
                assert False, "Preview did not update after editing title! Similarity should < 0.99"

        with step("[Action] Change [Title Color] to ('CE2E47') in [Motion Tracker] > Check preview is updated with similarity<0.99"):
            motion_tracker_page.change_title_color("CE2E47")
            preview_after_color = main_page.snapshot(locator=L.motion_tracker.main_window)
            if main_page.compare(preview_after_edit, preview_after_color, similarity=0.99):
                # Similarity should be less than 0.99 for an updated preview
                assert False, "Preview did not update after changing title color! Similarity should < 0.99"

        with step("[Verify] Check preview (locator=L.motion_tracker.main_window, file_name=Auto_Ground_Truth_Folder + 'L313.png') matches GT (Ground_Truth_Folder + 'L313.png') with similarity=0.95"):
            final_preview = main_page.snapshot(locator=L.motion_tracker.main_window, file_name=Auto_Ground_Truth_Folder + "L313.png")
            if not main_page.compare(Ground_Truth_Folder + "L313.png", final_preview, similarity=0.95):
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match GT (L313.png)! Similarity should > 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.motion_tracker
    @pytest.mark.pip_object
    @pytest.mark.import_media
    @pytest.mark.name("[test_tip_areas_func_33_50] Import media from [Hard Drive] in [Motion Tracker] and verify preview")
    @exception_screenshot
    def test_tip_areas_func_33_50(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_49') is run and passed
        1. Click [Add Pip] button in [Motion Tracker]
        2. Import media (Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png') from [Hard Drive] in [Motion Tracker]
        3. Check preview (locator=L.motion_tracker.main_window, file_name=Auto_Ground_Truth_Folder + 'L314.png') matches GT (Ground_Truth_Folder + 'L314.png') with similarity=0.95
        '''
        dependency_test = "test_tip_areas_func_33_49"
        self.ensure_dependency(dependency_test)
        
        # [L314] 4.2 Tools > Motion Tracker > Add Pip Object
        # with uuid("8a5522c5-6f2f-4e71-9d0b-d7d7f575bc48") as case:

        with step("[Action] Click [Add Pip] button in [Motion Tracker]"):
            motion_tracker_page.add_pip_button()
        
        with step("[Action] Import media (Test_Material_Folder + 'Video_Audio_In_Reverse/Sample.png') from [Hard Drive] in [Motion Tracker]"):
            motion_tracker_page.import_from_hard_drive(Test_Material_Folder + "Video_Audio_In_Reverse/Sample.png")
        
        with step("[Verify] Check preview (locator=L.motion_tracker.main_window, file_name=Auto_Ground_Truth_Folder + 'L314.png') matches GT (Ground_Truth_Folder + 'L314.png') with similarity=0.95"):
            preview = main_page.snapshot(locator=L.motion_tracker.main_window, file_name=Auto_Ground_Truth_Folder + "L314.png")
            if not main_page.compare(Ground_Truth_Folder + "L314.png", preview, similarity=0.95):
                # Similarity should be greater than 0.95 for matching preview
                assert False, "Preview does not match GT (L314.png)! Similarity should > 0.95"
        
        assert True
            
    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.timecode
    @pytest.mark.name("[test_tip_areas_func_33_51] Check preview as GT for test_tip_areas_func_33_50")
    @exception_screenshot
    def test_tip_areas_func_33_51(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_50') is run and passed
        1. Set timecode to ('00_00_06_14') in [Motion Tracker]
        2. Check preview (locator=L.motion_tracker.main_window, file_name=Auto_Ground_Truth_Folder + 'L316.png') matches Ground Truth (Ground_Truth_Folder + 'L316.png') with similarity=0.97
        '''
        dependency_test = "test_tip_areas_func_33_50"
        self.ensure_dependency(dependency_test)

        # [L316] 4.2 Tools > Motion Tracker > Preview
        # with uuid("682f463a-bed9-4eec-a15b-9ad4b7752814") as case:

        with step("[Action] Set timecode to ('00_00_06_14') in [Motion Tracker]"):
            motion_tracker_page.set_timecode("00_00_06_14")
        
        with step("[Verify] Check preview (locator=L.motion_tracker.main_window, file_name=Auto_Ground_Truth_Folder + 'L316.png') matches Ground Truth (Ground_Truth_Folder + 'L316.png') with similarity=0.97"):
            preview = main_page.snapshot(locator=L.motion_tracker.main_window, file_name=Auto_Ground_Truth_Folder + "L316.png")
            if not main_page.compare(Ground_Truth_Folder + "L316.png", preview, similarity=0.97):
                # Similarity should be greater than 0.97 for matching preview
                assert False, "Preview does not match GT (L316.png)! Similarity should > 0.97"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.motion_tracker
    @pytest.mark.object_track
    @pytest.mark.add_effect
    @pytest.mark.name("[test_tip_areas_func_33_52] Apply [Object Track] and [Add Effect] in [Motion Tracker] and Verify Preview")
    @exception_screenshot
    def test_tip_areas_func_33_52(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_51') is run and passed
        1. Click [Add A Tracker] button in [Motion Tracker]
        2. Click [Object Track] button in [Motion Tracker]
        3. Click [Add Effect] button in [Motion Tracker]
        4. Set timecode to ('00_00_08_01') in [Motion Tracker]
        5. Check preview (locator=L.motion_tracker.main_window, file_name=Auto_Ground_Truth_Folder + 'L315.png') matches Ground Truth (Ground_Truth_Folder + 'L315.png') with similarity=0.97
        '''
        dependency_test = "test_tip_areas_func_33_51"
        self.ensure_dependency(dependency_test)

        # [L315] 4.2 Tools > Motion Tracker > Add Effect
        # with uuid("41dce21f-2418-43eb-a16c-0d4be7b0d8de") as case:

        with step("[Action] Click [Add A Tracker] button in [Motion Tracker]"):
            motion_tracker_page.add_a_tracker()

        with step("[Action] Click [Object Track] button in [Motion Tracker]"):
            motion_tracker_page.click_object_track(delay_time=10)

        with step("[Action] Click [Add Effect] button in [Motion Tracker]"):
            motion_tracker_page.add_effect_button()

        with step("[Action] Set timecode to ('00_00_08_01') in [Motion Tracker]"):
            motion_tracker_page.set_timecode("00_00_08_01")

        with step("[Verify] Check preview (locator=L.motion_tracker.main_window, file_name=Auto_Ground_Truth_Folder + 'L315.png') matches Ground Truth (Ground_Truth_Folder + 'L315.png') with similarity=0.97"):
            preview = main_page.snapshot(
                locator=L.motion_tracker.main_window,
                file_name=Auto_Ground_Truth_Folder + "L315.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "L315.png", preview, similarity=0.97):
                # Similarity should be greater than 0.97 for a matching preview
                assert False, "Preview does not match GT (L315.png)! Similarity should > 0.97"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.motion_tracker
    @pytest.mark.name("[test_tip_areas_func_33_53] Check preview as GT for test_tip_areas_func_33_52 in main window")
    @exception_screenshot
    def test_tip_areas_func_33_53(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_52') is run and passed
        1. Click [OK] to close [Motion Tracker]
        2. Set timecode to ('00_00_03_00') at main page
        3. Check preview (locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L317.png') matches GT (file_name=Ground_Truth_Folder + 'L317.png') with similarity=0.95
        '''
        dependency_test = "test_tip_areas_func_33_52"
        self.ensure_dependency(dependency_test)
        
        # [L317] 4.2 Tools > Motion Tracker > Apply and return to timeline
        # with uuid("24111d09-bf67-427b-91d4-2f529e1e5d19") as case:

        with step("[Action] Click [OK] to close [Motion Tracker]"):
            check_result = motion_tracker_page.click_ok()
        
        with step("[Action] Set timecode to ('00_00_03_00') at main page"):
            main_page.set_timeline_timecode("00_00_03_00", is_verify=True)
        
        with step("[Verify] Check preview matches GT (file_name=Ground_Truth_Folder + 'L317.png') with similarity=0.95"):
            preview = main_page.snapshot(
                locator=L.base.Area.preview.only_mtk_view,
                file_name=Auto_Ground_Truth_Folder + "L317.png"
            )
            if not main_page.compare(Ground_Truth_Folder + "L317.png", preview, similarity=0.95):
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match GT (L317.png)! Similarity should > 0.95"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.keyframe
    @pytest.mark.fix_enhance
    @pytest.mark.lighting_adjustment
    @pytest.mark.degree
    @pytest.mark.name("[test_tip_areas_func_33_54] Set [Fix Enhance][Lighting Adjustment][Degree] in 2 [KeyFrame] and switch to check value kept")
    @exception_screenshot
    def test_tip_areas_func_33_54(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_53') is run and passed
        1. Select a clip on timeline (track_index=2, clip_index=0)
        2. Click [KeyFrame] button from [Tip Areas]
        3. Unfold tab [Fix_Enhance] in [KeyFrame] window
        4. Get Value [Fix_Enhance][Lighting_Adjustment][Degree] and check result is ('50')
        5. Set Value [Fix_Enhance][Lighting_Adjustment][Degree] to (70)
        6. Set timecode to ('00_00_07_10') at main page
        7. Set Value [Fix_Enhance][Lighting_Adjustment][Degree] to (30)
        8. Get Value [Fix_Enhance][Lighting_Adjustment][Degree] and check result is ('30')
        9. Click [Previous Keyframe] for [Fix_Enhance][Lighting_Adjustment][Degree] in [KeyFrame] window
        10. Get Value [Fix_Enhance][Lighting_Adjustment][Degree] and check result is ('70')
        '''
        dependency_test = "test_tip_areas_func_33_53"
        self.ensure_dependency(dependency_test)
        
        # [L348] 4.4 Keyframe > Fix Enhance > Lighting Adjustment (Degree)
        # with uuid("959992a2-b8fc-4f65-afda-3f5a0dedc886") as case:

        with step("[Action] Select a clip on timeline (track_index=2, clip_index=0)"):
            timeline_operation_page.select_timeline_media(track_index=2, clip_index=0)
        
        with step("[Action] Click [KeyFrame] button from [Tip Areas]"):
            tips_area_page.click_keyframe()
        
        with step("[Action] Unfold tab [Fix_Enhance] in [KeyFrame] window"):
            keyframe_room_page.fix_enhance.unfold_tab()
        
        with step("[Verify] Get Value [Fix_Enhance][Lighting_Adjustment][Degree] and check result is ('50')"):
            degree_value = keyframe_room_page.fix_enhance.lighting_adjustment.degree.get_value()
            if degree_value != "50":
                # Expected value should be '50'
                assert False, f"Expected [Fix_Enhance][Lighting_Adjustment][Degree] to be '50', but got '{degree_value}'"
        
        with step("[Action] Set Value [Fix_Enhance][Lighting_Adjustment][Degree] to (70)"):
            keyframe_room_page.fix_enhance.lighting_adjustment.degree.set_value(70)
        
        with step("[Action] Set timecode to ('00_00_07_10') at main page"):
            main_page.set_timeline_timecode("00_00_07_10", is_verify=True)
        
        with step("[Action] Set Value [Fix_Enhance][Lighting_Adjustment][Degree] to (30)"):
            keyframe_room_page.fix_enhance.lighting_adjustment.degree.set_value(30)

        
        with step("[Verify] Get Value [Fix_Enhance][Lighting_Adjustment][Degree] and check result is ('30')"):
            degree_value = keyframe_room_page.fix_enhance.lighting_adjustment.degree.get_value()
            if degree_value != "30":
                # Expected value should be '30'
                assert False, f"Expected [Fix_Enhance][Lighting_Adjustment][Degree] to be '30', but got '{degree_value}'"
        
        with step("[Action] Click [Previous Keyframe] for [Fix_Enhance][Lighting_Adjustment][Degree] in [KeyFrame] window"):
            keyframe_room_page.fix_enhance.lighting_adjustment.degree.previous_keyframe()
        
        with step("[Verify] Get Value [Fix_Enhance][Lighting_Adjustment][Degree] and check result is ('70')"):
            degree_value = keyframe_room_page.fix_enhance.lighting_adjustment.degree.get_value()
            if degree_value != "70":
                # Expected value should be '70'
                assert False, f"Expected [Fix_Enhance][Lighting_Adjustment][Degree] to be '70', but got '{degree_value}'"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.keyframe
    @pytest.mark.fix_enhance
    @pytest.mark.white_balance
    @pytest.mark.color_temperature
    @pytest.mark.tint
    @pytest.mark.name("[test_tip_areas_func_33_55] Apply [White Balance] with [Color Temperature] and [Tint] in [KeyFrame] - [Fix Enhance] and Verify Result")
    @exception_screenshot
    def test_tip_areas_func_33_55(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_54') is run and passed
        1. Set Value [Fix Enhance][White Balance][Color Temperature] to (97)
        2. Get Value [Fix Enhance][White Balance][Color Temperature] and check result is ('97')
        3. Set Value [Fix Enhance][White Balance][Tint] to (95)
        4. Get Value [Fix Enhance][White Balance][Tint] and check result is ('95')
        '''
        dependency_test = "test_tip_areas_func_33_54"
        self.ensure_dependency(dependency_test)
        
        
        # [L353] 4.4 Keyframe > Fix Enhance > White Balance
        # with uuid("11f4e9ff-f7f1-4776-9424-9709cdeb7cb1") as case:

        with step("[Action] Set Value [Fix Enhance][White Balance][Color Temperature] to (97)"):
            keyframe_room_page.fix_enhance.white_balance.color_temperature.set_value(97)
        
        with step("[Verify] Get Value [Fix Enhance][White Balance][Color Temperature] and check result is ('97')"):
            current_temperature = keyframe_room_page.fix_enhance.white_balance.color_temperature.get_value()
            if current_temperature != "97":
                # Expected white balance color temperature should be '97'
                assert False, f"Expected white balance color temperature to be '97', but got '{current_temperature}'"
        
        with step("[Action] Set Value [Fix Enhance][White Balance][Tint] to (95)"):
            keyframe_room_page.fix_enhance.white_balance.tint.set_value(95)
        
        with step("[Verify] Get Value [Fix Enhance][White Balance][Tint] and check result is ('95')"):
            current_tint = keyframe_room_page.fix_enhance.white_balance.tint.get_value()
            if current_tint != "95":
                # Expected white balance tint should be '95'
                assert False, f"Expected white balance tint to be '95', but got '{current_tint}'"
        
        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.launch
    @pytest.mark.title_room
    @pytest.mark.title_designer
    @pytest.mark.font_face
    @pytest.mark.gradient
    @pytest.mark.name("[test_tip_areas_func_33_56] Set 4 colors in [Font Face] with [Gradient] in [Title Designer] and Verify Result")
    @exception_screenshot
    def test_tip_areas_func_33_56(self):
        '''
        1. Clear [AI Module] files > Start App
        2. Enter Room (Title)(1)
        3. Search Library ('Default') > Select media by library icon view > Double click media
        4. Screenshot (locator=L.title_designer.area.view_title)
        5. Apply [Font Face Fill Type] to [Gradient] > Apply [Font Face Gradient Style] with style (3)
        6. Drag Vertical Slider in [Title Designer] to (0.64)
        7. Set [Font Face] with 4 Color (left_top_hex='FFCE24', right_top_hex='34FFFF', left_bottom_hex='6E0913', right_bottom_hex='AD1BBD')
        8. Check preview is updated with similarity<0.95
        9. Check preview (locator=L.title_designer.font_face.four_color_gradient_group, file_name=Auto_Ground_Truth_Folder + 'L138.png') match GT (file_name=Ground_Truth_Folder + 'L138.png') with similarity=0.95
        '''
        with step("[Action] Clear [AI Module] files and start App"):
            main_page.clear_AI_module()
            main_page.start_app()

        with step("[Action] Enter Room (Title)(1)"):
            main_page.enter_room(1)

        with step("[Action] Search Library ('Default') > Select media by library icon view > Double click media"):
            main_page.search_library('Default')
            main_page.select_library_icon_view_media('Default')
            main_page.double_click()

        # [L138] 3.2 Title Designer (general template) > Set in [Object] > Font Face with Gradient Color
        # with uuid("2112849e-965c-4704-a202-08ebf2b35550") as case:

        with step("[Action] Screenshot (locator=L.title_designer.area.view_title)"):
            initial_preview = main_page.snapshot(locator=L.title_designer.area.view_title)

        with step("[Action] Apply [Font Face Fill Type] to [Gradient] and apply [Font Face Gradient Style] with style (3)"):
            title_designer_page.apply_font_face_fill_type_to_gradient()
            title_designer_page.apply_font_face_gradient_style(style=3)

        with step("[Action] Drag Vertical Slider in [Title Designer] to (0.64)"):
            title_designer_page.drag_object_vertical_slider(0.64)

        with step("[Action] Set [Font Face] with 4 Color (left_top_hex='FFCE24', right_top_hex='34FFFF', left_bottom_hex='6E0913', right_bottom_hex='AD1BBD')"):
            title_designer_page.apply_font_face_4_color(
                left_top_hex='FFCE24',
                right_top_hex='34FFFF',
                left_bottom_hex='6E0913',
                right_bottom_hex='AD1BBD'
            )

        with step("[Verify] Check preview is updated with similarity < 0.95"):
            updated_preview = main_page.snapshot(locator=L.title_designer.area.view_title)
            if main_page.compare(initial_preview, updated_preview, similarity=0.95):
                assert False, "Preview did not update as expected! Similarity should < 0.95"

        with step("[Verify] Check preview matches Ground Truth (L138.png) with similarity=0.95"):
            preview = main_page.snapshot(
                locator=L.title_designer.font_face.four_color_gradient_group,
                file_name=Auto_Ground_Truth_Folder + 'L138.png'
            )
            check_preview = main_page.compare(
                Ground_Truth_Folder + 'L138.png',
                preview,
                similarity=0.95
            )
            if not check_preview:
                # Similarity should be greater than 0.95 for a matching preview
                assert False, "Preview does not match GT (L138.png)! Similarity should > 0.95"

        with step('[Action] Click [Cancel] without save update'):
            title_designer_page.click_cancel(1)

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.media_room
    @pytest.mark.timeline
    @pytest.mark.timecode
    @pytest.mark.split
    @pytest.mark.fix_enhance
    @pytest.mark.ai_module
    @pytest.mark.wind_removal
    @pytest.mark.name("[test_tip_areas_func_33_57] Apply [Wind Removal] in [Fix Enhance] and Verify Result")
    @exception_screenshot
    def test_tip_areas_func_33_57(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_56') is run and passed
        1. Enter Room (Media)(0)
        2. Select media ('Speaking Out.mp3') by library icon view > Insert clip in library to selected track
        3. Set timecode to ('00_00_14_00') at main page
        4. Click [Split] button in [Tips Area]
        5. Select timeline media (track_index=1, clip_index=1) > Press [Backspace] key to remove it
        6. Select timeline media (track_index=1, clip_index=0)
        7. Click [Fix/Enhance] button in [Tips Area] > Enable [Wind Removal] Tab
        8. Wait for AI Module Downloading
        9. Click [Apply] Button in [Wind Removal] Window
        10. Check if [Wind Removal] Window (L.fix_enhance.fix.wind_removal.main_window) is closed
        '''
        dependency_test = "test_tip_areas_func_33_56"
        self.ensure_dependency(dependency_test)

        # [L335] 4.3 Fix/ Enhance > Fix > Wind Removal
        # with uuid("6a3438b6-dbec-4838-9228-d6c1b6775bdc") as case:

        with step("[Action] Enter Room (Media)(0)"):
            main_page.enter_room(0)

        with step("[Action] Select media ('Speaking Out.mp3') by library icon view > Insert clip in library to selected track"):
            main_page.select_library_icon_view_media('Speaking Out.mp3')
            media_room_page.library_clip_context_menu_insert_on_selected_track()

        with step("[Action] Set timecode to ('00_00_14_00') at main page"):
            main_page.set_timeline_timecode('00_00_14_00', is_verify=True)

        with step("[Action] Click [Split] button in [Tips Area]"):
            main_page.tips_area_click_split()

        with step("[Action] Select timeline media (track_index=1, clip_index=1) > Press [Backspace] key to remove it"):
            main_page.select_timeline_media(track_index=1, clip_index=1)
            main_page.press_backspace_key()

        with step("[Action] Select timeline media (track_index=1, clip_index=0)"):
            main_page.select_timeline_media(track_index=1, clip_index=0)

        with step("[Action] Click [Fix/Enhance] button in [Tips Area] > Enable [Wind Removal] Tab"):
            main_page.tips_area_click_fix_enhance()
            fix_enhance_page.fix.switch_to_wind_removal()
            fix_enhance_page.fix.click_wind_removal()

        with step("[Action] Wait for AI Module Downloading"):
            self.check_downloading_AI_module()

        with step("[Action] Click [Apply] Button in [Wind Removal] Window"):
            fix_enhance_page.fix.click_wind_removal_apply(delay_time=10)

        with step("[Verify] Check if [Wind Removal] Window is closed"):
            # if main_page.exist(L.fix_enhance.fix.wind_removal.main_window):
            if fix_enhance_page.is_in_fix_enhance():
                assert False, "[Wind Removal] Window did not close as expected"

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.audio_denoise
    @pytest.mark.play_video
    @pytest.mark.name("[test_tip_areas_func_33_58] Adjust [Audio Denoise] in [Fix Enhance] and Verify Result")
    @exception_screenshot
    def test_tip_areas_func_33_58(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_57') is run and passed
        1. Click [Fix Enhance] button in [Tips Area] > Enable [Audio Denoise] Tab
        2. Get [Noise Type] in [Audio Denoise] Window > Check result is ('Stationary noise')
        3. Adjust slider in [Fix Enhance][Audio Denoise] to (77)
        4. Click [Play] in [Timeline Preview] > Wait for 5 sec > Click [Stop]
        5. Click [Minus] Button in [Fix Enhance][Audio Denoise] with (2)
        6. Get value in [Fix Enhance][Audio Denoise] > Check result is ('75')
        '''

        # [L334] 4.3 Fix/ Enhance > Fix > Apply [Audio Denoise]
        # with uuid("d49033f8-19c7-4ec1-b89e-a71d2f4f7171") as case:
        dependency_test = "test_tip_areas_func_33_57"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click [Fix Enhance] button in [Tips Area] > Enable [Audio Denoise] Tab"):
            main_page.tips_area_click_fix_enhance()
            fix_enhance_page.fix.switch_to_audio_denoise()

        with step("[Verify] Get [Noise Type] in [Audio Denoise] Window > Check result is ('Stationary noise')"):
            noise_type = fix_enhance_page.fix.audio_denoise.get_noise_type()
            if noise_type != "Stationary noise":
                assert False, f"Expected noise type 'Stationary noise', but got '{noise_type}'"

        with step("[Action] Adjust slider in [Fix Enhance][Audio Denoise] to (77)"):
            fix_enhance_page.fix.audio_denoise.degree.adjust_slider(77)

        with step("[Action] Click [Play] in [Timeline Preview] > Wait for 5 sec > Click [Stop]"):
            playback_window_page.Edit_Timeline_PreviewOperation("Play")
            time.sleep(DELAY_TIME * 5)
            playback_window_page.Edit_Timeline_PreviewOperation("Stop")

        with step("[Action] Click [Minus] Button in [Fix Enhance][Audio Denoise] with (2)"):
            fix_enhance_page.fix.audio_denoise.degree.click_minus(2)

        with step("[Verify] Get value in [Fix Enhance][Audio Denoise] > Check result is ('75')"):
            current_value = fix_enhance_page.fix.audio_denoise.degree.get_value()
            if current_value != "75":
                assert False, f"Expected value '75', but got '{current_value}'"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.produce_page
    @pytest.mark.produce
    @pytest.mark.name("[test_tip_areas_func_33_59] Produce the media with ('audio') format and ('aiff') extension")
    @exception_screenshot
    def test_tip_areas_func_33_59(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_58') is run and passed
        1. Click [Produce] button in [Main Page] > Check [Produce] page show
        2. Select file format to ('audio')
        3. Select [File Extension] to ('aiff')
        4. Get [Produced Filename] and save as self.aiff_produced_filename
        5. Click [Start Produce] button (L.produce.btn_start_produce)
        6. Click [Back to Edit] button
        7. Check able to Select media with the exported name by library icon view
        8. Move the exported clip in library to trash can
        '''

        dependency_test = "test_tip_areas_func_33_58"
        self.ensure_dependency(dependency_test)

        # [L405] 5.1 Produce 2D > Audio File > Select [Format] > AIFF
        # with uuid("8e24c00f-eae2-4daa-beff-d638a97d974b") as case:

        with step("[Action] Click [Produce] button in [Main Page] > Check [Produce] page show"):
            main_page.click_produce()
            if not produce_page.check_enter_produce_page():
                assert False, "[Produce] page did not open!"

        with step("[Action] Select file format to ('audio')"):
            produce_page.local.select_file_format('audio')

        with step("[Action] Select [File Extension] to ('aiff')"):
            produce_page.local.select_file_extension('aiff')

        with step("[Action] Get [Produced Filename] and save as self.aiff_produced_filename"):
            self.aiff_produced_filename = produce_page.get_produced_filename()

        with step("[Action] Click [Start Produce] button (L.produce.btn_start_produce)"):
            produce_page.click_start()

        with step("[Action] Click [Back to Edit] button"):
            produce_page.click_back_to_edit()

        with step("[Verify] Check able to Select media with the exported name by library icon view"):
            if not main_page.select_library_icon_view_media(self.aiff_produced_filename):
                assert False, f"Unable to select media with the exported name '{self.aiff_produced_filename}' by library icon view"

        with step("[Action] Move the exported clip in library to trash can"):
            media_room_page.library_clip_context_menu_move_to_trash_can()

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.produce_page
    @pytest.mark.produce
    @pytest.mark.name("[test_tip_areas_func_33_60] Produce the media with ('audio') format and ('m4a') extension")
    @exception_screenshot
    def test_tip_areas_func_33_60(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_59') is run and passed
        1. Click [Produce] button in [Main Page] > Check [Produce] page show
        2. Select file format to ('audio')
        3. Select [File Extension] to ('m4a')
        4. Get [Produced Filename]
        5. Click [Start Produce] button (L.produce.btn_start_produce)
        6. Click [Back to Edit] button (4)
        7. Check able to Select media with the exported name by library icon view
        8. Move the exported clip in library to trash can
        9. Check filename is not as self.aiff_produced_filename
        '''
        dependency_test = "test_tip_areas_func_33_59"
        self.ensure_dependency(dependency_test)

        # [L403] 5.1 Produce 2D > Audio File > Select [Format] > M4A
        # with uuid("6133a8dd-e9d3-487a-9558-793d06463611") as case:

        with step("[Action] Click [Produce] button in [Main Page] > Check [Produce] page show"):
            main_page.click_produce()
            if not produce_page.check_enter_produce_page():
                assert False, "[Produce] page did not open!"

        with step("[Action] Select file format to ('audio')"):
            produce_page.local.select_file_format('audio')

        with step("[Action] Select [File Extension] to ('m4a')"):
            produce_page.local.select_file_extension('m4a')

        with step("[Action] Get [Produced Filename]"):
            produced_filename = produce_page.get_produced_filename()

        with step("[Action] Click [Start Produce] button (L.produce.btn_start_produce)"):
            produce_page.click_start()

        with step("[Action] Click [Back to Edit] button (4)"):
            produce_page.click_back_to_edit(4)

        with step("[Verify] Check able to Select media with the exported name by library icon view"):
            if not main_page.select_library_icon_view_media(produced_filename):
                assert False, f"Unable to select media with the exported name '{produced_filename}' by library icon view"

        with step("[Action] Move the exported clip in library to trash can"):
            media_room_page.library_clip_context_menu_move_to_trash_can()

        with step("[Verify] Check filename is not as self.aiff_produced_filename"):
            if produced_filename == self.aiff_produced_filename:
                assert False, f"Filename should not match {self.aiff_produced_filename}! Current filename: {produced_filename}"

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.produce_page
    @pytest.mark.produce
    @pytest.mark.name("[test_tip_areas_func_33_61] Produce the media with ('audio') format and ('wmv') extension and Upload to CyberLink Cloud")
    @exception_screenshot
    def test_tip_areas_func_33_61(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_60') is run and passed
        1. Click [Produce] button in [Main Page] > Check [Produce] page show
        2. Select file format to ('audio')
        3. Select [File Extension] to ('wav')
        4. Get [Produced Filename] and save as self.wav_produced_filename
        5. Enable [Upload Copy to CyberLink Cloud]
        6. Check [Upload Copy to CyberLink Cloud] is visible > Check result is True
        7. Click [Start Produce] button (L.produce.btn_start_produce)
        8. Wait until [Upload to Cloud] button disappears
        9. Click [Back to Edit] button (L.produce.btn_back_to_edit_after_upload_cl)
        10. Check able to Select media with the exported name by library icon view
        '''
        dependency_test = "test_tip_areas_func_33_60"
        self.ensure_dependency(dependency_test)

        # [L404] 5.1 Produce 2D > Audio File > Select [Format] > WAV
        # with uuid("ebb092ce-34bc-4958-9c53-c76c464b2277") as case:

        with step("[Action] Click [Produce] button in [Main Page] > Check [Produce] page show"):
            main_page.click_produce()
            if not produce_page.check_enter_produce_page():
                assert False, "[Produce] page did not open!"

        with step("[Action] Select file format to ('audio')"):
            produce_page.local.select_file_format('audio')

        with step("[Action] Select [File Extension] to ('wav')"):
            produce_page.local.select_file_extension('wav')

        with step("[Action] Get [Produced Filename] and save as self.wav_produced_filename"):
            self.wav_produced_filename = produce_page.get_produced_filename()

        # [L406] 5.1 Produce 2D > Audio File > Upload a copy to cloud
        # with uuid("9590c2e7-831c-4cae-b19c-80fa62bb4411") as case:

        with step("[Action] Enable [Upload Copy to CyberLink Cloud]"):
            produce_page.local.set_check_upload_copy_to_cyberlink_cloud(is_check=1)

        with step("[Verify] Check [Upload Copy to CyberLink Cloud] is visible > Check result is True"):
            is_visible = produce_page.local.check_visible_upload_copy_to_cyberlink_cloud()
            if not is_visible:
                assert False, "[Upload Copy to CyberLink Cloud] is not visible!"

        with step("[Action] Click [Start Produce] button (L.produce.btn_start_produce)"):
            produce_page.click_start()

        with step("[Action] Wait until [Upload to Cloud] button disappears"):
            for _ in range(60):
                if main_page.exist(L.produce.btn_back_to_edit_after_upload_cl):
                    break
                else:
                    time.sleep(DELAY_TIME)

        with step("[Action] Click [Back to Edit] button (L.produce.btn_back_to_edit_after_upload_cl)"):
            main_page.click(L.produce.btn_back_to_edit_after_upload_cl)

        with step("[Verify] Check able to Select media with the exported name by library icon view"):
            if not main_page.select_library_icon_view_media(self.wav_produced_filename):
                assert False, f"Unable to select media with the exported name '{self.wav_produced_filename}' by library icon view"

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.produce_page
    @pytest.mark.audio_mixing_room
    @pytest.mark.play_video
    @pytest.mark.name("[test_tip_areas_func_33_62] Play the produced media in [Audio Mixing] Room and Move the exported clip in library to trash can")
    @exception_screenshot
    def test_tip_areas_func_33_62(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_61') is run and passed
        1. Insert the media to timeline via self.temp_for_os_14_insert_function(2)
        2. Enter Room (Audio Mixing)(6)
        3. Click [Play] button and check preview is playing (area=L.audio_mixing_room.audio_mixing_track, sec=2)
        4. Click [Stop] button
        5. Enter Room (Media)(0)
        6. Select media (self.wav_produced_filename) by library icon view > Move the exported clip in library to trash can
        '''
        dependency_test = "test_tip_areas_func_33_61"
        self.ensure_dependency(dependency_test)

        with step("[Action] Insert the media to timeline via self.temp_for_os_14_insert_function(2)"):
            self.temp_for_os_14_insert_function(2)

        with step("[Action] Enter Room (Audio Mixing)(6)"):
            main_page.enter_room(6)

        with step("[Action] Click [Play] button and check preview is playing (area=L.audio_mixing_room.audio_mixing_track, sec=2)"):
            playback_window_page.Edit_Timeline_PreviewOperation('Play')
            main_page.Check_PreviewWindow_is_different(area=L.audio_mixing_room.audio_mixing_track, sec=2)

        with step("[Action] Click [Stop] button"):
            playback_window_page.Edit_Timeline_PreviewOperation('STOP')

        with step("[Action] Enter Room (Media)(0)"):
            main_page.enter_room(0)

        with step("[Action] Select media (self.wav_produced_filename) by library icon view"):
            main_page.select_library_icon_view_media(self.wav_produced_filename)

        with step("[Action] Move the exported clip in library to trash can"):
            media_room_page.library_clip_context_menu_move_to_trash_can()

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.cyberlink_cloud
    @pytest.mark.content_pack
    @pytest.mark.import_media_from_cloud
    @pytest.mark.name("[test_tip_areas_func_33_63] Delete the produced media from [CyberLink Cloud]")
    @exception_screenshot
    def test_tip_areas_func_33_63(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_62') is run and passed
        1. Import media from [CyberLink Cloud]
        2. Switch to [Music] page > Select content in folder level (folder_index=0, click_times=2)
        3. Input text ('Produce') in search library in [Import Download Media From CL]
        4. Tap Select/Deselect All button
        5. Check [Delete] button (L.import_downloaded_media_from_cl.delete_btn) is enabled by .AXEnabled > Tap [Remove] button
        6. Press [ECS] key 3 times to close [Download From CL] window
        '''
        dependency_test = "test_tip_areas_func_33_62"
        self.ensure_dependency(dependency_test)

        with step("[Action] Import media from [CyberLink Cloud]"):
            media_room_page.import_media_from_cyberlink_cloud()

        with step("[Action] Switch to [Music] page and select content in folder level (folder_index=0, click_times=2)"):
            import_media_from_cloud_page.switch_to_music_page()
            import_media_from_cloud_page.select_content_in_folder_level(folder_index=0, click_times=2)

        with step("[Action] Input text ('Produce') in search library in [Import Download Media From CL]"):
            import_media_from_cloud_page.input_text_in_seacrh_library("Produce")

        with step("[Action] Tap Select/Deselect All button"):
            import_media_from_cloud_page.tap_select_deselect_all_btn()

        with step("[Verify] Check if [Delete] button is enabled and tap [Remove] button"):
            delete_btn_enabled = main_page.exist(L.import_downloaded_media_from_cl.delete_btn).AXEnabled
            if delete_btn_enabled != True:
                assert False, "[Delete] button is not enabled as expected"
            import_media_from_cloud_page.tap_remove_btn()

        with step("[Action] Press [ECS] key 3 times to close [Download From CL] window"):
            for _ in range(3):
                main_page.press_esc_key()
                time.sleep(DELAY_TIME*0.5)

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.volume
    @pytest.mark.name('[test_tip_areas_func_33_64] Apply [Volume] in [KeyFrame] and Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_64(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_63') is run and passed
        1. Select timeline media (track_index=1, clip_index=0) > Click [Keyframe] button in [Tips Area]
        2. Unfold [Volume] Tab > Get [Volume] value > Check default result is ('0.0')
        3. Set [Volume] Value to (9.1) > Get [Volume] value > Check applied result is ('9.1')
        '''
        dependency_test = "test_tip_areas_func_33_63"
        self.ensure_dependency(dependency_test)
        
        # [L361] 4.4 Keyframe > Volume
        # with uuid("8f39828c-1845-45a5-bb5f-aaac50c1397e") as case:

        with step("[Action] Select timeline media (track_index=1, clip_index=0) > Click [Keyframe] button in [Tips Area]"):
            timeline_operation_page.select_timeline_media(track_index=1, clip_index=0)
            tips_area_page.click_keyframe()
        
        with step("[Verify] Unfold [Volume] Tab > Get [Volume] value > Check default result is ('0.0')"):
            keyframe_room_page.volume.unfold_tab()

            default_value = keyframe_room_page.volume.get_value()
            if default_value != '0.0':
                assert False, f"Expected default volume value to be '0.0', but got '{default_value}'"
        
        with step("[Action] Set [Volume] Value to (9.1) > Get [Volume] value > Check applied result is ('9.1')"):
            keyframe_room_page.volume.set_value(9.1)
            applied_volume = keyframe_room_page.volume.get_value()
            if default_value != '9.1':
                assert False, f"Expected default volume value to be '9.1', but got '{applied_volume}'"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.keyframe
    @pytest.mark.audio_denoise
    @pytest.mark.name('[test_tip_areas_func_33_65] Adjust [Audio Denoise] in [Keyframe] and Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_65(self):
        '''
        0. Ensure the dependency test ('test_tip_areas_func_33_64') is run and passed
        1. Unfold [Fix Enhance] tab in [Keyframe] page
        2. Get Value [Fix Enhance][Audio Denoise][Degree] > Check default result is ('75')
        3. Click [Stepper Up] button 9 times > Get Value [Fix Enhance][Audio Denoise][Degree] > Check applied result is ('84')
        '''
        dependency_test = "test_tip_areas_func_33_64"
        self.ensure_dependency(dependency_test)
        
        # [L350] 4.4 Keyframe > Fix/ Enhance > Fix > Adjust [Audio Denoise]
        # with uuid("ebc3f1ce-4552-4e7d-9e9e-54fe152f66dd") as case:

        with step("[Action] Unfold [Fix Enhance] tab in [Keyframe] page"):
            keyframe_room_page.fix_enhance.unfold_tab(value=1)
        
        with step("[Verify] Get Value [Fix Enhance][Audio Denoise][Degree] > Check default result is ('75')"):
            default_degree = keyframe_room_page.fix_enhance.audio_denoise.degree.get_value()
            if default_degree != '75':
                assert False, f"Expected default degree value to be '75', but got '{default_degree}'"
        
        with step("[Action] Click [Stepper Up] button 9 times > Get Value [Fix Enhance][Audio Denoise][Degree] > Check applied result is ('84')"):
            keyframe_room_page.fix_enhance.audio_denoise.degree.click_stepper_up(times=9, index_node=-1)
            applied_degree = keyframe_room_page.fix_enhance.audio_denoise.degree.get_value()
            assert False, f"Expected applied degree value to be '84', but got '{applied_degree}'"
        
        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.keyframe
    @pytest.mark.timeline
    @pytest.mark.name('[test_tip_areas_func_33_66] Open Project > Enable Track > Select Timeline Media > Enter [Keyframe] Page')
    @exception_screenshot
    def test_tip_areas_func_33_66(self):
        """
        1. Start App
        2. Open Packed Project ('Packed_Project/test_tip_areas_func_33_66_from_test_tip_areas_func_33_45.pdk', 'Extracted_Folder/test_tip_areas_func_33_66')
        3. Set Track (track_index=2, option=1) Enable
        4. Select timeline media (track_index=2, clip_index=2)
        5. Enter [Keyframe] page from [Tip Area] and check result
        """
        with step("[Action] Start App"):
            main_page.start_app()

        with step("[Action] Open Packed Project ('Packed_Project/test_tip_areas_func_33_66_from_test_tip_areas_func_33_45.pdk', 'Extracted_Folder/test_tip_areas_func_33_66')"):
            self.open_packed_project('Packed_Project/test_tip_areas_func_33_66_from_test_tip_areas_func_33_45.pdk', 'Extracted_Folder/test_tip_areas_func_33_66')

        with step("[Action] Set Track (track_index=2, option=1) Enable"):
            timeline_operation_page.edit_specific_video_track_set_enable(track_index=2, option=1)

        # [L345] 4.3 Fix/Enhance > Keyframe
        # with uuid("ad0364e2-5628-480a-9e2f-46c9c9b8abb8") as case:

        with step("[Action] Select timeline media (track_index=2, clip_index=2)"):
            timeline_operation_page.select_timeline_media(track_index=2, clip_index=2)

        with step("[Verify] Enter [Keyframe] page from [Tip Area] and check result"):
            result = tips_area_page.click_keyframe()
            if not result:
                assert False, "Unable to enter [Keyframe] page from [Tip Area]"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.keyframe
    @pytest.mark.split_toning
    @pytest.mark.shadow
    @pytest.mark.hue
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_67] Add [Split Toning][Shadow][Hue] Keyframe in [Fix Enhance] and Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_67(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_66') is run and passed
        1. Unfold [Fix Enhance] tab in [Keyframe] page
        2. Drag scroll bar to (0.77)
        3. Add [Keyframe] for [Fix Enhance][Split Toning][Shadow][Hue]
        4. Set timecode to ('00_00_02_00')
        5. Set [Fix Enhance][Split Toning][Shadow][Hue] value to (0) by slider
        6. Click [Previous Keyframe] button for [Fix Enhance][Split Toning][Shadow][Hue]
        7. Get Value [Fix Enhance][Split Toning][Shadow][Hue] > Check applied result is ('0')
        8. Click [Next Keyframe] button for [Fix Enhance][Split Toning][Shadow][Hue]
        9. Get Value [Fix Enhance][Split Toning][Shadow][Hue] > Check applied result is ('0')
        10. Get timecode from playback window > Check applied result is ('00:00:02:00')
        """
        dependency_test = "test_tip_areas_func_33_66"
        self.ensure_dependency(dependency_test)

        # [L354] 4.4 Keyframe > Fix / Enhance > Adjust [Split Toning]
        # with uuid("b855bdd0-ea10-44a5-bd08-77b13747d9f5") as case:

        with step("[Action] Unfold [Fix Enhance] tab in [Keyframe] page"):
            keyframe_room_page.fix_enhance.unfold_tab()

        with step("[Action] Drag scroll bar to (0.77)"):
            keyframe_room_page.drag_scroll_bar(0.77)

        with step("[Action] Add [Keyframe] for [Fix Enhance][Split Toning][Shadow][Hue]"):
            keyframe_room_page.fix_enhance.split_toning.shadow_hue.add_remove_keyframe()

        with step("[Action] Set timecode to ('00_00_02_00')"):
            main_page.set_timeline_timecode('00_00_02_00', is_verify=True)

        with step("[Action] Set [Fix Enhance][Split Toning][Shadow][Hue] value to (0) by slider"):
            keyframe_room_page.fix_enhance.split_toning.shadow_hue.set_slider(0)

        with step("[Action] Click [Previous Keyframe] button for [Fix Enhance][Split Toning][Shadow][Hue]"):
            keyframe_room_page.fix_enhance.split_toning.shadow_hue.previous_keyframe()

        with step("[Verify] Get Value [Fix Enhance][Split Toning][Shadow][Hue] > Check applied result is ('0')"):
            current_value = keyframe_room_page.fix_enhance.split_toning.shadow_hue.get_value()
            if current_value != '0':
                # Similarity check not applicable; expected value should equal '0'
                assert False, f"Value for [Fix Enhance][Split Toning][Shadow][Hue] is incorrect! Expected '0', got '{current_value}'"

        with step("[Action] Click [Next Keyframe] button for [Fix Enhance][Split Toning][Shadow][Hue]"):
            keyframe_room_page.fix_enhance.split_toning.shadow_hue.next_keyframe()

        with step("[Verify] Get Value [Fix Enhance][Split Toning][Shadow][Hue] > Check applied result is ('0')"):
            next_value = keyframe_room_page.fix_enhance.split_toning.shadow_hue.get_value()
            if next_value != '0':
                # Similarity check not applicable; expected value should equal '0'
                assert False, f"Value for [Fix Enhance][Split Toning][Shadow][Hue] is incorrect! Expected '0', got '{current_value}'"

        with step("[Verify] Get timecode from playback window > Check applied result is ('00:00:02:00')"):
            current_timecode = playback_window_page.get_timecode()
            if current_timecode != "00:00:02:00":
                assert False, f"Timecode is incorrect! Expected '00:00:02:00', got '{current_timecode}'"

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.keyframe
    @pytest.mark.split_toning
    @pytest.mark.fix_enhance
    @pytest.mark.name('[test_tip_areas_func_33_68] Reset and check [Split Toning] values back to default')
    @exception_screenshot
    def test_tip_areas_func_33_68(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_66') is run and passed
        1. Click [Previous Keyframe] button for [Fix Enhance][Split Toning][Shadow][Hue]
        2. Click [Fix Enhance] tab in [Keyframe] page
        3. Enable [Split Toning] Tab
        4. Click [Reset] Button in [Fix Enhance] page
        5. Check if  [Do you wnat to continue?] dialog (L.base.confirm_dialog.main_window) is shown
        6. Click [Yes] button (L.base.confirm_dialog.btn_yes) in [Do you wnat to continue?] dialog 
        7. Get [Fix Enhance][Split Toning][Balance] value > Check result is ('0')
        8. Get [Fix Enhance][Split Toning][Hue] value > Check result is ('0')
        9. Get [Fix Enhance][Split Toning][Saturation] value > Check result is ('0')
        """
        dependency_test = "test_tip_areas_func_33_66"
        self.ensure_dependency(dependency_test)

        # [L344] 4.3 Fix / Enhance > Reset
        # with uuid("702cd916-959f-4504-9384-3ff7442915aa") as case:

        with step("[Action] Click [Previous Keyframe] button for [Fix Enhance][Split Toning][Shadow][Hue]"):
            keyframe_room_page.fix_enhance.split_toning.shadow_hue.previous_keyframe()

        with step("[Action] Click [Fix Enhance] tab in [Keyframe] page"):
            tips_area_page.click_fix_enhance()

        with step("[Action] Enable [Split Toning] Tab"):
            fix_enhance_page.enhance.switch_to_split_toning()

        with step("[Action] Click [Reset] Button in [Fix Enhance] page"):
            fix_enhance_page.click_reset()

        with step("[Verify] Check if [Do you wnat to continue?] dialog (L.base.confirm_dialog.main_window) is shown"):
            dialog = main_page.is_exist(L.base.confirm_dialog.main_window)
            if not dialog:
                assert False, "[Do you wnat to continue?] dialog is not shown"

        with step("[Action] Click [Yes] button (L.base.confirm_dialog.btn_yes) in [Do you wnat to continue?] dialog"):
            main_page.click(L.base.confirm_dialog.btn_yes)

        with step("[Verify] Get [Fix Enhance][Split Toning][Balance] value > Check result is ('0')"):
            balance_value = fix_enhance_page.enhance.split_toning.balance.get_value()
            if balance_value != '0':
                assert False, f"Balance value does not match expected ('0'), got '{balance_value}'"

        with step("[Verify] Get [Fix Enhance][Split Toning][Hue] value > Check result is ('0')"):
            hue_value =fix_enhance_page.enhance.split_toning.shadow.hue.get_value()
            if hue_value != '0':
                assert False, f"Hue value does not match expected ('0'), got '{hue_value}'"

        with step("[Verify] Get [Fix Enhance][Split Toning][Saturation] value > Check result is ('0')"):
            saturation_value = fix_enhance_page.enhance.split_toning.shadow.saturation.get_value()
            if saturation_value != '0':
                assert False, f"Saturation value does not match expected ('0'), got '{saturation_value}'"

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.keyframe
    @pytest.mark.color_adjustment
    @pytest.mark.exposure
    @pytest.mark.hue
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_69] Set [Keyframe] for [Fix Enhance][Color Adjustment][Exposure]/[Hue] > Switch > Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_69(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_68') is run and passed
        1. Click [Undo] button
        2. Enable [Color Adjustment] Tab in [Fix Enhance] page
        3. Click [Keyframe] button in [Tips Area] > Check result is True
        4. Drag scroll bar to (0.24)
        5. Add [Keyframe] for [Fix Enhance][Color Adjustment][Exposure]
        6. Add [Keyframe] for [Fix Enhance][Color Adjustment][Hue]
        7. Set timecode to ('00_00_03_00')
        8. Set value for [KeyFrame Page][Fix Enhance][Color Adjustment][Exposure] to (53)
        9. Set value for [KeyFrame Page][Fix Enhance][Color Adjustment][Hue] to (182) by slider
        10. Set timecode to ('00_00_01_22')
        11. Get value for [KeyFrame Page][Fix Enhance][Color Adjustment][Exposure] > Check result is ('107')
        12. Get value for [KeyFrame Page][Fix Enhance][Color Adjustment][Hue] > Check result is ('120')
        """

        # [L351] 4.4 Keyframe > Fix / Enhance > Adjust [Color Adjustment]
        # with uuid("3077f9c9-7194-4edc-b3e8-707495e22520") as case:

        dependency_test = "test_tip_areas_func_33_68"
        self.ensure_dependency(dependency_test)

        with step("[Action] Click [Undo] button"):
            main_page.click_undo()

        with step("[Action] Enable [Color Adjustment] Tab in [Fix Enhance] page"):
            fix_enhance_page.enhance.switch_to_color_adjustment()

        with step("[Verify] Click [Keyframe] button in [Tips Area] > Check result is True"):
            result = tips_area_page.click_keyframe()
            if not result:
                assert False, "[Keyframe] button click did not return True"

        with step("[Action] Drag scroll bar to (0.24)"):
            keyframe_room_page.drag_scroll_bar(0.24)

        with step("[Action] Add [Keyframe] for [Fix Enhance][Color Adjustment][Exposure]"):
            keyframe_room_page.fix_enhance.color_adjustment.exposure.add_remove_keyframe()

        with step("[Action] Add [Keyframe] for [Fix Enhance][Color Adjustment][Hue]"):
            keyframe_room_page.fix_enhance.color_adjustment.hue.add_remove_keyframe()

        with step("[Action] Set timecode to ('00_00_03_00')"):
            main_page.set_timeline_timecode('00_00_03_00', is_verify=True)

        with step("[Action] Set value for [KeyFrame Page][Fix Enhance][Color Adjustment][Exposure] to (53)"):
            keyframe_room_page.fix_enhance.color_adjustment.exposure.set_value(53)

        with step("[Action] Set value for [KeyFrame Page][Fix Enhance][Color Adjustment][Hue] to (182) by slider"):
            keyframe_room_page.fix_enhance.color_adjustment.hue.set_slider(182)

        with step("[Action] Set timecode to ('00_00_01_22')"):
            main_page.set_timeline_timecode('00_00_01_22', is_verify=True)

        with step("[Verify] Get value for [KeyFrame Page][Fix Enhance][Color Adjustment][Exposure] > Check result is ('107')"):
            exposure_value = keyframe_room_page.fix_enhance.color_adjustment.exposure.get_value()
            if exposure_value != '107':
                # Expected Exposure value should equal '107'
                assert False, f"Exposure value does not match expected ('107'), got '{exposure_value}'"

        with step("[Verify] Get value for [KeyFrame Page][Fix Enhance][Color Adjustment][Hue] > Check result is ('120')"):
            hue_value = keyframe_room_page.fix_enhance.color_adjustment.hue.get_value()
            if hue_value != '120':
                # Expected Hue value should equal '120'
                assert False, f"Hue value does not match expected ('120'), got '{hue_value}'"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.name('[test_tip_areas_func_33_70] Verify [Clip Attributes] position update')
    @exception_screenshot
    def test_tip_areas_func_33_70(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_69') is run and passed
        1. Drag scroll bar to (0)
        2. Fold [Fix Enhance] tab > Unfold [Clip Attributes] tab
        3. Set [KeyFrame Page][Clip Attributes][Position][X] value to (0.4)
        4. Set timecode to ('00_00_03_12')
        5. Set [KeyFrame Page][Clip Attributes][Position][Y] value to (0.71)
        6. Set timecode to ('00_00_02_10')
        7. Get value for [KeyFrame Page][Clip Attributes][Position][X] > Check result is ('0.4')
        8. Get value for [KeyFrame Page][Clip Attributes][Position][Y] > Check result is ('0.576')
        """

        dependency_test = "test_tip_areas_func_33_69"
        self.ensure_dependency(dependency_test)

        # [L356] 4.4 Keyframe > Clip Attribute > Position
        # with uuid("e3a6c143-9a07-4385-a593-63b511cd213e") as case:

        with step("[Action] Drag scroll bar to (0)"):
            keyframe_room_page.drag_scroll_bar(0)

        with step("[Action] Fold [Fix Enhance] tab > Unfold [Clip Attributes] tab"):
            # Fold [Fix Enhance] tab (using value 0 to fold)
            keyframe_room_page.fix_enhance.unfold_tab(value=0)
            # Unfold [Clip Attributes] tab (using value 1 to unfold)
            keyframe_room_page.clip_attributes.unfold_tab(value=1)

        with step("[Action] Set [KeyFrame Page][Clip Attributes][Position][X] value to (0.4)"):
            keyframe_room_page.clip_attributes.position.x.set_value(0.4, index_node=-1)

        with step("[Action] Set timecode to ('00_00_03_12')"):
            main_page.set_timeline_timecode('00_00_03_12')

        with step("[Action] Set [KeyFrame Page][Clip Attributes][Position][Y] value to (0.71)"):
            keyframe_room_page.clip_attributes.position.y.set_value(0.71, index_node=-1)

        with step("[Action] Set timecode to ('00_00_02_10')"):
            main_page.set_timeline_timecode('00_00_02_10')

        with step("[Verify] Get value for [KeyFrame Page][Clip Attributes][Position][X] > Check result is ('0.4')"):
            x_value = keyframe_room_page.clip_attributes.position.x.get_value(index_node=-1)
            if x_value != '0.4':
                assert False, f"Position X value does not match expected ('0.4'), got '{x_value}'"

        with step("[Verify] Get value for [KeyFrame Page][Clip Attributes][Position][Y] > Check result is ('0.576')"):
            y_value = keyframe_room_page.clip_attributes.position.y.get_value(index_node=-1)
            if y_value != '0.576':
                assert False, f"Position Y value does not match expected ('0.576'), got '{y_value}'"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.clip_attributes
    @pytest.mark.keyframe
    @pytest.mark.freeform
    @pytest.mark.name('[test_tip_areas_func_33_71] Apply [Clip Attributes][Freeform][Top Right Y] in [KeyFrame] and Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_71(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_70') is run and passed
        1. Drag scroll bar to (1)
        2. Set [KeyFrame Page][Clip Attributes][Freeform][Top Right Y] value to (0.06)
        3. Set timecode to ('00_00_00_00')
        4. Set [KeyFrame Page][Clip Attributes][Freeform][Top Right Y] value to (0.9)
        5. Get value for [KeyFrame Page][Clip Attributes][Freeform][Top Right Y] > Check result is ('0.900')
        6. Click [Next Keyframe] button in [KeyFrame Page][Clip Attributes][Freeform]
        7. Get value for [KeyFrame Page][Clip Attributes][Freeform][Top Right Y] > Check result is ('0.060')
        """
        self.ensure_dependency("test_tip_areas_func_33_70")

        # [L360] 4.4 Keyframe > Clip Attribute > Freeform
        # with uuid("85a485fe-c64b-430a-8cd2-64bc82e15822") as case:

        with step("[Action] Drag scroll bar to (1)"):
            keyframe_room_page.drag_scroll_bar(1)

        with step("[Action] Set [KeyFrame Page][Clip Attributes][Freeform][Top Right Y] value to (0.06)"):
            keyframe_room_page.clip_attributes.freeform.top_right_y.set_value(0.06, index_node=-1)

        with step("[Action] Set timecode to ('00_00_00_00')"):
            main_page.set_timeline_timecode('00_00_00_00')

        with step("[Action] Set [KeyFrame Page][Clip Attributes][Freeform][Top Right Y] value to (0.9)"):
            keyframe_room_page.clip_attributes.freeform.top_right_y.set_value(0.9, index_node=-1)

        with step("[Verify] Get value for [KeyFrame Page][Clip Attributes][Freeform][Top Right Y] > Check result is ('0.900')"):
            value = keyframe_room_page.clip_attributes.freeform.top_right_y.get_value(index_node=-1)
            if value != '0.900':
                assert False, f"Expected value ('0.900'), got ({value})"

        with step("[Action] Click [Next Keyframe] button in [KeyFrame Page][Clip Attributes][Freeform]"):
            keyframe_room_page.clip_attributes.freeform.next_keyframe(index_node=-1)

        with step("[Verify] Get value for [KeyFrame Page][Clip Attributes][Freeform][Top Right Y] > Check result is ('0.060')"):
            value = keyframe_room_page.clip_attributes.freeform.top_right_y.get_value(index_node=-1)
            if value != '0.060':
                assert False, f"Expected value ('0.060'), got ({value})"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.clip_attributes
    @pytest.mark.keyframe
    @pytest.mark.rotation
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_72] Verify [Rotation] update in Clip Attributes')
    @exception_screenshot
    def test_tip_areas_func_33_72(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_71') is run and passed
        1. Drag scroll bar to (0.77)
        2. Add [Keyframe] for [Clip Attributes][Rotation]
        3. Set timecode to ('00_00_01_00')
        4. Set [KeyFrame Page][Clip Attributes][Rotation] value to (130)
        5. Get value for [KeyFrame Page][Clip Attributes][Rotation] > Check result is ('130.00')
        6. Click [Next Keyframe] button in [KeyFrame Page][Clip Attributes][Rotation]
        7. Get value for [KeyFrame Page][Clip Attributes][Rotation] > Check result is ('0.00')
        """
        self.ensure_dependency("test_tip_areas_func_33_71")
        
        # [L359] 4.4 Keyframe > Clip Attribute > Rotate
        # with uuid("87b99fc8-b634-4c8b-b04f-d153cc439a0c") as case:

        with step("[Action] Drag scroll bar to (0.77)"):
            keyframe_room_page.drag_scroll_bar(0.77)
        
        with step('[Action] Add [Keyframe] for [Clip Attributes][Rotation]'):
            keyframe_room_page.clip_attributes.rotation.add_remove_keyframe()

        with step('[Action] Set timecode to (00_00_01_00)'):
            main_page.set_timeline_timecode('00_00_01_00')

        with step("[Action] Set [KeyFrame Page][Clip Attributes][Rotation] value to (130)"):
            keyframe_room_page.clip_attributes.rotation.set_value(130, index_node=-1)
        
        with step("[Verify] Get value for [KeyFrame Page][Clip Attributes][Rotation] > Check result is ('130.00')"):
            rotation_value = keyframe_room_page.clip_attributes.rotation.get_value(index_node=-1)
            if rotation_value != '130.00':
                assert False, f"Rotation value does not match expected ('130.00'), got ({rotation_value})"
        
        with step("[Action] Click [Next Keyframe] button in [KeyFrame Page][Clip Attributes][Rotation]"):
            keyframe_room_page.clip_attributes.rotation.next_keyframe(index_node=-1)
        
        with step("[Verify] Get value for [KeyFrame Page][Clip Attributes][Rotation] > Check result is ('0.00')"):
            rotation_value = keyframe_room_page.clip_attributes.rotation.get_value(index_node=-1)
            if rotation_value != '0.00':
                assert False, f"Rotation value does not match expected ('0.00'), got ({rotation_value})"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.clip_attributes
    @pytest.mark.keyframe
    @pytest.mark.opacity
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_73] Set [Clip Attributes][Opacity] > Switch Keyframe > Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_73(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_72') is run and passed
        1. Add [KeyFrame] for [KeyFrame Page][Clip Attributes][Opacity] 
        2. Click [Previous Keyframe] button in [KeyFrame Page][Clip Attributes][Opacity]
        3. Set [KeyFrame Page][Clip Attributes][Opacity] value to (81)
        4. Click [Next Keyframe] button in [KeyFrame Page][Clip Attributes][Opacity]
        5. Click [Previous Keyframe] button in [KeyFrame Page][Clip Attributes][Opacity]
        6. Get value for [KeyFrame Page][Clip Attributes][Opacity] > Check result is ('81')
        """
        self.ensure_dependency("test_tip_areas_func_33_72")
        
        # [L358] 4.4 Keyframe > Clip Attribute > Opacity
        # with uuid("91d9dcd4-5b93-473a-9816-00952ae14584") as case:

        with step("[Action] Add [KeyFrame] for [KeyFrame Page][Clip Attributes][Opacity]"):
            keyframe_room_page.clip_attributes.opacity.add_remove_keyframe(index_node=-1)
        
        with step("[Action] Click [Previous Keyframe] button in [KeyFrame Page][Clip Attributes][Opacity]"):
            # keyframe_room_page.clip_attributes.opacity.previous_keyframe(index_node=-1)
            keyframe_room_page.clip_attributes.rotation.previous_keyframe()
        
        with step("[Action] Set [KeyFrame Page][Clip Attributes][Opacity] value to (81)"):
            keyframe_room_page.clip_attributes.opacity.set_value(81, index_node=-1)
        
        with step("[Action] Click [Next Keyframe] button in [KeyFrame Page][Clip Attributes][Opacity]"):
            keyframe_room_page.clip_attributes.opacity.next_keyframe(index_node=-1)
        
        with step("[Action] Click [Previous Keyframe] button in [KeyFrame Page][Clip Attributes][Opacity]"):
            keyframe_room_page.clip_attributes.opacity.previous_keyframe(index_node=-1)
        
        with step("[Verify] Get value for [KeyFrame Page][Clip Attributes][Opacity] > Check result is ('81')"):
            opacity_value = keyframe_room_page.clip_attributes.opacity.get_value(index_node=-1)
            if opacity_value != '81':
                assert False, f"Opacity value does not match expected ('81'), got ({opacity_value})"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.clip_attributes
    @pytest.mark.keyframe
    @pytest.mark.scale
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_74] Adjust [Clip Attributes][Scale] in [KeyFrame]> Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_74(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_73') is run and passed
        1. Drag scroll bar to (0.28)
        2. Set timecode to ('00_00_01_21') in main page
        3. Set [Maintain Aspect Ratio] in [KeyFrame Page][Clip Attributes][Scale] to (set_status=0)
        4. Set [KeyFrame Page][Clip Attributes][Scale][Width] value to (0.91) by slider
        5. Set [KeyFrame Page][Clip Attributes][Scale][Height] value to (1.22) by slider
        6. Set timecode to ('00_00_01_13') in main page
        7. Get value for [KeyFrame Page][Clip Attributes][Scale][Width] > Check result is ('0.944')
        8. Get value for [KeyFrame Page][Clip Attributes][Scale][Height] > Check result is ('1.136')
        """
        self.ensure_dependency("test_tip_areas_func_33_73")
        
        # [L357] 4.4 Keyframe > Clip Attribute > Scale
        # with uuid("9e959cab-a100-4b54-8369-db894e1acce6") as case:

        with step("[Action] Drag scroll bar to (0.28)"):
            keyframe_room_page.drag_scroll_bar(0.28)

        with step("[Action] Add [Keyframe] for [KeyFrame Page][Clip Attributes][Scale]"):
            keyframe_room_page.clip_attributes.scale.add_remove_keyframe()
        
        with step("[Action] Set timecode to ('00_00_01_21') in main page"):
            main_page.set_timeline_timecode('00_00_01_21')
        
        with step("[Action] Set [Maintain Aspect Ratio] in [KeyFrame Page][Clip Attributes][Scale] to (set_status=0)"):
            keyframe_room_page.clip_attributes.scale.set_maintain_aspect_ratio(set_status=0, index_node=-1)
        
        with step("[Action] Set [KeyFrame Page][Clip Attributes][Scale][Width] value to (0.91) by slider"):
            keyframe_room_page.clip_attributes.scale.width.set_slider(0.91)
        
        with step("[Action] Set [KeyFrame Page][Clip Attributes][Scale][Height] value to (1.22) by slider"):
            keyframe_room_page.clip_attributes.scale.height.set_slider(1.22)
        
        with step("[Action] Set timecode to ('00_00_01_13') in main page"):
            main_page.set_timeline_timecode('00_00_01_13')
        
        with step("[Verify] Get value for [KeyFrame Page][Clip Attributes][Scale][Width] > Check result is ('0.944')"):
            width_value = keyframe_room_page.clip_attributes.scale.width.get_value()
            if width_value != '0.944':
                assert False, f"Width scale value does not match expected ('0.944'), got ({width_value})"
        
        with step("[Verify] Get value for [KeyFrame Page][Clip Attributes][Scale][Height] > Check result is ('1.136')"):
            height_value = keyframe_room_page.clip_attributes.scale.height.get_value()
            if height_value != '1.136':
                assert False, f"Height scale value does not match expected ('1.136'), got ({height_value})"
        
        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.keyframe
    @pytest.mark.scale
    @pytest.mark.play_video
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_75] Play video and check preview as GT for effects in [KeyFrame]')
    @exception_screenshot
    def test_tip_areas_func_33_75(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_74') is run and passed
        1. Click [Timeline Track Visible] Button for track (0)
        2. Click [Play] button in playback window
        3. Check preview is changin when playing (L.base.Area.preview.only_mtk_view, sec=3)
        4. Click [Stop] button in playback window
        5. Set timecode to ('00_00_01_25')
        6. Check preview (L.base.Area.preview.only_mtk_view,file_name=Auto_Ground_Truth_Folder + 'L362.png') matches GT (Ground_Truth_Folder + 'L362.png', check_preview) with similarity=0.95
        """
        self.ensure_dependency("test_tip_areas_func_33_74")
        
        # [L362] 4.4 Keyframe > Preview adjustment
        # with uuid("b9762b30-d4c8-49ee-a3bc-28f77529f56f") as case:

        with step("[Action] Click [Timeline Track Visible] Button for track (0)"):
            timeline_operation_page.click_timeline_track_visible_button(0)
        
        with step("[Action] Click [Play] button in playback window"):
            playback_window_page.Edit_Timeline_PreviewOperation('Play')
        
        with step("[Verify] Check preview is changin when playing (L.base.Area.preview.only_mtk_view, sec=3)"):
            preview_changed = main_page.Check_PreviewWindow_is_different(area=L.base.Area.preview.only_mtk_view, sec=3)
            if not preview_changed:
                assert False, "Preview did not change when playing! Expected change with sec=3"
        
        with step("[Action] Click [Stop] button in playback window"):
            playback_window_page.Edit_Timeline_PreviewOperation('Stop')
        
        with step("[Action] Set timecode to ('00_00_01_25')"):
             mask_designer_page.set_MaskDesigner_timecode('00_00_01_25')
        
        with step("[Verify] Check preview (L.base.Area.preview.only_mtk_view,file_name=Auto_Ground_Truth_Folder + 'L362.png') matches GT (Ground_Truth_Folder + 'L362.png', check_preview) with similarity=0.95"):
            current_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view, file_name=Auto_Ground_Truth_Folder + 'L362.png')
            is_preview_correct = main_page.compare(Ground_Truth_Folder + 'L362.png', current_preview, similarity=0.95)
            if not is_preview_correct:
                assert False, "Preview does not match Ground Truth (L362.png)! Similarity should >0.95"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.keyframe
    @pytest.mark.clip_attributes
    @pytest.mark.hdr_effect
    @pytest.mark.timecode
    @pytest.mark.name('[test_tip_areas_func_33_76] Set [Fix Enhance][HDR Effect][Strength] in [KeyFrame] > Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_76(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_75') is run and passed
        1. Click [Timeline Track Visible] Button for track (4)
        2. Select timeline media (track_index=4, clip_index=1)
        3. Fold [Clip Attributes] tab in [KeyFrame Page]
        4. Unfold [Fix Enhance] tab in [KeyFrame Page]
        5. Drag scroll bar to (1)
        6. Add [KeyFrame] for [KeyFrame Page][Fix Enhance][HDR Effect][Strength]
        7. Click [Stepper Up] button in [KeyFrame Page][Fix Enhance][HDR Effect][Strength] for 5 times
        8. Get value for [KeyFrame Page][Fix Enhance][HDR Effect][Strength] > Check result is ('94')
        9. Click [Stepper Down] button in [KeyFrame Page][Fix Enhance][HDR Effect][Strength] for 2 times
        10. Get value for [KeyFrame Page][Fix Enhance][HDR Effect][Strength] > Check result is ('92')
        """
        self.ensure_dependency("test_tip_areas_func_33_75")
        
        # [L355] 4.4 Keyframe > Fix Enhance > Adjust [HDR Effect]
        # with uuid("34fb1dc3-57c1-4071-a3e8-97d9eafdea04") as case:

        with step("[Action] Click [Timeline Track Visible] Button for track (4)"):
            timeline_operation_page.click_timeline_track_visible_button(4)
        
        with step("[Action] Select timeline media (track_index=4, clip_index=1)"):
            timeline_operation_page.select_timeline_media(4, 1)
        
        with step("[Action] Fold [Clip Attributes] tab in [KeyFrame Page]"):
            keyframe_room_page.clip_attributes.unfold_tab(value=0)
        
        with step("[Action] Unfold [Fix Enhance] tab in [KeyFrame Page]"):
            keyframe_room_page.fix_enhance.unfold_tab(value=1)
        
        with step("[Action] Drag scroll bar to (1)"):
            keyframe_room_page.drag_scroll_bar(1)
        
        with step("[Action] Add [KeyFrame] for [KeyFrame Page][Fix Enhance][HDR Effect][Strength]"):
            keyframe_room_page.fix_enhance.hdr_effect.glow_strength.add_remove_keyframe()
        
        with step("[Action] Click [Stepper Up] button in [KeyFrame Page][Fix Enhance][HDR Effect][Strength] for 5 times"):
            keyframe_room_page.fix_enhance.hdr_effect.glow_strength.click_stepper_up(5)
        
        with step("[Verify] Get value for [KeyFrame Page][Fix Enhance][HDR Effect][Strength] > Check result is ('94')"):
            strength_value = keyframe_room_page.fix_enhance.hdr_effect.glow_strength.get_value()
            if strength_value != '94':
                assert False, f"Strength value does not match expected ('94'), got ({strength_value})"
        
        with step("[Action] Click [Stepper Down] button in [KeyFrame Page][Fix Enhance][HDR Effect][Strength] for 2 times"):
            keyframe_room_page.fix_enhance.hdr_effect.glow_strength.click_stepper_down(2)
        
        with step("[Verify] Get value for [KeyFrame Page][Fix Enhance][HDR Effect][Strength] > Check result is ('92')"):
            strength_value = keyframe_room_page.fix_enhance.hdr_effect.glow_strength.get_value()
            if strength_value != '92':
                assert False, f"Strength value does not match expected ('92'), got ({strength_value})"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.save_project
    @pytest.mark.name('[test_tip_areas_func_33_77] Save the project as [test_tip_areas_func_33_77] > Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_77(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_76') is run and passed
        1. Save the project as ('test_tip_areas_func_33_77')
        2. Check back to main program after saving project by check (main_page.exist(L.base.main_caption))
        3. Check the AXValue of main_caption is ('test_tip_areas_func_33_77')
        """
        self.ensure_dependency("test_tip_areas_func_33_76")

        # [L363] 4.4 Keyframe > Save as Project
        # with uuid("77a67c4a-2f74-47bf-b5bc-31defc5d3280") as case:

        with step("[Action] Save the project as ('test_tip_areas_func_33_77')"):
            main_page.top_menu_bar_file_save_project_as()
            if not main_page.handle_save_file_dialog('test_tip_areas_func_33_77', folder_path=Test_Material_Folder + 'BFT_21_Stage1/'):
                assert False, "Failed to save project as 'test_tip_areas_func_33_77'"
        
        with step("[Verify] Check back to main program after saving project by check (main_page.exist(L.base.main_caption))"):
            main_caption = main_page.exist(L.base.main_caption)
            if not main_caption:
                assert False, "Main caption not found after saving project"
        
        with step("[Verify] Check the AXValue of main_caption is ('test_tip_areas_func_33_77')"):
            if main_caption.AXValue != 'test_tip_areas_func_33_77':
                assert False, f"Main caption AXValue does not match expected ('test_tip_areas_func_33_77'), got ({main_caption.AXValue})"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.fix_enhance
    @pytest.mark.video_denoise
    @pytest.mark.name('[test_tip_areas_func_33_78] Launch APP > Set [Video Denoise] in [Fix Enhance] > Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_78(self):
        """
        1. Clear [AI Module] files > Start APP
        2. Open packed project ('test_tip_areas_func_33_78_from_test_tip_areas_func_33_77')
        3. Select timeline media (track_index=4, clip_index=0)
        4. Click [Fix Enhance] button from [Tip Areas]
        5. Enable [Video Denoise] tab in [Fix Enhance]
        6. Get [Fix Enhance][Video Denoise][Degree] value > Check result is ('50')
        7. Click [Up] Button in [Fix Enhance][Video Denoise][Degree] for 4 times
        8. Get [Fix Enhance][Video Denoise][Degree] value > Check result is ('54')
        """
        with step("[Action] Clear [AI Module] files > Start APP"):
            main_page.clear_AI_module()
            main_page.start_app()

        with step("[Action] Open packed project ('test_tip_areas_func_33_78_from_test_tip_areas_func_33_77')"):
            self.open_packed_project("Packed_Project/test_tip_areas_func_33_78_from_test_tip_areas_func_33_77.pdk",
                                    "Extracted_Folder/test_tip_areas_func_33_78")
            
        # [L333] 4.3 Fix / Enhance > Fix > Apply [Video Denoise]
        # with uuid("7f017914-00c7-489f-a410-e6c6f4e9e080") as case:

        with step("[Action] Select timeline media (track_index=4, clip_index=0)"):
            timeline_operation_page.select_timeline_media(4, 0)

        with step("[Action] Click [Fix Enhance] button from [Tip Areas]"):
            tips_area_page.click_fix_enhance()

        with step("[Action] Enable [Video Denoise] tab in [Fix Enhance]"):
            fix_enhance_page.fix.enable_video_denoise()

        with step("[Verify] Get [Fix Enhance][Video Denoise][Degree] value > Check result is ('50')"):
            degree_value = fix_enhance_page.fix.video_denoise.degree.get_value()
            if degree_value != '50':
                assert False, f"Degree value does not match expected ('50'), got ({degree_value})"

        with step("[Action] Click [Up] Button in [Fix Enhance][Video Denoise][Degree] for 4 times"):
            keyframe_room_page.fix_enhance.video_denoise.degree.click_up(4)

        with step("[Verify] Get [Fix Enhance][Video Denoise][Degree] value > Check result is ('54')"):
            new_degree_value = fix_enhance_page.fix.video_denoise.degree.get_value()
            if new_degree_value != '54':
                assert False, f"Degree value does not match expected ('54'), got ({new_degree_value})"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.name('[test_tip_areas_func_33_79] Verify [Fix Enhance][Video Denoise][Degree] update and timecode reset')
    @exception_screenshot
    def test_tip_areas_func_33_79(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_78') is run and passed
        1. Click [KeyFrame] Button in [Fix Enhance]
        2. Get [KeyFrame Page][Fix Enhance][Video Denoise][Degree] value > Check result is ('54')
        3. Set timecode to ('00_00_02_00') at main page
        4. Set [KeyFrame Page][Fix Enhance][Video Denoise][Degree] value to (68) by slider
        5. Get value for [KeyFrame Page][Fix Enhance][Video Denoise][Degree] > Check result is ('68')
        6. Reset [Keyframe] in [KeyFrame Page][Fix Enhance][Video Denoise][Degree]
        7. Click [Previous KeyFrame] button in [KeyFrame Page][Fix Enhance][Video Denoise][Degree]
        8. Get timecode in playback window > Check result is ('00:00:00:00')
        9. Click [Next KeyFrame] button in [KeyFrame Page][Fix Enhance][Video Denoise][Degree]
        10. Get timecode in playback window > Check result is ('00:00:00:00')
        11. Get value for [KeyFrame Page][Fix Enhance][Video Denoise][Degree] > Check result is ('68')
        """
        self.ensure_dependency("test_tip_areas_func_33_78")
        
        # [L349] 4.4 Keyframe > Fix / Enhance > Adjust [Video Denoise]
        # with uuid("ce527c43-3c62-49c2-8e13-dd07ded26eba") as case:

        with step("[Action] Click [KeyFrame] Button in [Fix Enhance]"):
            fix_enhance_page.click_keyframe()
        
        with step("[Verify] Get [KeyFrame Page][Fix Enhance][Video Denoise][Degree] value > Check result is ('54')"):
            degree_value = keyframe_room_page.fix_enhance.video_denoise.degree.get_value()
            if degree_value != '54':
                assert False, f"Video Denoise Degree value does not match expected ('54'), got ({degree_value})"
        
        with step("[Action] Set timecode to ('00_00_02_00') at main page"):
            main_page.set_timeline_timecode('00_00_02_00')
        
        with step("[Action] Set [KeyFrame Page][Fix Enhance][Video Denoise][Degree] value to (68) by slider"):
            keyframe_room_page.fix_enhance.video_denoise.degree.set_slider(68, index_node=-1)
        
        with step("[Verify] Get value for [KeyFrame Page][Fix Enhance][Video Denoise][Degree] > Check result is ('68')"):
            new_degree_value = keyframe_room_page.fix_enhance.video_denoise.degree.get_value(index_node=-1)
            if new_degree_value != '68':
                assert False, f"Video Denoise Degree value does not match expected ('68'), got ({new_degree_value})"
        
        with step("[Action] Reset [Keyframe] in [KeyFrame Page][Fix Enhance][Video Denoise][Degree]"):
            keyframe_room_page.fix_enhance.video_denoise.degree.reset_keyframe()
        
        with step("[Action] Click [Previous KeyFrame] button in [KeyFrame Page][Fix Enhance][Video Denoise][Degree]"):
            keyframe_room_page.fix_enhance.video_denoise.degree.previous_keyframe(index_node=-1)
        
        with step("[Verify] Get timecode in playback window > Check result is ('00:00:00:00')"):
            current_timecode = playback_window_page.get_timecode_slidebar()
            if current_timecode != "00:00:00:00":
                assert False, f"Playback window timecode does not match expected ('00:00:00:00'), got ({current_timecode})"
        
        with step("[Action] Click [Next KeyFrame] button in [KeyFrame Page][Fix Enhance][Video Denoise][Degree]"):
            keyframe_room_page.fix_enhance.video_denoise.degree.next_keyframe(index_node=-1)
        
        with step("[Verify] Get timecode in playback window > Check result is ('00:00:00:00')"):
            current_timecode = playback_window_page.get_timecode_slidebar()
            if current_timecode != "00:00:00:00":
                assert False, f"Playback window timecode does not match expected ('00:00:00:00'), got ({current_timecode})"
        
        with step("[Verify] Get value for [KeyFrame Page][Fix Enhance][Video Denoise][Degree] > Check result is ('68')"):
            final_degree_value = keyframe_room_page.fix_enhance.video_denoise.degree.get_value(index_node=-1)
            if final_degree_value != '68':
                assert False, f"Final Video Denoise Degree value does not match expected ('68'), got ({final_degree_value})"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.color_enhancement
    @pytest.mark.name('[test_tip_areas_func_33_80] Set [Fix Enhance][Color Enhancement][Degree] > Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_80(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_79') is run and passed
        1. Click [Fix Enhance] button from [Tip Areas]
        2. Enable [Color Enhancement] tab in [Fix Enhance]
        3. Adjust [Fix Enhance][Color Enhancement][Degree] slider to (20) > Screenshot (L.base.Area.preview.only_mtk_view)
        4. Get Value for [Fix Enhance][Color Enhancement][Degree] > Check result is ('20')
        5. Set [Fix Enhance][Color Enhancement][Degree] to (99)
        6. Get Value for [Fix Enhance][Color Enhancement][Degree] > Check result is ('99')
        7. Check preview is updated after set value with similarity<0.9999
        """
        self.ensure_dependency("test_tip_areas_func_33_79")
        
        # [L337] 4.3 Fix / Enhance > Enhance > Apply [Color Enhancement]
        # with uuid("60eee427-45e9-4193-9e35-66c4400c7fb8") as case:

        with step("[Action] Click [Fix Enhance] button from [Tip Areas]"):
            tips_area_page.click_fix_enhance()

        with step("[Action] Enable [Color Enhancement] tab in [Fix Enhance]"):
            fix_enhance_page.enhance.enable_color_enhancement()
        
        with step("[Action] Adjust [Fix Enhance][Color Enhancement][Degree] slider to (20) > Screenshot (L.base.Area.preview.only_mtk_view)"):
            fix_enhance_page.enhance.color_enhancement.degree.adjust_slider(20)
            preview_20 = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
        
        with step("[Verify] Get Value for [Fix Enhance][Color Enhancement][Degree] > Check result is ('20')"):
            value_20 = fix_enhance_page.enhance.color_enhancement.degree.get_value()
            if value_20 != '20':
                assert False, f"Color Enhancement Degree value does not match expected ('20'), got ({value_20})"
        
        with step("[Action] Set [Fix Enhance][Color Enhancement][Degree] to (99)"):
            fix_enhance_page.enhance.color_enhancement.degree.set_value(99)
        
        with step("[Verify] Get Value for [Fix Enhance][Color Enhancement][Degree] > Check result is ('99')"):
            value_99 = fix_enhance_page.enhance.color_enhancement.degree.get_value()
            if value_99 != '99':
                assert False, f"Color Enhancement Degree value does not match expected ('99'), got ({value_99})"
        
        with step("[Verify] Check preview is updated after set value with similarity<0.9999"):
            preview_99 = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            if main_page.compare(preview_20, preview_99, similarity=0.9999):
                assert False, "Preview did not update after changing Color Enhancement Degree! Similarity should < 0.9999"
        
        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.keyframe
    @pytest.mark.fix_enhance
    @pytest.mark.color_enhancement
    @pytest.mark.name('[test_tip_areas_func_33_81] Set [Fix Enhance][Color Enhancement][Degree] Value > Check Result')
    @exception_screenshot
    def test_tip_areas_func_33_81(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_80') is run and passed
        1. Click [KeyFrame] Button in [Fix Enhance]
        2. Get [KeyFrame Page][Fix Enhance][Color Enhancement][Degree] value > Check result is ('99')
        3. Click [Stepper Up] button in [KeyFrame Page][Fix Enhance][Color Enhancement][Degree] for 3 times
        4. Get [KeyFrame Page][Fix Enhance][Color Enhancement][Degree] value > Check result is ('100')
        5. Click [Stepper Down] button in [KeyFrame Page][Fix Enhance][Color Enhancement][Degree] for 5 times
        6. Get [KeyFrame Page][Fix Enhance][Color Enhancement][Degree] value > Check result is ('95')
        """
        self.ensure_dependency("test_tip_areas_func_33_80")
        
        # [L352] 4.4 Keyframe > Fix / Enhance > Adjust [Color Enhancement]
        # with uuid("e786aad5-ba6a-4ad7-87b0-e8fe9cbadaca") as case:

        with step("[Action] Click [KeyFrame] Button in [Fix Enhance]"):
            fix_enhance_page.click_keyframe()
        
        with step("[Verify] Get [KeyFrame Page][Fix Enhance][Color Enhancement][Degree] value > Check result is ('99')"):
            degree_value_99 = keyframe_room_page.fix_enhance.color_enhancement.degree.get_value()
            if degree_value_99 != '99':
                assert False, f"Color Enhancement Degree value is not ('99'). Actual value: {degree_value_99}"
        
        with step("[Action] Click [Stepper Up] button in [KeyFrame Page][Fix Enhance][Color Enhancement][Degree] for 3 times"):
            keyframe_room_page.fix_enhance.color_enhancement.degree.click_stepper_up(3)
        
        with step("[Verify] Get [KeyFrame Page][Fix Enhance][Color Enhancement][Degree] value > Check result is ('100')"):
            degree_value_100 = keyframe_room_page.fix_enhance.color_enhancement.degree.get_value(index_node=-1)
            if degree_value_100 != '100':
                assert False, f"Color Enhancement Degree value is not ('100'). Actual value: {degree_value_100}"
        
        with step("[Action] Click [Stepper Down] button in [KeyFrame Page][Fix Enhance][Color Enhancement][Degree] for 5 times"):
            keyframe_room_page.fix_enhance.color_enhancement.degree.click_stepper_down(5)
        
        with step("[Verify] Get [KeyFrame Page][Fix Enhance][Color Enhancement][Degree] value > Check result is ('95')"):
            degree_value_95 = keyframe_room_page.fix_enhance.color_enhancement.degree.get_value(index_node=-1)
            if degree_value_95 != '95':
                assert False, f"Color Enhancement Degree value is not ('95'). Actual value: {degree_value_95}"
        
        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.speech_enhancement
    @pytest.mark.ai_module
    @pytest.mark.name('[test_tip_areas_func_33_82] Apply [Speech Enhancement] > Verify Result')
    @exception_screenshot
    def test_tip_areas_func_33_82(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_81') is run and passed
        1. Click [Timeline Track Visible] Button for track (5)
        2. Click [Fix Enhance] Button in [Tip Areas]
        3. Enable [Speech Enhancement] tab in [Fix Enhance]
        4. Click [Speech Enhancement] button in [KeyFrame Page]
        5. Wait for downloading ai module
        6. Set [Fix Enhance][Speech Enhancement][Compensation] to (68)
        7. Get value for [Fix Enhance][Speech Enhancement][Compensation] > Check result is ('68')
        8. Apply Effect in [Speech Enhancement] Window
        9. Check [Speech Enhancement] Window (L.fix_enhance.enhance.speech_enhancement.main_window) is closed
        """
        self.ensure_dependency("test_tip_areas_func_33_81")

        # [L341] 4.3 Fix / Enhance > Enhance > Speech Enhancement
        # with uuid("346d93d8-ee16-4c75-b6cc-1828a6a632b5") as case:

        with step("[Action] Click [Timeline Track Visible] Button for track (5)"):
            timeline_operation_page.click_timeline_track_visible_button(5)

        with step("[Action] Click [Fix Enhance] Button in [Tip Areas]"):
            tips_area_page.click_fix_enhance()

        with step("[Action] Enable [Speech Enhancement] tab in [Fix Enhance]"):
            fix_enhance_page.enhance.switch_to_speech_enhancement()

        with step("[Action] Click [Speech Enhancement] button in [KeyFrame Page]"):
            fix_enhance_page.enhance.click_speech_enhancement()

        with step("[Action] Wait for downloading AI module"):
            self.check_downloading_AI_module()

        with step("[Action] Set [Fix Enhance][Speech Enhancement][Compensation] to (68)"):
            fix_enhance_page.enhance.speech_enhancement.compensation.set_value(68)
            time.sleep(DELAY_TIME)

        with step("[Verify] Get value for [Fix Enhance][Speech Enhancement][Compensation] > Check result is ('68')"):
            compensation_value =  fix_enhance_page.enhance.speech_enhancement.compensation.get_value()
            if compensation_value != '68%':
                assert False, f"Speech Enhancement Compensation value is not ('68%'). Actual value: {compensation_value}"

        with step("[Action] Apply Effect in [Speech Enhancement] Window"):
            fix_enhance_page.enhance.speech_enhancement.click_apply()

        with step("[Verify] Check [Speech Enhancement] Window is closed"):
            speech_enhancement_window = main_page.exist(L.fix_enhance.enhance.speech_enhancement.main_window)
            if speech_enhancement_window:
                assert False, "Speech Enhancement window is not closed!"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.fix_enhance
    @pytest.mark.video_stabilizer
    @pytest.mark.correction_level
    @pytest.mark.save_project
    @pytest.mark.pack_project
    @pytest.mark.name('[test_tip_areas_func_33_83] Set [Video Stabilizer][Correction Level] > Check result > Save Project > Pack Project')
    @exception_screenshot
    def test_tip_areas_func_33_83(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_82') is run and passed
        1. Select timeline media (track_index=4, clip_index=0)
        2. Enable [Video Stabilizer]
        3. Get [Fix Enhance][Video Stabilizer][Correction Level] value > Check result is ('50')
        4. Click [Plus] Button in [Fix Enhance][Video Stabilizer][Correction Level] for 4 times
        5. Get [Fix Enhance][Video Stabilizer][Correction Level] value > Check result is ('54')
        6. Save the project as ('test_tip_areas_func_33_83')
        7. Pack the project as ('test_tip_areas_func_33_83')
        """
        self.ensure_dependency("test_tip_areas_func_33_82")

        # [L331] 4.3 Fix / Enhance > Fix > Video Stabilizer
        # with uuid("3577e439-7c24-4690-8386-8c4b3f34edc1") as case:

        with step("[Action] Select timeline media (track_index=4, clip_index=0)"):
            timeline_operation_page.select_timeline_media(4, 0)

        with step("[Action] Enable [Video Stabilizer]"):
            fix_enhance_page.fix.enable_video_stabilizer(value=True)

        with step("[Verify] Get [Fix Enhance][Video Stabilizer][Correction Level] value > Check result is ('50')"):
            correction_level = fix_enhance_page.fix.video_stabilizer.correction_level.get_value()
            if correction_level != '50':
                assert False, f"Correction Level value is not ('50'). Actual value: {correction_level}"

        with step("[Action] Click [Plus] Button in [Fix Enhance][Video Stabilizer][Correction Level] for 4 times"):
            fix_enhance_page.fix.video_stabilizer.correction_level.click_plus(4)

        with step("[Verify] Get [Fix Enhance][Video Stabilizer][Correction Level] value > Check result is ('54')"):
            correction_level = fix_enhance_page.fix.video_stabilizer.correction_level.get_value()
            if correction_level != '54':
                assert False, f"Correction Level value is not ('54'). Actual value: {correction_level}"

        with step("[Action] Save the project as 'test_tip_areas_func_33_83'"):
            main_page.top_menu_bar_file_save_project_as()
            main_page.handle_save_file_dialog(name="test_tip_areas_func_33_83", folder_path=Test_Material_Folder + 'BFT_21_Stage1/')

        with step("[Action] Pack the project as 'test_tip_areas_func_33_83'"):
            main_page.top_menu_bar_file_pack_project_materials(project_path=Test_Material_Folder + 'BFT_21_Stage1/test_tip_areas_func_33_83/')
            time.sleep(DELAY_TIME * 15)

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.remove
    @pytest.mark.view_entire_video
    @pytest.mark.mark_in_out
    @pytest.mark.name('[test_tip_areas_func_33_84] Set [Mark In/ Mark Out] range > Click [Remove] button > Check result')
    @exception_screenshot
    def test_tip_areas_func_33_84(self):
        """
        1. Start APP
        2. Open packed project ('Packed_Project/test_tip_areas_func_33_84_from_test_tip_areas_func_33_83.pdk', 'Extracted_Folder/test_tip_areas_func_33_84')
        3. Screenshot (L.base.Area.preview.only_mtk_view)
        4. Click the [View Entire Video] button
        5. Set [Mark In/ Mark Out] range to (30, 240)
        6. Click [Remove] button on [Tips Area]
        7. Get timecode from slidebar > Check result is ('00:00:01:00')
        8. Set timecode to ('00_00_05_02') at main page
        9. Check preview is updated with similarity<0.85
        """
        with step("[Action] Start APP"):
            main_page.start_app()

        with step("[Action] Open packed project"):
            self.open_packed_project('Packed_Project/test_tip_areas_func_33_84_from_test_tip_areas_func_33_83.pdk', 
                                    'Extracted_Folder/test_tip_areas_func_33_84')

        with step("[Action] Screenshot (L.base.Area.preview.only_mtk_view)"):
            initial_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        with step("[Action] Click the [View Entire Video] button"):
            timeline_operation_page.click_view_entire_video_btn()

        # [L367] 4.5 Timeline operation > Range selection > Remove
        # with uuid("e5c5187a-9740-43ad-9fb5-3c3594a4e72a") as case:

        with step("[Action] Set [Mark In/ Mark Out] range to (30, 240)"):
            timeline_operation_page.set_range_markin_markout(30, 240)

        with step("[Action] Click [Remove] button on [Tips Area]"):
            tips_area_page.click_TipsArea_btn_Remove()

        with step("[Verify] Get timecode from slidebar > Check result is ('00:00:01:00')"):
            timecode = playback_window_page.get_timecode_slidebar()
            if timecode != '00:00:01:00':
                assert False, f"Timecode is not as expected! Expected '00:00:01:00', got {timecode}"

        with step("[Action] Set timecode to ('00_00_05_02') at main page"):
           main_page.set_timeline_timecode('00_00_05_02')

        with step("[Verify] Check preview is updated with similarity < 0.85"):
            updated_preview = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            if main_page.compare(initial_preview, updated_preview, similarity=0.85):
                assert False, "Preview did not update as expected! Similarity should < 0.85"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.mark_in_out
    @pytest.mark.cut
    @pytest.mark.duration
    @pytest.mark.name('[test_tip_areas_func_33_85] Set [Mark In/ Mark Out] range > Click [Cut] button > Check result via [Duration]')
    @exception_screenshot
    def test_tip_areas_func_33_85(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_84') is run and passed
        1. Set [Mark In/ Mark Out] range for (240, 330)
        2. Click [Cut] button on [Tips Area]
        3. Select Timeline media (track_index=4, clip_index=1)
        4. Click [Duration] button on [Tip Areas]
        5. Check the duration is ('00:00:04:00') by main_page.exist(L.tips_area.window.duration_timecode).AXValue
        6. Press [Enter] key to close [Duration Setting] window
        """
        self.ensure_dependency("test_tip_areas_func_33_84")

        # [L366] 4.5 Timeline operation > Range selection > Cut
        # with uuid("0113318f-180d-4b34-80c0-faf6f765a86f") as case:

        with step("[Action] Set [Mark In/ Mark Out] range for (240, 330)"):
            timeline_operation_page.set_range_markin_markout(240, 330)

        with step("[Action] Click [Cut] button on [Tips Area]"):
            tips_area_page.click_TipsArea_btn_Cut()

        with step("[Action] Select Timeline media (track_index=4, clip_index=1)"):
            timeline_operation_page.select_timeline_media(4, 1)

        with step("[Action] Click [Duration] button on [Tip Areas]"):
            tips_area_page.click_TipsArea_btn_Duration()

        with step("[Verify] Check the duration is ('00:00:04:00')"):
            duration_value = main_page.exist(L.tips_area.window.duration_timecode)
            if duration_value.AXValue != '00:00:04:00':
                assert False, f"Duration is not correct! Expected: '00:00:04:00', Got: {duration_value.AXValue}"

        with step("[Action] Press [Enter] key to close [Duration Setting] window"):
            main_page.press_enter_key()

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.timeline
    @pytest.mark.timecode
    @pytest.mark.trim
    @pytest.mark.name('[test_tip_areas_func_33_86] Select media > Add to Timeline > Trim to Fit > Check result')
    @exception_screenshot
    def test_tip_areas_func_33_86(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_85') is run and passed
        1. Select timeline track (1)
        2. Set timecode to ('00_00_01_00') at main page
        3. Select media ('Skateboard 03.mp4') by library icon view > Insert to timeline by self.temp_for_os_14_insert_function(1)
        4. Click [Undo] button > Screenshot (L.base.Area.preview.only_mtk_view)
        5. Drag media to timeline playhead position with offset ('Skateboard 03.mp4', track_no=1)
        6. Press [Down] Key > Press [Enter] Key to deal with Pop up Floating Menu then click 'Trim to Fit'
        7. Check preview is updated with similarity<0.95
        """
        self.ensure_dependency("test_tip_areas_func_33_85")

        # [L373] 4.5 Timeline operation > Ripple Editing > Trim to Fit (video only)
        # with uuid("d3561515-1f17-4fd9-8a74-4f8fab04e604") as case:
        with step("[Action] Select timeline track (1)"):
            main_page.timeline_select_track(1)

        with step("[Action] Set timecode to ('00_00_01_00') at main page"):
            main_page.set_timeline_timecode('00_00_01_00')

        with step("[Action] Select media ('Skateboard 03.mp4') by library icon view and insert to timeline"):
            main_page.select_library_icon_view_media('Skateboard 03.mp4')
            self.temp_for_os_14_insert_function(1)

        with step("[Action] Click [Undo] button and screenshot"):
            main_page.click_undo()
            screenshot_after_undo = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)

        with step("[Action] Drag media to timeline playhead position with offset ('Skateboard 03.mp4', track_no=1)"):
            main_page.drag_media_to_timeline_playhead_position_offset('Skateboard 03.mp4', track_no=1)

        with step("[Action] Press [Down] key > Press [Enter] key and click 'Trim to Fit'"):
            main_page.keyboard.down()
            main_page.press_enter_key()

        with step("[Verify] Check preview is updated with similarity<0.95"):
            preview_after_trim = main_page.snapshot(locator=L.base.Area.preview.only_mtk_view)
            if main_page.compare(screenshot_after_undo, preview_after_trim, similarity=0.95):
                assert False, "Preview did not update after trimming! Similarity should < 0.95"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.video_speed
    @pytest.mark.speed_multiplier
    @pytest.mark.name('[test_tip_areas_func_33_87] Insert Media > Video Speed > Check [Speed Multiplier] value')
    @exception_screenshot
    def test_tip_areas_func_33_87(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_86') is run and passed
        1. Click [Undo] button
        2. Select media ('Skateboard 03.mp4') by library icon view > Insert to timeline by self.temp_for_os_14_insert_function(1)
        3. Select [Video Speed] button in [Fix Enhance]
        4. Get [Speed Multiplier] value for [Entire Clip] > Check result is ('16.667')
        5. Click [OK] button to leave [Video Speed] window
        """
        self.ensure_dependency("test_tip_areas_func_33_86")

        # [L374] 4.5 Timeline operation > Ripple Editing > Speed up to Fit (video only)
        # with uuid("f851fa10-4f1b-4d47-9498-1913b1312273") as case:

        with step("[Action] Click [Undo] button"):
            main_page.click_undo()

        with step("[Action] Select media ('Skateboard 03.mp4') by library icon view and insert to timeline"):
            main_page.select_library_icon_view_media('Skateboard 03.mp4')
            self.temp_for_os_14_insert_function(2)

        with step("[Action] Select [Video Speed] button in [Fix Enhance]"):
            tips_area_page.tools.select_VideoSpeed()

        with step("[Verify] Get [Speed Multiplier] value for [Entire Clip] and check result is ('16.667')"):
            speed_multiplier = video_speed_page.Edit_VideoSpeedDesigner_EntireClip_SpeedMultiplier_GetValue()
            if speed_multiplier != '16.667':
                assert False, f"Speed multiplier is incorrect! Expected: '16.667', Got: {speed_multiplier}"

        with step("[Action] Click [OK] button to leave [Video Speed] window"):
            video_speed_page.Edit_VideoSpeedDesigner_ClickOK()

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.duration
    @pytest.mark.name('[test_tip_areas_func_33_88] Insert Media > Check [Duration] value')
    @exception_screenshot
    def test_tip_areas_func_33_88(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_87') is run and passed
        1. Select timeline media (track_index=0, clip_index=1)
        2. Select media ('Landscape 02.jpg') by library icon view > Insert to timeline by self.temp_for_os_14_insert_function(0)
        3. Click [Duration] button on [Tips Area]
        4. Get [Duration] value for [Tips Area] > Check result is ('00:00:05:00')
        5. Press [Enter] key to leave [Duration Setting] window
        """
        self.ensure_dependency("test_tip_areas_func_33_87")

        # [L372] 4.5 Timeline operation > Ripple Editing > Overwrite
        # with uuid("09c94b67-75a8-40fd-8603-9aa44d88b02c") as case:

        with step("[Action] Select timeline media (track_index=0, clip_index=1)"):
            main_page.select_timeline_media(track_index=0, clip_index=1)

        with step("[Action] Select media ('Landscape 02.jpg') by library icon view and insert to timeline"):
            main_page.select_library_icon_view_media('Landscape 02.jpg')
            self.temp_for_os_14_insert_function(0)

        with step("[Action] Click [Duration] button on [Tips Area]"):
            tips_area_page.click_TipsArea_btn_Duration()

        with step("[Verify] Get [Duration] value for [Tips Area] and check result is ('00:00:05:00')"):
            duration_value = main_page.exist(L.tips_area.window.duration_timecode).AXValue
            if duration_value != '00:00:05:00':
                assert False, f"Duration is incorrect! Expected: '00:00:05:00', Got: {duration_value}"

        with step("[Action] Press [Enter] key to leave [Duration Setting] window"):
            main_page.press_enter_key()

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.render_preview
    @pytest.mark.mark_in_out
    @pytest.mark.name('[test_tip_areas_func_33_89] Set [Mark In/ Mark Out] range > Click [Render Preview] button > Check [Render Preivew] Process ends')
    @exception_screenshot
    def test_tip_areas_func_33_89(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_88') is run and passed
        1. Set [Mark In/ Mark Out] range for (30, 92)
        2. Click the [Render Preview] button in [Timeline Operation]
        3. Check progress process is completed by checking the progress bar (L.timeline_operation.render_preview_progress_bar) disappear in 160 seconds
        """
        self.ensure_dependency('test_tip_areas_func_33_88')

        # [L368] 4.5 Timeline operation > Range Selection > Render Preview
        # with uuid("919cce85-cd3e-4147-9c40-ffe9dbf6a978") as case:

        with step("[Action] Set [Mark In/ Mark Out] range for (30, 92)"):
            timeline_operation_page.set_range_markin_markout(30, 92)

        with step("[Action] Click the [Render Preview] button in [Timeline Operation]"):
            if not timeline_operation_page.edit_timeline_render_preview():
                assert False, 'Unable to click [Render Preview] button!'

        with step("[Verify] Check if progress process is completed within 160 seconds"):
            progress_completed = False
            for _ in range(160):
                if main_page.exist(L.timeline_operation.render_preview_progress_bar):
                    time.sleep(DELAY_TIME)
                else:
                    progress_completed = True
            if not progress_completed:
                assert False, "Progress bar did not disappear within 160 seconds!"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.mark_in_out
    @pytest.mark.lock_range
    @pytest.mark.name('[test_tip_areas_func_33_90] Set [Mark In/ Mark Out] > Set [Lock Range] > Check Result')
    @exception_screenshot
    def test_tip_areas_func_33_90(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_89') is run and passed
        1. Set [Mark In/ Mark Out] range for (100, 150)
        2. Click [Lock Range] button on [Tip Areas]
        3. Set timecode to ('00_00_07_06') at main page
        4. Check if [Lock Range] button (L.tips_area.button.btn_Lock_Range) is still shown
        5. Click [Lock Range] button on [Tip Areas] again
        """
        self.ensure_dependency('test_tip_areas_func_33_89')

        # [L371] 4.5 Timeline operation > Range Selection > Lock Range
        # with uuid("d9d0062d-bcf4-46f9-8c22-1d48642a5588") as case:

        with step("[Action] Set [Mark In/ Mark Out] range for (100, 150)"):
            timeline_operation_page.set_range_markin_markout(100, 150)

        with step("[Action] Click [Lock Range] button on [Tip Areas]"):
            tips_area_page.click_TipsArea_btn_Lock_Range()

        with step("[Action] Set timecode to ('00_00_07_06') at main page"):
            main_page.set_timeline_timecode('00_00_07_06')

        with step("[Verify] Check if [Lock Range] button is still shown"):
            if not main_page.exist(L.tips_area.button.btn_Lock_Range):
                assert False, "Lock Range button is not shown after setting timecode!"

        with step("[Action] Click [Lock Range] button on [Tip Areas] again"):
            tips_area_page.click_TipsArea_btn_Lock_Range()

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.launch
    @pytest.mark.open_project
    @pytest.mark.name('[test_tip_areas_func_33_91] Open Project > Check Project Name on Caption Bar')
    @exception_screenshot
    def test_tip_areas_func_33_91(self):
        """
        1. Start APP
        2. Open packed project ('Packed_Project/test_tip_areas_func_33_91_from_test_tip_areas_func_33_82.pdk', 'Extracted_Folder/test_tip_areas_func_33_91')
        3. Check if [Main Caption] bar (L.base.main_caption) is shown after open project
        4. Check if [Main Caption] bar value is ('test_tip_areas_func_33_91')
        """
        with step("[Action] Start APP"):
            main_page.start_app()

        # [L396] 5. Produce > H.265 > Open pack project
        # with uuid("8281b84c-4b96-4801-8d13-6160084f73c8") as case:
        
        with step("[Action] Open packed project ('Packed_Project/test_tip_areas_func_33_91_from_test_tip_areas_func_33_82.pdk', 'Extracted_Folder/test_tip_areas_func_33_91')"):
            self.open_packed_project('Packed_Project/test_tip_areas_func_33_91_from_test_tip_areas_func_33_82.pdk', 'Extracted_Folder/test_tip_areas_func_33_91')

        with step("[Verify] Check if [Main Caption] bar (L.base.main_caption) is shown after open project"):
            if not main_page.exist(L.base.main_caption):
                assert False, "Main Caption bar is not shown after opening project!"

        with step("[Verify] Check if [Main Caption] bar value is ('test_tip_areas_func_33_91')"):
            main_caption_value = main_page.exist(L.base.main_caption).AXValue
            if main_caption_value != 'test_tip_areas_func_33_91':
                assert False, f"Main Caption value is incorrect! Expected: 'test_tip_areas_func_33_91', Got: '{main_caption_value}'"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.viwe_entire_video
    @pytest.mark.mark_in_out
    @pytest.mark.produce_range
    @pytest.mark.name('[test_tip_areas_func_33_92] View Entire Video > Set [Mark In/ Mark Out] range > Click [Produce Range] button > Check timecode')
    @exception_screenshot
    def test_tip_areas_func_33_92(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_91') is run and passed
        1. Click the [View Entire Video] button
        2. Set [Mark In/ Mark Out] range for (0, 45)
        3. Click [Produce Range] button on [Tip Areas]
        4. Set timecode to ('00_00_10_30') at produce page
        5. Get timecode from produce page > Check result is ('00:00:01:15')
        """
        dependency_test = "test_tip_areas_func_33_91"
        self.ensure_dependency(dependency_test)

        # [L370] 4.5 Timeline operation > Range selection > Produce Range
        # with uuid("806ada7f-9a80-4ce0-8d42-25117181f691") as case:

        with step("[Action] Click the [View Entire Video] button"):
            timeline_operation_page.click_view_entire_video_btn()

        with step("[Action] Set [Mark In/ Mark Out] range for (0, 45)"):
            timeline_operation_page.set_range_markin_markout(0, 45)

        with step("[Action] Click [Produce Range] button on [Tip Areas]"):
            tips_area_page.click_TipsArea_btn_Produce_Range()

        with step("[Action] Set timecode to ('00_00_10_30') at produce page"):
            produce_page.local.set_preview_timecode('00_00_10_30')

        with step("[Verify] Get timecode from produce page and check result is ('00:00:01:15')"):
            timecode = produce_page.get_preview_timecode()
            if timecode != '00:00:01:15':
                assert False, f"Timecode is incorrect! Expected: '00:00:01:15', Got: '{timecode}'"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.tip_areas
    @pytest.mark.produce_page
    @pytest.mark.name('[test_tip_areas_func_33_93] Set Produce [File Format]/ [File Extension] > Check [Produced Filename]')
    @exception_screenshot
    def test_tip_areas_func_33_93(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_92') is run and passed
        1. Select file format ('hevc')
        2. Select file extension ('mov')
        3. Get [Produced Filename] and save as self.temp_file_name
        4. Check result is ('test_tip_areas_func_33_91.mov')
        """
        dependency_test = "test_tip_areas_func_33_92"
        self.ensure_dependency(dependency_test)

        # [L397] 5 Produce > H.265 > Select Format > MOV
        # with uuid("5dbadbaa-3de2-4d89-9836-8faba7f51266") as case:

        with step("[Action] Select file format ('hevc')"):
            produce_page.local.select_file_format('hevc')

        with step("[Action] Select file extension ('mov')"):
            produce_page.local.select_file_extension('mov')

        with step("[Action] Get [Produced Filename] and save as self.temp_file_name"):
            self.temp_file_name = produce_page.get_produced_filename()

        with step("[Verify] Check result is ('test_tip_areas_func_33_91.mov')"):
            if self.temp_file_name != 'test_tip_areas_func_33_91.mov':
                assert False, f"Produced filename is incorrect! Expected: 'test_tip_areas_func_33_91.mov', Got: '{self.temp_file_name}'"

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.produce_page
    @pytest.mark.profile_name
    @pytest.mark.name('[test_tip_areas_func_33_94] Set [Profile Name] by index (3) > Check [Profile FName] value')
    @exception_screenshot
    def test_tip_areas_func_33_94(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_93') is run and passed
        1. Select [Profile Name] by index (3)
        2. Get [Profile FName] value > Check result is ('MPEG-4 1280 x 720/24p (7 Mbps)')
        """
        dependency_test = "test_tip_areas_func_33_93"
        self.ensure_dependency(dependency_test)

        # [L398] 5 Produce > H.265 > Select Format > 1280x720/24p
        # with uuid("dc651ed7-a7df-475a-ad4f-3eeedcd5b153") as case:

        with step("[Action] Select [Profile Name] by index (3)"):
            produce_page.local.select_profile_name(3)

        with step("[Action] Get [Profile FName] value"):
            check_profile = produce_page.local.get_profile_name()

        with step("[Verify] Check result is ('MPEG-4 1280 x 720/24p (7 Mbps)')"):
            if check_profile != 'MPEG-4 1280 x 720/24p (7 Mbps)':
                assert False, f"Profile Name is incorrect! Expected: 'MPEG-4 1280 x 720/24p (7 Mbps)', Got: '{check_profile}'"

        assert True


    @pytest.mark.tip_areas_func
    @pytest.mark.produce_page
    @pytest.mark.fast_video_rendering
    @pytest.mark.name('[test_tip_areas_func_33_95] Set [Fast Video Rendering] to (Hardware Encode) > Check result is True')
    @exception_screenshot
    def test_tip_areas_func_33_95(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_94') is run and passed
        1. Set [Fast Video Rendering] to (Hardware Encode) > Check result is True
        """
        dependency_test = "test_tip_areas_func_33_94"
        self.ensure_dependency(dependency_test)

        # [L399] 5 Produce > H.265 > Enable HW
        # with uuid("fcfe5a6c-52cf-4518-8f8d-d1c323f36482") as case:

        with step("[Action] Set [Fast Video Rendering] to (Hardware Encode)"):
            fast_rendering_status = produce_page.local.set_fast_video_rendering_hardware_encode()

        with step("[Verify] Check result is True"):
            if not fast_rendering_status:
                assert False, "Fast Video Rendering is not enabled for Hardware Encode!"

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.produce_page
    @pytest.mark.surround_sound
    @pytest.mark.aac_5_1
    @pytest.mark.name('[test_tip_areas_func_33_96] Set [Surround Sound] to (AAC 5.1) > Check [AAC 5.1] is enabled')
    @exception_screenshot
    def test_tip_areas_func_33_96(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_95') is run and passed
        1. Enable [Surround Sound] > Set [Surround Sound] to (AAC 5.1)
        2. Check [AAC 5.1] is enabled by main_page.exist(L.produce.local.rdb_surround_sound_ac51).AXValue = 1
        3. Click [Stop] button on [Produce] page
        """

        dependency_test = "test_tip_areas_func_33_95"
        self.ensure_dependency(dependency_test)

        # [L400] 5 Produce > H.265 > Set [Surround Sound] > AAC 5.1
        # with uuid("6002d3b3-0264-4e1e-89a1-ecec9563c14c") as case:

        with step("[Action] Enable [Surround Sound] > Set [Surround Sound] to (AAC 5.1)"):
            produce_page.local.set_surround_sound()
            produce_page.local.set_surround_sound_aac51()

        with step("[Verify] Check [AAC 5.1] is enabled by checking AXValue"):
            surround_sound_status = main_page.exist(L.produce.local.rdb_surround_sound_ac51).AXValue
            if surround_sound_status != 1:
                assert False, "[AAC 5.1] is not enabled. AXValue should be 1"

        with step("[Action] Click [Stop] button on [Produce] page"):
             produce_page.click_preview_operation('stop')

        assert True

    @pytest.mark.tip_areas_func
    @pytest.mark.produce_page
    @pytest.mark.produce
    @pytest.mark.pip_designer
    @pytest.mark.name('[test_tip_areas_func_33_97] Produce > Insert Produced Media > Pip Designer > Check Preview')
    @exception_screenshot
    def test_tip_areas_func_33_97(self):
        """
        0. Ensure the dependency test ('test_tip_areas_func_33_96') is run and passed
        1. Click [Produce] button on [Produce] page
        2. Check produce process is completed in 150 secs
        3. Click [Back to Edit] button
        4. Open [New Workspace] via hotkey > Handle [Do you want to save changes] dialog with option ('no') 
        5. Select media (self.temp_file_name) by library icon view > Check result is True
        6. Insert media to selected track
        7. Select Timeline media (track_index=0, clip_index=0) > Double Click
        8. Switch to ('Express') mode in [Pip Designer]
        9. Check preview (locator=L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L401.png') matches GT (Ground_Truth_Folder + 'L401.png', check_preview) with similarity=0.95
        10. Click [OK] button to leave [Pip Designer]
        11. Select media (self.temp_file_name) by library icon view > Move clip in library to trash can
        """
        dependency_test = "test_tip_areas_func_33_96"
        self.ensure_dependency(dependency_test)

        # New issue: VDE235830-0018
        # [L401] 5 Produce > H.265 > [Start] > Produce
        # with uuid("4e526fa8-9881-4304-ab8e-d90fd0825309") as case:

        with step("[Action] Click [Produce] button on [Produce] page"):
            main_page.click_produce()

        with step("[Verify] Check produce process is completed in 150 secs"):
            produce_page.check_produce_complete(wait_time=150)
            # # Wait for produce complete
            # for x in range(150):
            #     check_result = produce_page.check_produce_complete()
            #     if check_result is True:
            #         break
            #     else:
            #         time.sleep(DELAY_TIME)

        with step("[Action] Click [Back to Edit] button"):
            produce_page.click_back_to_edit()

        with step("[Action] Open [New Workspace] via hotkey > Handle [Do you want to save changes] dialog with option ('no')"):
            main_page.tap_NewWorkspace_hotkey()
            main_page.handle_no_save_project_dialog(option='no')

        with step("[Action] Select media (self.temp_file_name) by library icon view"):
            if not main_page.select_library_icon_view_media(self.temp_file_name):
                assert False, f"Media file '{self.temp_file_name}' does not exist!"

        with step("[Action] Insert media to selected track"):
            main_page.tips_area_insert_media_to_selected_track()

        with step("[Action] Select Timeline media (track_index=0, clip_index=0) > Double Click"):
            timeline_operation_page.select_timeline_media(0, 0)
            main_page.double_click()

        with step("[Action] Switch to ('Express') mode in [Pip Designer]"):
            pip_designer_page.switch_mode('Express')

        with step("[Verify] Check preview matches GT (L401.png) with similarity=0.95"):
            preview = main_page.snapshot(locator=L.pip_designer.preview, file_name=Auto_Ground_Truth_Folder + 'L401.png')
            check_preview = main_page.compare(Ground_Truth_Folder + 'L401.png', preview, similarity=0.95)
            if not check_preview:
                assert False, "Preview does not match GT (L401.png)! Similarity should > 0.95"

        with step("[Action] Click [OK] button to leave [Pip Designer]"):
            pip_designer_page.click_ok()

        with step("[Action] Select media (self.temp_file_name) by library icon view > Move clip in library to trash can"):
            main_page.select_library_icon_view_media(self.temp_file_name)
            media_room_page.library_clip_context_menu_move_to_trash_can()

        assert True

    # def test_na_cases(self):
    #     with uuid("""758e68c1-a62d-4ffb-87f0-13b98fa82f7e
    #                 f6068849-031c-48a0-912f-ae72071a46ad
    #                 da0b07b8-ab61-4351-bd85-b43caef54696
    #                 67391393-7c99-42e4-ab81-99a1a47c4f04
    #                 6677c5ba-305e-4742-9988-099a48d10270
    #                 ff239744-74cd-4b8e-91a3-9844d624a964
    #                 af0c9188-3a17-4cba-81c7-a229353698cb
    #                 37eea6f6-4e58-42fb-91b3-f7c3f3511d92
    #                 aa965a18-7823-42e6-a6cc-7e1696500b99
    #                 4372f92a-5da4-42ab-b8b2-db555fbc4fee
    #                 8d9287b4-765f-43ac-b628-4a8802a14e91
    #                 f5aee31f-25fe-4b66-84ce-a4105113ee87
    #                 c07a4bfc-ce9d-401c-be8a-18a2eab602ca
    #                 6510cb1c-17cf-47b4-8ad0-de8c15e71d48
    #                 01bae86c-ef1b-4d49-aa1d-ecfa8ae7e70d
    #                 acf4e893-b714-408e-9658-566fe7060f15
    #                 718f50b3-517d-48c2-ad6b-d067a270da1f
    #                 798c0668-9be6-40fc-948b-5a73726e3c34
    #                 97affa2a-c953-49a3-925c-417b95db719f
    #                 ee316164-79e3-40da-91a8-78ef31c1b08b
    #                 deeae229-a221-4738-9de1-61b0fd983374
    #                 923f1789-4139-49aa-a2bb-509f841b4dad
    #                 9f35ba03-1cef-4b0e-96cb-191310b2cecd
    #                 7b066cbc-1607-4469-b677-7b8cab1b3a55
    #                 fdceddae-485a-447c-a89c-fef3e06326bf
    #                 1f0fbbb2-a77d-459b-bb90-4bcbff2c9b86
    #                 7cae4f2a-fa01-4d3b-8c06-71f2158091c9
    #                 8145aec8-8fc1-4a62-a17b-ae8cfaad39cf
    #                 662d72bf-19e7-4200-8bec-14a7c97b34b4
    #                 22b24c83-bff2-48af-9fe5-afe866158399
    #                 55aa8d43-0d80-465f-bad7-c14a7104f9a6
    #                 22fdea74-6a4a-475d-b8aa-953ec9987fab
    #                 01f08c96-e7ec-4ca7-b86f-4c6c7205287e
    #                 77f85454-ae23-4306-954a-1b6c33c960ee
    #                 838697fb-5e4e-4d77-bd72-6780e588b3c2
    #                 d666e85a-ea54-4c2a-82f2-d06e07b2cd8a
    #                 302a858b-f48c-4094-9ae0-bd37e6d542e1
    #                 461a78c6-9db8-43fe-94c8-6a1f3ab16182
    #                 fe0d0793-f9d3-4dd5-850f-26914dcb14c1
    #                 d9079e1c-b8a5-4d27-94e6-d9dd71ccb90c
    #                 d0f8f9c2-3ea7-4e1b-b88d-1fa88c5bb2fd
    #                 85b38734-3f9a-4bf0-ae0a-a2701628dccf
    #                 0811b795-5fa4-42bf-8a57-22f389e9f6f7
    #                 98ea0e05-c63e-4be7-8c32-7055b526a850
    #                 b75b3f6d-1f3c-4431-a1b4-06999c7d3598
    #                 999ef8a7-3db0-414e-b2b6-602b1670ad37
    #                 7ac86abb-4b66-498b-9857-e09eb6d176f2
    #                 8d69ec14-dbed-4ed9-877a-9c58de1a9bc5
    #                 ad8f3229-129f-45c5-a9c4-e8c490be438c
    #                 32b3fc79-6dfb-4ff5-9348-15e4b6d6dce1
    #                 96ee5e10-47e1-4c84-b13c-2e6ddc5fdc48
    #                 dd55a4de-e286-462c-bf18-990daed490d9
    #                 a93a1fe6-78f0-48a2-958e-251f3d95bf1e
    #                 9a90ab51-c059-4084-a1f1-b3c1f5ae5553
    #                 bb2184bb-47cf-45d5-931f-cd20daccf879
    #                 13a760bb-7e1c-401a-8ace-fdba828c3fb8
    #                 475fcf12-b238-405c-8e37-6cd246afd396""") as case:
    #         case.result = None
    #         case.fail_log = 'Not support in BFT testing'